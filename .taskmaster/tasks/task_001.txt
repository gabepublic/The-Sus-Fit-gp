# Task ID: 1
# Title: Verify and Harden Git Repository
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Audit the pre-initialized Git repository to ensure proper project hygiene and collaboration workflow.
# Details:
• Confirm repo accessibility and correct origin URL
• Add/adjust .gitignore for Node, Next.js, pnpm lockfiles, env files, and build artifacts
• Enable Git hooks (Husky) for pre-commit linting and type-check
• Define branch strategy (main → production, develop → staging, feature/*)
• Create CONTRIBUTING.md and PR template

# Test Strategy:
1. Clone repo on a clean machine – ensure only source files are present
2. Run `git status` → no untracked build artifacts
3. Open a PR from a temp branch → verify template appears and CI passes with no lint errors

# Subtasks:
## 1. Verify repository remote and permissions [pending]
### Dependencies: None
### Description: Ensure the Git repository’s origin URL is correct and that all collaborators can clone, pull, and push without issues.
### Details:
1. Run `git remote -v` and confirm the URL matches the intended GitHub/GitLab project.
2. If incorrect, execute `git remote set-url origin <correct-url>`.
3. Clone the repository to a separate, clean directory to verify read access.
4. Create a test branch, push it, then delete it to confirm write access.
5. Document the verified origin URL and access status in the project wiki or README.

## 2. Configure comprehensive .gitignore [pending]
### Dependencies: 1.1
### Description: Add or update .gitignore entries to exclude Node modules, build artifacts, environment files, and pnpm lockfiles as required.
### Details:
1. Start from GitHub’s Node.gitignore template.
2. Append Next.js-specific paths: `.next/`, `out/`, `.vercel/`.
3. Add tool-specific files: `pnpm-lock.yaml`, `*.env*`, `coverage/`.
4. Commit the updated .gitignore.
5. Run `git clean -Xdn` to preview ignored files and ensure no source files are excluded accidentally.

## 3. Install and configure Husky Git hooks [pending]
### Dependencies: 1.1
### Description: Enable pre-commit hooks that run ESLint and TypeScript checks to block commits that fail linting or type checking.
### Details:
1. Install Husky: `pnpm dlx husky-init && pnpm install`.
2. Create scripts `lint` and `type-check` in package.json (`tsc --noEmit`).
3. In `.husky/pre-commit`, add: `pnpm lint && pnpm type-check`.
4. Commit the hooks and verify Husky is installed in CI by adding `husky install` to the post-install script.

## 4. Establish branch strategy and protection rules [pending]
### Dependencies: 1.1
### Description: Define standardized branch names and protect critical branches to enforce the collaboration model.
### Details:
1. Decide on branches: `main` (production), `develop` (staging), `feature/*` for new work.
2. Create `develop` if it doesn’t exist: `git checkout -b develop && git push -u origin develop`.
3. In repository settings, add protection rules:
   • Require PR reviews before merging into `main` and `develop`.
   • Require CI to pass.
   • Restrict force-pushes and deletions.
4. Document these rules briefly in README.

## 5. Create CONTRIBUTING.md and PR template [pending]
### Dependencies: 1.3, 1.4
### Description: Provide clear contribution guidelines, branch naming conventions, and pull-request checklist to standardize collaboration.
### Details:
1. Draft `CONTRIBUTING.md` covering:
   • Local setup steps.
   • Branch strategy (reference Subtask 4).
   • Commit message style (e.g., Conventional Commits).
   • Pre-commit checks (reference Husky from Subtask 3).
2. Add `.github/PULL_REQUEST_TEMPLATE.md` with sections: Description, Screenshots, Checklist (tests, lint, type-check, linked issue).
3. Commit both files and link to them from README.

