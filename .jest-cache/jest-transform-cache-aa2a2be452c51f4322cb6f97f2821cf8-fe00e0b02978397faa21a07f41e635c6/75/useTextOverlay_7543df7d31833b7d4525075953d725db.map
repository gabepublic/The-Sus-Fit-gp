{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTextOverlay.ts"],"sourcesContent":["'use client';\n\n// Text Overlay React Hooks\n// React hooks for managing text overlays on canvas\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas, type ManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  TextOverlayRenderer,\n  TextOverlayUtils,\n  createTextOverlayRenderer,\n  type TextOverlayConfig,\n  type TextMeasurement,\n  type TextStyle,\n  type TextPosition\n} from '../utils/textOverlay';\n\n/**\n * Text overlay item with unique ID\n */\nexport interface TextOverlayItem {\n  id: string;\n  config: TextOverlayConfig;\n  measurement?: TextMeasurement;\n  visible: boolean;\n  locked: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Text overlay manager state\n */\nexport interface TextOverlayState {\n  overlays: TextOverlayItem[];\n  activeOverlayId: string | null;\n  isEditing: boolean;\n}\n\n/**\n * Hook for managing text overlays on a canvas\n */\nexport function useTextOverlay(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: ManagedCanvas;\n  renderer: TextOverlayRenderer;\n  overlays: TextOverlayItem[];\n  activeOverlayId: string | null;\n  isEditing: boolean;\n  addTextOverlay: (config: Omit<TextOverlayConfig, 'text'> & { text: string }) => string;\n  updateTextOverlay: (id: string, config: Partial<TextOverlayConfig>) => void;\n  removeTextOverlay: (id: string) => void;\n  setActiveOverlay: (id: string | null) => void;\n  setOverlayVisibility: (id: string, visible: boolean) => void;\n  setOverlayLocked: (id: string, locked: boolean) => void;\n  renderAllOverlays: () => void;\n  clearAllOverlays: () => void;\n  getOverlayById: (id: string) => TextOverlayItem | undefined;\n  duplicateOverlay: (id: string) => string | null;\n  moveOverlay: (id: string, newPosition: Partial<TextPosition>) => void;\n  exportOverlays: () => TextOverlayItem[];\n  importOverlays: (overlays: TextOverlayItem[]) => void;\n  startEditing: () => void;\n  stopEditing: () => void;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const [state, setState] = useState<TextOverlayState>({\n    overlays: [],\n    activeOverlayId: null,\n    isEditing: false\n  });\n\n  const rendererRef = useRef<TextOverlayRenderer>(createTextOverlayRenderer(canvas));\n\n  const generateId = useCallback(() => {\n    return `text-overlay-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  const addTextOverlay = useCallback((config: Omit<TextOverlayConfig, 'text'> & { text: string }): string => {\n    const id = generateId();\n    const now = new Date();\n    \n    const newOverlay: TextOverlayItem = {\n      id,\n      config: config as TextOverlayConfig,\n      visible: true,\n      locked: false,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    setState(prev => ({\n      ...prev,\n      overlays: [...prev.overlays, newOverlay],\n      activeOverlayId: id\n    }));\n\n    return id;\n  }, [generateId]);\n\n  const updateTextOverlay = useCallback((id: string, configUpdate: Partial<TextOverlayConfig>) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay => \n        overlay.id === id \n          ? {\n              ...overlay,\n              config: { ...overlay.config, ...configUpdate },\n              updatedAt: new Date()\n            }\n          : overlay\n      )\n    }));\n  }, []);\n\n  const removeTextOverlay = useCallback((id: string) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.filter(overlay => overlay.id !== id),\n      activeOverlayId: prev.activeOverlayId === id ? null : prev.activeOverlayId\n    }));\n  }, []);\n\n  const setActiveOverlay = useCallback((id: string | null) => {\n    setState(prev => ({ ...prev, activeOverlayId: id }));\n  }, []);\n\n  const setOverlayVisibility = useCallback((id: string, visible: boolean) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id ? { ...overlay, visible, updatedAt: new Date() } : overlay\n      )\n    }));\n  }, []);\n\n  const setOverlayLocked = useCallback((id: string, locked: boolean) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id ? { ...overlay, locked, updatedAt: new Date() } : overlay\n      )\n    }));\n  }, []);\n\n  const renderAllOverlays = useCallback(() => {\n    // Clear previous overlays\n    canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n\n    // Render visible overlays in order\n    const visibleOverlays = state.overlays\n      .filter(overlay => overlay.visible)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n\n    visibleOverlays.forEach(overlay => {\n      const measurement = rendererRef.current.renderText(overlay.config);\n      \n      // Update overlay with measurement\n      setState(prev => ({\n        ...prev,\n        overlays: prev.overlays.map(o => \n          o.id === overlay.id ? { ...o, measurement } : o\n        )\n      }));\n    });\n  }, [canvas, state.overlays]);\n\n  const clearAllOverlays = useCallback(() => {\n    canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n    setState(prev => ({ ...prev, overlays: [], activeOverlayId: null }));\n  }, [canvas]);\n\n  const getOverlayById = useCallback((id: string): TextOverlayItem | undefined => {\n    return state.overlays.find(overlay => overlay.id === id);\n  }, [state.overlays]);\n\n  const duplicateOverlay = useCallback((id: string): string | null => {\n    const overlay = getOverlayById(id);\n    if (!overlay) return null;\n\n    const newId = generateId();\n    const now = new Date();\n    \n    // Offset position slightly\n    const newConfig = {\n      ...overlay.config,\n      position: {\n        ...overlay.config.position,\n        x: overlay.config.position.x + 20,\n        y: overlay.config.position.y + 20\n      }\n    };\n\n    const duplicatedOverlay: TextOverlayItem = {\n      id: newId,\n      config: newConfig,\n      visible: true,\n      locked: false,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    setState(prev => ({\n      ...prev,\n      overlays: [...prev.overlays, duplicatedOverlay],\n      activeOverlayId: newId\n    }));\n\n    return newId;\n  }, [getOverlayById, generateId]);\n\n  const moveOverlay = useCallback((id: string, newPosition: Partial<TextPosition>) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id\n          ? {\n              ...overlay,\n              config: {\n                ...overlay.config,\n                position: { ...overlay.config.position, ...newPosition }\n              },\n              updatedAt: new Date()\n            }\n          : overlay\n      )\n    }));\n  }, []);\n\n  const exportOverlays = useCallback((): TextOverlayItem[] => {\n    return JSON.parse(JSON.stringify(state.overlays));\n  }, [state.overlays]);\n\n  const importOverlays = useCallback((overlays: TextOverlayItem[]) => {\n    setState(prev => ({\n      ...prev,\n      overlays: overlays.map(overlay => ({\n        ...overlay,\n        id: generateId(), // Generate new IDs to avoid conflicts\n        createdAt: new Date(overlay.createdAt),\n        updatedAt: new Date(overlay.updatedAt)\n      })),\n      activeOverlayId: null\n    }));\n  }, [generateId]);\n\n  const startEditing = useCallback(() => {\n    setState(prev => ({ ...prev, isEditing: true }));\n  }, []);\n\n  const stopEditing = useCallback(() => {\n    setState(prev => ({ ...prev, isEditing: false }));\n  }, []);\n\n  return {\n    canvas,\n    renderer: rendererRef.current,\n    overlays: state.overlays,\n    activeOverlayId: state.activeOverlayId,\n    isEditing: state.isEditing,\n    addTextOverlay,\n    updateTextOverlay,\n    removeTextOverlay,\n    setActiveOverlay,\n    setOverlayVisibility,\n    setOverlayLocked,\n    renderAllOverlays,\n    clearAllOverlays,\n    getOverlayById,\n    duplicateOverlay,\n    moveOverlay,\n    exportOverlays,\n    importOverlays,\n    startEditing,\n    stopEditing\n  };\n}\n\n/**\n * Hook for text style presets and utilities\n */\nexport function useTextPresets(): {\n  presets: ReturnType<typeof TextOverlayUtils.createPresets>;\n  calculateOptimalFontSize: (\n    text: string,\n    maxWidth: number,\n    maxHeight: number,\n    style: TextStyle,\n    canvas: HTMLCanvasElement\n  ) => number;\n  createCustomPreset: (name: string, style: TextStyle) => void;\n  getCustomPresets: () => Record<string, { style: TextStyle }>;\n  removeCustomPreset: (name: string) => void;\n} {\n  const [customPresets, setCustomPresets] = useState<Record<string, { style: TextStyle }>>({});\n\n  const presets = TextOverlayUtils.createPresets();\n\n  const calculateOptimalFontSize = useCallback((\n    text: string,\n    maxWidth: number,\n    maxHeight: number,\n    style: TextStyle,\n    canvas: HTMLCanvasElement\n  ) => {\n    return TextOverlayUtils.calculateOptimalFontSize(text, maxWidth, maxHeight, style, canvas);\n  }, []);\n\n  const createCustomPreset = useCallback((name: string, style: TextStyle) => {\n    setCustomPresets(prev => ({\n      ...prev,\n      [name]: { style }\n    }));\n  }, []);\n\n  const getCustomPresets = useCallback(() => {\n    return customPresets;\n  }, [customPresets]);\n\n  const removeCustomPreset = useCallback((name: string) => {\n    setCustomPresets(prev => {\n      const { [name]: removed, ...rest } = prev;\n      return rest;\n    });\n  }, []);\n\n  return {\n    presets,\n    calculateOptimalFontSize,\n    createCustomPreset,\n    getCustomPresets,\n    removeCustomPreset\n  };\n}\n\n/**\n * Hook for interactive text editing\n */\nexport function useInteractiveTextEditor(\n  canvas: ManagedCanvas,\n  overlayId: string,\n  onUpdate: (config: Partial<TextOverlayConfig>) => void\n): {\n  isEditing: boolean;\n  startEditing: () => void;\n  stopEditing: () => void;\n  updateText: (text: string) => void;\n  updateStyle: (style: Partial<TextStyle>) => void;\n  updatePosition: (position: Partial<TextPosition>) => void;\n} {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n  }, []);\n\n  const stopEditing = useCallback(() => {\n    setIsEditing(false);\n  }, []);\n\n  const updateText = useCallback((text: string) => {\n    onUpdate({ text });\n  }, [onUpdate]);\n\n  const updateStyle = useCallback((style: Partial<TextStyle>) => {\n    onUpdate({ style });\n  }, [onUpdate]);\n\n  const updatePosition = useCallback((position: Partial<TextPosition>) => {\n    onUpdate({ position: { x: 0, y: 0, ...position } });\n  }, [onUpdate]);\n\n  return {\n    isEditing,\n    startEditing,\n    stopEditing,\n    updateText,\n    updateStyle,\n    updatePosition\n  };\n}"],"names":["useInteractiveTextEditor","useTextOverlay","useTextPresets","canvasWidth","canvasHeight","canvasId","canvas","useManagedCanvas","state","setState","useState","overlays","activeOverlayId","isEditing","rendererRef","useRef","createTextOverlayRenderer","generateId","useCallback","Date","now","Math","random","toString","substr","addTextOverlay","config","id","newOverlay","visible","locked","createdAt","updatedAt","prev","updateTextOverlay","configUpdate","map","overlay","removeTextOverlay","filter","setActiveOverlay","setOverlayVisibility","setOverlayLocked","renderAllOverlays","context","clearRect","width","height","visibleOverlays","sort","a","b","getTime","forEach","measurement","current","renderText","o","clearAllOverlays","getOverlayById","find","duplicateOverlay","newId","newConfig","position","x","y","duplicatedOverlay","moveOverlay","newPosition","exportOverlays","JSON","parse","stringify","importOverlays","startEditing","stopEditing","renderer","customPresets","setCustomPresets","presets","TextOverlayUtils","createPresets","calculateOptimalFontSize","text","maxWidth","maxHeight","style","createCustomPreset","name","getCustomPresets","removeCustomPreset","removed","rest","overlayId","onUpdate","setIsEditing","updateText","updateStyle","updatePosition"],"mappings":"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"}