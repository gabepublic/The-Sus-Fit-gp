ceecfa030a0c944da55cc1fa50d4979f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "handlers", {
    enumerable: true,
    get: function() {
        return handlers;
    }
});
const _msw = require("msw");
const handlers = [
    // Mock Claude API
    _msw.http.post('https://api.anthropic.com/v1/messages', ()=>{
        return _msw.HttpResponse.json({
            id: 'msg_test123',
            type: 'message',
            role: 'assistant',
            content: [
                {
                    type: 'text',
                    text: 'This is a mock response from Claude API'
                }
            ],
            model: 'claude-3-sonnet-20240229',
            stop_reason: 'end_turn',
            stop_sequence: null,
            usage: {
                input_tokens: 10,
                output_tokens: 25
            }
        });
    }),
    // Mock Pinecone API
    _msw.http.post('https://api.pinecone.io/v1/indexes/*/vectors/upsert', ()=>{
        return _msw.HttpResponse.json({
            upsertedCount: 1
        });
    }),
    _msw.http.post('https://api.pinecone.io/v1/indexes/*/vectors/query', ()=>{
        return _msw.HttpResponse.json({
            matches: [
                {
                    id: 'test-vector-1',
                    score: 0.9,
                    metadata: {
                        text: 'This is a test vector',
                        timestamp: '2023-01-01T00:00:00Z'
                    }
                }
            ]
        });
    }),
    // Mock LangChain/OpenAI API
    _msw.http.post('https://api.openai.com/v1/chat/completions', ()=>{
        return _msw.HttpResponse.json({
            id: 'chatcmpl-test123',
            object: 'chat.completion',
            created: 1677652288,
            model: 'gpt-3.5-turbo',
            choices: [
                {
                    index: 0,
                    message: {
                        role: 'assistant',
                        content: 'This is a mock response from OpenAI API'
                    },
                    finish_reason: 'stop'
                }
            ],
            usage: {
                prompt_tokens: 9,
                completion_tokens: 12,
                total_tokens: 21
            }
        });
    })
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL3Rlc3QvbW9ja3MvaGFuZGxlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHR0cCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnbXN3J1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcnMgPSBbXG4gIC8vIE1vY2sgQ2xhdWRlIEFQSVxuICBodHRwLnBvc3QoJ2h0dHBzOi8vYXBpLmFudGhyb3BpYy5jb20vdjEvbWVzc2FnZXMnLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIGlkOiAnbXNnX3Rlc3QxMjMnLFxuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICBjb250ZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSBtb2NrIHJlc3BvbnNlIGZyb20gQ2xhdWRlIEFQSScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgbW9kZWw6ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknLFxuICAgICAgc3RvcF9yZWFzb246ICdlbmRfdHVybicsXG4gICAgICBzdG9wX3NlcXVlbmNlOiBudWxsLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRfdG9rZW5zOiAxMCxcbiAgICAgICAgb3V0cHV0X3Rva2VuczogMjUsXG4gICAgICB9LFxuICAgIH0pXG4gIH0pLFxuXG4gIC8vIE1vY2sgUGluZWNvbmUgQVBJXG4gIGh0dHAucG9zdCgnaHR0cHM6Ly9hcGkucGluZWNvbmUuaW8vdjEvaW5kZXhlcy8qL3ZlY3RvcnMvdXBzZXJ0JywgKCkgPT4ge1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICB1cHNlcnRlZENvdW50OiAxLFxuICAgIH0pXG4gIH0pLFxuXG4gIGh0dHAucG9zdCgnaHR0cHM6Ly9hcGkucGluZWNvbmUuaW8vdjEvaW5kZXhlcy8qL3ZlY3RvcnMvcXVlcnknLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIG1hdGNoZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndGVzdC12ZWN0b3ItMScsXG4gICAgICAgICAgc2NvcmU6IDAuOSxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSB0ZXN0IHZlY3RvcicsXG4gICAgICAgICAgICB0aW1lc3RhbXA6ICcyMDIzLTAxLTAxVDAwOjAwOjAwWicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgfSksXG5cbiAgLy8gTW9jayBMYW5nQ2hhaW4vT3BlbkFJIEFQSVxuICBodHRwLnBvc3QoJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsICgpID0+IHtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgaWQ6ICdjaGF0Y21wbC10ZXN0MTIzJyxcbiAgICAgIG9iamVjdDogJ2NoYXQuY29tcGxldGlvbicsXG4gICAgICBjcmVhdGVkOiAxNjc3NjUyMjg4LFxuICAgICAgbW9kZWw6ICdncHQtMy41LXR1cmJvJyxcbiAgICAgIGNob2ljZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICAgICAgY29udGVudDogJ1RoaXMgaXMgYSBtb2NrIHJlc3BvbnNlIGZyb20gT3BlbkFJIEFQSScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaW5pc2hfcmVhc29uOiAnc3RvcCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgcHJvbXB0X3Rva2VuczogOSxcbiAgICAgICAgY29tcGxldGlvbl90b2tlbnM6IDEyLFxuICAgICAgICB0b3RhbF90b2tlbnM6IDIxLFxuICAgICAgfSxcbiAgICB9KVxuICB9KSxcbl0iXSwibmFtZXMiOlsiaGFuZGxlcnMiLCJodHRwIiwicG9zdCIsIkh0dHBSZXNwb25zZSIsImpzb24iLCJpZCIsInR5cGUiLCJyb2xlIiwiY29udGVudCIsInRleHQiLCJtb2RlbCIsInN0b3BfcmVhc29uIiwic3RvcF9zZXF1ZW5jZSIsInVzYWdlIiwiaW5wdXRfdG9rZW5zIiwib3V0cHV0X3Rva2VucyIsInVwc2VydGVkQ291bnQiLCJtYXRjaGVzIiwic2NvcmUiLCJtZXRhZGF0YSIsInRpbWVzdGFtcCIsIm9iamVjdCIsImNyZWF0ZWQiLCJjaG9pY2VzIiwiaW5kZXgiLCJtZXNzYWdlIiwiZmluaXNoX3JlYXNvbiIsInByb21wdF90b2tlbnMiLCJjb21wbGV0aW9uX3Rva2VucyIsInRvdGFsX3Rva2VucyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFFYUE7OztlQUFBQTs7O3FCQUZzQjtBQUU1QixNQUFNQSxXQUFXO0lBQ3RCLGtCQUFrQjtJQUNsQkMsU0FBSSxDQUFDQyxJQUFJLENBQUMseUNBQXlDO1FBQ2pELE9BQU9DLGlCQUFZLENBQUNDLElBQUksQ0FBQztZQUN2QkMsSUFBSTtZQUNKQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsU0FBUztnQkFDUDtvQkFDRUYsTUFBTTtvQkFDTkcsTUFBTTtnQkFDUjthQUNEO1lBQ0RDLE9BQU87WUFDUEMsYUFBYTtZQUNiQyxlQUFlO1lBQ2ZDLE9BQU87Z0JBQ0xDLGNBQWM7Z0JBQ2RDLGVBQWU7WUFDakI7UUFDRjtJQUNGO0lBRUEsb0JBQW9CO0lBQ3BCZCxTQUFJLENBQUNDLElBQUksQ0FBQyx1REFBdUQ7UUFDL0QsT0FBT0MsaUJBQVksQ0FBQ0MsSUFBSSxDQUFDO1lBQ3ZCWSxlQUFlO1FBQ2pCO0lBQ0Y7SUFFQWYsU0FBSSxDQUFDQyxJQUFJLENBQUMsc0RBQXNEO1FBQzlELE9BQU9DLGlCQUFZLENBQUNDLElBQUksQ0FBQztZQUN2QmEsU0FBUztnQkFDUDtvQkFDRVosSUFBSTtvQkFDSmEsT0FBTztvQkFDUEMsVUFBVTt3QkFDUlYsTUFBTTt3QkFDTlcsV0FBVztvQkFDYjtnQkFDRjthQUNEO1FBQ0g7SUFDRjtJQUVBLDRCQUE0QjtJQUM1Qm5CLFNBQUksQ0FBQ0MsSUFBSSxDQUFDLDhDQUE4QztRQUN0RCxPQUFPQyxpQkFBWSxDQUFDQyxJQUFJLENBQUM7WUFDdkJDLElBQUk7WUFDSmdCLFFBQVE7WUFDUkMsU0FBUztZQUNUWixPQUFPO1lBQ1BhLFNBQVM7Z0JBQ1A7b0JBQ0VDLE9BQU87b0JBQ1BDLFNBQVM7d0JBQ1BsQixNQUFNO3dCQUNOQyxTQUFTO29CQUNYO29CQUNBa0IsZUFBZTtnQkFDakI7YUFDRDtZQUNEYixPQUFPO2dCQUNMYyxlQUFlO2dCQUNmQyxtQkFBbUI7Z0JBQ25CQyxjQUFjO1lBQ2hCO1FBQ0Y7SUFDRjtDQUNEIn0=