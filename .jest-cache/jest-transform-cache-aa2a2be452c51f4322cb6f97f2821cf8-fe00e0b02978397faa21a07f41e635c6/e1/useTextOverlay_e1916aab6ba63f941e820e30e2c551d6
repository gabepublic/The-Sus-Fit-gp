8c3ed8b71ea8336bf0121f462115fa21
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useInteractiveTextEditor: function() {
        return useInteractiveTextEditor;
    },
    useTextOverlay: function() {
        return useTextOverlay;
    },
    useTextPresets: function() {
        return useTextPresets;
    }
});
const _react = require("react");
const _CanvasProvider = require("../providers/CanvasProvider");
const _textOverlay = require("../utils/textOverlay");
function useTextOverlay(canvasWidth, canvasHeight, canvasId) {
    const canvas = (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId);
    const [state, setState] = (0, _react.useState)({
        overlays: [],
        activeOverlayId: null,
        isEditing: false
    });
    const rendererRef = (0, _react.useRef)((0, _textOverlay.createTextOverlayRenderer)(canvas));
    const generateId = (0, _react.useCallback)(()=>{
        return `text-overlay-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }, []);
    const addTextOverlay = (0, _react.useCallback)((config)=>{
        const id = generateId();
        const now = new Date();
        const newOverlay = {
            id,
            config: config,
            visible: true,
            locked: false,
            createdAt: now,
            updatedAt: now
        };
        setState((prev)=>({
                ...prev,
                overlays: [
                    ...prev.overlays,
                    newOverlay
                ],
                activeOverlayId: id
            }));
        return id;
    }, [
        generateId
    ]);
    const updateTextOverlay = (0, _react.useCallback)((id, configUpdate)=>{
        setState((prev)=>({
                ...prev,
                overlays: prev.overlays.map((overlay)=>overlay.id === id ? {
                        ...overlay,
                        config: {
                            ...overlay.config,
                            ...configUpdate
                        },
                        updatedAt: new Date()
                    } : overlay)
            }));
    }, []);
    const removeTextOverlay = (0, _react.useCallback)((id)=>{
        setState((prev)=>({
                ...prev,
                overlays: prev.overlays.filter((overlay)=>overlay.id !== id),
                activeOverlayId: prev.activeOverlayId === id ? null : prev.activeOverlayId
            }));
    }, []);
    const setActiveOverlay = (0, _react.useCallback)((id)=>{
        setState((prev)=>({
                ...prev,
                activeOverlayId: id
            }));
    }, []);
    const setOverlayVisibility = (0, _react.useCallback)((id, visible)=>{
        setState((prev)=>({
                ...prev,
                overlays: prev.overlays.map((overlay)=>overlay.id === id ? {
                        ...overlay,
                        visible,
                        updatedAt: new Date()
                    } : overlay)
            }));
    }, []);
    const setOverlayLocked = (0, _react.useCallback)((id, locked)=>{
        setState((prev)=>({
                ...prev,
                overlays: prev.overlays.map((overlay)=>overlay.id === id ? {
                        ...overlay,
                        locked,
                        updatedAt: new Date()
                    } : overlay)
            }));
    }, []);
    const renderAllOverlays = (0, _react.useCallback)(()=>{
        // Clear previous overlays
        canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);
        // Render visible overlays in order
        const visibleOverlays = state.overlays.filter((overlay)=>overlay.visible).sort((a, b)=>a.createdAt.getTime() - b.createdAt.getTime());
        visibleOverlays.forEach((overlay)=>{
            const measurement = rendererRef.current.renderText(overlay.config);
            // Update overlay with measurement
            setState((prev)=>({
                    ...prev,
                    overlays: prev.overlays.map((o)=>o.id === overlay.id ? {
                            ...o,
                            measurement
                        } : o)
                }));
        });
    }, [
        canvas,
        state.overlays
    ]);
    const clearAllOverlays = (0, _react.useCallback)(()=>{
        canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);
        setState((prev)=>({
                ...prev,
                overlays: [],
                activeOverlayId: null
            }));
    }, [
        canvas
    ]);
    const getOverlayById = (0, _react.useCallback)((id)=>{
        return state.overlays.find((overlay)=>overlay.id === id);
    }, [
        state.overlays
    ]);
    const duplicateOverlay = (0, _react.useCallback)((id)=>{
        const overlay = getOverlayById(id);
        if (!overlay) return null;
        const newId = generateId();
        const now = new Date();
        // Offset position slightly
        const newConfig = {
            ...overlay.config,
            position: {
                ...overlay.config.position,
                x: overlay.config.position.x + 20,
                y: overlay.config.position.y + 20
            }
        };
        const duplicatedOverlay = {
            id: newId,
            config: newConfig,
            visible: true,
            locked: false,
            createdAt: now,
            updatedAt: now
        };
        setState((prev)=>({
                ...prev,
                overlays: [
                    ...prev.overlays,
                    duplicatedOverlay
                ],
                activeOverlayId: newId
            }));
        return newId;
    }, [
        getOverlayById,
        generateId
    ]);
    const moveOverlay = (0, _react.useCallback)((id, newPosition)=>{
        setState((prev)=>({
                ...prev,
                overlays: prev.overlays.map((overlay)=>overlay.id === id ? {
                        ...overlay,
                        config: {
                            ...overlay.config,
                            position: {
                                ...overlay.config.position,
                                ...newPosition
                            }
                        },
                        updatedAt: new Date()
                    } : overlay)
            }));
    }, []);
    const exportOverlays = (0, _react.useCallback)(()=>{
        return JSON.parse(JSON.stringify(state.overlays));
    }, [
        state.overlays
    ]);
    const importOverlays = (0, _react.useCallback)((overlays)=>{
        setState((prev)=>({
                ...prev,
                overlays: overlays.map((overlay)=>({
                        ...overlay,
                        id: generateId(),
                        createdAt: new Date(overlay.createdAt),
                        updatedAt: new Date(overlay.updatedAt)
                    })),
                activeOverlayId: null
            }));
    }, [
        generateId
    ]);
    const startEditing = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                isEditing: true
            }));
    }, []);
    const stopEditing = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                isEditing: false
            }));
    }, []);
    return {
        canvas,
        renderer: rendererRef.current,
        overlays: state.overlays,
        activeOverlayId: state.activeOverlayId,
        isEditing: state.isEditing,
        addTextOverlay,
        updateTextOverlay,
        removeTextOverlay,
        setActiveOverlay,
        setOverlayVisibility,
        setOverlayLocked,
        renderAllOverlays,
        clearAllOverlays,
        getOverlayById,
        duplicateOverlay,
        moveOverlay,
        exportOverlays,
        importOverlays,
        startEditing,
        stopEditing
    };
}
function useTextPresets() {
    const [customPresets, setCustomPresets] = (0, _react.useState)({});
    const presets = _textOverlay.TextOverlayUtils.createPresets();
    const calculateOptimalFontSize = (0, _react.useCallback)((text, maxWidth, maxHeight, style, canvas)=>{
        return _textOverlay.TextOverlayUtils.calculateOptimalFontSize(text, maxWidth, maxHeight, style, canvas);
    }, []);
    const createCustomPreset = (0, _react.useCallback)((name, style)=>{
        setCustomPresets((prev)=>({
                ...prev,
                [name]: {
                    style
                }
            }));
    }, []);
    const getCustomPresets = (0, _react.useCallback)(()=>{
        return customPresets;
    }, [
        customPresets
    ]);
    const removeCustomPreset = (0, _react.useCallback)((name)=>{
        setCustomPresets((prev)=>{
            const { [name]: removed, ...rest } = prev;
            return rest;
        });
    }, []);
    return {
        presets,
        calculateOptimalFontSize,
        createCustomPreset,
        getCustomPresets,
        removeCustomPreset
    };
}
function useInteractiveTextEditor(canvas, overlayId, onUpdate) {
    const [isEditing, setIsEditing] = (0, _react.useState)(false);
    const startEditing = (0, _react.useCallback)(()=>{
        setIsEditing(true);
    }, []);
    const stopEditing = (0, _react.useCallback)(()=>{
        setIsEditing(false);
    }, []);
    const updateText = (0, _react.useCallback)((text)=>{
        onUpdate({
            text
        });
    }, [
        onUpdate
    ]);
    const updateStyle = (0, _react.useCallback)((style)=>{
        onUpdate({
            style
        });
    }, [
        onUpdate
    ]);
    const updatePosition = (0, _react.useCallback)((position)=>{
        onUpdate({
            position
        });
    }, [
        onUpdate
    ]);
    return {
        isEditing,
        startEditing,
        stopEditing,
        updateText,
        updateStyle,
        updatePosition
    };
}

//# sourceMappingURL=data:application/json;base64,