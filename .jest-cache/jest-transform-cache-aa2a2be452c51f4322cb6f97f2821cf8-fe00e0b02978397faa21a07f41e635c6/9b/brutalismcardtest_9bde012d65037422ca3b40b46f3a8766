0ab9979d3b09359e70d4fee03bdc33dd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _brutalismcard = require("../../../src/components/ui/brutalism-card");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock console.error to capture validation messages
const originalError = console.error;
beforeAll(()=>{
    console.error = jest.fn();
});
afterAll(()=>{
    console.error = originalError;
});
describe('BrutalismCard File Validation', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('validates file types - rejects non-image files', async ()=>{
        const mockTextFile = new File([
            'test'
        ], 'test.txt', {
            type: 'text/plain'
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        // Find the hidden file input
        const fileInput = _react1.screen.getByRole('button');
        const input = document.querySelector('input[type="file"]');
        // Simulate file selection by setting the files property and triggering change event
        Object.defineProperty(input, 'files', {
            value: [
                mockTextFile
            ],
            writable: true
        });
        // Trigger the change event
        _react1.fireEvent.change(input);
        // Verify console.error was called with the correct message
        expect(console.error).toHaveBeenCalledWith('Selected file is not an image');
    });
    it('validates file size - rejects files larger than 5MB', async ()=>{
        const mockLargeFile = new File([
            'x'.repeat(6 * 1024 * 1024)
        ], 'large.jpg', {
            type: 'image/jpeg'
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        // Find the hidden file input
        const input = document.querySelector('input[type="file"]');
        // Simulate file selection
        Object.defineProperty(input, 'files', {
            value: [
                mockLargeFile
            ],
            writable: true
        });
        // Trigger the change event
        _react1.fireEvent.change(input);
        // Verify console.error was called with the correct message
        expect(console.error).toHaveBeenCalledWith('Image file is too large (max 5MB)');
    });
    it('accepts valid image files', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onFileUpload = jest.fn();
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload,
            onImageUpload: onImageUpload
        }));
        // Find the hidden file input
        const input = document.querySelector('input[type="file"]');
        // Simulate file selection
        Object.defineProperty(input, 'files', {
            value: [
                mockValidFile
            ],
            writable: true
        });
        // Trigger the change event
        _react1.fireEvent.change(input);
        // Verify no error was logged
        expect(console.error).not.toHaveBeenCalled();
        // Verify callbacks were called (need to wait for FileReader)
        await new Promise((resolve)=>setTimeout(resolve, 100));
        expect(onFileUpload).toHaveBeenCalledWith(mockValidFile);
    });
    it('handles drag and drop with invalid file type', async ()=>{
        const mockTextFile = new File([
            'test'
        ], 'test.txt', {
            type: 'text/plain'
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // Simulate drag and drop with invalid file
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: [
                    mockTextFile
                ]
            }
        });
        // Verify no error was logged (drag and drop doesn't trigger validation for non-images)
        expect(console.error).not.toHaveBeenCalled();
    });
    it('handles drag and drop with large file', async ()=>{
        const mockLargeFile = new File([
            'x'.repeat(6 * 1024 * 1024)
        ], 'large.jpg', {
            type: 'image/jpeg'
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // Simulate drag and drop with large file
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: [
                    mockLargeFile
                ]
            }
        });
        // Verify error was logged
        expect(console.error).toHaveBeenCalledWith('Image file is too large (max 5MB)');
    });
    it('handles drag and drop with valid file', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onFileUpload = jest.fn();
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload,
            onImageUpload: onImageUpload
        }));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // Simulate drag and drop with valid file
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: [
                    mockValidFile
                ]
            }
        });
        // Verify no error was logged
        expect(console.error).not.toHaveBeenCalled();
        // Verify callbacks were called (need to wait for FileReader)
        await new Promise((resolve)=>setTimeout(resolve, 100));
        expect(onFileUpload).toHaveBeenCalledWith(mockValidFile);
    });
});
describe('BrutalismCard Drag and Drop Event Handlers', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('handles drag over event correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // Simulate drag over event
        _react1.fireEvent.dragOver(dropZone);
        // The component should now be in dragging state
        // We verify the event handler was called by checking the element is still present
        expect(dropZone).toBeInTheDocument();
    });
    it('handles drag leave event correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // First trigger drag over to set dragging state
        _react1.fireEvent.dragOver(dropZone);
        // Then trigger drag leave
        _react1.fireEvent.dragLeave(dropZone);
        // The component should no longer be in dragging state
        // Note: The visual state change might be immediate, so we test the event handler was called
        expect(dropZone).toBeInTheDocument();
    });
    it('handles drag over and drag leave sequence', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        // Simulate drag over
        _react1.fireEvent.dragOver(dropZone);
        // Simulate drag leave
        _react1.fireEvent.dragLeave(dropZone);
        // Verify the drop zone is still present
        expect(dropZone).toBeInTheDocument();
    });
    it('prevents default on drag over event', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        const mockEvent = {
            preventDefault: jest.fn()
        };
        // Simulate drag over with mock event
        _react1.fireEvent.dragOver(dropZone, mockEvent);
        // The preventDefault should be called in the handler
        // Note: fireEvent.dragOver doesn't actually call preventDefault, but the handler does
        expect(dropZone).toBeInTheDocument();
    });
    it('prevents default on drop event', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        const mockEvent = {
            preventDefault: jest.fn(),
            dataTransfer: {
                files: []
            }
        };
        // Simulate drop with mock event
        _react1.fireEvent.drop(dropZone, mockEvent);
        // The preventDefault should be called in the handler
        expect(dropZone).toBeInTheDocument();
    });
});
describe('BrutalismCard Component Props and Rendering', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders with default props', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        expect(_react1.screen.getByText('Upload Your Angle')).toBeInTheDocument();
        expect(_react1.screen.getByRole('button')).toBeInTheDocument();
    });
    it('renders with custom title', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            title: "Custom Upload Title"
        }));
        expect(_react1.screen.getByText('Custom Upload Title')).toBeInTheDocument();
    });
    it('renders with custom className', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            className: "custom-class"
        }));
        const mainDiv = container.firstChild;
        expect(mainDiv).toHaveClass('custom-class');
    });
    it('renders with children content', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "child-content",
                children: "Child content"
            })
        }));
        expect(_react1.screen.getByTestId('child-content')).toBeInTheDocument();
        expect(_react1.screen.getByText('Child content')).toBeInTheDocument();
    });
    it('renders with right button position', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            buttonPosition: "right"
        }));
        // The button should be positioned on the right
        const buttonContainer = container.querySelector('[class*="-right-14"]');
        expect(buttonContainer).toBeInTheDocument();
    });
    it('renders with custom background image', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            backgroundImage: "/custom-image.jpg"
        }));
        const cardElement = container.querySelector('[style*="background-image"]');
        expect(cardElement).toHaveStyle({
            backgroundImage: "url('/custom-image.jpg')"
        });
    });
    it('renders with custom shadow rotation', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            shadowRotation: "rotate-45"
        }));
        const shadowElement = container.querySelector('[class*="rotate-45"]');
        expect(shadowElement).toBeInTheDocument();
    });
    it('renders upload icon when no image is uploaded', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        // The upload icon should be present (SVG element)
        const uploadIcon = document.querySelector('svg');
        expect(uploadIcon).toBeInTheDocument();
    });
    it('does not render upload icon when image is uploaded', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const input = document.querySelector('input[type="file"]');
        // Simulate file selection
        Object.defineProperty(input, 'files', {
            value: [
                mockValidFile
            ],
            writable: true
        });
        // Trigger the change event
        _react1.fireEvent.change(input);
        // Wait for the image to be processed
        await (0, _react1.waitFor)(()=>{
            const uploadIcon = document.querySelector('svg');
            expect(uploadIcon).not.toBeInTheDocument();
        });
    });
});
describe('BrutalismCard File Upload Callbacks', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('calls onFileUpload callback when valid file is selected', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onFileUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload
        }));
        const input = document.querySelector('input[type="file"]');
        Object.defineProperty(input, 'files', {
            value: [
                mockValidFile
            ],
            writable: true
        });
        _react1.fireEvent.change(input);
        await (0, _react1.waitFor)(()=>{
            expect(onFileUpload).toHaveBeenCalledWith(mockValidFile);
        });
    });
    it('calls onImageUpload callback when valid file is selected', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onImageUpload: onImageUpload
        }));
        const input = document.querySelector('input[type="file"]');
        Object.defineProperty(input, 'files', {
            value: [
                mockValidFile
            ],
            writable: true
        });
        _react1.fireEvent.change(input);
        await (0, _react1.waitFor)(()=>{
            expect(onImageUpload).toHaveBeenCalled();
        });
    });
    it('calls onFileUpload callback when valid file is dropped', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onFileUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload
        }));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: [
                    mockValidFile
                ]
            }
        });
        await (0, _react1.waitFor)(()=>{
            expect(onFileUpload).toHaveBeenCalledWith(mockValidFile);
        });
    });
    it('calls onImageUpload callback when valid file is dropped', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onImageUpload: onImageUpload
        }));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: [
                    mockValidFile
                ]
            }
        });
        await (0, _react1.waitFor)(()=>{
            expect(onImageUpload).toHaveBeenCalled();
        });
    });
    it('does not call callbacks when no file is selected', ()=>{
        const onFileUpload = jest.fn();
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload,
            onImageUpload: onImageUpload
        }));
        expect(onFileUpload).not.toHaveBeenCalled();
        expect(onImageUpload).not.toHaveBeenCalled();
    });
    it('does not call callbacks when invalid file is selected', ()=>{
        const mockInvalidFile = new File([
            'test'
        ], 'test.txt', {
            type: 'text/plain'
        });
        const onFileUpload = jest.fn();
        const onImageUpload = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onFileUpload: onFileUpload,
            onImageUpload: onImageUpload
        }));
        const input = document.querySelector('input[type="file"]');
        Object.defineProperty(input, 'files', {
            value: [
                mockInvalidFile
            ],
            writable: true
        });
        _react1.fireEvent.change(input);
        expect(onFileUpload).not.toHaveBeenCalled();
        expect(onImageUpload).not.toHaveBeenCalled();
    });
});
describe('BrutalismCard Edge Cases', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('handles empty file input', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const input = document.querySelector('input[type="file"]');
        // Simulate empty file selection
        Object.defineProperty(input, 'files', {
            value: [],
            writable: true
        });
        _react1.fireEvent.change(input);
        // Should not throw any errors
        expect(console.error).not.toHaveBeenCalled();
    });
    it('handles null file input', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const input = document.querySelector('input[type="file"]');
        // Simulate null file selection
        Object.defineProperty(input, 'files', {
            value: null,
            writable: true
        });
        _react1.fireEvent.change(input);
        // Should not throw any errors
        expect(console.error).not.toHaveBeenCalled();
    });
    it('handles drop with no files', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: []
            }
        });
        // Should not throw any errors
        expect(console.error).not.toHaveBeenCalled();
    });
    it('handles drop with null files', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {}));
        const dropZone = _react1.screen.getByText('Upload Your Angle').closest('div');
        _react1.fireEvent.drop(dropZone, {
            dataTransfer: {
                files: null
            }
        });
        // Should not throw any errors
        expect(console.error).not.toHaveBeenCalled();
    });
    it('handles FileReader error gracefully', async ()=>{
        const mockValidFile = new File([
            'test'
        ], 'test.jpg', {
            type: 'image/jpeg'
        });
        const onImageUpload = jest.fn();
        // Mock FileReader to simulate error
        const originalFileReader = global.FileReader;
        const mockFileReader = jest.fn().mockImplementation(()=>({
                readAsDataURL: jest.fn(),
                onload: null,
                onerror: null
            }));
        global.FileReader = mockFileReader;
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brutalismcard.BrutalismCard, {
            onImageUpload: onImageUpload
        }));
        const input = document.querySelector('input[type="file"]');
        Object.defineProperty(input, 'files', {
            value: [
                mockValidFile
            ],
            writable: true
        });
        _react1.fireEvent.change(input);
        // Restore original FileReader
        global.FileReader = originalFileReader;
        // Should not throw any errors
        expect(console.error).not.toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,