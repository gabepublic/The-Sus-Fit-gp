{"version":3,"names":["useMultipleTryonProgress","cov_x46rlmy5e","f","s","useOptimisticCacheInvalidation","useOptimisticUpdates","useProgressVisualization","useTryonProgress","useTryonResult","config","b","queryClient","_reactquery","useQueryClient","optimisticManager","_optimisticUpdates","getOptimisticUpdatesManager","activeUpdatesRef","_react","useRef","Set","isOptimisticEnabled","enabled","activeUpdates","useMemo","getActiveOptimisticUpdates","startOptimistic","useCallback","optimisticConfig","mutationVariables","context","startOptimisticUpdate","current","add","optimisticId","completeOptimistic","result","mutationContext","has","completeOptimisticUpdate","delete","rollbackOptimistic","error","rollbackOptimisticUpdate","useEffect","forEach","Error","clear","progressQuery","useQuery","queryKey","Boolean","refetchInterval","data","progressData","status","staleTime","gcTime","progress","isLoading","optimisticIds","queries","map","id","progressMap","index","anyInProgress","Object","values","some","allCompleted","length","keys","every","resultQuery","Infinity","isCompleted","processingTime","progressPercentage","stageMessage","enableStageMessages","stage","timeRemaining","enableTimeEstimates","estimatedTimeRemaining","seconds","Math","ceil","minutes","floor","remainingSeconds","progressColor","isAnimating","enableAnimation","invalidateRelatedQueries","invalidateQueries","exact","userId","tags","tag","preloadRelatedQueries","preloadPromises","push","prefetchQuery","Promise","all","warmupCache","prefetchData","setQueryData"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useOptimisticUpdates.ts"],"sourcesContent":["// Optimistic Updates Hooks\n// React hooks for managing optimistic UI updates and progress indicators\n\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo, useRef, useEffect } from 'react';\nimport type {\n  OptimisticUpdateConfig,\n  OptimisticUpdateContext,\n  OptimisticUpdatesManager\n} from '../utils/optimisticUpdates';\nimport { getOptimisticUpdatesManager } from '../utils/optimisticUpdates';\n\n/**\n * Progress data structure for try-on operations\n */\nexport interface TryonProgress {\n  id: string;\n  status: 'processing' | 'completed' | 'error';\n  progress: number; // 0-100\n  stage: string;\n  estimatedTimeRemaining: number;\n  startTime: number;\n  completedAt?: number;\n  error?: string;\n  result?: unknown;\n}\n\n/**\n * Hook return type for optimistic updates\n */\nexport interface UseOptimisticUpdatesReturn {\n  /** Start an optimistic update */\n  startOptimistic: (config?: OptimisticUpdateConfig) => string;\n  /** Complete an optimistic update */\n  completeOptimistic: (optimisticId: string, result: unknown, context?: unknown) => void;\n  /** Rollback an optimistic update */\n  rollbackOptimistic: (optimisticId: string, error?: unknown) => void;\n  /** Check if optimistic updates are enabled */\n  isOptimisticEnabled: boolean;\n  /** Get current active optimistic updates */\n  activeUpdates: OptimisticUpdateContext[];\n}\n\n/**\n * Configuration for the optimistic updates hook\n */\nexport interface UseOptimisticUpdatesConfig {\n  /** Variables for the try-on mutation */\n  mutationVariables?: unknown;\n  /** Whether optimistic updates are enabled */\n  enabled?: boolean;\n  /** Custom optimistic updates manager */\n  optimisticManager?: OptimisticUpdatesManager;\n}\n\n/**\n * Hook for managing optimistic updates during try-on mutations\n */\nexport function useOptimisticUpdates(\n  config: UseOptimisticUpdatesConfig = {}\n): UseOptimisticUpdatesReturn {\n  const queryClient = useQueryClient();\n  const optimisticManager = config.optimisticManager || getOptimisticUpdatesManager();\n  const activeUpdatesRef = useRef<Set<string>>(new Set());\n\n  const isOptimisticEnabled = config.enabled !== false;\n\n  // Get active optimistic updates\n  const activeUpdates = useMemo(() => {\n    return optimisticManager.getActiveOptimisticUpdates();\n  }, [optimisticManager]);\n\n  const startOptimistic = useCallback((optimisticConfig?: OptimisticUpdateConfig): string => {\n    if (!isOptimisticEnabled || !config.mutationVariables) {\n      return '';\n    }\n\n    const context = optimisticManager.startOptimisticUpdate(\n      config.mutationVariables as any,\n      optimisticConfig\n    );\n\n    activeUpdatesRef.current.add(context.optimisticId);\n    return context.optimisticId;\n  }, [isOptimisticEnabled, config.mutationVariables, optimisticManager]);\n\n  const completeOptimistic = useCallback((\n    optimisticId: string,\n    result: unknown,\n    mutationContext?: unknown\n  ) => {\n    if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {\n      return;\n    }\n\n    optimisticManager.completeOptimisticUpdate(\n      optimisticId,\n      result as any,\n      mutationContext as any\n    );\n\n    activeUpdatesRef.current.delete(optimisticId);\n  }, [optimisticManager]);\n\n  const rollbackOptimistic = useCallback((optimisticId: string, error?: unknown) => {\n    if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {\n      return;\n    }\n\n    optimisticManager.rollbackOptimisticUpdate(optimisticId, error);\n    activeUpdatesRef.current.delete(optimisticId);\n  }, [optimisticManager]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      // Rollback any remaining optimistic updates\n      activeUpdatesRef.current.forEach(optimisticId => {\n        optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));\n      });\n      activeUpdatesRef.current.clear();\n    };\n  }, [optimisticManager]);\n\n  return {\n    startOptimistic,\n    completeOptimistic,\n    rollbackOptimistic,\n    isOptimisticEnabled,\n    activeUpdates\n  };\n}\n\n/**\n * Hook for tracking progress of try-on operations\n */\nexport function useTryonProgress(optimisticId: string): {\n  progress: TryonProgress | undefined;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const progressQuery = useQuery({\n    queryKey: ['tryon-progress', optimisticId],\n    enabled: Boolean(optimisticId),\n    refetchInterval: (data) => {\n      // Stop refetching once completed or errored\n      const progressData = data as unknown as TryonProgress | undefined;\n      return progressData?.status === 'processing' ? 500 : false;\n    },\n    staleTime: 0, // Always fresh for real-time updates\n    gcTime: 5000 // Keep in cache briefly after completion\n  });\n\n  return {\n    progress: progressQuery.data as TryonProgress | undefined,\n    isLoading: progressQuery.isLoading,\n    error: progressQuery.error\n  };\n}\n\n/**\n * Hook for tracking multiple try-on progress instances\n */\nexport function useMultipleTryonProgress(optimisticIds: string[]): {\n  progressMap: Record<string, TryonProgress>;\n  anyInProgress: boolean;\n  allCompleted: boolean;\n} {\n  const queries = optimisticIds.map(id => \n    useQuery({\n      queryKey: ['tryon-progress', id],\n      enabled: Boolean(id),\n      refetchInterval: 500,\n      staleTime: 0\n    })\n  );\n\n  const progressMap = useMemo(() => {\n    const map: Record<string, TryonProgress> = {};\n    optimisticIds.forEach((id, index) => {\n      const data = queries[index]?.data as TryonProgress | undefined;\n      if (data) {\n        map[id] = data;\n      }\n    });\n    return map;\n  }, [optimisticIds, queries]);\n\n  const anyInProgress = useMemo(() => {\n    return Object.values(progressMap).some(progress => progress.status === 'processing');\n  }, [progressMap]);\n\n  const allCompleted = useMemo(() => {\n    return optimisticIds.length > 0 && \n           Object.keys(progressMap).length === optimisticIds.length &&\n           Object.values(progressMap).every(progress => progress.status !== 'processing');\n  }, [optimisticIds, progressMap]);\n\n  return {\n    progressMap,\n    anyInProgress,\n    allCompleted\n  };\n}\n\n/**\n * Hook for getting try-on results\n */\nexport function useTryonResult(optimisticId: string): {\n  result: unknown;\n  isLoading: boolean;\n  isCompleted: boolean;\n  error: Error | null;\n  processingTime?: number;\n} {\n  const resultQuery = useQuery({\n    queryKey: ['tryon-result', optimisticId],\n    enabled: Boolean(optimisticId),\n    staleTime: Infinity, // Results don't change once set\n    gcTime: 60000 // Keep results for 1 minute\n  });\n\n  const data = resultQuery.data as any;\n  \n  return {\n    result: data?.result,\n    isLoading: resultQuery.isLoading,\n    isCompleted: data?.status === 'completed',\n    error: resultQuery.error,\n    processingTime: data?.processingTime\n  };\n}\n\n/**\n * Hook for progress visualization and UI feedback\n */\nexport function useProgressVisualization(\n  optimisticId: string,\n  config: {\n    enableStageMessages?: boolean;\n    enableTimeEstimates?: boolean;\n    enableAnimation?: boolean;\n  } = {}\n): {\n  progress: TryonProgress | undefined;\n  progressPercentage: number;\n  stageMessage: string;\n  timeRemaining: string;\n  progressColor: string;\n  isAnimating: boolean;\n} {\n  const { progress } = useTryonProgress(optimisticId);\n  \n  const progressPercentage = progress?.progress || 0;\n  \n  const stageMessage = useMemo(() => {\n    if (!config.enableStageMessages || !progress) return '';\n    \n    switch (progress.stage) {\n      case 'image-processing':\n        return 'Processing images...';\n      case 'ai-generation':\n        return 'Generating your try-on...';\n      case 'post-processing':\n        return 'Adding final touches...';\n      case 'finalizing':\n        return 'Almost done...';\n      case 'completed':\n        return 'Complete!';\n      case 'error':\n        return 'Something went wrong';\n      default:\n        return 'Processing...';\n    }\n  }, [config.enableStageMessages, progress]);\n  \n  const timeRemaining = useMemo(() => {\n    if (!config.enableTimeEstimates || !progress?.estimatedTimeRemaining) return '';\n    \n    const seconds = Math.ceil(progress.estimatedTimeRemaining / 1000);\n    if (seconds <= 0) return '';\n    if (seconds < 60) return `${seconds}s remaining`;\n    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s remaining`;\n  }, [config.enableTimeEstimates, progress]);\n  \n  const progressColor = useMemo(() => {\n    if (!progress) return '#e5e7eb';\n    \n    switch (progress.status) {\n      case 'processing':\n        return '#3b82f6'; // Blue for processing\n      case 'completed':\n        return '#10b981'; // Green for completed\n      case 'error':\n        return '#ef4444'; // Red for error\n      default:\n        return '#e5e7eb'; // Gray for idle\n    }\n  }, [progress]);\n  \n  const isAnimating = useMemo(() => {\n    return config.enableAnimation !== false && \n           progress?.status === 'processing';\n  }, [config.enableAnimation, progress]);\n\n  return {\n    progress,\n    progressPercentage,\n    stageMessage,\n    timeRemaining,\n    progressColor,\n    isAnimating\n  };\n}\n\n/**\n * Hook for optimistic cache invalidation strategies\n */\nexport function useOptimisticCacheInvalidation(): {\n  invalidateRelatedQueries: (context?: { userId?: string; tags?: string[] }) => Promise<void>;\n  preloadRelatedQueries: (context?: { userId?: string }) => Promise<void>;\n  warmupCache: (prefetchData?: unknown[]) => Promise<void>;\n} {\n  const queryClient = useQueryClient();\n\n  const invalidateRelatedQueries = useCallback(async (context?: { userId?: string; tags?: string[] }) => {\n    // Invalidate history queries\n    await queryClient.invalidateQueries({ \n      queryKey: ['tryon-history'],\n      exact: false \n    });\n\n    // Invalidate user-specific queries if userId provided\n    if (context?.userId) {\n      await queryClient.invalidateQueries({ \n        queryKey: ['user-data', context.userId],\n        exact: false \n      });\n    }\n\n    // Invalidate tag-specific queries if tags provided\n    if (context?.tags?.length) {\n      for (const tag of context.tags) {\n        await queryClient.invalidateQueries({ \n          queryKey: ['tryon-by-tag', tag],\n          exact: false \n        });\n      }\n    }\n\n    // Invalidate stats and aggregations\n    await queryClient.invalidateQueries({ \n      queryKey: ['tryon-stats'],\n      exact: false \n    });\n  }, [queryClient]);\n\n  const preloadRelatedQueries = useCallback(async (context?: { userId?: string }) => {\n    // Preload frequently accessed queries\n    const preloadPromises = [];\n\n    // Preload history\n    preloadPromises.push(\n      queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'entries'],\n        staleTime: 30000\n      })\n    );\n\n    // Preload stats\n    preloadPromises.push(\n      queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'stats'],\n        staleTime: 60000\n      })\n    );\n\n    if (context?.userId) {\n      preloadPromises.push(\n        queryClient.prefetchQuery({\n          queryKey: ['user-data', context.userId],\n          staleTime: 60000\n        })\n      );\n    }\n\n    await Promise.all(preloadPromises);\n  }, [queryClient]);\n\n  const warmupCache = useCallback(async (prefetchData?: unknown[]) => {\n    // Warm up the cache with commonly used data\n    if (prefetchData?.length) {\n      prefetchData.forEach((data, index) => {\n        queryClient.setQueryData(['warmup-cache', index], data);\n      });\n    }\n\n    // Prefetch critical queries that are likely to be needed\n    await preloadRelatedQueries();\n  }, [queryClient, preloadRelatedQueries]);\n\n  return {\n    invalidateRelatedQueries,\n    preloadRelatedQueries,\n    warmupCache\n  };\n}"],"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","ignoreList":[]}