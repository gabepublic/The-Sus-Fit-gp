{"version":3,"names":["cov_6on5x4e4l","actualCoverage","s","useHistoryPersistence","f","useOperationBatching","useSimpleUndoRedo","useUndoRedo","DEFAULT_SHORTCUTS","undo","redo","canvasWidth","canvasHeight","canvasId","options","b","canvas","_CanvasProvider","useManagedCanvas","managerRef","_react","useRef","undefined","state","setState","useState","currentIndex","operations","canUndo","canRedo","memoryUsage","stats","totalOperations","undoCount","redoCount","memoryPeakUsage","lastCleanup","Date","now","current","_undoRedoStack","createUndoRedoManager","config","updateState","useCallback","getState","executeOperation","type","description","operationFn","operationData","metadata","Error","operationId","operation","getOperation","onOperationExecuted","currentOperation","getHistory","success","onUndo","nextOperation","length","onRedo","startComposite","startCompositeOperation","endComposite","endCompositeOperation","jumpToOperation","index","clearHistory","onHistoryCleared","id","cleanup","targetMemoryMB","exportHistory","importHistory","historyData","updateConfig","newConfig","useEffect","enableKeyboardShortcuts","shortcuts","keyboardShortcuts","handleKeyDown","event","key","ctrlKey","metaKey","shiftKey","toLowerCase","cmdKey","includes","preventDefault","document","addEventListener","removeEventListener","manager","initialState","maxHistorySize","history","setHistory","setCurrentIndex","prev","pushState","newState","newHistory","slice","push","splice","undoRedoManager","autoCommitDelay","isBatching","setIsBatching","batchOperationCount","setBatchOperationCount","batchTimeoutRef","currentBatchRef","startBatch","commitBatch","batchId","clearTimeout","setTimeout","addOperation","discardBatch","storageKey","autoSave","setAutoSave","lastSaved","setLastSaved","saveHistory","localStorage","setItem","error","console","loadHistory","getItem","handleBeforeUnload","autoSaveInterval","setInterval","window","clearInterval"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useUndoRedo.ts"],"sourcesContent":["'use client';\n\n// Undo/Redo React Hooks\n// React hooks for managing undo/redo operations with keyboard shortcuts\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useManagedCanvas, type ManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  UndoRedoManager,\n  createUndoRedoManager,\n  OperationType,\n  type UndoRedoConfig,\n  type UndoRedoState,\n  type Operation,\n  type CompositeOperation,\n  DEFAULT_UNDO_REDO_CONFIG\n} from '../utils/undoRedoStack';\n\n/**\n * Undo/Redo hook options\n */\nexport interface UseUndoRedoOptions {\n  /** Undo/Redo configuration */\n  config?: Partial<UndoRedoConfig>;\n  /** Enable keyboard shortcuts (Ctrl+Z, Ctrl+Y) */\n  enableKeyboardShortcuts?: boolean;\n  /** Custom keyboard shortcuts */\n  keyboardShortcuts?: {\n    undo?: string[];\n    redo?: string[];\n  };\n  /** Callback when operation is executed */\n  onOperationExecuted?: (operation: Operation | CompositeOperation) => void;\n  /** Callback when undo is performed */\n  onUndo?: (operation: Operation | CompositeOperation) => void;\n  /** Callback when redo is performed */\n  onRedo?: (operation: Operation | CompositeOperation) => void;\n  /** Callback when history is cleared */\n  onHistoryCleared?: () => void;\n}\n\n/**\n * Default keyboard shortcuts\n */\nconst DEFAULT_SHORTCUTS = {\n  undo: ['ctrl+z', 'cmd+z'],\n  redo: ['ctrl+y', 'cmd+y', 'ctrl+shift+z', 'cmd+shift+z']\n};\n\n/**\n * Main undo/redo hook\n */\nexport function useUndoRedo(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  options: UseUndoRedoOptions = {}\n): {\n  canvas: ManagedCanvas;\n  manager: UndoRedoManager;\n  state: UndoRedoState;\n  canUndo: boolean;\n  canRedo: boolean;\n  undo: () => boolean;\n  redo: () => boolean;\n  executeOperation: (\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>,\n    metadata?: Record<string, unknown>\n  ) => Promise<string>;\n  startComposite: (description: string, metadata?: Record<string, unknown>) => string;\n  endComposite: () => void;\n  jumpToOperation: (index: number) => boolean;\n  clearHistory: () => void;\n  getHistory: () => (Operation | CompositeOperation)[];\n  getOperation: (id: string) => Operation | CompositeOperation | null;\n  cleanup: (targetMemoryMB?: number) => void;\n  exportHistory: () => string;\n  importHistory: (historyData: string) => boolean;\n  updateConfig: (newConfig: Partial<UndoRedoConfig>) => void;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const managerRef = useRef<UndoRedoManager | undefined>(undefined);\n  const [state, setState] = useState<UndoRedoState>({\n    currentIndex: -1,\n    operations: [],\n    canUndo: false,\n    canRedo: false,\n    memoryUsage: 0,\n    stats: {\n      totalOperations: 0,\n      undoCount: 0,\n      redoCount: 0,\n      memoryPeakUsage: 0,\n      lastCleanup: Date.now()\n    }\n  });\n\n  // Initialize manager\n  if (!managerRef.current) {\n    managerRef.current = createUndoRedoManager(canvas, options.config);\n  }\n\n  const updateState = useCallback(() => {\n    if (managerRef.current) {\n      setState(managerRef.current.getState());\n    }\n  }, []);\n\n  const executeOperation = useCallback(async (\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>,\n    metadata?: Record<string, unknown>\n  ): Promise<string> => {\n    if (!managerRef.current) throw new Error('Manager not initialized');\n    \n    const operationId = await managerRef.current.executeOperation(\n      type,\n      description,\n      operationFn,\n      operationData,\n      metadata\n    );\n    \n    updateState();\n    \n    const operation = managerRef.current.getOperation(operationId);\n    if (operation) {\n      options.onOperationExecuted?.(operation);\n    }\n    \n    return operationId;\n  }, [updateState, options]);\n\n  const undo = useCallback((): boolean => {\n    if (!managerRef.current) return false;\n    \n    const currentOperation = state.currentIndex >= 0 \n      ? managerRef.current.getHistory()[state.currentIndex] \n      : null;\n    \n    const success = managerRef.current.undo();\n    if (success) {\n      updateState();\n      if (currentOperation) {\n        options.onUndo?.(currentOperation);\n      }\n    }\n    return success;\n  }, [state.currentIndex, updateState, options]);\n\n  const redo = useCallback((): boolean => {\n    if (!managerRef.current) return false;\n    \n    const nextOperation = state.currentIndex + 1 < state.operations.length\n      ? state.operations[state.currentIndex + 1]\n      : null;\n    \n    const success = managerRef.current.redo();\n    if (success) {\n      updateState();\n      if (nextOperation) {\n        options.onRedo?.(nextOperation);\n      }\n    }\n    return success;\n  }, [state.currentIndex, state.operations, updateState, options]);\n\n  const startComposite = useCallback((description: string, metadata?: Record<string, unknown>): string => {\n    if (!managerRef.current) throw new Error('Manager not initialized');\n    return managerRef.current.startCompositeOperation(description, metadata);\n  }, []);\n\n  const endComposite = useCallback((): void => {\n    if (!managerRef.current) return;\n    managerRef.current.endCompositeOperation();\n    updateState();\n  }, [updateState]);\n\n  const jumpToOperation = useCallback((index: number): boolean => {\n    if (!managerRef.current) return false;\n    const success = managerRef.current.jumpToOperation(index);\n    if (success) {\n      updateState();\n    }\n    return success;\n  }, [updateState]);\n\n  const clearHistory = useCallback((): void => {\n    if (!managerRef.current) return;\n    managerRef.current.clearHistory();\n    updateState();\n    options.onHistoryCleared?.();\n  }, [updateState, options]);\n\n  const getHistory = useCallback((): (Operation | CompositeOperation)[] => {\n    return managerRef.current?.getHistory() || [];\n  }, []);\n\n  const getOperation = useCallback((id: string): Operation | CompositeOperation | null => {\n    return managerRef.current?.getOperation(id) || null;\n  }, []);\n\n  const cleanup = useCallback((targetMemoryMB?: number): void => {\n    if (!managerRef.current) return;\n    managerRef.current.cleanup(targetMemoryMB);\n    updateState();\n  }, [updateState]);\n\n  const exportHistory = useCallback((): string => {\n    return managerRef.current?.exportHistory() || '';\n  }, []);\n\n  const importHistory = useCallback((historyData: string): boolean => {\n    if (!managerRef.current) return false;\n    const success = managerRef.current.importHistory(historyData);\n    if (success) {\n      updateState();\n    }\n    return success;\n  }, [updateState]);\n\n  const updateConfig = useCallback((newConfig: Partial<UndoRedoConfig>): void => {\n    if (!managerRef.current) return;\n    managerRef.current.updateConfig(newConfig);\n    updateState();\n  }, [updateState]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    if (!options.enableKeyboardShortcuts) return;\n\n    const shortcuts = { ...DEFAULT_SHORTCUTS, ...options.keyboardShortcuts };\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const key = `${event.ctrlKey || event.metaKey ? 'ctrl+' : ''}${event.shiftKey ? 'shift+' : ''}${event.key.toLowerCase()}`;\n      const cmdKey = `${event.ctrlKey || event.metaKey ? 'cmd+' : ''}${event.shiftKey ? 'shift+' : ''}${event.key.toLowerCase()}`;\n\n      if (shortcuts.undo.includes(key) || shortcuts.undo.includes(cmdKey)) {\n        event.preventDefault();\n        undo();\n      } else if (shortcuts.redo.includes(key) || shortcuts.redo.includes(cmdKey)) {\n        event.preventDefault();\n        redo();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [options.enableKeyboardShortcuts, options.keyboardShortcuts, undo, redo]);\n\n  // Update state when operations change\n  useEffect(() => {\n    updateState();\n  }, [updateState]);\n\n  return {\n    canvas,\n    manager: managerRef.current,\n    state,\n    canUndo: state.canUndo,\n    canRedo: state.canRedo,\n    undo,\n    redo,\n    executeOperation,\n    startComposite,\n    endComposite,\n    jumpToOperation,\n    clearHistory,\n    getHistory,\n    getOperation,\n    cleanup,\n    exportHistory,\n    importHistory,\n    updateConfig\n  };\n}\n\n/**\n * Hook for simple undo/redo operations without full state management\n */\nexport function useSimpleUndoRedo<T>(\n  initialState: T,\n  maxHistorySize: number = 50\n): {\n  state: T;\n  canUndo: boolean;\n  canRedo: boolean;\n  undo: () => void;\n  redo: () => void;\n  pushState: (newState: T) => void;\n  clearHistory: () => void;\n  getHistory: () => T[];\n} {\n  const [history, setHistory] = useState<T[]>([initialState]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const canUndo = currentIndex > 0;\n  const canRedo = currentIndex < history.length - 1;\n  const state = history[currentIndex];\n\n  const undo = useCallback(() => {\n    if (canUndo) {\n      setCurrentIndex(prev => prev - 1);\n    }\n  }, [canUndo]);\n\n  const redo = useCallback(() => {\n    if (canRedo) {\n      setCurrentIndex(prev => prev + 1);\n    }\n  }, [canRedo]);\n\n  const pushState = useCallback((newState: T) => {\n    setHistory(prev => {\n      // Remove any states after current index\n      const newHistory = prev.slice(0, currentIndex + 1);\n      newHistory.push(newState);\n      \n      // Enforce max history size\n      if (newHistory.length > maxHistorySize) {\n        newHistory.splice(0, newHistory.length - maxHistorySize);\n        setCurrentIndex(maxHistorySize - 1);\n        return newHistory;\n      }\n      \n      setCurrentIndex(newHistory.length - 1);\n      return newHistory;\n    });\n  }, [currentIndex, maxHistorySize]);\n\n  const clearHistory = useCallback(() => {\n    setHistory([state]);\n    setCurrentIndex(0);\n  }, [state]);\n\n  const getHistory = useCallback(() => {\n    return [...history];\n  }, [history]);\n\n  return {\n    state,\n    canUndo,\n    canRedo,\n    undo,\n    redo,\n    pushState,\n    clearHistory,\n    getHistory\n  };\n}\n\n/**\n * Hook for operation batching and atomic commits\n */\nexport function useOperationBatching(\n  undoRedoManager: UndoRedoManager,\n  autoCommitDelay: number = 1000\n): {\n  startBatch: (description: string) => string;\n  addOperation: (\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>\n  ) => Promise<string>;\n  commitBatch: () => void;\n  discardBatch: () => void;\n  isBatching: boolean;\n  batchOperationCount: number;\n} {\n  const [isBatching, setIsBatching] = useState(false);\n  const [batchOperationCount, setBatchOperationCount] = useState(0);\n  const batchTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const currentBatchRef = useRef<string | null>(null);\n\n  const startBatch = useCallback((description: string): string => {\n    if (currentBatchRef.current) {\n      commitBatch();\n    }\n\n    const batchId = undoRedoManager.startCompositeOperation(description);\n    currentBatchRef.current = batchId;\n    setIsBatching(true);\n    setBatchOperationCount(0);\n\n    // Auto-commit after delay\n    if (batchTimeoutRef.current) {\n      clearTimeout(batchTimeoutRef.current);\n    }\n    \n    batchTimeoutRef.current = setTimeout(() => {\n      commitBatch();\n    }, autoCommitDelay);\n\n    return batchId;\n  }, [autoCommitDelay]);\n\n  const addOperation = useCallback(async (\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>\n  ): Promise<string> => {\n    const operationId = await undoRedoManager.executeOperation(\n      type,\n      description,\n      operationFn,\n      operationData\n    );\n\n    setBatchOperationCount(prev => prev + 1);\n    return operationId;\n  }, [undoRedoManager]);\n\n  const commitBatch = useCallback(() => {\n    if (currentBatchRef.current) {\n      undoRedoManager.endCompositeOperation();\n      currentBatchRef.current = null;\n      setIsBatching(false);\n      setBatchOperationCount(0);\n\n      if (batchTimeoutRef.current) {\n        clearTimeout(batchTimeoutRef.current);\n        batchTimeoutRef.current = undefined;\n      }\n    }\n  }, [undoRedoManager]);\n\n  const discardBatch = useCallback(() => {\n    if (currentBatchRef.current) {\n      // Note: In a real implementation, you'd need to revert operations\n      // For now, we just clear the batch state\n      currentBatchRef.current = null;\n      setIsBatching(false);\n      setBatchOperationCount(0);\n\n      if (batchTimeoutRef.current) {\n        clearTimeout(batchTimeoutRef.current);\n        batchTimeoutRef.current = undefined;\n      }\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (batchTimeoutRef.current) {\n        clearTimeout(batchTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    startBatch,\n    addOperation,\n    commitBatch,\n    discardBatch,\n    isBatching,\n    batchOperationCount\n  };\n}\n\n/**\n * Hook for history persistence\n */\nexport function useHistoryPersistence(\n  undoRedoManager: UndoRedoManager,\n  storageKey: string = 'canvas-history'\n): {\n  saveHistory: () => boolean;\n  loadHistory: () => boolean;\n  autoSave: boolean;\n  setAutoSave: (enabled: boolean) => void;\n  lastSaved: Date | null;\n} {\n  const [autoSave, setAutoSave] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n\n  const saveHistory = useCallback((): boolean => {\n    try {\n      const historyData = undoRedoManager.exportHistory();\n      localStorage.setItem(storageKey, historyData);\n      setLastSaved(new Date());\n      return true;\n    } catch (error) {\n      console.error('Failed to save history:', error);\n      return false;\n    }\n  }, [undoRedoManager, storageKey]);\n\n  const loadHistory = useCallback((): boolean => {\n    try {\n      const historyData = localStorage.getItem(storageKey);\n      if (historyData) {\n        const success = undoRedoManager.importHistory(historyData);\n        if (success) {\n          setLastSaved(new Date());\n        }\n        return success;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to load history:', error);\n      return false;\n    }\n  }, [undoRedoManager, storageKey]);\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (!autoSave) return;\n\n    const handleBeforeUnload = () => {\n      saveHistory();\n    };\n\n    const autoSaveInterval = setInterval(() => {\n      saveHistory();\n    }, 30000); // Save every 30 seconds\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      clearInterval(autoSaveInterval);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [autoSave, saveHistory]);\n\n  // Load history on mount\n  useEffect(() => {\n    loadHistory();\n  }, [loadHistory]);\n\n  return {\n    saveHistory,\n    loadHistory,\n    autoSave,\n    setAutoSave,\n    lastSaved\n  };\n}"],"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","ignoreList":[]}