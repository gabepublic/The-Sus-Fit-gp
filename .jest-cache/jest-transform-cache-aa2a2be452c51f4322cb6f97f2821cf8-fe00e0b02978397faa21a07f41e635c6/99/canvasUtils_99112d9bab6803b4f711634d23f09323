e436a9db44c204da0df0a06c7142b8f5
// Advanced Canvas API Utilities
// Extended canvas operations for image processing and manipulation
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AdvancedCanvasOperations: function() {
        return AdvancedCanvasOperations;
    },
    BlendMode: function() {
        return BlendMode;
    },
    CanvasAnimationUtils: function() {
        return CanvasAnimationUtils;
    },
    CanvasPerformanceUtils: function() {
        return CanvasPerformanceUtils;
    },
    createAdvancedCanvasOperations: function() {
        return createAdvancedCanvasOperations;
    },
    createCanvasAnimationUtils: function() {
        return createCanvasAnimationUtils;
    }
});
var BlendMode = /*#__PURE__*/ function(BlendMode) {
    BlendMode["Normal"] = "source-over";
    BlendMode["Multiply"] = "multiply";
    BlendMode["Screen"] = "screen";
    BlendMode["Overlay"] = "overlay";
    BlendMode["Darken"] = "darken";
    BlendMode["Lighten"] = "lighten";
    BlendMode["ColorDodge"] = "color-dodge";
    BlendMode["ColorBurn"] = "color-burn";
    BlendMode["HardLight"] = "hard-light";
    BlendMode["SoftLight"] = "soft-light";
    BlendMode["Difference"] = "difference";
    BlendMode["Exclusion"] = "exclusion";
    return BlendMode;
}({});
class AdvancedCanvasOperations {
    constructor(managedCanvas){
        this.canvas = managedCanvas.canvas;
        this.ctx = managedCanvas.context;
    }
    /**
   * Save current canvas state
   */ saveState() {
        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        const transform = this.ctx.getTransform();
        return {
            imageData,
            transform: {
                a: transform.a,
                b: transform.b,
                c: transform.c,
                d: transform.d,
                e: transform.e,
                f: transform.f
            },
            fillStyle: this.ctx.fillStyle,
            strokeStyle: this.ctx.strokeStyle,
            lineWidth: this.ctx.lineWidth,
            lineCap: this.ctx.lineCap,
            lineJoin: this.ctx.lineJoin,
            globalAlpha: this.ctx.globalAlpha,
            globalCompositeOperation: this.ctx.globalCompositeOperation,
            font: this.ctx.font,
            textAlign: this.ctx.textAlign,
            textBaseline: this.ctx.textBaseline
        };
    }
    /**
   * Restore canvas state
   */ restoreState(state) {
        this.ctx.putImageData(state.imageData, 0, 0);
        this.ctx.setTransform(state.transform.a, state.transform.b, state.transform.c, state.transform.d, state.transform.e, state.transform.f);
        this.ctx.fillStyle = state.fillStyle;
        this.ctx.strokeStyle = state.strokeStyle;
        this.ctx.lineWidth = state.lineWidth;
        this.ctx.lineCap = state.lineCap;
        this.ctx.lineJoin = state.lineJoin;
        this.ctx.globalAlpha = state.globalAlpha;
        this.ctx.globalCompositeOperation = state.globalCompositeOperation;
        this.ctx.font = state.font;
        this.ctx.textAlign = state.textAlign;
        this.ctx.textBaseline = state.textBaseline;
    }
    /**
   * Apply image filter using pixel manipulation
   */ applyPixelFilter(filterFn) {
        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        const data = imageData.data;
        for(let i = 0; i < data.length; i += 4){
            const [r, g, b, a] = filterFn(data[i], data[i + 1], data[i + 2], data[i + 3]);
            data[i] = Math.max(0, Math.min(255, r));
            data[i + 1] = Math.max(0, Math.min(255, g));
            data[i + 2] = Math.max(0, Math.min(255, b));
            data[i + 3] = Math.max(0, Math.min(255, a));
        }
        this.ctx.putImageData(imageData, 0, 0);
    }
    /**
   * Draw image with blend mode
   */ drawImageWithBlendMode(image, x, y, width, height, blendMode = "source-over", opacity = 1) {
        const originalCompositeOperation = this.ctx.globalCompositeOperation;
        const originalAlpha = this.ctx.globalAlpha;
        this.ctx.globalCompositeOperation = blendMode;
        this.ctx.globalAlpha = opacity;
        if (width !== undefined && height !== undefined) {
            this.ctx.drawImage(image, x, y, width, height);
        } else {
            this.ctx.drawImage(image, x, y);
        }
        this.ctx.globalCompositeOperation = originalCompositeOperation;
        this.ctx.globalAlpha = originalAlpha;
    }
    /**
   * Create radial gradient
   */ createRadialGradient(x1, y1, r1, x2, y2, r2, stops) {
        const gradient = this.ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);
        stops.forEach((stop)=>{
            gradient.addColorStop(stop.offset, stop.color);
        });
        return gradient;
    }
    /**
   * Create linear gradient
   */ createLinearGradient(x1, y1, x2, y2, stops) {
        const gradient = this.ctx.createLinearGradient(x1, y1, x2, y2);
        stops.forEach((stop)=>{
            gradient.addColorStop(stop.offset, stop.color);
        });
        return gradient;
    }
    /**
   * Draw rounded rectangle
   */ roundedRect(x, y, width, height, radius) {
        this.ctx.beginPath();
        this.ctx.moveTo(x + radius, y);
        this.ctx.lineTo(x + width - radius, y);
        this.ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        this.ctx.lineTo(x + width, y + height - radius);
        this.ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        this.ctx.lineTo(x + radius, y + height);
        this.ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        this.ctx.lineTo(x, y + radius);
        this.ctx.quadraticCurveTo(x, y, x + radius, y);
        this.ctx.closePath();
    }
    /**
   * Get pixel color at coordinates
   */ getPixelColor(x, y) {
        const imageData = this.ctx.getImageData(x, y, 1, 1);
        const data = imageData.data;
        return {
            r: data[0],
            g: data[1],
            b: data[2],
            a: data[3]
        };
    }
    /**
   * Set pixel color at coordinates
   */ setPixelColor(x, y, r, g, b, a = 255) {
        const imageData = this.ctx.createImageData(1, 1);
        imageData.data[0] = r;
        imageData.data[1] = g;
        imageData.data[2] = b;
        imageData.data[3] = a;
        this.ctx.putImageData(imageData, x, y);
    }
    /**
   * Crop canvas to specified rectangle
   */ crop(x, y, width, height) {
        const imageData = this.ctx.getImageData(x, y, width, height);
        this.canvas.width = width;
        this.canvas.height = height;
        this.ctx.putImageData(imageData, 0, 0);
    }
    /**
   * Flip canvas horizontally or vertically
   */ flip(horizontal = true, vertical = false) {
        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.save();
        this.ctx.scale(horizontal ? -1 : 1, vertical ? -1 : 1);
        this.ctx.translate(horizontal ? -this.canvas.width : 0, vertical ? -this.canvas.height : 0);
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.putImageData(imageData, 0, 0);
        this.ctx.restore();
    }
    /**
   * Rotate canvas by angle in radians
   */ rotate(angle, centerX, centerY) {
        const cx = centerX ?? this.canvas.width / 2;
        const cy = centerY ?? this.canvas.height / 2;
        this.ctx.translate(cx, cy);
        this.ctx.rotate(angle);
        this.ctx.translate(-cx, -cy);
    }
}
class CanvasPerformanceUtils {
    /**
   * Measure canvas operation performance
   */ static measureOperation(operation, name = 'Canvas Operation') {
        const start = performance.now();
        const result = operation();
        const end = performance.now();
        if (process.env.NODE_ENV === 'development') {
            console.log(`${name} took ${(end - start).toFixed(2)}ms`);
        }
        return result;
    }
    /**
   * Debounce canvas operations
   */ static debounce(func, wait) {
        let timeout;
        return (...args)=>{
            clearTimeout(timeout);
            timeout = setTimeout(()=>func(...args), wait);
        };
    }
    /**
   * Throttle canvas operations
   */ static throttle(func, limit) {
        let inThrottle;
        return (...args)=>{
            if (!inThrottle) {
                func(...args);
                inThrottle = true;
                setTimeout(()=>inThrottle = false, limit);
            }
        };
    }
    /**
   * Check if canvas size is within memory limits
   */ static isCanvasSizeSafe(width, height, maxPixels = 16777216) {
        return width * height <= maxPixels;
    }
    /**
   * Optimize canvas for performance
   */ static optimizeCanvas(canvas) {
        const ctx = canvas.getContext('2d');
        if (ctx) {
            // Disable image smoothing for better performance in some cases
            ctx.imageSmoothingEnabled = false;
            // Set text baseline for consistent text rendering
            ctx.textBaseline = 'top';
        }
    }
}
class CanvasAnimationUtils {
    /**
   * Start animation loop
   */ startAnimation(callback) {
        if (this.isRunning) return;
        this.isRunning = true;
        const animate = (timestamp)=>{
            if (!this.isRunning) return;
            callback(timestamp);
            this.animationId = requestAnimationFrame(animate);
        };
        this.animationId = requestAnimationFrame(animate);
    }
    /**
   * Stop animation loop
   */ stopAnimation() {
        this.isRunning = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
    }
    /**
   * Animate property with easing
   */ static animateProperty(from, to, duration, easing, onUpdate, onComplete) {
        const startTime = performance.now();
        let animationId;
        const animate = (currentTime)=>{
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easedProgress = easing(progress);
            const currentValue = from + (to - from) * easedProgress;
            onUpdate(currentValue);
            if (progress < 1) {
                animationId = requestAnimationFrame(animate);
            } else {
                onComplete?.();
            }
        };
        animationId = requestAnimationFrame(animate);
        // Return cancel function
        return ()=>cancelAnimationFrame(animationId);
    }
    static{
        /**
   * Common easing functions
   */ this.easing = {
            linear: (t)=>t,
            easeInQuad: (t)=>t * t,
            easeOutQuad: (t)=>t * (2 - t),
            easeInOutQuad: (t)=>t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
            easeInCubic: (t)=>t * t * t,
            easeOutCubic: (t)=>--t * t * t + 1,
            easeInOutCubic: (t)=>t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
        };
    }
    constructor(){
        this.animationId = null;
        this.isRunning = false;
    }
}
function createAdvancedCanvasOperations(managedCanvas) {
    return new AdvancedCanvasOperations(managedCanvas);
}
function createCanvasAnimationUtils() {
    return new CanvasAnimationUtils();
}

//# sourceMappingURL=data:application/json;base64,