e1444cae7c7da572495b99cf57b6b22b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CanvasProvider: function() {
        return CanvasProvider;
    },
    useCanvas: function() {
        return useCanvas;
    },
    useCanvasUtils: function() {
        return useCanvasUtils;
    },
    useManagedCanvas: function() {
        return useManagedCanvas;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const CanvasContext = /*#__PURE__*/ (0, _react.createContext)(null);
function CanvasProvider({ children, maxPoolSize = 10, enableHighDPI = true }) {
    const canvasPoolRef = (0, _react.useRef)(new Map());
    const devicePixelRatio = enableHighDPI ? window.devicePixelRatio || 1 : 1;
    // Check canvas support
    const isSupported = (0, _react.useCallback)(()=>{
        try {
            const testCanvas = document.createElement('canvas');
            return !!(testCanvas.getContext && testCanvas.getContext('2d'));
        } catch  {
            return false;
        }
    }, []);
    // Canvas utilities implementation
    const utils = {
        createCanvas: (0, _react.useCallback)((width, height)=>{
            const canvas = document.createElement('canvas');
            // Set display size
            canvas.style.width = `${width}px`;
            canvas.style.height = `${height}px`;
            // Set actual size for high-DPI
            canvas.width = width * devicePixelRatio;
            canvas.height = height * devicePixelRatio;
            // Scale context for high-DPI
            const ctx = canvas.getContext('2d');
            if (ctx && devicePixelRatio !== 1) {
                ctx.scale(devicePixelRatio, devicePixelRatio);
            }
            return canvas;
        }, [
            devicePixelRatio
        ]),
        getContext2D: (0, _react.useCallback)((canvas)=>{
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('Could not get 2D context from canvas');
            }
            return ctx;
        }, []),
        loadImageToCanvas: (0, _react.useCallback)((canvas, imageUrl)=>{
            return new Promise((resolve, reject)=>{
                const img = new Image();
                img.crossOrigin = 'anonymous';
                img.onload = ()=>{
                    try {
                        const ctx = utils.getContext2D(canvas);
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                        ctx.drawImage(img, 0, 0, canvas.width / devicePixelRatio, canvas.height / devicePixelRatio);
                        resolve();
                    } catch (error) {
                        reject(new Error(`Failed to draw image to canvas: ${error}`));
                    }
                };
                img.onerror = ()=>{
                    reject(new Error('Failed to load image'));
                };
                img.src = imageUrl;
            });
        }, [
            devicePixelRatio
        ]),
        canvasToDataURL: (0, _react.useCallback)((canvas, format = 'image/png', quality = 0.9)=>{
            return canvas.toDataURL(format, quality);
        }, []),
        clearCanvas: (0, _react.useCallback)((canvas)=>{
            const ctx = utils.getContext2D(canvas);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }, []),
        resizeCanvas: (0, _react.useCallback)((canvas, newWidth, newHeight)=>{
            // Save current content
            const imageData = canvas.toDataURL();
            // Resize canvas
            canvas.style.width = `${newWidth}px`;
            canvas.style.height = `${newHeight}px`;
            canvas.width = newWidth * devicePixelRatio;
            canvas.height = newHeight * devicePixelRatio;
            // Scale context for high-DPI
            const ctx = utils.getContext2D(canvas);
            if (devicePixelRatio !== 1) {
                ctx.scale(devicePixelRatio, devicePixelRatio);
            }
            // Restore content
            const img = new Image();
            img.onload = ()=>{
                ctx.drawImage(img, 0, 0, newWidth, newHeight);
            };
            img.src = imageData;
        }, [
            devicePixelRatio
        ]),
        cloneCanvas: (0, _react.useCallback)((sourceCanvas)=>{
            const clone = utils.createCanvas(sourceCanvas.width / devicePixelRatio, sourceCanvas.height / devicePixelRatio);
            const cloneCtx = utils.getContext2D(clone);
            cloneCtx.drawImage(sourceCanvas, 0, 0);
            return clone;
        }, [])
    };
    // Canvas pool implementation
    const pool = {
        getCanvas: (0, _react.useCallback)((width, height, id)=>{
            const canvasId = id || `canvas_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            // Check if canvas with this ID already exists
            const existing = canvasPoolRef.current.get(canvasId);
            if (existing && !existing.inUse) {
                // Resize existing canvas if dimensions don't match
                if (existing.dimensions.width !== width || existing.dimensions.height !== height) {
                    utils.resizeCanvas(existing.canvas, width, height);
                    existing.dimensions = {
                        width,
                        height
                    };
                }
                existing.inUse = true;
                return existing;
            }
            // Create new canvas
            const canvas = utils.createCanvas(width, height);
            const context = utils.getContext2D(canvas);
            const managedCanvas = {
                canvas,
                context,
                id: canvasId,
                dimensions: {
                    width,
                    height
                },
                pixelRatio: devicePixelRatio,
                inUse: true,
                createdAt: Date.now()
            };
            // Add to pool, removing oldest if at capacity
            if (canvasPoolRef.current.size >= maxPoolSize) {
                const oldestEntry = Array.from(canvasPoolRef.current.entries()).filter(([, canvas])=>!canvas.inUse).sort((a, b)=>a[1].createdAt - b[1].createdAt)[0];
                if (oldestEntry) {
                    canvasPoolRef.current.delete(oldestEntry[0]);
                }
            }
            canvasPoolRef.current.set(canvasId, managedCanvas);
            return managedCanvas;
        }, [
            maxPoolSize,
            devicePixelRatio
        ]),
        releaseCanvas: (0, _react.useCallback)((id)=>{
            const canvas = canvasPoolRef.current.get(id);
            if (canvas) {
                canvas.inUse = false;
                // Clear the canvas for reuse
                utils.clearCanvas(canvas.canvas);
            }
        }, []),
        clearPool: (0, _react.useCallback)(()=>{
            canvasPoolRef.current.clear();
        }, []),
        getCanvasById: (0, _react.useCallback)((id)=>{
            return canvasPoolRef.current.get(id) || null;
        }, []),
        getActiveCanvases: (0, _react.useCallback)(()=>{
            return Array.from(canvasPoolRef.current.values()).filter((canvas)=>canvas.inUse);
        }, [])
    };
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            pool.clearPool();
        };
    }, []);
    const contextValue = {
        pool,
        utils,
        devicePixelRatio,
        isSupported: isSupported()
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(CanvasContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useCanvas() {
    const context = (0, _react.useContext)(CanvasContext);
    if (!context) {
        throw new Error('useCanvas must be used within a CanvasProvider');
    }
    return context;
}
function useManagedCanvas(width, height, id) {
    const { pool } = useCanvas();
    const canvasRef = (0, _react.useRef)(null);
    (0, _react.useEffect)(()=>{
        // Get canvas on mount
        canvasRef.current = pool.getCanvas(width, height, id);
        // Release canvas on unmount
        return ()=>{
            if (canvasRef.current) {
                pool.releaseCanvas(canvasRef.current.id);
            }
        };
    }, [
        width,
        height,
        id,
        pool
    ]);
    if (!canvasRef.current) {
        throw new Error('Canvas not initialized');
    }
    return canvasRef.current;
}
function useCanvasUtils() {
    const { utils } = useCanvas();
    return utils;
}

//# sourceMappingURL=data:application/json;base64,