06b7786410f5a9ca1345eca3f03f9925
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _errorToMessage = require("../../src/lib/errorToMessage");
describe('errorToMessage', ()=>{
    it('returns correct message for 400 status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(400)).toBe('Invalid images uploaded.');
    });
    it('returns correct message for 429 status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(429)).toBe('OpenAI rate limit reached, try later.');
    });
    it('returns correct message for TIMEOUT string', ()=>{
        expect((0, _errorToMessage.errorToMessage)('TIMEOUT')).toBe('Request timed out, please retry.');
    });
    it('returns correct message for 500 status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(500)).toBe('Server error, please try again.');
    });
    it('returns correct message for 503 status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(503)).toBe('Service temporarily unavailable.');
    });
    it('returns default message for unknown status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(404)).toBe('Unexpected error, please retry.');
        expect((0, _errorToMessage.errorToMessage)(502)).toBe('Unexpected error, please retry.');
        expect((0, _errorToMessage.errorToMessage)('UNKNOWN')).toBe('Unexpected error, please retry.');
    });
    it('returns default message for undefined status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(undefined)).toBe('Unexpected error, please retry.');
    });
    it('returns default message for null status', ()=>{
        expect((0, _errorToMessage.errorToMessage)(null)).toBe('Unexpected error, please retry.');
    });
    it('handles string numbers correctly', ()=>{
        expect((0, _errorToMessage.errorToMessage)('400')).toBe('Invalid images uploaded.');
        expect((0, _errorToMessage.errorToMessage)('429')).toBe('OpenAI rate limit reached, try later.');
        expect((0, _errorToMessage.errorToMessage)('500')).toBe('Server error, please try again.');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL2xpYi9lcnJvclRvTWVzc2FnZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yVG9NZXNzYWdlIH0gZnJvbSAnLi4vLi4vc3JjL2xpYi9lcnJvclRvTWVzc2FnZSc7XG5cbmRlc2NyaWJlKCdlcnJvclRvTWVzc2FnZScsICgpID0+IHtcbiAgaXQoJ3JldHVybnMgY29ycmVjdCBtZXNzYWdlIGZvciA0MDAgc3RhdHVzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZSg0MDApKS50b0JlKCdJbnZhbGlkIGltYWdlcyB1cGxvYWRlZC4nKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgY29ycmVjdCBtZXNzYWdlIGZvciA0Mjkgc3RhdHVzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZSg0MjkpKS50b0JlKCdPcGVuQUkgcmF0ZSBsaW1pdCByZWFjaGVkLCB0cnkgbGF0ZXIuJyk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGNvcnJlY3QgbWVzc2FnZSBmb3IgVElNRU9VVCBzdHJpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVycm9yVG9NZXNzYWdlKCdUSU1FT1VUJykpLnRvQmUoJ1JlcXVlc3QgdGltZWQgb3V0LCBwbGVhc2UgcmV0cnkuJyk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGNvcnJlY3QgbWVzc2FnZSBmb3IgNTAwIHN0YXR1cycsICgpID0+IHtcbiAgICBleHBlY3QoZXJyb3JUb01lc3NhZ2UoNTAwKSkudG9CZSgnU2VydmVyIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluLicpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBjb3JyZWN0IG1lc3NhZ2UgZm9yIDUwMyBzdGF0dXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVycm9yVG9NZXNzYWdlKDUwMykpLnRvQmUoJ1NlcnZpY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuJyk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGRlZmF1bHQgbWVzc2FnZSBmb3IgdW5rbm93biBzdGF0dXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVycm9yVG9NZXNzYWdlKDQwNCkpLnRvQmUoJ1VuZXhwZWN0ZWQgZXJyb3IsIHBsZWFzZSByZXRyeS4nKTtcbiAgICBleHBlY3QoZXJyb3JUb01lc3NhZ2UoNTAyKSkudG9CZSgnVW5leHBlY3RlZCBlcnJvciwgcGxlYXNlIHJldHJ5LicpO1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZSgnVU5LTk9XTicpKS50b0JlKCdVbmV4cGVjdGVkIGVycm9yLCBwbGVhc2UgcmV0cnkuJyk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGRlZmF1bHQgbWVzc2FnZSBmb3IgdW5kZWZpbmVkIHN0YXR1cycsICgpID0+IHtcbiAgICBleHBlY3QoZXJyb3JUb01lc3NhZ2UodW5kZWZpbmVkKSkudG9CZSgnVW5leHBlY3RlZCBlcnJvciwgcGxlYXNlIHJldHJ5LicpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBkZWZhdWx0IG1lc3NhZ2UgZm9yIG51bGwgc3RhdHVzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZShudWxsIGFzIGFueSkpLnRvQmUoJ1VuZXhwZWN0ZWQgZXJyb3IsIHBsZWFzZSByZXRyeS4nKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgc3RyaW5nIG51bWJlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZSgnNDAwJykpLnRvQmUoJ0ludmFsaWQgaW1hZ2VzIHVwbG9hZGVkLicpO1xuICAgIGV4cGVjdChlcnJvclRvTWVzc2FnZSgnNDI5JykpLnRvQmUoJ09wZW5BSSByYXRlIGxpbWl0IHJlYWNoZWQsIHRyeSBsYXRlci4nKTtcbiAgICBleHBlY3QoZXJyb3JUb01lc3NhZ2UoJzUwMCcpKS50b0JlKCdTZXJ2ZXIgZXJyb3IsIHBsZWFzZSB0cnkgYWdhaW4uJyk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsImVycm9yVG9NZXNzYWdlIiwidG9CZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7OztnQ0FBK0I7QUFFL0JBLFNBQVMsa0JBQWtCO0lBQ3pCQyxHQUFHLDBDQUEwQztRQUMzQ0MsT0FBT0MsSUFBQUEsOEJBQWMsRUFBQyxNQUFNQyxJQUFJLENBQUM7SUFDbkM7SUFFQUgsR0FBRywwQ0FBMEM7UUFDM0NDLE9BQU9DLElBQUFBLDhCQUFjLEVBQUMsTUFBTUMsSUFBSSxDQUFDO0lBQ25DO0lBRUFILEdBQUcsOENBQThDO1FBQy9DQyxPQUFPQyxJQUFBQSw4QkFBYyxFQUFDLFlBQVlDLElBQUksQ0FBQztJQUN6QztJQUVBSCxHQUFHLDBDQUEwQztRQUMzQ0MsT0FBT0MsSUFBQUEsOEJBQWMsRUFBQyxNQUFNQyxJQUFJLENBQUM7SUFDbkM7SUFFQUgsR0FBRywwQ0FBMEM7UUFDM0NDLE9BQU9DLElBQUFBLDhCQUFjLEVBQUMsTUFBTUMsSUFBSSxDQUFDO0lBQ25DO0lBRUFILEdBQUcsOENBQThDO1FBQy9DQyxPQUFPQyxJQUFBQSw4QkFBYyxFQUFDLE1BQU1DLElBQUksQ0FBQztRQUNqQ0YsT0FBT0MsSUFBQUEsOEJBQWMsRUFBQyxNQUFNQyxJQUFJLENBQUM7UUFDakNGLE9BQU9DLElBQUFBLDhCQUFjLEVBQUMsWUFBWUMsSUFBSSxDQUFDO0lBQ3pDO0lBRUFILEdBQUcsZ0RBQWdEO1FBQ2pEQyxPQUFPQyxJQUFBQSw4QkFBYyxFQUFDRSxZQUFZRCxJQUFJLENBQUM7SUFDekM7SUFFQUgsR0FBRywyQ0FBMkM7UUFDNUNDLE9BQU9DLElBQUFBLDhCQUFjLEVBQUMsT0FBY0MsSUFBSSxDQUFDO0lBQzNDO0lBRUFILEdBQUcsb0NBQW9DO1FBQ3JDQyxPQUFPQyxJQUFBQSw4QkFBYyxFQUFDLFFBQVFDLElBQUksQ0FBQztRQUNuQ0YsT0FBT0MsSUFBQUEsOEJBQWMsRUFBQyxRQUFRQyxJQUFJLENBQUM7UUFDbkNGLE9BQU9DLElBQUFBLDhCQUFjLEVBQUMsUUFBUUMsSUFBSSxDQUFDO0lBQ3JDO0FBQ0YifQ==