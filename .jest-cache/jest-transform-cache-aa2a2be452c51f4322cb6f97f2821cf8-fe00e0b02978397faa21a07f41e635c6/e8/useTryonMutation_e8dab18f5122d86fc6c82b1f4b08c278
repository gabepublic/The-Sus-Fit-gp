87dc21388516f4f1b231764c00009d06
'use client';
"use strict";

/* istanbul ignore next */
function cov_bahv0ttb6() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts";
  var hash = "695825506e2763d0e4ca02795a19d24eea10e778";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 60
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "7": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "9": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 64
        }
      },
      "10": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "11": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "12": {
        start: {
          line: 33,
          column: 51
        },
        end: {
          line: 33,
          column: 60
        }
      },
      "13": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "14": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "15": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "16": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 48
        }
      },
      "17": {
        start: {
          line: 53,
          column: 26
        },
        end: {
          line: 53,
          column: 77
        }
      },
      "18": {
        start: {
          line: 53,
          column: 41
        },
        end: {
          line: 53,
          column: 59
        }
      },
      "19": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 47
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "21": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 73
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 36
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 47
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 36
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 24
        }
      },
      "26": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 65
        }
      },
      "27": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 39
        }
      },
      "28": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "29": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 63
        }
      },
      "30": {
        start: {
          line: 72,
          column: 59
        },
        end: {
          line: 72,
          column: 61
        }
      },
      "31": {
        start: {
          line: 73,
          column: 22
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "32": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 20
        }
      },
      "33": {
        start: {
          line: 82,
          column: 17
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "34": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "35": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 77
        }
      },
      "36": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 90,
          column: 6
        }
      },
      "37": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "38": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 40
        }
      },
      "39": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 55
        }
      },
      "40": {
        start: {
          line: 105,
          column: 22
        },
        end: {
          line: 105,
          column: 32
        }
      },
      "41": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 122
        }
      },
      "42": {
        start: {
          line: 107,
          column: 102
        },
        end: {
          line: 107,
          column: 121
        }
      },
      "43": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "44": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 10
        }
      },
      "45": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "46": {
        start: {
          line: 116,
          column: 36
        },
        end: {
          line: 116,
          column: 38
        }
      },
      "47": {
        start: {
          line: 118,
          column: 39
        },
        end: {
          line: 118,
          column: 41
        }
      },
      "48": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "49": {
        start: {
          line: 121,
          column: 35
        },
        end: {
          line: 121,
          column: 129
        }
      },
      "50": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 46
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 64
        }
      },
      "52": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 55
        }
      },
      "53": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "54": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 21
        }
      },
      "55": {
        start: {
          line: 129,
          column: 26
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "56": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "57": {
        start: {
          line: 131,
          column: 39
        },
        end: {
          line: 131,
          column: 118
        }
      },
      "58": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "59": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 75
        }
      },
      "60": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 51
        }
      },
      "61": {
        start: {
          line: 138,
          column: 36
        },
        end: {
          line: 138,
          column: 58
        }
      },
      "62": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "63": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "64": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 24
        }
      },
      "65": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 159
        }
      },
      "66": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 169,
          column: 6
        }
      },
      "67": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 57
        }
      },
      "68": {
        start: {
          line: 174,
          column: 25
        },
        end: {
          line: 179,
          column: 6
        }
      },
      "69": {
        start: {
          line: 174,
          column: 50
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "70": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 190,
          column: 6
        }
      },
      "71": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "72": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 73
        }
      },
      "73": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 101
        }
      },
      "74": {
        start: {
          line: 192,
          column: 36
        },
        end: {
          line: 192,
          column: 74
        }
      },
      "75": {
        start: {
          line: 192,
          column: 60
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "76": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 277,
          column: 6
        }
      },
      "77": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "78": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 203,
          column: 25
        }
      },
      "79": {
        start: {
          line: 204,
          column: 36
        },
        end: {
          line: 210,
          column: 25
        }
      },
      "80": {
        start: {
          line: 212,
          column: 43
        },
        end: {
          line: 215,
          column: 25
        }
      },
      "81": {
        start: {
          line: 217,
          column: 67
        },
        end: {
          line: 217,
          column: 126
        }
      },
      "82": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 219,
          column: 107
        }
      },
      "83": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "84": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 231,
          column: 17
        }
      },
      "85": {
        start: {
          line: 224,
          column: 46
        },
        end: {
          line: 224,
          column: 136
        }
      },
      "86": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 66
        }
      },
      "87": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 137
        }
      },
      "88": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 56
        }
      },
      "89": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 79
        }
      },
      "90": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "91": {
        start: {
          line: 235,
          column: 36
        },
        end: {
          line: 235,
          column: 83
        }
      },
      "92": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 241,
          column: 17
        }
      },
      "93": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 240,
          column: 22
        }
      },
      "94": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 27
        }
      },
      "95": {
        start: {
          line: 248,
          column: 34
        },
        end: {
          line: 248,
          column: 130
        }
      },
      "96": {
        start: {
          line: 248,
          column: 110
        },
        end: {
          line: 248,
          column: 129
        }
      },
      "97": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "98": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 59
        }
      },
      "99": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 59
        }
      },
      "100": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "101": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "102": {
        start: {
          line: 258,
          column: 40
        },
        end: {
          line: 258,
          column: 78
        }
      },
      "103": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 264,
          column: 21
        }
      },
      "104": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "105": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 90
        }
      },
      "106": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 24
        }
      },
      "107": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 327,
          column: 6
        }
      },
      "108": {
        start: {
          line: 280,
          column: 29
        },
        end: {
          line: 280,
          column: 49
        }
      },
      "109": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "110": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "111": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 88
        }
      },
      "112": {
        start: {
          line: 285,
          column: 36
        },
        end: {
          line: 285,
          column: 91
        }
      },
      "113": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 60
        }
      },
      "114": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 77
        }
      },
      "115": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "116": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 148
        }
      },
      "117": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 78
        }
      },
      "118": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "119": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "120": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 69
        }
      },
      "121": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 366,
          column: 6
        }
      },
      "122": {
        start: {
          line: 330,
          column: 29
        },
        end: {
          line: 330,
          column: 50
        }
      },
      "123": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "124": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "125": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 80
        }
      },
      "126": {
        start: {
          line: 335,
          column: 36
        },
        end: {
          line: 335,
          column: 91
        }
      },
      "127": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 60
        }
      },
      "128": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 85
        }
      },
      "129": {
        start: {
          line: 342,
          column: 32
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "130": {
        start: {
          line: 348,
          column: 31
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "131": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "132": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 69
        }
      },
      "133": {
        start: {
          line: 367,
          column: 30
        },
        end: {
          line: 402,
          column: 6
        }
      },
      "134": {
        start: {
          line: 369,
          column: 29
        },
        end: {
          line: 369,
          column: 33
        }
      },
      "135": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "136": {
        start: {
          line: 371,
          column: 36
        },
        end: {
          line: 376,
          column: 14
        }
      },
      "137": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "138": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "139": {
        start: {
          line: 389,
          column: 33
        },
        end: {
          line: 389,
          column: 53
        }
      },
      "140": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "141": {
        start: {
          line: 391,
          column: 36
        },
        end: {
          line: 391,
          column: 91
        }
      },
      "142": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 60
        }
      },
      "143": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "144": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 77
        }
      },
      "145": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 419,
          column: 7
        }
      },
      "146": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 415,
          column: 10
        }
      },
      "147": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 413,
          column: 15
        }
      },
      "148": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 412,
          column: 17
        }
      },
      "149": {
        start: {
          line: 409,
          column: 20
        },
        end: {
          line: 409,
          column: 111
        }
      },
      "150": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 411,
          column: 91
        }
      },
      "151": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 44
        }
      },
      "152": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 445,
          column: 6
        }
      },
      "153": {
        start: {
          line: 421,
          column: 52
        },
        end: {
          line: 439,
          column: 9
        }
      },
      "154": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 427,
          column: 17
        }
      },
      "155": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 33
        }
      },
      "156": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 47
        }
      },
      "157": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 82
        }
      },
      "158": {
        start: {
          line: 447,
          column: 21
        },
        end: {
          line: 447,
          column: 65
        }
      },
      "159": {
        start: {
          line: 449,
          column: 4
        },
        end: {
          line: 463,
          column: 7
        }
      },
      "160": {
        start: {
          line: 449,
          column: 36
        },
        end: {
          line: 461,
          column: 9
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "tryonMutationFn",
        decl: {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 34
          }
        },
        loc: {
          start: {
            line: 32,
            column: 46
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 37
          },
          end: {
            line: 53,
            column: 38
          }
        },
        loc: {
          start: {
            line: 53,
            column: 41
          },
          end: {
            line: 53,
            column: 59
          }
        },
        line: 53
      },
      "3": {
        name: "handleApiResponse",
        decl: {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 36
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 70
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 54
          },
          end: {
            line: 72,
            column: 55
          }
        },
        loc: {
          start: {
            line: 72,
            column: 59
          },
          end: {
            line: 72,
            column: 61
          }
        },
        line: 72
      },
      "5": {
        name: "isRetryableError",
        decl: {
          start: {
            line: 94,
            column: 13
          },
          end: {
            line: 94,
            column: 29
          }
        },
        loc: {
          start: {
            line: 94,
            column: 37
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 94
      },
      "6": {
        name: "processImageInputs",
        decl: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 37
          }
        },
        loc: {
          start: {
            line: 104,
            column: 73
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 95
          },
          end: {
            line: 107,
            column: 96
          }
        },
        loc: {
          start: {
            line: 107,
            column: 102
          },
          end: {
            line: 107,
            column: 121
          }
        },
        line: 107
      },
      "8": {
        name: "createMutationContext",
        decl: {
          start: {
            line: 162,
            column: 13
          },
          end: {
            line: 162,
            column: 34
          }
        },
        loc: {
          start: {
            line: 162,
            column: 101
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 162
      },
      "9": {
        name: "useTryonMutation",
        decl: {
          start: {
            line: 171,
            column: 9
          },
          end: {
            line: 171,
            column: 25
          }
        },
        loc: {
          start: {
            line: 171,
            column: 39
          },
          end: {
            line: 464,
            column: 1
          }
        },
        line: 171
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 174,
            column: 45
          },
          end: {
            line: 174,
            column: 46
          }
        },
        loc: {
          start: {
            line: 174,
            column: 50
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 174
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 181,
            column: 50
          },
          end: {
            line: 181,
            column: 51
          }
        },
        loc: {
          start: {
            line: 181,
            column: 54
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 181
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 192,
            column: 56
          },
          end: {
            line: 192,
            column: 57
          }
        },
        loc: {
          start: {
            line: 192,
            column: 60
          },
          end: {
            line: 192,
            column: 69
          }
        },
        line: 192
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 194,
            column: 53
          },
          end: {
            line: 194,
            column: 54
          }
        },
        loc: {
          start: {
            line: 194,
            column: 72
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 194
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 248,
            column: 103
          },
          end: {
            line: 248,
            column: 104
          }
        },
        loc: {
          start: {
            line: 248,
            column: 110
          },
          end: {
            line: 248,
            column: 129
          }
        },
        line: 248
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 278,
            column: 54
          },
          end: {
            line: 278,
            column: 55
          }
        },
        loc: {
          start: {
            line: 278,
            column: 88
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 278
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 328,
            column: 52
          },
          end: {
            line: 328,
            column: 53
          }
        },
        loc: {
          start: {
            line: 328,
            column: 81
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 328
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 367,
            column: 54
          },
          end: {
            line: 367,
            column: 55
          }
        },
        loc: {
          start: {
            line: 367,
            column: 89
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 367
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 404,
            column: 26
          },
          end: {
            line: 404,
            column: 27
          }
        },
        loc: {
          start: {
            line: 404,
            column: 30
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 404
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 405,
            column: 15
          },
          end: {
            line: 405,
            column: 16
          }
        },
        loc: {
          start: {
            line: 405,
            column: 19
          },
          end: {
            line: 415,
            column: 9
          }
        },
        line: 405
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 407,
            column: 44
          },
          end: {
            line: 407,
            column: 45
          }
        },
        loc: {
          start: {
            line: 407,
            column: 73
          },
          end: {
            line: 413,
            column: 13
          }
        },
        line: 407
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 421,
            column: 47
          },
          end: {
            line: 421,
            column: 48
          }
        },
        loc: {
          start: {
            line: 421,
            column: 52
          },
          end: {
            line: 439,
            column: 9
          }
        },
        line: 421
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 424,
            column: 46
          },
          end: {
            line: 424,
            column: 47
          }
        },
        loc: {
          start: {
            line: 424,
            column: 69
          },
          end: {
            line: 429,
            column: 13
          }
        },
        line: 424
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 431,
            column: 24
          },
          end: {
            line: 431,
            column: 25
          }
        },
        loc: {
          start: {
            line: 431,
            column: 40
          },
          end: {
            line: 433,
            column: 13
          }
        },
        line: 431
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 449,
            column: 31
          },
          end: {
            line: 449,
            column: 32
          }
        },
        loc: {
          start: {
            line: 449,
            column: 36
          },
          end: {
            line: 461,
            column: 9
          }
        },
        line: 449
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 11
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 11
          },
          end: {
            line: 38,
            column: 28
          }
        }, {
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 40,
            column: 9
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 74,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 74,
            column: 34
          }
        }, {
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 74,
            column: 87
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 45
          }
        }, {
          start: {
            line: 78,
            column: 49
          },
          end: {
            line: 78,
            column: 72
          }
        }, {
          start: {
            line: 78,
            column: 76
          },
          end: {
            line: 78,
            column: 99
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: 96,
            column: 17
          },
          end: {
            line: 96,
            column: 42
          }
        }, {
          start: {
            line: 96,
            column: 46
          },
          end: {
            line: 96,
            column: 66
          }
        }],
        line: 96
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 62
          }
        }, {
          start: {
            line: 107,
            column: 66
          },
          end: {
            line: 107,
            column: 122
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: 124,
            column: 15
          },
          end: {
            line: 126,
            column: 9
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 136,
            column: 13
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 147,
            column: 37
          },
          end: {
            line: 147,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 70
          },
          end: {
            line: 147,
            column: 89
          }
        }, {
          start: {
            line: 147,
            column: 92
          },
          end: {
            line: 147,
            column: 101
          }
        }],
        line: 147
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 271
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 61
          }
        }, {
          start: {
            line: 153,
            column: 65
          },
          end: {
            line: 153,
            column: 106
          }
        }, {
          start: {
            line: 153,
            column: 110
          },
          end: {
            line: 153,
            column: 156
          }
        }, {
          start: {
            line: 153,
            column: 160
          },
          end: {
            line: 153,
            column: 214
          }
        }, {
          start: {
            line: 153,
            column: 218
          },
          end: {
            line: 153,
            column: 271
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 157,
            column: 100
          },
          end: {
            line: 157,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 125
          },
          end: {
            line: 157,
            column: 130
          }
        }, {
          start: {
            line: 157,
            column: 133
          },
          end: {
            line: 157,
            column: 157
          }
        }],
        line: 157
      },
      "16": {
        loc: {
          start: {
            line: 162,
            column: 46
          },
          end: {
            line: 162,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 162,
            column: 59
          },
          end: {
            line: 162,
            column: 60
          }
        }],
        line: 162
      },
      "17": {
        loc: {
          start: {
            line: 171,
            column: 26
          },
          end: {
            line: 171,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 171,
            column: 37
          }
        }],
        line: 171
      },
      "18": {
        loc: {
          start: {
            line: 197,
            column: 34
          },
          end: {
            line: 203,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 65
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 203,
            column: 25
          }
        }],
        line: 197
      },
      "19": {
        loc: {
          start: {
            line: 204,
            column: 36
          },
          end: {
            line: 210,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 73
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 210,
            column: 25
          }
        }],
        line: 204
      },
      "20": {
        loc: {
          start: {
            line: 212,
            column: 43
          },
          end: {
            line: 215,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 78
          },
          end: {
            line: 215,
            column: 13
          }
        }, {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 25
          }
        }],
        line: 212
      },
      "21": {
        loc: {
          start: {
            line: 212,
            column: 43
          },
          end: {
            line: 212,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 43
          },
          end: {
            line: 212,
            column: 56
          }
        }, {
          start: {
            line: 212,
            column: 60
          },
          end: {
            line: 212,
            column: 75
          }
        }],
        line: 212
      },
      "22": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "23": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "24": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "25": {
        loc: {
          start: {
            line: 248,
            column: 34
          },
          end: {
            line: 248,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 34
          },
          end: {
            line: 248,
            column: 70
          }
        }, {
          start: {
            line: 248,
            column: 74
          },
          end: {
            line: 248,
            column: 130
          }
        }],
        line: 248
      },
      "26": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 255,
            column: 13
          }
        }],
        line: 249
      },
      "27": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "28": {
        loc: {
          start: {
            line: 259,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "29": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "30": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 24
          }
        }, {
          start: {
            line: 281,
            column: 28
          },
          end: {
            line: 281,
            column: 64
          }
        }],
        line: 281
      },
      "31": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "32": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "33": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 331,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 331,
            column: 24
          }
        }, {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 331,
            column: 64
          }
        }],
        line: 331
      },
      "34": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "35": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 359,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 359,
            column: 32
          }
        }, {
          start: {
            line: 359,
            column: 36
          },
          end: {
            line: 359,
            column: 43
          }
        }],
        line: 359
      },
      "36": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "37": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "38": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "39": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "40": {
        loc: {
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 396,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 396,
            column: 34
          }
        }, {
          start: {
            line: 396,
            column: 38
          },
          end: {
            line: 396,
            column: 45
          }
        }],
        line: 396
      },
      "41": {
        loc: {
          start: {
            line: 424,
            column: 19
          },
          end: {
            line: 429,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 46
          },
          end: {
            line: 429,
            column: 13
          }
        }, {
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 429,
            column: 21
          }
        }],
        line: 424
      },
      "42": {
        loc: {
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "43": {
        loc: {
          start: {
            line: 458,
            column: 20
          },
          end: {
            line: 458,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 458,
            column: 52
          },
          end: {
            line: 458,
            column: 61
          }
        }, {
          start: {
            line: 458,
            column: 64
          },
          end: {
            line: 458,
            column: 79
          }
        }],
        line: 458
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts"],
      sourcesContent: ["'use client';\n\n// Try-On Mutation Hook\n// React Query mutation hook for handling try-on API calls with comprehensive error handling\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo, useEffect } from 'react';\nimport type {\n  TryonMutationVariables,\n  TryonMutationVariablesWithFiles,\n  TryonMutationResponse,\n  TryonMutationError,\n  TryonMutationContext,\n  UseTryonMutationReturn,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\nimport {\n  processImageForTryon,\n  ImageProcessingError,\n  ImageDimensionError,\n  type ImageProcessingOptions\n} from '../utils/imageProcessing';\nimport {\n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError\n} from '../../utils/image';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  isErrorRetryable as isErrorRetryableFromClassification\n} from '../utils/errorHandling';\nimport {\n  getOptimisticUpdatesManager,\n  type OptimisticUpdateConfig\n} from '../utils/optimisticUpdates';\nimport {\n  getCacheInvalidationManager,\n  invalidateCacheAfterMutation,\n  type CacheInvalidationConfig\n} from '../utils/cacheInvalidation';\n\n/**\n * API endpoint for try-on requests\n */\nconst TRYON_API_ENDPOINT = '/api/tryon';\n\n/**\n * Default configuration for the try-on mutation\n */\nconst DEFAULT_CONFIG: Required<Pick<UseTryonMutationConfig, 'enableRetry' | 'maxRetries' | 'initialRetryDelay' | 'enableOptimisticUpdates'>> = {\n  enableRetry: true,\n  maxRetries: 3,\n  initialRetryDelay: 1000,\n  enableOptimisticUpdates: false\n};\n\n/**\n * Mutation function that calls the try-on API\n */\nasync function tryonMutationFn(variables: TryonMutationVariables): Promise<TryonMutationResponse> {\n  const { modelImage, apparelImages, options } = variables;\n  \n  // Prepare request payload\n  const payload = {\n    modelImage,\n    apparelImages,\n    ...(options?.metadata && { metadata: options.metadata })\n  };\n\n  // Configure request options\n  const requestInit: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  };\n\n  // Add timeout if specified\n  if (options?.timeout) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), options.timeout);\n    requestInit.signal = controller.signal;\n    \n    try {\n      const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n      clearTimeout(timeoutId);\n      return handleApiResponse(response);\n    } catch (error) {\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  }\n\n  // Standard request without timeout\n  const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n  return handleApiResponse(response);\n}\n\n/**\n * Handle API response and convert to appropriate format\n */\nasync function handleApiResponse(response: Response): Promise<TryonMutationResponse> {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    const error: TryonMutationError = {\n      error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,\n      details: errorData.details,\n      code: errorData.code,\n      status: response.status,\n      retryable: response.status >= 500 || response.status === 408 || response.status === 429\n    };\n    throw error;\n  }\n\n  const data = await response.json();\n  \n  // Validate response structure\n  if (!data.img_generated) {\n    throw new Error('Invalid API response: missing img_generated field');\n  }\n\n  return {\n    img_generated: data.img_generated,\n    metadata: data.metadata\n  };\n}\n\n/**\n * Determine if an error is retryable using comprehensive classification\n */\nfunction isRetryableError(error: unknown): boolean {\n  // First check if error has explicit retryable property\n  if (error && typeof error === 'object' && 'retryable' in error) {\n    return Boolean(error.retryable);\n  }\n  \n  // Use comprehensive error classification\n  return isErrorRetryableFromClassification(error);\n}\n\n/**\n * Process image inputs if they are File objects\n */\nasync function processImageInputs(\n  variables: TryonMutationVariables | TryonMutationVariablesWithFiles,\n  imageProcessingOptions?: ImageProcessingOptions\n): Promise<{\n  processedVariables: TryonMutationVariables;\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  };\n}> {\n  const startTime = Date.now();\n  \n  // Check if we have File objects to process\n  const hasFileInputs = variables.modelImage instanceof File || \n    variables.apparelImages.some(img => img instanceof File);\n  \n  if (!hasFileInputs) {\n    // All inputs are already base64 strings\n    return {\n      processedVariables: variables as TryonMutationVariables\n    };\n  }\n  \n  try {\n    let modelImageResult: import('../utils/imageProcessing').ImageProcessingResult | undefined;\n    const apparelImageResults: import('../utils/imageProcessing').ImageProcessingResult[] = [];\n    let processedModelImage: string;\n    const processedApparelImages: string[] = [];\n    \n    // Process model image if it's a File\n    if (variables.modelImage instanceof File) {\n      const processedImage = await processImageForTryon(variables.modelImage, imageProcessingOptions);\n      modelImageResult = processedImage;\n      processedModelImage = processedImage.processedImage;\n    } else {\n      processedModelImage = variables.modelImage;\n    }\n    \n    // Process apparel images\n    for (let i = 0; i < variables.apparelImages.length; i++) {\n      const image = variables.apparelImages[i];\n      if (image instanceof File) {\n        const processedImage = await processImageForTryon(image, imageProcessingOptions);\n        apparelImageResults.push(processedImage);\n        processedApparelImages.push(processedImage.processedImage);\n      } else {\n        processedApparelImages.push(image);\n      }\n    }\n    \n    const totalProcessingTime = Date.now() - startTime;\n    \n    return {\n      processedVariables: {\n        modelImage: processedModelImage,\n        apparelImages: processedApparelImages,\n        options: variables.options\n      },\n      imageProcessingResults: {\n        modelImageResult,\n        apparelImageResults: apparelImageResults.length > 0 ? apparelImageResults : undefined,\n        totalProcessingTime\n      }\n    };\n  } catch (error) {\n    // Re-throw known image processing errors\n    if (error instanceof FileTypeNotSupportedError ||\n        error instanceof FileTooLargeError ||\n        error instanceof CompressionFailedError ||\n        error instanceof ImageProcessingError ||\n        error instanceof ImageDimensionError) {\n      throw error;\n    }\n    \n    // Wrap unknown errors\n    throw new ImageProcessingError(\n      'Unexpected error during image processing',\n      error instanceof Error ? error : new Error(String(error))\n    );\n  }\n}\n\n/**\n * Create mutation context for lifecycle tracking\n */\nfunction createMutationContext(\n  variables: TryonMutationVariables,\n  retryCount = 0,\n  previousError?: Error,\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  }\n): TryonMutationContext {\n  return {\n    variables,\n    startTime: Date.now(),\n    retryCount,\n    previousError,\n    imageProcessingResults\n  };\n}\n\n/**\n * React Query mutation hook for try-on functionality\n * \n * @param config - Optional configuration for the mutation\n * @returns UseTryonMutationReturn object with mutation state and functions\n */\nexport function useTryonMutation(config: UseTryonMutationConfig = {}): UseTryonMutationReturn {\n  const queryClient = useQueryClient();\n  \n  // Merge configuration with defaults\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config\n  }), [config]);\n\n  // Get optimistic updates manager instance\n  const optimisticManager = useMemo(() => {\n    try {\n      return getOptimisticUpdatesManager();\n    } catch {\n      // Initialize if not already initialized\n      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);\n    }\n  }, [queryClient]);\n\n  // Track active optimistic updates\n  const activeOptimisticUpdates = useMemo(() => new Map<string, string>(), []);\n\n  // Define lifecycle callbacks with useCallback\n  const onMutateCallback = useCallback(async (variables: TryonMutationVariables | TryonMutationVariablesWithFiles) => {\n    try {\n      // Extract image processing options from config and variables (variables take precedence)\n      const configOptions = mergedConfig.imageProcessing ? {\n        targetWidth: mergedConfig.imageProcessing.targetWidth,\n        targetHeight: mergedConfig.imageProcessing.targetHeight,\n        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,\n        quality: mergedConfig.imageProcessing.compressionQuality,\n        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      const variableOptions = variables.options?.imageProcessing ? {\n        targetWidth: variables.options.imageProcessing.targetWidth,\n        targetHeight: variables.options.imageProcessing.targetHeight,\n        maxSizeKB: variables.options.imageProcessing.maxSizeKB,\n        quality: variables.options.imageProcessing.compressionQuality,\n        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      // Merge options with variable options taking precedence\n      const imageProcessingOptions: ImageProcessingOptions | undefined = \n        configOptions || variableOptions ? {\n          ...configOptions,\n          ...variableOptions\n        } : undefined;\n      \n      // Process images if needed\n      const { processedVariables, imageProcessingResults } = await processImageInputs(\n        variables, \n        imageProcessingOptions\n      );\n      \n      // Create context with processed variables and image processing results\n      const context = createMutationContext(\n        processedVariables,\n        0,\n        undefined,\n        imageProcessingResults\n      );\n\n      // Start optimistic updates if enabled\n      let optimisticId: string | undefined;\n      if (mergedConfig.enableOptimisticUpdates) {\n        try {\n          const optimisticContext = optimisticManager.startOptimisticUpdate(\n            processedVariables,\n            mergedConfig.optimisticConfig\n          );\n          optimisticId = optimisticContext.optimisticId;\n          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);\n          \n          // Add optimistic ID to context for tracking\n          context.optimisticId = optimisticId;\n        } catch (error) {\n          console.warn('Failed to start optimistic updates:', error);\n        }\n      }\n      \n      // Call user-provided onMutate if available\n      if (mergedConfig.onMutate) {\n        const userContext = await mergedConfig.onMutate(processedVariables);\n        if (userContext) {\n          return { ...context, ...userContext };\n        }\n      }\n      \n      return context;\n    } catch (error) {\n      // If image processing fails, still allow user's onMutate to be called\n      // The user's onMutate can decide how to handle the failure\n      let context;\n      \n      const hasFileInputs = variables.modelImage instanceof File || \n        variables.apparelImages.some(img => img instanceof File);\n      \n      if (hasFileInputs) {\n        // Create context with File objects - user's onMutate must handle this\n        context = createMutationContext(variables as any);\n      } else {\n        // All inputs are base64 strings, safe to cast\n        context = createMutationContext(variables as TryonMutationVariables);\n      }\n      \n      if (mergedConfig.onMutate) {\n        try {\n          const userContext = await mergedConfig.onMutate(variables as any);\n          if (userContext) {\n            context = { ...context, ...userContext };\n          }\n        } catch (onMutateError) {\n          // If onMutate also fails, prefer the original processing error\n          console.warn('onMutate failed during error handling:', onMutateError);\n        }\n      }\n      \n      // Always re-throw the error so mutation fails appropriately\n      throw error;\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSuccessCallback = useCallback(async (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Complete optimistic updates if they were started\n    const optimisticId = context.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (error) {\n        console.warn('Failed to complete optimistic update:', error);\n      }\n    }\n\n    // Advanced cache invalidation with configurable strategies\n    try {\n      await invalidateCacheAfterMutation(\n        queryClient,\n        data,\n        variables,\n        context,\n        mergedConfig.cacheInvalidationConfig\n      );\n    } catch (error) {\n      console.warn('Failed to invalidate cache after mutation:', error);\n      \n      // Fallback to basic invalidation\n      await Promise.allSettled([\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-history'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['user-data'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-stats'],\n          exact: false \n        })\n      ]);\n    }\n    \n    // Call user-provided onSuccess with processed variables\n    if (mergedConfig.onSuccess) {\n      mergedConfig.onSuccess(data, context.variables, context);\n    }\n  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]);\n\n  const onErrorCallback = useCallback((\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    // Rollback optimistic updates if they were started\n    const optimisticId = context?.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (rollbackError) {\n        console.warn('Failed to rollback optimistic update:', rollbackError);\n      }\n    }\n\n    // Classify and log the error comprehensively\n    const classifiedError = logAndClassifyError(error, {\n      mutationVariables: variables,\n      mutationContext: context,\n      timestamp: new Date().toISOString()\n    });\n\n    // Format error for mutation system compatibility\n    const formattedError: TryonMutationError = {\n      error: classifiedError.userMessage,\n      details: classifiedError.technicalMessage,\n      code: classifiedError.errorCode,\n      retryable: classifiedError.retryable,\n      // Add classified error information\n      category: classifiedError.category,\n      severity: classifiedError.severity,\n      recoveryActions: classifiedError.recoveryActions\n    };\n\n    // Call user-provided onError with enhanced error information\n    if (mergedConfig.onError && context) {\n      mergedConfig.onError(formattedError, variables, context);\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSettledCallback = useCallback((\n    data: TryonMutationResponse | undefined,\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    // Format error with comprehensive classification if error exists\n    let formattedError: TryonMutationError | null = null;\n    \n    if (error) {\n      const classifiedError = classifyTryonError(error, {\n        mutationVariables: variables,\n        mutationContext: context,\n        settled: true,\n        timestamp: new Date().toISOString()\n      });\n\n      formattedError = {\n        error: classifiedError.userMessage,\n        details: classifiedError.technicalMessage,\n        code: classifiedError.errorCode,\n        retryable: classifiedError.retryable,\n        category: classifiedError.category,\n        severity: classifiedError.severity,\n        recoveryActions: classifiedError.recoveryActions\n      };\n    }\n\n    // Final cleanup of any remaining optimistic updates\n    if (context) {\n      const optimisticId = context.optimisticId;\n      if (optimisticId) {\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      }\n    }\n\n    // Call user-provided onSettled\n    if (mergedConfig.onSettled && context) {\n      mergedConfig.onSettled(data, formattedError, variables, context);\n    }\n  }, [mergedConfig, activeOptimisticUpdates]);\n\n  // Cleanup effect for optimistic updates on unmount\n  useEffect(() => {\n    return () => {\n      // Rollback any remaining optimistic updates when component unmounts\n      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {\n        try {\n          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));\n        } catch (error) {\n          console.warn('Failed to cleanup optimistic update on unmount:', error);\n        }\n      });\n      activeOptimisticUpdates.clear();\n    };\n  }, [optimisticManager, activeOptimisticUpdates]);\n\n  // Mutation configuration\n  const mutationConfig = useMemo(() => ({\n    mutationFn: tryonMutationFn,\n    \n    // Custom retry logic\n    retry: mergedConfig.enableRetry ? (failureCount: number, error: unknown) => {\n      if (failureCount >= mergedConfig.maxRetries) {\n        return false;\n      }\n      return isRetryableError(error);\n    } : false,\n    \n    // Exponential backoff delay\n    retryDelay: (attemptIndex: number) => {\n      return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);\n    },\n\n    // Lifecycle callbacks\n    onMutate: onMutateCallback,\n    onSuccess: onSuccessCallback,\n    onError: onErrorCallback,\n    onSettled: onSettledCallback\n  }), [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]);\n\n  // Use React Query mutation\n  const mutation = useMutation(mutationConfig);\n\n  // Return hook interface\n  return useMemo<UseTryonMutationReturn>(() => ({\n    mutate: mutation.mutate,\n    mutateAsync: mutation.mutateAsync,\n    data: mutation.data,\n    error: mutation.error as TryonMutationError | null,\n    isLoading: mutation.isPending,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status === 'pending' ? 'loading' : mutation.status,\n    reset: mutation.reset,\n    context: mutation.context as TryonMutationContext | undefined\n  }), [mutation]);\n}"],
      names: ["useTryonMutation", "TRYON_API_ENDPOINT", "DEFAULT_CONFIG", "enableRetry", "maxRetries", "initialRetryDelay", "enableOptimisticUpdates", "tryonMutationFn", "variables", "modelImage", "apparelImages", "options", "payload", "metadata", "requestInit", "method", "headers", "body", "JSON", "stringify", "timeout", "controller", "AbortController", "timeoutId", "setTimeout", "abort", "signal", "response", "fetch", "clearTimeout", "handleApiResponse", "error", "ok", "errorData", "json", "catch", "status", "statusText", "details", "code", "retryable", "data", "img_generated", "Error", "isRetryableError", "Boolean", "isErrorRetryableFromClassification", "processImageInputs", "imageProcessingOptions", "startTime", "Date", "now", "hasFileInputs", "File", "some", "img", "processedVariables", "modelImageResult", "apparelImageResults", "processedModelImage", "processedApparelImages", "processedImage", "processImageForTryon", "i", "length", "image", "push", "totalProcessingTime", "imageProcessingResults", "undefined", "FileTypeNotSupportedError", "FileTooLargeError", "CompressionFailedError", "ImageProcessingError", "ImageDimensionError", "String", "createMutationContext", "retryCount", "previousError", "config", "queryClient", "useQueryClient", "mergedConfig", "useMemo", "optimisticManager", "getOptimisticUpdatesManager", "require", "OptimisticUpdatesManager", "activeOptimisticUpdates", "Map", "onMutateCallback", "useCallback", "configOptions", "imageProcessing", "targetWidth", "targetHeight", "maxSizeKB", "quality", "compressionQuality", "preserveAspectRatio", "variableOptions", "context", "optimisticId", "optimisticContext", "startOptimisticUpdate", "optimisticConfig", "set", "join", "console", "warn", "onMutate", "userContext", "onMutateError", "onSuccessCallback", "completeOptimisticUpdate", "trackingKey", "delete", "invalidateCacheAfterMutation", "cacheInvalidationConfig", "Promise", "allSettled", "invalidateQueries", "queryKey", "exact", "onSuccess", "onErrorCallback", "rollbackOptimisticUpdate", "rollbackError", "classifiedError", "logAndClassifyError", "mutationVariables", "mutationContext", "timestamp", "toISOString", "formattedError", "userMessage", "technicalMessage", "errorCode", "category", "severity", "recoveryActions", "onError", "onSettledCallback", "classifyTryonError", "settled", "onSettled", "useEffect", "forEach", "clear", "mutationConfig", "mutationFn", "retry", "failureCount", "retryDelay", "attemptIndex", "Math", "pow", "mutation", "useMutation", "mutate", "mutateAsync", "isLoading", "isPending", "isSuccess", "isError", "isIdle", "reset"],
      mappings: "AAAA;;;;;+BAgQgBA;;;eAAAA;;;4BA3P4B;uBACI;iCAezC;uBAKA;+BAKA;mCAIA;mCAKA;AAEP;;CAEC,GACD,MAAMC,qBAAqB;AAE3B;;CAEC,GACD,MAAMC,iBAAyI;IAC7IC,aAAa;IACbC,YAAY;IACZC,mBAAmB;IACnBC,yBAAyB;AAC3B;AAEA;;CAEC,GACD,eAAeC,gBAAgBC,SAAiC;IAC9D,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,OAAO,EAAE,GAAGH;IAE/C,0BAA0B;IAC1B,MAAMI,UAAU;QACdH;QACAC;QACA,GAAIC,SAASE,YAAY;YAAEA,UAAUF,QAAQE,QAAQ;QAAC,CAAC;IACzD;IAEA,4BAA4B;IAC5B,MAAMC,cAA2B;QAC/BC,QAAQ;QACRC,SAAS;YACP,gBAAgB;QAClB;QACAC,MAAMC,KAAKC,SAAS,CAACP;IACvB;IAEA,2BAA2B;IAC3B,IAAID,SAASS,SAAS;QACpB,MAAMC,aAAa,IAAIC;QACvB,MAAMC,YAAYC,WAAW,IAAMH,WAAWI,KAAK,IAAId,QAAQS,OAAO;QACtEN,YAAYY,MAAM,GAAGL,WAAWK,MAAM;QAEtC,IAAI;YACF,MAAMC,WAAW,MAAMC,MAAM3B,oBAAoBa;YACjDe,aAAaN;YACb,OAAOO,kBAAkBH;QAC3B,EAAE,OAAOI,OAAO;YACdF,aAAaN;YACb,MAAMQ;QACR;IACF;IAEA,mCAAmC;IACnC,MAAMJ,WAAW,MAAMC,MAAM3B,oBAAoBa;IACjD,OAAOgB,kBAAkBH;AAC3B;AAEA;;CAEC,GACD,eAAeG,kBAAkBH,QAAkB;IACjD,IAAI,CAACA,SAASK,EAAE,EAAE;QAChB,MAAMC,YAAY,MAAMN,SAASO,IAAI,GAAGC,KAAK,CAAC,IAAO,CAAA,CAAC,CAAA;QACtD,MAAMJ,QAA4B;YAChCA,OAAOE,UAAUF,KAAK,IAAI,CAAC,KAAK,EAAEJ,SAASS,MAAM,CAAC,EAAE,EAAET,SAASU,UAAU,EAAE;YAC3EC,SAASL,UAAUK,OAAO;YAC1BC,MAAMN,UAAUM,IAAI;YACpBH,QAAQT,SAASS,MAAM;YACvBI,WAAWb,SAASS,MAAM,IAAI,OAAOT,SAASS,MAAM,KAAK,OAAOT,SAASS,MAAM,KAAK;QACtF;QACA,MAAML;IACR;IAEA,MAAMU,OAAO,MAAMd,SAASO,IAAI;IAEhC,8BAA8B;IAC9B,IAAI,CAACO,KAAKC,aAAa,EAAE;QACvB,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAO;QACLD,eAAeD,KAAKC,aAAa;QACjC7B,UAAU4B,KAAK5B,QAAQ;IACzB;AACF;AAEA;;CAEC,GACD,SAAS+B,iBAAiBb,KAAc;IACtC,uDAAuD;IACvD,IAAIA,SAAS,OAAOA,UAAU,YAAY,eAAeA,OAAO;QAC9D,OAAOc,QAAQd,MAAMS,SAAS;IAChC;IAEA,yCAAyC;IACzC,OAAOM,IAAAA,+BAAkC,EAACf;AAC5C;AAEA;;CAEC,GACD,eAAegB,mBACbvC,SAAmE,EACnEwC,sBAA+C;IAS/C,MAAMC,YAAYC,KAAKC,GAAG;IAE1B,2CAA2C;IAC3C,MAAMC,gBAAgB5C,UAAUC,UAAU,YAAY4C,QACpD7C,UAAUE,aAAa,CAAC4C,IAAI,CAACC,CAAAA,MAAOA,eAAeF;IAErD,IAAI,CAACD,eAAe;QAClB,wCAAwC;QACxC,OAAO;YACLI,oBAAoBhD;QACtB;IACF;IAEA,IAAI;QACF,IAAIiD;QACJ,MAAMC,sBAAkF,EAAE;QAC1F,IAAIC;QACJ,MAAMC,yBAAmC,EAAE;QAE3C,qCAAqC;QACrC,IAAIpD,UAAUC,UAAU,YAAY4C,MAAM;YACxC,MAAMQ,iBAAiB,MAAMC,IAAAA,qCAAoB,EAACtD,UAAUC,UAAU,EAAEuC;YACxES,mBAAmBI;YACnBF,sBAAsBE,eAAeA,cAAc;QACrD,OAAO;YACLF,sBAAsBnD,UAAUC,UAAU;QAC5C;QAEA,yBAAyB;QACzB,IAAK,IAAIsD,IAAI,GAAGA,IAAIvD,UAAUE,aAAa,CAACsD,MAAM,EAAED,IAAK;YACvD,MAAME,QAAQzD,UAAUE,aAAa,CAACqD,EAAE;YACxC,IAAIE,iBAAiBZ,MAAM;gBACzB,MAAMQ,iBAAiB,MAAMC,IAAAA,qCAAoB,EAACG,OAAOjB;gBACzDU,oBAAoBQ,IAAI,CAACL;gBACzBD,uBAAuBM,IAAI,CAACL,eAAeA,cAAc;YAC3D,OAAO;gBACLD,uBAAuBM,IAAI,CAACD;YAC9B;QACF;QAEA,MAAME,sBAAsBjB,KAAKC,GAAG,KAAKF;QAEzC,OAAO;YACLO,oBAAoB;gBAClB/C,YAAYkD;gBACZjD,eAAekD;gBACfjD,SAASH,UAAUG,OAAO;YAC5B;YACAyD,wBAAwB;gBACtBX;gBACAC,qBAAqBA,oBAAoBM,MAAM,GAAG,IAAIN,sBAAsBW;gBAC5EF;YACF;QACF;IACF,EAAE,OAAOpC,OAAO;QACd,yCAAyC;QACzC,IAAIA,iBAAiBuC,gCAAyB,IAC1CvC,iBAAiBwC,wBAAiB,IAClCxC,iBAAiByC,6BAAsB,IACvCzC,iBAAiB0C,qCAAoB,IACrC1C,iBAAiB2C,oCAAmB,EAAE;YACxC,MAAM3C;QACR;QAEA,sBAAsB;QACtB,MAAM,IAAI0C,qCAAoB,CAC5B,4CACA1C,iBAAiBY,QAAQZ,QAAQ,IAAIY,MAAMgC,OAAO5C;IAEtD;AACF;AAEA;;CAEC,GACD,SAAS6C,sBACPpE,SAAiC,EACjCqE,aAAa,CAAC,EACdC,aAAqB,EACrBV,sBAIC;IAED,OAAO;QACL5D;QACAyC,WAAWC,KAAKC,GAAG;QACnB0B;QACAC;QACAV;IACF;AACF;AAQO,SAASpE,iBAAiB+E,SAAiC,CAAC,CAAC;IAClE,MAAMC,cAAcC,IAAAA,0BAAc;IAElC,oCAAoC;IACpC,MAAMC,eAAeC,IAAAA,cAAO,EAAC,IAAO,CAAA;YAClC,GAAGjF,cAAc;YACjB,GAAG6E,MAAM;QACX,CAAA,GAAI;QAACA;KAAO;IAEZ,0CAA0C;IAC1C,MAAMK,oBAAoBD,IAAAA,cAAO,EAAC;QAChC,IAAI;YACF,OAAOE,IAAAA,8CAA2B;QACpC,EAAE,OAAM;YACN,wCAAwC;YACxC,OAAO,IAAKC,CAAAA,QAAQ,6BAA4B,EAAEC,wBAAwB,CAAEP;QAC9E;IACF,GAAG;QAACA;KAAY;IAEhB,kCAAkC;IAClC,MAAMQ,0BAA0BL,IAAAA,cAAO,EAAC,IAAM,IAAIM,OAAuB,EAAE;IAE3E,8CAA8C;IAC9C,MAAMC,mBAAmBC,IAAAA,kBAAW,EAAC,OAAOnF;QAC1C,IAAI;YACF,yFAAyF;YACzF,MAAMoF,gBAAgBV,aAAaW,eAAe,GAAG;gBACnDC,aAAaZ,aAAaW,eAAe,CAACC,WAAW;gBACrDC,cAAcb,aAAaW,eAAe,CAACE,YAAY;gBACvDC,WAAWd,aAAaW,eAAe,CAACG,SAAS;gBACjDC,SAASf,aAAaW,eAAe,CAACK,kBAAkB;gBACxDC,qBAAqBjB,aAAaW,eAAe,CAACM,mBAAmB;YACvE,IAAI9B;YAEJ,MAAM+B,kBAAkB5F,UAAUG,OAAO,EAAEkF,kBAAkB;gBAC3DC,aAAatF,UAAUG,OAAO,CAACkF,eAAe,CAACC,WAAW;gBAC1DC,cAAcvF,UAAUG,OAAO,CAACkF,eAAe,CAACE,YAAY;gBAC5DC,WAAWxF,UAAUG,OAAO,CAACkF,eAAe,CAACG,SAAS;gBACtDC,SAASzF,UAAUG,OAAO,CAACkF,eAAe,CAACK,kBAAkB;gBAC7DC,qBAAqB3F,UAAUG,OAAO,CAACkF,eAAe,CAACM,mBAAmB;YAC5E,IAAI9B;YAEJ,wDAAwD;YACxD,MAAMrB,yBACJ4C,iBAAiBQ,kBAAkB;gBACjC,GAAGR,aAAa;gBAChB,GAAGQ,eAAe;YACpB,IAAI/B;YAEN,2BAA2B;YAC3B,MAAM,EAAEb,kBAAkB,EAAEY,sBAAsB,EAAE,GAAG,MAAMrB,mBAC3DvC,WACAwC;YAGF,uEAAuE;YACvE,MAAMqD,UAAUzB,sBACdpB,oBACA,GACAa,WACAD;YAGF,sCAAsC;YACtC,IAAIkC;YACJ,IAAIpB,aAAa5E,uBAAuB,EAAE;gBACxC,IAAI;oBACF,MAAMiG,oBAAoBnB,kBAAkBoB,qBAAqB,CAC/DhD,oBACA0B,aAAauB,gBAAgB;oBAE/BH,eAAeC,kBAAkBD,YAAY;oBAC7Cd,wBAAwBkB,GAAG,CAAClD,mBAAmB/C,UAAU,GAAG+C,mBAAmB9C,aAAa,CAACiG,IAAI,CAAC,KAAKL;oBAEvG,4CAA4C;oBAC5CD,QAAQC,YAAY,GAAGA;gBACzB,EAAE,OAAOvE,OAAO;oBACd6E,QAAQC,IAAI,CAAC,uCAAuC9E;gBACtD;YACF;YAEA,2CAA2C;YAC3C,IAAImD,aAAa4B,QAAQ,EAAE;gBACzB,MAAMC,cAAc,MAAM7B,aAAa4B,QAAQ,CAACtD;gBAChD,IAAIuD,aAAa;oBACf,OAAO;wBAAE,GAAGV,OAAO;wBAAE,GAAGU,WAAW;oBAAC;gBACtC;YACF;YAEA,OAAOV;QACT,EAAE,OAAOtE,OAAO;YACd,sEAAsE;YACtE,2DAA2D;YAC3D,IAAIsE;YAEJ,MAAMjD,gBAAgB5C,UAAUC,UAAU,YAAY4C,QACpD7C,UAAUE,aAAa,CAAC4C,IAAI,CAACC,CAAAA,MAAOA,eAAeF;YAErD,IAAID,eAAe;gBACjB,sEAAsE;gBACtEiD,UAAUzB,sBAAsBpE;YAClC,OAAO;gBACL,8CAA8C;gBAC9C6F,UAAUzB,sBAAsBpE;YAClC;YAEA,IAAI0E,aAAa4B,QAAQ,EAAE;gBACzB,IAAI;oBACF,MAAMC,cAAc,MAAM7B,aAAa4B,QAAQ,CAACtG;oBAChD,IAAIuG,aAAa;wBACfV,UAAU;4BAAE,GAAGA,OAAO;4BAAE,GAAGU,WAAW;wBAAC;oBACzC;gBACF,EAAE,OAAOC,eAAe;oBACtB,+DAA+D;oBAC/DJ,QAAQC,IAAI,CAAC,0CAA0CG;gBACzD;YACF;YAEA,4DAA4D;YAC5D,MAAMjF;QACR;IACF,GAAG;QAACmD;QAAcE;QAAmBI;KAAwB;IAE7D,MAAMyB,oBAAoBtB,IAAAA,kBAAW,EAAC,OACpClD,MACAjC,WACA6F;QAEA,mDAAmD;QACnD,MAAMC,eAAeD,QAAQC,YAAY;QACzC,IAAIA,gBAAgBpB,aAAa5E,uBAAuB,EAAE;YACxD,IAAI;gBACF8E,kBAAkB8B,wBAAwB,CAACZ,cAAc7D,MAAM4D;gBAE/D,oBAAoB;gBACpB,MAAMc,cAAc3G,UAAUC,UAAU,GAAGD,UAAUE,aAAa,CAACiG,IAAI,CAAC;gBACxEnB,wBAAwB4B,MAAM,CAACD;YACjC,EAAE,OAAOpF,OAAO;gBACd6E,QAAQC,IAAI,CAAC,yCAAyC9E;YACxD;QACF;QAEA,2DAA2D;QAC3D,IAAI;YACF,MAAMsF,IAAAA,+CAA4B,EAChCrC,aACAvC,MACAjC,WACA6F,SACAnB,aAAaoC,uBAAuB;QAExC,EAAE,OAAOvF,OAAO;YACd6E,QAAQC,IAAI,CAAC,8CAA8C9E;YAE3D,iCAAiC;YACjC,MAAMwF,QAAQC,UAAU,CAAC;gBACvBxC,YAAYyC,iBAAiB,CAAC;oBAC5BC,UAAU;wBAAC;qBAAgB;oBAC3BC,OAAO;gBACT;gBACA3C,YAAYyC,iBAAiB,CAAC;oBAC5BC,UAAU;wBAAC;qBAAY;oBACvBC,OAAO;gBACT;gBACA3C,YAAYyC,iBAAiB,CAAC;oBAC5BC,UAAU;wBAAC;qBAAc;oBACzBC,OAAO;gBACT;aACD;QACH;QAEA,wDAAwD;QACxD,IAAIzC,aAAa0C,SAAS,EAAE;YAC1B1C,aAAa0C,SAAS,CAACnF,MAAM4D,QAAQ7F,SAAS,EAAE6F;QAClD;IACF,GAAG;QAACnB;QAAcF;QAAaI;QAAmBI;KAAwB;IAE1E,MAAMqC,kBAAkBlC,IAAAA,kBAAW,EAAC,CAClC5D,OACAvB,WACA6F;QAEA,mDAAmD;QACnD,MAAMC,eAAeD,SAASC;QAC9B,IAAIA,gBAAgBpB,aAAa5E,uBAAuB,EAAE;YACxD,IAAI;gBACF8E,kBAAkB0C,wBAAwB,CAACxB,cAAcvE;gBAEzD,oBAAoB;gBACpB,MAAMoF,cAAc3G,UAAUC,UAAU,GAAGD,UAAUE,aAAa,CAACiG,IAAI,CAAC;gBACxEnB,wBAAwB4B,MAAM,CAACD;YACjC,EAAE,OAAOY,eAAe;gBACtBnB,QAAQC,IAAI,CAAC,yCAAyCkB;YACxD;QACF;QAEA,6CAA6C;QAC7C,MAAMC,kBAAkBC,IAAAA,kCAAmB,EAAClG,OAAO;YACjDmG,mBAAmB1H;YACnB2H,iBAAiB9B;YACjB+B,WAAW,IAAIlF,OAAOmF,WAAW;QACnC;QAEA,iDAAiD;QACjD,MAAMC,iBAAqC;YACzCvG,OAAOiG,gBAAgBO,WAAW;YAClCjG,SAAS0F,gBAAgBQ,gBAAgB;YACzCjG,MAAMyF,gBAAgBS,SAAS;YAC/BjG,WAAWwF,gBAAgBxF,SAAS;YACpC,mCAAmC;YACnCkG,UAAUV,gBAAgBU,QAAQ;YAClCC,UAAUX,gBAAgBW,QAAQ;YAClCC,iBAAiBZ,gBAAgBY,eAAe;QAClD;QAEA,6DAA6D;QAC7D,IAAI1D,aAAa2D,OAAO,IAAIxC,SAAS;YACnCnB,aAAa2D,OAAO,CAACP,gBAAgB9H,WAAW6F;QAClD;IACF,GAAG;QAACnB;QAAcE;QAAmBI;KAAwB;IAE7D,MAAMsD,oBAAoBnD,IAAAA,kBAAW,EAAC,CACpClD,MACAV,OACAvB,WACA6F;QAEA,iEAAiE;QACjE,IAAIiC,iBAA4C;QAEhD,IAAIvG,OAAO;YACT,MAAMiG,kBAAkBe,IAAAA,iCAAkB,EAAChH,OAAO;gBAChDmG,mBAAmB1H;gBACnB2H,iBAAiB9B;gBACjB2C,SAAS;gBACTZ,WAAW,IAAIlF,OAAOmF,WAAW;YACnC;YAEAC,iBAAiB;gBACfvG,OAAOiG,gBAAgBO,WAAW;gBAClCjG,SAAS0F,gBAAgBQ,gBAAgB;gBACzCjG,MAAMyF,gBAAgBS,SAAS;gBAC/BjG,WAAWwF,gBAAgBxF,SAAS;gBACpCkG,UAAUV,gBAAgBU,QAAQ;gBAClCC,UAAUX,gBAAgBW,QAAQ;gBAClCC,iBAAiBZ,gBAAgBY,eAAe;YAClD;QACF;QAEA,oDAAoD;QACpD,IAAIvC,SAAS;YACX,MAAMC,eAAeD,QAAQC,YAAY;YACzC,IAAIA,cAAc;gBAChB,MAAMa,cAAc3G,UAAUC,UAAU,GAAGD,UAAUE,aAAa,CAACiG,IAAI,CAAC;gBACxEnB,wBAAwB4B,MAAM,CAACD;YACjC;QACF;QAEA,+BAA+B;QAC/B,IAAIjC,aAAa+D,SAAS,IAAI5C,SAAS;YACrCnB,aAAa+D,SAAS,CAACxG,MAAM6F,gBAAgB9H,WAAW6F;QAC1D;IACF,GAAG;QAACnB;QAAcM;KAAwB;IAE1C,mDAAmD;IACnD0D,IAAAA,gBAAS,EAAC;QACR,OAAO;YACL,oEAAoE;YACpE1D,wBAAwB2D,OAAO,CAAC,CAAC7C,cAAca;gBAC7C,IAAI;oBACF/B,kBAAkB0C,wBAAwB,CAACxB,cAAc,IAAI3D,MAAM;gBACrE,EAAE,OAAOZ,OAAO;oBACd6E,QAAQC,IAAI,CAAC,mDAAmD9E;gBAClE;YACF;YACAyD,wBAAwB4D,KAAK;QAC/B;IACF,GAAG;QAAChE;QAAmBI;KAAwB;IAE/C,yBAAyB;IACzB,MAAM6D,iBAAiBlE,IAAAA,cAAO,EAAC,IAAO,CAAA;YACpCmE,YAAY/I;YAEZ,qBAAqB;YACrBgJ,OAAOrE,aAAa/E,WAAW,GAAG,CAACqJ,cAAsBzH;gBACvD,IAAIyH,gBAAgBtE,aAAa9E,UAAU,EAAE;oBAC3C,OAAO;gBACT;gBACA,OAAOwC,iBAAiBb;YAC1B,IAAI;YAEJ,4BAA4B;YAC5B0H,YAAY,CAACC;gBACX,OAAOxE,aAAa7E,iBAAiB,GAAGsJ,KAAKC,GAAG,CAAC,GAAGF;YACtD;YAEA,sBAAsB;YACtB5C,UAAUpB;YACVkC,WAAWX;YACX4B,SAAShB;YACToB,WAAWH;QACb,CAAA,GAAI;QAAC5D;QAAcQ;QAAkBuB;QAAmBY;QAAiBiB;KAAkB;IAE3F,2BAA2B;IAC3B,MAAMe,WAAWC,IAAAA,uBAAW,EAACT;IAE7B,wBAAwB;IACxB,OAAOlE,IAAAA,cAAO,EAAyB,IAAO,CAAA;YAC5C4E,QAAQF,SAASE,MAAM;YACvBC,aAAaH,SAASG,WAAW;YACjCvH,MAAMoH,SAASpH,IAAI;YACnBV,OAAO8H,SAAS9H,KAAK;YACrBkI,WAAWJ,SAASK,SAAS;YAC7BC,WAAWN,SAASM,SAAS;YAC7BC,SAASP,SAASO,OAAO;YACzBC,QAAQR,SAASQ,MAAM;YACvBjI,QAAQyH,SAASzH,MAAM,KAAK,YAAY,YAAYyH,SAASzH,MAAM;YACnEkI,OAAOT,SAASS,KAAK;YACrBjE,SAASwD,SAASxD,OAAO;QAC3B,CAAA,GAAI;QAACwD;KAAS;AAChB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "695825506e2763d0e4ca02795a19d24eea10e778"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bahv0ttb6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bahv0ttb6();
cov_bahv0ttb6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bahv0ttb6().s[1]++;
Object.defineProperty(exports, "useTryonMutation", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[0]++;
    cov_bahv0ttb6().s[2]++;
    return useTryonMutation;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_bahv0ttb6().s[3]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_bahv0ttb6().s[4]++, require("react"));
const _imageProcessing =
/* istanbul ignore next */
(cov_bahv0ttb6().s[5]++, require("../utils/imageProcessing"));
const _image =
/* istanbul ignore next */
(cov_bahv0ttb6().s[6]++, require("../../utils/image"));
const _errorHandling =
/* istanbul ignore next */
(cov_bahv0ttb6().s[7]++, require("../utils/errorHandling"));
const _optimisticUpdates =
/* istanbul ignore next */
(cov_bahv0ttb6().s[8]++, require("../utils/optimisticUpdates"));
const _cacheInvalidation =
/* istanbul ignore next */
(cov_bahv0ttb6().s[9]++, require("../utils/cacheInvalidation"));
/**
 * API endpoint for try-on requests
 */
const TRYON_API_ENDPOINT =
/* istanbul ignore next */
(cov_bahv0ttb6().s[10]++, '/api/tryon');
/**
 * Default configuration for the try-on mutation
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_bahv0ttb6().s[11]++, {
  enableRetry: true,
  maxRetries: 3,
  initialRetryDelay: 1000,
  enableOptimisticUpdates: false
});
/**
 * Mutation function that calls the try-on API
 */
async function tryonMutationFn(variables) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[1]++;
  const {
    modelImage,
    apparelImages,
    options
  } =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[12]++, variables);
  // Prepare request payload
  const payload =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[13]++, {
    modelImage,
    apparelImages,
    ...(
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[0][0]++, options?.metadata) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[0][1]++, {
      metadata: options.metadata
    }))
  });
  // Configure request options
  const requestInit =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[14]++, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  });
  // Add timeout if specified
  /* istanbul ignore next */
  cov_bahv0ttb6().s[15]++;
  if (options?.timeout) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[1][0]++;
    const controller =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[16]++, new AbortController());
    const timeoutId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[17]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[2]++;
      cov_bahv0ttb6().s[18]++;
      return controller.abort();
    }, options.timeout));
    /* istanbul ignore next */
    cov_bahv0ttb6().s[19]++;
    requestInit.signal = controller.signal;
    /* istanbul ignore next */
    cov_bahv0ttb6().s[20]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[21]++, await fetch(TRYON_API_ENDPOINT, requestInit));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[22]++;
      clearTimeout(timeoutId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[23]++;
      return handleApiResponse(response);
    } catch (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[24]++;
      clearTimeout(timeoutId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[25]++;
      throw error;
    }
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[1][1]++;
  }
  // Standard request without timeout
  const response =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[26]++, await fetch(TRYON_API_ENDPOINT, requestInit));
  /* istanbul ignore next */
  cov_bahv0ttb6().s[27]++;
  return handleApiResponse(response);
}
/**
 * Handle API response and convert to appropriate format
 */
async function handleApiResponse(response) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[3]++;
  cov_bahv0ttb6().s[28]++;
  if (!response.ok) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[2][0]++;
    const errorData =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[29]++, await response.json().catch(() => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[4]++;
      cov_bahv0ttb6().s[30]++;
      return {};
    }));
    const error =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[31]++, {
      error:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][0]++, errorData.error) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][1]++, `HTTP ${response.status}: ${response.statusText}`),
      details: errorData.details,
      code: errorData.code,
      status: response.status,
      retryable:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][0]++, response.status >= 500) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][1]++, response.status === 408) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][2]++, response.status === 429)
    });
    /* istanbul ignore next */
    cov_bahv0ttb6().s[32]++;
    throw error;
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[2][1]++;
  }
  const data =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[33]++, await response.json());
  // Validate response structure
  /* istanbul ignore next */
  cov_bahv0ttb6().s[34]++;
  if (!data.img_generated) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[5][0]++;
    cov_bahv0ttb6().s[35]++;
    throw new Error('Invalid API response: missing img_generated field');
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[5][1]++;
  }
  cov_bahv0ttb6().s[36]++;
  return {
    img_generated: data.img_generated,
    metadata: data.metadata
  };
}
/**
 * Determine if an error is retryable using comprehensive classification
 */
function isRetryableError(error) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[5]++;
  cov_bahv0ttb6().s[37]++;
  // First check if error has explicit retryable property
  if (
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][0]++, error) &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][1]++, typeof error === 'object') &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][2]++, 'retryable' in error)) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[6][0]++;
    cov_bahv0ttb6().s[38]++;
    return Boolean(error.retryable);
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[6][1]++;
  }
  // Use comprehensive error classification
  cov_bahv0ttb6().s[39]++;
  return (0, _errorHandling.isErrorRetryable)(error);
}
/**
 * Process image inputs if they are File objects
 */
async function processImageInputs(variables, imageProcessingOptions) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[40]++, Date.now());
  // Check if we have File objects to process
  const hasFileInputs =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[41]++,
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][0]++, variables.modelImage instanceof File) ||
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][1]++, variables.apparelImages.some(img => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[7]++;
    cov_bahv0ttb6().s[42]++;
    return img instanceof File;
  })));
  /* istanbul ignore next */
  cov_bahv0ttb6().s[43]++;
  if (!hasFileInputs) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[9][0]++;
    cov_bahv0ttb6().s[44]++;
    // All inputs are already base64 strings
    return {
      processedVariables: variables
    };
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[9][1]++;
  }
  cov_bahv0ttb6().s[45]++;
  try {
    let modelImageResult;
    const apparelImageResults =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[46]++, []);
    let processedModelImage;
    const processedApparelImages =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[47]++, []);
    // Process model image if it's a File
    /* istanbul ignore next */
    cov_bahv0ttb6().s[48]++;
    if (variables.modelImage instanceof File) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][0]++;
      const processedImage =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[49]++, await (0, _imageProcessing.processImageForTryon)(variables.modelImage, imageProcessingOptions));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[50]++;
      modelImageResult = processedImage;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[51]++;
      processedModelImage = processedImage.processedImage;
    } else {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][1]++;
      cov_bahv0ttb6().s[52]++;
      processedModelImage = variables.modelImage;
    }
    // Process apparel images
    /* istanbul ignore next */
    cov_bahv0ttb6().s[53]++;
    for (let i =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[54]++, 0); i < variables.apparelImages.length; i++) {
      const image =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[55]++, variables.apparelImages[i]);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[56]++;
      if (image instanceof File) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][0]++;
        const processedImage =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[57]++, await (0, _imageProcessing.processImageForTryon)(image, imageProcessingOptions));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[58]++;
        apparelImageResults.push(processedImage);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[59]++;
        processedApparelImages.push(processedImage.processedImage);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][1]++;
        cov_bahv0ttb6().s[60]++;
        processedApparelImages.push(image);
      }
    }
    const totalProcessingTime =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[61]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[62]++;
    return {
      processedVariables: {
        modelImage: processedModelImage,
        apparelImages: processedApparelImages,
        options: variables.options
      },
      imageProcessingResults: {
        modelImageResult,
        apparelImageResults: apparelImageResults.length > 0 ?
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][0]++, apparelImageResults) :
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][1]++, undefined),
        totalProcessingTime
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_bahv0ttb6().s[63]++;
    // Re-throw known image processing errors
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][0]++, error instanceof _image.FileTypeNotSupportedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][1]++, error instanceof _image.FileTooLargeError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][2]++, error instanceof _image.CompressionFailedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][3]++, error instanceof _imageProcessing.ImageProcessingError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][4]++, error instanceof _imageProcessing.ImageDimensionError)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[13][0]++;
      cov_bahv0ttb6().s[64]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[13][1]++;
    }
    // Wrap unknown errors
    cov_bahv0ttb6().s[65]++;
    throw new _imageProcessing.ImageProcessingError('Unexpected error during image processing', error instanceof Error ?
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][0]++, error) :
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][1]++, new Error(String(error))));
  }
}
/**
 * Create mutation context for lifecycle tracking
 */
function createMutationContext(variables, retryCount =
/* istanbul ignore next */
(cov_bahv0ttb6().b[16][0]++, 0), previousError, imageProcessingResults) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[8]++;
  cov_bahv0ttb6().s[66]++;
  return {
    variables,
    startTime: Date.now(),
    retryCount,
    previousError,
    imageProcessingResults
  };
}
function useTryonMutation(config =
/* istanbul ignore next */
(cov_bahv0ttb6().b[17][0]++, {})) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[9]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[67]++, (0, _reactquery.useQueryClient)());
  // Merge configuration with defaults
  const mergedConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[68]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[10]++;
    cov_bahv0ttb6().s[69]++;
    return {
      ...DEFAULT_CONFIG,
      ...config
    };
  }, [config]));
  // Get optimistic updates manager instance
  const optimisticManager =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[70]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[11]++;
    cov_bahv0ttb6().s[71]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[72]++;
      return (0, _optimisticUpdates.getOptimisticUpdatesManager)();
    } catch {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[73]++;
      // Initialize if not already initialized
      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);
    }
  }, [queryClient]));
  // Track active optimistic updates
  const activeOptimisticUpdates =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[74]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[12]++;
    cov_bahv0ttb6().s[75]++;
    return new Map();
  }, []));
  // Define lifecycle callbacks with useCallback
  const onMutateCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[76]++, (0, _react.useCallback)(async variables => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[13]++;
    cov_bahv0ttb6().s[77]++;
    try {
      // Extract image processing options from config and variables (variables take precedence)
      const configOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[78]++, mergedConfig.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][0]++, {
        targetWidth: mergedConfig.imageProcessing.targetWidth,
        targetHeight: mergedConfig.imageProcessing.targetHeight,
        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,
        quality: mergedConfig.imageProcessing.compressionQuality,
        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][1]++, undefined));
      const variableOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[79]++, variables.options?.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][0]++, {
        targetWidth: variables.options.imageProcessing.targetWidth,
        targetHeight: variables.options.imageProcessing.targetHeight,
        maxSizeKB: variables.options.imageProcessing.maxSizeKB,
        quality: variables.options.imageProcessing.compressionQuality,
        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][1]++, undefined));
      // Merge options with variable options taking precedence
      const imageProcessingOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[80]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][0]++, configOptions) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][1]++, variableOptions) ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][0]++, {
        ...configOptions,
        ...variableOptions
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][1]++, undefined));
      // Process images if needed
      const {
        processedVariables,
        imageProcessingResults
      } =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[81]++, await processImageInputs(variables, imageProcessingOptions));
      // Create context with processed variables and image processing results
      const context =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[82]++, createMutationContext(processedVariables, 0, undefined, imageProcessingResults));
      // Start optimistic updates if enabled
      let optimisticId;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[83]++;
      if (mergedConfig.enableOptimisticUpdates) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[22][0]++;
        cov_bahv0ttb6().s[84]++;
        try {
          const optimisticContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[85]++, optimisticManager.startOptimisticUpdate(processedVariables, mergedConfig.optimisticConfig));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[86]++;
          optimisticId = optimisticContext.optimisticId;
          /* istanbul ignore next */
          cov_bahv0ttb6().s[87]++;
          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);
          // Add optimistic ID to context for tracking
          /* istanbul ignore next */
          cov_bahv0ttb6().s[88]++;
          context.optimisticId = optimisticId;
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[89]++;
          console.warn('Failed to start optimistic updates:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[22][1]++;
      }
      // Call user-provided onMutate if available
      cov_bahv0ttb6().s[90]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[23][0]++;
        const userContext =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[91]++, await mergedConfig.onMutate(processedVariables));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[92]++;
        if (userContext) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[24][0]++;
          cov_bahv0ttb6().s[93]++;
          return {
            ...context,
            ...userContext
          };
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[24][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[23][1]++;
      }
      cov_bahv0ttb6().s[94]++;
      return context;
    } catch (error) {
      // If image processing fails, still allow user's onMutate to be called
      // The user's onMutate can decide how to handle the failure
      let context;
      const hasFileInputs =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[95]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][0]++, variables.modelImage instanceof File) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][1]++, variables.apparelImages.some(img => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[14]++;
        cov_bahv0ttb6().s[96]++;
        return img instanceof File;
      })));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[97]++;
      if (hasFileInputs) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][0]++;
        cov_bahv0ttb6().s[98]++;
        // Create context with File objects - user's onMutate must handle this
        context = createMutationContext(variables);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][1]++;
        cov_bahv0ttb6().s[99]++;
        // All inputs are base64 strings, safe to cast
        context = createMutationContext(variables);
      }
      /* istanbul ignore next */
      cov_bahv0ttb6().s[100]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[27][0]++;
        cov_bahv0ttb6().s[101]++;
        try {
          const userContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[102]++, await mergedConfig.onMutate(variables));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[103]++;
          if (userContext) {
            /* istanbul ignore next */
            cov_bahv0ttb6().b[28][0]++;
            cov_bahv0ttb6().s[104]++;
            context = {
              ...context,
              ...userContext
            };
          } else
          /* istanbul ignore next */
          {
            cov_bahv0ttb6().b[28][1]++;
          }
        } catch (onMutateError) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[105]++;
          // If onMutate also fails, prefer the original processing error
          console.warn('onMutate failed during error handling:', onMutateError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[27][1]++;
      }
      // Always re-throw the error so mutation fails appropriately
      cov_bahv0ttb6().s[106]++;
      throw error;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSuccessCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[107]++, (0, _react.useCallback)(async (data, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[15]++;
    // Complete optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[108]++, context.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[109]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[29][0]++;
      cov_bahv0ttb6().s[110]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[111]++;
        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[112]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[113]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (error) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[114]++;
        console.warn('Failed to complete optimistic update:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[29][1]++;
    }
    // Advanced cache invalidation with configurable strategies
    cov_bahv0ttb6().s[115]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[116]++;
      await (0, _cacheInvalidation.invalidateCacheAfterMutation)(queryClient, data, variables, context, mergedConfig.cacheInvalidationConfig);
    } catch (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[117]++;
      console.warn('Failed to invalidate cache after mutation:', error);
      // Fallback to basic invalidation
      /* istanbul ignore next */
      cov_bahv0ttb6().s[118]++;
      await Promise.allSettled([queryClient.invalidateQueries({
        queryKey: ['tryon-history'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['user-data'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['tryon-stats'],
        exact: false
      })]);
    }
    // Call user-provided onSuccess with processed variables
    /* istanbul ignore next */
    cov_bahv0ttb6().s[119]++;
    if (mergedConfig.onSuccess) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[31][0]++;
      cov_bahv0ttb6().s[120]++;
      mergedConfig.onSuccess(data, context.variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[31][1]++;
    }
  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]));
  const onErrorCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[121]++, (0, _react.useCallback)((error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[16]++;
    // Rollback optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[122]++, context?.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[123]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[32][0]++;
      cov_bahv0ttb6().s[124]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[125]++;
        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[126]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[127]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (rollbackError) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[128]++;
        console.warn('Failed to rollback optimistic update:', rollbackError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[32][1]++;
    }
    // Classify and log the error comprehensively
    const classifiedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[129]++, (0, _errorHandling.logAndClassifyError)(error, {
      mutationVariables: variables,
      mutationContext: context,
      timestamp: new Date().toISOString()
    }));
    // Format error for mutation system compatibility
    const formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[130]++, {
      error: classifiedError.userMessage,
      details: classifiedError.technicalMessage,
      code: classifiedError.errorCode,
      retryable: classifiedError.retryable,
      // Add classified error information
      category: classifiedError.category,
      severity: classifiedError.severity,
      recoveryActions: classifiedError.recoveryActions
    });
    // Call user-provided onError with enhanced error information
    /* istanbul ignore next */
    cov_bahv0ttb6().s[131]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][0]++, mergedConfig.onError) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[34][0]++;
      cov_bahv0ttb6().s[132]++;
      mergedConfig.onError(formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[34][1]++;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSettledCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[133]++, (0, _react.useCallback)((data, error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[17]++;
    // Format error with comprehensive classification if error exists
    let formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[134]++, null);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[135]++;
    if (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[36][0]++;
      const classifiedError =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[136]++, (0, _errorHandling.classifyTryonError)(error, {
        mutationVariables: variables,
        mutationContext: context,
        settled: true,
        timestamp: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[137]++;
      formattedError = {
        error: classifiedError.userMessage,
        details: classifiedError.technicalMessage,
        code: classifiedError.errorCode,
        retryable: classifiedError.retryable,
        category: classifiedError.category,
        severity: classifiedError.severity,
        recoveryActions: classifiedError.recoveryActions
      };
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[36][1]++;
    }
    // Final cleanup of any remaining optimistic updates
    cov_bahv0ttb6().s[138]++;
    if (context) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[37][0]++;
      const optimisticId =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[139]++, context.optimisticId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[140]++;
      if (optimisticId) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[38][0]++;
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[141]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[142]++;
        activeOptimisticUpdates.delete(trackingKey);
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[38][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[37][1]++;
    }
    // Call user-provided onSettled
    cov_bahv0ttb6().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][0]++, mergedConfig.onSettled) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[39][0]++;
      cov_bahv0ttb6().s[144]++;
      mergedConfig.onSettled(data, formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[39][1]++;
    }
  }, [mergedConfig, activeOptimisticUpdates]));
  // Cleanup effect for optimistic updates on unmount
  /* istanbul ignore next */
  cov_bahv0ttb6().s[145]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[18]++;
    cov_bahv0ttb6().s[146]++;
    return () => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[19]++;
      cov_bahv0ttb6().s[147]++;
      // Rollback any remaining optimistic updates when component unmounts
      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[20]++;
        cov_bahv0ttb6().s[148]++;
        try {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[149]++;
          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[150]++;
          console.warn('Failed to cleanup optimistic update on unmount:', error);
        }
      });
      /* istanbul ignore next */
      cov_bahv0ttb6().s[151]++;
      activeOptimisticUpdates.clear();
    };
  }, [optimisticManager, activeOptimisticUpdates]);
  // Mutation configuration
  const mutationConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[152]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[21]++;
    cov_bahv0ttb6().s[153]++;
    return {
      mutationFn: tryonMutationFn,
      // Custom retry logic
      retry: mergedConfig.enableRetry ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][0]++, (failureCount, error) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[22]++;
        cov_bahv0ttb6().s[154]++;
        if (failureCount >= mergedConfig.maxRetries) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[42][0]++;
          cov_bahv0ttb6().s[155]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[42][1]++;
        }
        cov_bahv0ttb6().s[156]++;
        return isRetryableError(error);
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][1]++, false),
      // Exponential backoff delay
      retryDelay: attemptIndex => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[23]++;
        cov_bahv0ttb6().s[157]++;
        return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);
      },
      // Lifecycle callbacks
      onMutate: onMutateCallback,
      onSuccess: onSuccessCallback,
      onError: onErrorCallback,
      onSettled: onSettledCallback
    };
  }, [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]));
  // Use React Query mutation
  const mutation =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[158]++, (0, _reactquery.useMutation)(mutationConfig));
  // Return hook interface
  /* istanbul ignore next */
  cov_bahv0ttb6().s[159]++;
  return (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[24]++;
    cov_bahv0ttb6().s[160]++;
    return {
      mutate: mutation.mutate,
      mutateAsync: mutation.mutateAsync,
      data: mutation.data,
      error: mutation.error,
      isLoading: mutation.isPending,
      isSuccess: mutation.isSuccess,
      isError: mutation.isError,
      isIdle: mutation.isIdle,
      status: mutation.status === 'pending' ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][0]++, 'loading') :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][1]++, mutation.status),
      reset: mutation.reset,
      context: mutation.context
    };
  }, [mutation]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,