e103f7eac5cd6b6b5364c4da10b8615e
/**
 * Image utility constants and helper functions for file processing
 * 
 * @example
 * ```typescript
 * import { fileToBase64, compressBase64, isImageFile } from './utils/image';
 * 
 * // Convert file to base64
 * try {
 *   const base64 = await fileToBase64(imageFile);
 *   const compressed = await compressBase64(base64, 512); // 512KB limit
 * } catch (error) {
 *   if (error instanceof FileTypeNotSupportedError) {
 *     console.log('Please select an image file');
 *   } else if (error instanceof FileTooLargeError) {
 *     console.log('File is too large');
 *   } else if (error instanceof CompressionFailedError) {
 *     console.log('Compression failed');
 *   }
 * }
 * ```
 */ /**
 * Type alias for base64 image strings (data URL format)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CompressionFailedError: function() {
        return CompressionFailedError;
    },
    FileTooLargeError: function() {
        return FileTooLargeError;
    },
    FileTypeNotSupportedError: function() {
        return FileTypeNotSupportedError;
    },
    IMG_SIZE_LIMIT_BYTES: function() {
        return IMG_SIZE_LIMIT_BYTES;
    },
    compressBase64: function() {
        return compressBase64;
    },
    fileToBase64: function() {
        return fileToBase64;
    },
    isImageFile: function() {
        return isImageFile;
    }
});
const IMG_SIZE_LIMIT_BYTES = 5 * 1024 * 1024; // 5 MB
class FileTypeNotSupportedError extends Error {
    constructor(message){
        super(message);
        this.name = 'FileTypeNotSupportedError';
    }
}
class FileTooLargeError extends Error {
    constructor(message){
        super(message);
        this.name = 'FileTooLargeError';
    }
}
class CompressionFailedError extends Error {
    constructor(message){
        super(message);
        this.name = 'CompressionFailedError';
    }
}
const isImageFile = (file)=>file.type.startsWith('image/');
async function fileToBase64(file) {
    if (!isImageFile(file)) throw new FileTypeNotSupportedError('Only image files are allowed.');
    if (file.size > IMG_SIZE_LIMIT_BYTES) throw new FileTooLargeError('Image exceeds 5 MB limit.');
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.onload = ()=>{
            const result = reader.result;
            resolve(result);
        };
        reader.onerror = ()=>reject(reader.error);
        reader.readAsDataURL(file);
    });
}
/**
 * Helper function to convert a Blob to base64 string
 * @param blob - The blob to convert
 * @returns Promise that resolves to the base64 string
 */ async function blobToBase64(blob) {
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.onload = ()=>{
            const result = reader.result;
            resolve(result);
        };
        reader.onerror = ()=>reject(reader.error);
        reader.readAsDataURL(blob);
    });
}
async function compressBase64(b64, maxSizeKB = 1024) {
    const byteLimit = maxSizeKB * 1024;
    // Early return if already under limit
    const base64Data = b64.split(',')[1];
    if (atob(base64Data).length <= byteLimit) {
        return b64;
    }
    // Create canvas and image for compression
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        throw new CompressionFailedError('Failed to get canvas context');
    }
    const img = new Image();
    return new Promise((resolve, reject)=>{
        img.onload = async ()=>{
            try {
                // Set canvas dimensions
                canvas.width = img.width;
                canvas.height = img.height;
                // Draw image to canvas
                ctx.drawImage(img, 0, 0);
                // Determine format (preserve alpha for PNG, use JPEG otherwise)
                const hasTransparency = b64.includes('image/png');
                const format = hasTransparency ? 'image/png' : 'image/jpeg';
                // Compression loop - more aggressive quality reduction
                let quality = 0.9;
                let compressed = b64;
                let attempts = 0;
                const maxAttempts = 15; // More attempts for better compression
                while(quality > 0.1 && attempts < maxAttempts){
                    try {
                        const blob = await new Promise((resolveBlob, rejectBlob)=>{
                            canvas.toBlob((blob)=>{
                                if (blob) resolveBlob(blob);
                                else rejectBlob(new Error('Failed to create blob'));
                            }, format, quality);
                        });
                        compressed = await blobToBase64(blob);
                        // Check if compressed size is under limit
                        const compressedData = compressed.split(',')[1];
                        if (atob(compressedData).length <= byteLimit) {
                            break;
                        }
                        quality -= 0.05; // Smaller steps for finer control
                        attempts++;
                    } catch  {
                        quality -= 0.05;
                        attempts++;
                        continue;
                    }
                }
                // If still too large, try reducing dimensions as last resort
                if (atob(compressed.split(',')[1]).length > byteLimit) {
                    // Calculate scale factor to reduce dimensions
                    const currentSize = atob(compressed.split(',')[1]).length;
                    const scaleFactor = Math.sqrt(byteLimit / currentSize) * 0.9; // 10% safety margin
                    if (scaleFactor < 0.5) {
                        throw new CompressionFailedError('Unable to compress image below limit');
                    }
                    // Resize canvas and try again
                    const newWidth = Math.floor(img.width * scaleFactor);
                    const newHeight = Math.floor(img.height * scaleFactor);
                    canvas.width = newWidth;
                    canvas.height = newHeight;
                    ctx.drawImage(img, 0, 0, newWidth, newHeight);
                    const resizedBlob = await new Promise((resolveBlob, rejectBlob)=>{
                        canvas.toBlob((blob)=>{
                            if (blob) resolveBlob(blob);
                            else rejectBlob(new Error('Failed to create resized blob'));
                        }, format, 0.8 // Use 80% quality for resized image
                        );
                    });
                    compressed = await blobToBase64(resizedBlob);
                    // Final check after resizing
                    const finalData = compressed.split(',')[1];
                    if (atob(finalData).length > byteLimit) {
                        throw new CompressionFailedError('Unable to compress image below limit even after resizing');
                    }
                }
                resolve(compressed);
            } catch (error) {
                reject(error);
            }
        };
        img.onerror = ()=>{
            reject(new CompressionFailedError('Failed to load image for compression'));
        };
        img.src = b64;
    });
} // Note: All functions and types are already exported above
 // This module provides a complete API for image processing utilities 

//# sourceMappingURL=data:application/json;base64,