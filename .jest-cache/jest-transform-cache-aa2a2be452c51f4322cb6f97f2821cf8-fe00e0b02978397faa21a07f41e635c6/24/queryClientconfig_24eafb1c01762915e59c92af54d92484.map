{"version":3,"names":["clearQueryCache","cov_2jrazq6h34","f","s","createApiQueryConfig","createImageProcessingQueryConfig","createMutationConfig","invalidateQueries","queryClient","handleQueryError","error","Error","b","code","_errortypes","createNetworkError","message","includes","createTimeoutError","name","timestamp","Date","toISOString","_reactquery","QueryClient","defaultOptions","queries","staleTime","_constants","QUERY_DEFAULTS","STALE_TIME","gcTime","CACHE_TIME","retry","failureCount","status","RETRY_COUNT","retryDelay","RETRY_DELAY","networkMode","refetchOnWindowFocus","refetchOnReconnect","mutations","MUTATION_DEFAULTS","enabled","refetchOnMount","options","queryKeys","forEach","queryKey","clear"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/queryClient.config.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\nimport { QUERY_DEFAULTS, MUTATION_DEFAULTS } from './constants';\nimport { createNetworkError, createTimeoutError, type BusinessLayerError } from '../types/error.types';\n\n// Error handler for React Query (utility function for future use)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst handleQueryError = (error: unknown): BusinessLayerError => {\n  if (error instanceof Error) {\n    // Check for network errors\n    if ('code' in error && error.code === 'NETWORK_ERROR') {\n      return createNetworkError(error.message);\n    }\n    \n    // Check for timeout errors\n    if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {\n      return createTimeoutError(error.message);\n    }\n    \n    // Return as-is if already a BusinessLayerError\n    if ('code' in error && 'timestamp' in error) {\n      return error as BusinessLayerError;\n    }\n  }\n  \n  // Default error handling\n  return {\n    name: 'BusinessLayerError',\n    message: error instanceof Error ? error.message : 'An unknown error occurred',\n    code: 'UNKNOWN_ERROR',\n    timestamp: new Date().toISOString(),\n  };\n};\n\n// Query client configuration\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: QUERY_DEFAULTS.STALE_TIME,\n      gcTime: QUERY_DEFAULTS.CACHE_TIME, // React Query v5 uses gcTime instead of cacheTime\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error && typeof error === 'object' && 'status' in error) {\n          const status = error.status as number;\n          if (status >= 400 && status < 500) {\n            return false;\n          }\n        }\n        \n        return failureCount < QUERY_DEFAULTS.RETRY_COUNT;\n      },\n      retryDelay: QUERY_DEFAULTS.RETRY_DELAY,\n      networkMode: 'online',\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: true,\n    },\n    mutations: {\n      retry: (failureCount, error) => {\n        // Don't retry mutations on 4xx errors\n        if (error && typeof error === 'object' && 'status' in error) {\n          const status = error.status as number;\n          if (status >= 400 && status < 500) {\n            return false;\n          }\n        }\n        \n        return failureCount < MUTATION_DEFAULTS.RETRY_COUNT;\n      },\n      retryDelay: MUTATION_DEFAULTS.RETRY_DELAY,\n      networkMode: 'online',\n    },\n  },\n});\n\n// Specialized query configurations for different use cases\nexport const createImageProcessingQueryConfig = (enabled = true) => ({\n  staleTime: QUERY_DEFAULTS.STALE_TIME,\n  gcTime: QUERY_DEFAULTS.CACHE_TIME,\n  retry: 1, // Less aggressive retry for image processing\n  enabled,\n  refetchOnMount: false,\n  refetchOnWindowFocus: false,\n});\n\nexport const createApiQueryConfig = (enabled = true) => ({\n  staleTime: QUERY_DEFAULTS.STALE_TIME,\n  gcTime: QUERY_DEFAULTS.CACHE_TIME,\n  retry: QUERY_DEFAULTS.RETRY_COUNT,\n  retryDelay: QUERY_DEFAULTS.RETRY_DELAY,\n  enabled,\n  refetchOnMount: true,\n  refetchOnWindowFocus: false,\n});\n\nexport const createMutationConfig = <TData, TVariables>(options?: {\n  onSuccess?: (data: TData, variables: TVariables) => void;\n  onError?: (error: BusinessLayerError, variables: TVariables) => void;\n}) => ({\n  retry: MUTATION_DEFAULTS.RETRY_COUNT,\n  retryDelay: MUTATION_DEFAULTS.RETRY_DELAY,\n  networkMode: 'online' as const,\n  ...options,\n});\n\n// Utility function to invalidate related queries\nexport const invalidateQueries = (queryKeys: string[][]) => {\n  queryKeys.forEach(queryKey => {\n    queryClient.invalidateQueries({ queryKey });\n  });\n};\n\n// Utility function to clear cache\nexport const clearQueryCache = () => {\n  queryClient.clear();\n};"],"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","ignoreList":[]}