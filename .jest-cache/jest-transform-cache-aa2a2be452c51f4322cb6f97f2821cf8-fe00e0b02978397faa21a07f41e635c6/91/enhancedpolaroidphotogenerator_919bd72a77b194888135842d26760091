2c69769e77ba514bbafa62062d467db9
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "EnhancedPolaroidPhotoGenerator", {
    enumerable: true,
    get: function() {
        return EnhancedPolaroidPhotoGenerator;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _utils = require("../../lib/utils");
const _react = require("react");
function EnhancedPolaroidPhotoGenerator({ className, onGenerationStart, onGenerationComplete, isGenerating = false, personImageUrl, garmentImageUrl, mockImageUrl = "/images/ScoredGarment.jpg", position = 'bottom' }) {
    const [progress, setProgress] = (0, _react.useState)(0);
    const [photoVisible, setPhotoVisible] = (0, _react.useState)(false);
    const [generatedImageUrl, setGeneratedImageUrl] = (0, _react.useState)(null);
    const [animationPhase, setAnimationPhase] = (0, _react.useState)('idle');
    const [polaroidVisible, setPolaroidVisible] = (0, _react.useState)(false);
    const progressRef = (0, _react.useRef)(null);
    const timeoutRef = (0, _react.useRef)(null);
    // Cleanup function to clear all timers
    const cleanupTimers = (0, _react.useCallback)(()=>{
        if (progressRef.current) {
            clearInterval(progressRef.current);
            progressRef.current = null;
        }
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
    }, []);
    // Reset state function
    const resetState = (0, _react.useCallback)(()=>{
        setProgress(0);
        setPhotoVisible(false);
        setGeneratedImageUrl(null);
        setAnimationPhase('idle');
        setPolaroidVisible(false);
        cleanupTimers();
    }, [
        cleanupTimers
    ]);
    const startGenerationSequence = (0, _react.useCallback)(()=>{
        // Reset state first
        resetState();
        // Show the polaroid sliding out from camera
        setPolaroidVisible(true);
        setAnimationPhase('processing');
        setProgress(0);
        if (onGenerationStart) {
            onGenerationStart();
        }
        // Determine which image to use
        const imageToUse = personImageUrl || garmentImageUrl || mockImageUrl;
        // Phase 1: Progress bar animation (0-100% over ~4 seconds)
        let currentProgress = 0;
        progressRef.current = setInterval(()=>{
            currentProgress += 2.5 // Faster progress to match test expectations
            ;
            setProgress(Math.min(currentProgress, 100));
            if (currentProgress >= 100) {
                if (progressRef.current) {
                    clearInterval(progressRef.current);
                    progressRef.current = null;
                }
                // Phase 2: Photo revelation (after progress completes)
                timeoutRef.current = setTimeout(()=>{
                    setAnimationPhase('revealing');
                    setGeneratedImageUrl(imageToUse);
                    // Call onGenerationComplete immediately when revealing starts
                    if (onGenerationComplete) {
                        onGenerationComplete(imageToUse);
                    }
                    // Start photo slide animation
                    timeoutRef.current = setTimeout(()=>{
                        setPhotoVisible(true);
                        // Phase 3: Complete after slide animation (1.4s later to match test timing)
                        timeoutRef.current = setTimeout(()=>{
                            setAnimationPhase('complete');
                        }, 1400);
                    }, 100);
                }, 500);
            }
        }, 100) // Faster interval to match test expectations
        ;
    }, [
        onGenerationStart,
        onGenerationComplete,
        personImageUrl,
        garmentImageUrl,
        mockImageUrl,
        resetState
    ]);
    // Handle isGenerating changes
    (0, _react.useEffect)(()=>{
        if (isGenerating) {
            if (animationPhase === 'idle') {
                startGenerationSequence();
            }
        } else {
            // Reset everything when isGenerating becomes false
            resetState();
        }
    }, [
        isGenerating,
        animationPhase,
        startGenerationSequence,
        resetState
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            cleanupTimers();
        };
    }, [
        cleanupTimers
    ]);
    const getPositionClasses = ()=>{
        switch(position){
            case 'center':
                return "absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2";
            case 'bottom':
            default:
                return "absolute left-1/2 bottom-0 transform -translate-x-1/2 translate-y-8";
        }
    };
    if (!polaroidVisible) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("z-50 transition-all duration-700 ease-out", getPositionClasses(), className),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: (0, _utils.cn)("relative bg-white border-2 border-black rounded-lg p-4 w-72 h-80 transition-all duration-500", "polaroid-shadow", polaroidVisible ? "animate-polaroidAppear" : "opacity-0 transform scale-95"),
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "relative w-full h-48 bg-gray-400 border border-gray-300 overflow-hidden rounded-sm",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: (0, _utils.cn)("absolute inset-0 transition-all duration-1000 z-10", animationPhase === 'processing' ? "photo-developing" : "", photoVisible ? "opacity-0" : "opacity-100 bg-gray-400")
                            }),
                            generatedImageUrl && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: (0, _utils.cn)("absolute inset-0 transition-all duration-1500 ease-out", photoVisible ? "transform translate-y-0 opacity-100" : "transform -translate-y-full opacity-0"),
                                style: {
                                    backgroundImage: `url(${generatedImageUrl})`,
                                    backgroundSize: 'cover',
                                    backgroundPosition: 'center'
                                }
                            }),
                            animationPhase === 'processing' && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "absolute inset-0 bg-gradient-to-t from-transparent via-white/10 to-transparent animate-pulse z-20"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "h-16 bg-white flex items-center justify-center",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "text-xs text-gray-600 font-mono tracking-wider",
                            children: [
                                animationPhase === 'idle' && "READY",
                                animationPhase === 'processing' && "PROCESSING...",
                                animationPhase === 'revealing' && "DEVELOPING...",
                                animationPhase === 'complete' && "SUS FIT COMPLETE"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "absolute bottom-3 left-4 right-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "h-1.5 bg-gray-200 rounded-full overflow-hidden border border-gray-300",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: (0, _utils.cn)("h-full bg-gradient-to-r from-[var(--color-susfit-pink-500)] via-[var(--color-susfit-teal-500)] to-[var(--color-susfit-green-500)] transition-all duration-200 ease-out rounded-full", animationPhase === 'processing' ? "progress-bar-animated" : ""),
                                    style: {
                                        width: `${progress}%`,
                                        transition: 'width 0.2s ease-out'
                                    }
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-xs text-gray-500 text-center mt-1 font-mono",
                                children: [
                                    Math.round(progress),
                                    "%"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute top-2 right-2 text-xs text-gray-400 font-mono",
                        children: "SUS FIT"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)("absolute -bottom-2 left-4 right-4 h-2 bg-black/20 rounded-full blur-sm transition-opacity duration-500", polaroidVisible ? "opacity-100" : "opacity-0")
            }),
            animationPhase === 'complete' && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute -top-8 left-1/2 transform -translate-x-1/2 animate-bounce",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-[var(--color-susfit-green-500)] text-black px-3 py-1 rounded-full text-xs font-bold border-2 border-black",
                    children: "✨ READY!"
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,