{"version":3,"names":["DEFAULT_TEXT_STYLE","cov_asqwn47bw","f","s","TextAlign","TextBaseline","TextOverlayRenderer","TextOverlayUtils","createTextOverlayRenderer","fontFamily","fontSize","fontWeight","fontStyle","color","textAlign","textBaseline","lineHeight","letterSpacing","opacity","textTransform","constructor","managedCanvas","canvas","ctx","context","applyTextTransform","text","transform","b","toUpperCase","toLowerCase","replace","l","buildFontString","style","applyTextStyle","font","globalAlpha","gradient","fillStyle","createTextGradient","outline","strokeStyle","lineWidth","width","canvasGradient","type","createLinearGradient","x1","y1","x2","y2","createRadialGradient","r1","r2","colors","forEach","stop","addColorStop","offset","wrapText","maxWidth","wrapOptions","enabled","words","split","lines","currentLine","word","testLine","metrics","measureText","push","breakWords","chars","charLine","char","testCharLine","position","transformedText","lineData","map","line","index","Math","max","y","totalHeight","length","anchor","x","boundingX","boundingY","height","lineCount","boundingBox","drawTextShadow","shadow","save","shadowColor","shadowOffsetX","offsetX","shadowOffsetY","offsetY","shadowBlur","blur","fillText","restore","drawTextDecoration","decoration","thickness","beginPath","underline","underlineY","moveTo","lineTo","overline","overlineY","lineThrough","lineThroughY","stroke","drawTextBackground","measurement","background","padding","borderRadius","drawRoundedRect","fill","fillRect","radius","quadraticCurveTo","closePath","renderText","config","wrap","rotation","translate","rotate","startX","startY","lineX","lineY","adjustedX","strokeText","clearText","clearRect","calculateOptimalFontSize","maxHeight","getContext","Error","testStyle","minSize","maxSize","floor","textHeight","createPresets","title","subtitle","body","caption","watermark"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/textOverlay.ts"],"sourcesContent":["// Text Overlay System for Canvas\n// Comprehensive text rendering with styling, positioning, and measurement\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\n\n/**\n * Text alignment options\n */\nexport enum TextAlign {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n  Start = 'start',\n  End = 'end'\n}\n\n/**\n * Text baseline options\n */\nexport enum TextBaseline {\n  Top = 'top',\n  Hanging = 'hanging',\n  Middle = 'middle',\n  Alphabetic = 'alphabetic',\n  Ideographic = 'ideographic',\n  Bottom = 'bottom'\n}\n\n/**\n * Text decoration styles\n */\nexport interface TextDecoration {\n  underline?: boolean;\n  overline?: boolean;\n  lineThrough?: boolean;\n  color?: string;\n  thickness?: number;\n}\n\n/**\n * Text shadow configuration\n */\nexport interface TextShadow {\n  color: string;\n  offsetX: number;\n  offsetY: number;\n  blur: number;\n}\n\n/**\n * Text outline/stroke configuration\n */\nexport interface TextOutline {\n  color: string;\n  width: number;\n}\n\n/**\n * Gradient text configuration\n */\nexport interface TextGradient {\n  type: 'linear' | 'radial';\n  colors: Array<{ offset: number; color: string }>;\n  x1?: number;\n  y1?: number;\n  x2?: number;\n  y2?: number;\n  r1?: number;\n  r2?: number;\n}\n\n/**\n * Comprehensive text styling options\n */\nexport interface TextStyle {\n  /** Font family */\n  fontFamily?: string;\n  /** Font size in pixels */\n  fontSize?: number;\n  /** Font weight */\n  fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\n  /** Font style */\n  fontStyle?: 'normal' | 'italic' | 'oblique';\n  /** Text color */\n  color?: string;\n  /** Text alignment */\n  textAlign?: TextAlign;\n  /** Text baseline */\n  textBaseline?: TextBaseline;\n  /** Line height multiplier */\n  lineHeight?: number;\n  /** Letter spacing in pixels */\n  letterSpacing?: number;\n  /** Text decoration */\n  decoration?: TextDecoration;\n  /** Text shadow */\n  shadow?: TextShadow;\n  /** Text outline/stroke */\n  outline?: TextOutline;\n  /** Gradient fill */\n  gradient?: TextGradient;\n  /** Global alpha/opacity */\n  opacity?: number;\n  /** Text transform */\n  textTransform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';\n}\n\n/**\n * Text positioning and layout options\n */\nexport interface TextPosition {\n  /** X coordinate */\n  x: number;\n  /** Y coordinate */\n  y: number;\n  /** Maximum width for text wrapping */\n  maxWidth?: number;\n  /** Maximum height for text overflow */\n  maxHeight?: number;\n  /** Padding around text */\n  padding?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /** Text rotation in radians */\n  rotation?: number;\n  /** Anchor point for positioning */\n  anchor?: {\n    x: 'left' | 'center' | 'right';\n    y: 'top' | 'middle' | 'bottom';\n  };\n}\n\n/**\n * Text wrapping configuration\n */\nexport interface TextWrapOptions {\n  /** Enable word wrapping */\n  enabled: boolean;\n  /** Break long words */\n  breakWords?: boolean;\n  /** Hyphenation character */\n  hyphenChar?: string;\n  /** Minimum characters before hyphenation */\n  minCharsBeforeHyphen?: number;\n}\n\n/**\n * Text measurement result\n */\nexport interface TextMeasurement {\n  /** Text width */\n  width: number;\n  /** Text height */\n  height: number;\n  /** Line height */\n  lineHeight: number;\n  /** Number of lines */\n  lineCount: number;\n  /** Individual line measurements */\n  lines: Array<{\n    text: string;\n    width: number;\n    y: number;\n  }>;\n  /** Bounding box */\n  boundingBox: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\n/**\n * Text overlay configuration\n */\nexport interface TextOverlayConfig {\n  /** Text content */\n  text: string;\n  /** Text styling */\n  style: TextStyle;\n  /** Text positioning */\n  position: TextPosition;\n  /** Text wrapping options */\n  wrap?: TextWrapOptions;\n  /** Background configuration */\n  background?: {\n    color?: string;\n    gradient?: TextGradient;\n    padding?: number;\n    borderRadius?: number;\n    opacity?: number;\n  };\n  /** Animation configuration */\n  animation?: {\n    type: 'none' | 'fadeIn' | 'slideIn' | 'typewriter' | 'pulse';\n    duration?: number;\n    delay?: number;\n    easing?: (t: number) => number;\n  };\n}\n\n/**\n * Default text style\n */\nexport const DEFAULT_TEXT_STYLE: Required<Omit<TextStyle, 'decoration' | 'shadow' | 'outline' | 'gradient'>> = {\n  fontFamily: 'Arial, sans-serif',\n  fontSize: 16,\n  fontWeight: 'normal',\n  fontStyle: 'normal',\n  color: '#000000',\n  textAlign: TextAlign.Left,\n  textBaseline: TextBaseline.Top,\n  lineHeight: 1.2,\n  letterSpacing: 0,\n  opacity: 1,\n  textTransform: 'none'\n};\n\n/**\n * Text overlay renderer class\n */\nexport class TextOverlayRenderer {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(managedCanvas: ManagedCanvas) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n  }\n\n  /**\n   * Apply text transform\n   */\n  private applyTextTransform(text: string, transform: TextStyle['textTransform']): string {\n    switch (transform) {\n      case 'uppercase':\n        return text.toUpperCase();\n      case 'lowercase':\n        return text.toLowerCase();\n      case 'capitalize':\n        return text.replace(/\\b\\w/g, l => l.toUpperCase());\n      default:\n        return text;\n    }\n  }\n\n  /**\n   * Build font string from style\n   */\n  private buildFontString(style: TextStyle): string {\n    const fontStyle = style.fontStyle || DEFAULT_TEXT_STYLE.fontStyle;\n    const fontWeight = style.fontWeight || DEFAULT_TEXT_STYLE.fontWeight;\n    const fontSize = style.fontSize || DEFAULT_TEXT_STYLE.fontSize;\n    const fontFamily = style.fontFamily || DEFAULT_TEXT_STYLE.fontFamily;\n    \n    return `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n  }\n\n  /**\n   * Apply text styling to context\n   */\n  private applyTextStyle(style: TextStyle): void {\n    this.ctx.font = this.buildFontString(style);\n    this.ctx.textAlign = style.textAlign || DEFAULT_TEXT_STYLE.textAlign;\n    this.ctx.textBaseline = style.textBaseline || DEFAULT_TEXT_STYLE.textBaseline;\n    this.ctx.globalAlpha = style.opacity || DEFAULT_TEXT_STYLE.opacity;\n\n    // Handle gradient fill\n    if (style.gradient) {\n      this.ctx.fillStyle = this.createTextGradient(style.gradient);\n    } else {\n      this.ctx.fillStyle = style.color || DEFAULT_TEXT_STYLE.color;\n    }\n\n    // Handle outline\n    if (style.outline) {\n      this.ctx.strokeStyle = style.outline.color;\n      this.ctx.lineWidth = style.outline.width;\n    }\n  }\n\n  /**\n   * Create gradient for text\n   */\n  private createTextGradient(gradient: TextGradient): CanvasGradient {\n    let canvasGradient: CanvasGradient;\n\n    if (gradient.type === 'linear') {\n      canvasGradient = this.ctx.createLinearGradient(\n        gradient.x1 || 0,\n        gradient.y1 || 0,\n        gradient.x2 || 100,\n        gradient.y2 || 0\n      );\n    } else {\n      canvasGradient = this.ctx.createRadialGradient(\n        gradient.x1 || 0,\n        gradient.y1 || 0,\n        gradient.r1 || 0,\n        gradient.x2 || 0,\n        gradient.y2 || 0,\n        gradient.r2 || 100\n      );\n    }\n\n    gradient.colors.forEach(stop => {\n      canvasGradient.addColorStop(stop.offset, stop.color);\n    });\n\n    return canvasGradient;\n  }\n\n  /**\n   * Wrap text to fit within specified width\n   */\n  private wrapText(text: string, maxWidth: number, style: TextStyle, wrapOptions?: TextWrapOptions): string[] {\n    if (!wrapOptions?.enabled || !maxWidth) {\n      return [text];\n    }\n\n    this.applyTextStyle(style);\n    const words = text.split(' ');\n    const lines: string[] = [];\n    let currentLine = '';\n\n    for (const word of words) {\n      const testLine = currentLine + (currentLine ? ' ' : '') + word;\n      const metrics = this.ctx.measureText(testLine);\n      \n      if (metrics.width > maxWidth && currentLine) {\n        lines.push(currentLine);\n        currentLine = word;\n        \n        // Handle long words\n        if (wrapOptions.breakWords && this.ctx.measureText(currentLine).width > maxWidth) {\n          const chars = currentLine.split('');\n          let charLine = '';\n          \n          for (const char of chars) {\n            const testCharLine = charLine + char;\n            if (this.ctx.measureText(testCharLine).width > maxWidth && charLine) {\n              lines.push(charLine);\n              charLine = char;\n            } else {\n              charLine = testCharLine;\n            }\n          }\n          currentLine = charLine;\n        }\n      } else {\n        currentLine = testLine;\n      }\n    }\n\n    if (currentLine) {\n      lines.push(currentLine);\n    }\n\n    return lines;\n  }\n\n  /**\n   * Measure text dimensions\n   */\n  measureText(text: string, style: TextStyle, position: TextPosition, wrapOptions?: TextWrapOptions): TextMeasurement {\n    this.applyTextStyle(style);\n    \n    const transformedText = this.applyTextTransform(text, style.textTransform);\n    const lines = this.wrapText(transformedText, position.maxWidth || 0, style, wrapOptions);\n    const lineHeight = (style.fontSize || DEFAULT_TEXT_STYLE.fontSize) * (style.lineHeight || DEFAULT_TEXT_STYLE.lineHeight);\n    \n    let maxWidth = 0;\n    const lineData = lines.map((line, index) => {\n      const metrics = this.ctx.measureText(line);\n      maxWidth = Math.max(maxWidth, metrics.width);\n      \n      return {\n        text: line,\n        width: metrics.width,\n        y: index * lineHeight\n      };\n    });\n\n    const totalHeight = lines.length * lineHeight;\n    \n    // Calculate bounding box based on anchor\n    const anchor = position.anchor || { x: 'left', y: 'top' };\n    let boundingX = position.x;\n    let boundingY = position.y;\n    \n    if (anchor.x === 'center') {\n      boundingX -= maxWidth / 2;\n    } else if (anchor.x === 'right') {\n      boundingX -= maxWidth;\n    }\n    \n    if (anchor.y === 'middle') {\n      boundingY -= totalHeight / 2;\n    } else if (anchor.y === 'bottom') {\n      boundingY -= totalHeight;\n    }\n\n    return {\n      width: maxWidth,\n      height: totalHeight,\n      lineHeight,\n      lineCount: lines.length,\n      lines: lineData,\n      boundingBox: {\n        x: boundingX,\n        y: boundingY,\n        width: maxWidth,\n        height: totalHeight\n      }\n    };\n  }\n\n  /**\n   * Draw text shadow\n   */\n  private drawTextShadow(text: string, x: number, y: number, shadow: TextShadow): void {\n    this.ctx.save();\n    this.ctx.shadowColor = shadow.color;\n    this.ctx.shadowOffsetX = shadow.offsetX;\n    this.ctx.shadowOffsetY = shadow.offsetY;\n    this.ctx.shadowBlur = shadow.blur;\n    this.ctx.fillText(text, x, y);\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw text decoration (underline, overline, strikethrough)\n   */\n  private drawTextDecoration(text: string, x: number, y: number, width: number, style: TextStyle): void {\n    if (!style.decoration) return;\n\n    const fontSize = style.fontSize || DEFAULT_TEXT_STYLE.fontSize;\n    const thickness = style.decoration.thickness || 1;\n    const color = style.decoration.color || style.color || DEFAULT_TEXT_STYLE.color;\n\n    this.ctx.save();\n    this.ctx.strokeStyle = color;\n    this.ctx.lineWidth = thickness;\n    this.ctx.beginPath();\n\n    if (style.decoration.underline) {\n      const underlineY = y + fontSize * 0.1;\n      this.ctx.moveTo(x, underlineY);\n      this.ctx.lineTo(x + width, underlineY);\n    }\n\n    if (style.decoration.overline) {\n      const overlineY = y - fontSize * 0.8;\n      this.ctx.moveTo(x, overlineY);\n      this.ctx.lineTo(x + width, overlineY);\n    }\n\n    if (style.decoration.lineThrough) {\n      const lineThroughY = y - fontSize * 0.3;\n      this.ctx.moveTo(x, lineThroughY);\n      this.ctx.lineTo(x + width, lineThroughY);\n    }\n\n    this.ctx.stroke();\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw background for text\n   */\n  private drawTextBackground(measurement: TextMeasurement, background: NonNullable<TextOverlayConfig['background']>): void {\n    const padding = background.padding || 0;\n    const x = measurement.boundingBox.x - padding;\n    const y = measurement.boundingBox.y - padding;\n    const width = measurement.boundingBox.width + padding * 2;\n    const height = measurement.boundingBox.height + padding * 2;\n\n    this.ctx.save();\n    this.ctx.globalAlpha = background.opacity || 1;\n\n    if (background.gradient) {\n      this.ctx.fillStyle = this.createTextGradient(background.gradient);\n    } else {\n      this.ctx.fillStyle = background.color || 'rgba(255, 255, 255, 0.8)';\n    }\n\n    if (background.borderRadius) {\n      this.drawRoundedRect(x, y, width, height, background.borderRadius);\n      this.ctx.fill();\n    } else {\n      this.ctx.fillRect(x, y, width, height);\n    }\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Draw rounded rectangle\n   */\n  private drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): void {\n    this.ctx.beginPath();\n    this.ctx.moveTo(x + radius, y);\n    this.ctx.lineTo(x + width - radius, y);\n    this.ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    this.ctx.lineTo(x + width, y + height - radius);\n    this.ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    this.ctx.lineTo(x + radius, y + height);\n    this.ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    this.ctx.lineTo(x, y + radius);\n    this.ctx.quadraticCurveTo(x, y, x + radius, y);\n    this.ctx.closePath();\n  }\n\n  /**\n   * Render text overlay\n   */\n  renderText(config: TextOverlayConfig): TextMeasurement {\n    const { text, style, position, wrap, background } = config;\n    \n    this.ctx.save();\n    \n    // Apply rotation if specified\n    if (position.rotation) {\n      this.ctx.translate(position.x, position.y);\n      this.ctx.rotate(position.rotation);\n      this.ctx.translate(-position.x, -position.y);\n    }\n\n    // Measure text\n    const measurement = this.measureText(text, style, position, wrap);\n\n    // Draw background if specified\n    if (background) {\n      this.drawTextBackground(measurement, background);\n    }\n\n    // Apply text styling\n    this.applyTextStyle(style);\n\n    // Calculate starting position based on anchor\n    const anchor = position.anchor || { x: 'left', y: 'top' };\n    let startX = position.x;\n    let startY = position.y;\n\n    if (anchor.x === 'center') {\n      startX -= measurement.width / 2;\n    } else if (anchor.x === 'right') {\n      startX -= measurement.width;\n    }\n\n    if (anchor.y === 'middle') {\n      startY -= measurement.height / 2;\n    } else if (anchor.y === 'bottom') {\n      startY -= measurement.height;\n    }\n\n    // Draw each line\n    measurement.lines.forEach((line, index) => {\n      const lineX = startX;\n      const lineY = startY + line.y;\n\n      // Adjust line position based on text alignment\n      let adjustedX = lineX;\n      if (style.textAlign === TextAlign.Center) {\n        adjustedX = startX + (measurement.width - line.width) / 2;\n      } else if (style.textAlign === TextAlign.Right) {\n        adjustedX = startX + measurement.width - line.width;\n      }\n\n      // Draw shadow first if specified\n      if (style.shadow) {\n        this.drawTextShadow(line.text, adjustedX, lineY, style.shadow);\n      }\n\n      // Draw text outline if specified\n      if (style.outline) {\n        this.ctx.strokeText(line.text, adjustedX, lineY);\n      }\n\n      // Draw main text\n      this.ctx.fillText(line.text, adjustedX, lineY);\n\n      // Draw text decoration if specified\n      if (style.decoration) {\n        this.drawTextDecoration(line.text, adjustedX, lineY, line.width, style);\n      }\n    });\n\n    this.ctx.restore();\n    return measurement;\n  }\n\n  /**\n   * Clear text from specific area\n   */\n  clearText(measurement: TextMeasurement, padding: number = 0): void {\n    const { x, y, width, height } = measurement.boundingBox;\n    this.ctx.clearRect(\n      x - padding,\n      y - padding,\n      width + padding * 2,\n      height + padding * 2\n    );\n  }\n}\n\n/**\n * Text overlay utilities\n */\nexport class TextOverlayUtils {\n  /**\n   * Calculate optimal font size to fit text in area\n   */\n  static calculateOptimalFontSize(\n    text: string,\n    maxWidth: number,\n    maxHeight: number,\n    style: TextStyle,\n    canvas: HTMLCanvasElement\n  ): number {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error('Could not get canvas context');\n\n    let fontSize = style.fontSize || 16;\n    let testStyle = { ...style, fontSize };\n    \n    // Binary search for optimal font size\n    let minSize = 1;\n    let maxSize = 200;\n\n    while (minSize < maxSize - 1) {\n      fontSize = Math.floor((minSize + maxSize) / 2);\n      testStyle.fontSize = fontSize;\n      \n      ctx.font = `${testStyle.fontStyle || 'normal'} ${testStyle.fontWeight || 'normal'} ${fontSize}px ${testStyle.fontFamily || 'Arial'}`;\n      const metrics = ctx.measureText(text);\n      const textHeight = fontSize * (testStyle.lineHeight || 1.2);\n\n      if (metrics.width <= maxWidth && textHeight <= maxHeight) {\n        minSize = fontSize;\n      } else {\n        maxSize = fontSize;\n      }\n    }\n\n    return minSize;\n  }\n\n  /**\n   * Create text preset configurations\n   */\n  static createPresets() {\n    return {\n      title: {\n        style: {\n          ...DEFAULT_TEXT_STYLE,\n          fontSize: 32,\n          fontWeight: 'bold',\n          color: '#2c3e50'\n        }\n      },\n      subtitle: {\n        style: {\n          ...DEFAULT_TEXT_STYLE,\n          fontSize: 24,\n          fontWeight: '600',\n          color: '#34495e'\n        }\n      },\n      body: {\n        style: {\n          ...DEFAULT_TEXT_STYLE,\n          fontSize: 16,\n          color: '#2c3e50',\n          lineHeight: 1.5\n        }\n      },\n      caption: {\n        style: {\n          ...DEFAULT_TEXT_STYLE,\n          fontSize: 12,\n          color: '#7f8c8d',\n          fontStyle: 'italic'\n        }\n      },\n      watermark: {\n        style: {\n          ...DEFAULT_TEXT_STYLE,\n          fontSize: 14,\n          color: 'rgba(255, 255, 255, 0.7)',\n          shadow: {\n            color: 'rgba(0, 0, 0, 0.3)',\n            offsetX: 1,\n            offsetY: 1,\n            blur: 2\n          }\n        }\n      }\n    };\n  }\n}\n\n/**\n * Factory function to create text overlay renderer\n */\nexport function createTextOverlayRenderer(managedCanvas: ManagedCanvas): TextOverlayRenderer {\n  return new TextOverlayRenderer(managedCanvas);\n}"],"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","ignoreList":[]}