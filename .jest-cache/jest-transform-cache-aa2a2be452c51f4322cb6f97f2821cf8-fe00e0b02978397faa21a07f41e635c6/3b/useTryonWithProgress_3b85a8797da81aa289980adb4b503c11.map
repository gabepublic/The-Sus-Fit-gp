{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonWithProgress.ts"],"sourcesContent":["// Try-On Hook with Progress Tracking\n// Combines mutation, optimistic updates, and progress tracking for easy component integration\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { useTryonMutation } from '../mutations/useTryonMutation';\nimport { useOptimisticUpdates } from './useOptimisticUpdates';\nimport type {\n  TryonMutationVariables,\n  TryonMutationResponse,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\n\n/**\n * Configuration for the try-on with progress hook\n */\nexport interface UseTryonWithProgressConfig extends UseTryonMutationConfig {\n  /** Whether to automatically start optimistic updates */\n  autoOptimistic?: boolean;\n  /** Default optimistic configuration */\n  defaultOptimisticConfig?: {\n    showPreview?: boolean;\n    updateHistory?: boolean;\n    showProgress?: boolean;\n    previewPlaceholder?: string;\n    estimatedProcessingTime?: number;\n  };\n  /** Default cache invalidation configuration */\n  defaultCacheConfig?: {\n    invalidateHistory?: boolean;\n    invalidateUserData?: boolean;\n    invalidateStats?: boolean;\n    invalidateTags?: boolean;\n    preloadRelated?: boolean;\n    userContext?: {\n      userId?: string;\n      tags?: string[];\n    };\n  };\n}\n\n/**\n * Return type for the try-on with progress hook\n */\nexport interface UseTryonWithProgressReturn {\n  /** Execute try-on mutation with automatic progress tracking */\n  executeTryon: (variables: TryonMutationVariables) => Promise<TryonMutationResponse>;\n  /** Execute try-on mutation synchronously (fire and forget) */\n  executeTryonSync: (variables: TryonMutationVariables) => void;\n  /** Current mutation result */\n  data: TryonMutationResponse | undefined;\n  /** Current error */\n  error: unknown;\n  /** Whether mutation is loading */\n  isLoading: boolean;\n  /** Whether mutation succeeded */\n  isSuccess: boolean;\n  /** Whether mutation failed */\n  isError: boolean;\n  /** Whether mutation is idle */\n  isIdle: boolean;\n  /** Current mutation status */\n  status: 'idle' | 'loading' | 'error' | 'success';\n  /** Reset mutation state */\n  reset: () => void;\n  /** Current optimistic update ID */\n  currentOptimisticId: string | null;\n  /** Whether optimistic updates are active */\n  hasActiveOptimistic: boolean;\n  /** Start optimistic update manually */\n  startOptimistic: (variables: TryonMutationVariables) => string;\n  /** Complete optimistic update manually */\n  completeOptimistic: (optimisticId: string, result: TryonMutationResponse) => void;\n  /** Rollback optimistic update manually */\n  rollbackOptimistic: (optimisticId: string, error?: unknown) => void;\n  /** Active optimistic updates */\n  activeOptimisticUpdates: any[];\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_PROGRESS_CONFIG: Required<Pick<UseTryonWithProgressConfig, 'autoOptimistic'>> = {\n  autoOptimistic: true\n};\n\n/**\n * Hook that combines try-on mutation with progress tracking and optimistic updates\n */\nexport function useTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): UseTryonWithProgressReturn {\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_PROGRESS_CONFIG,\n    enableOptimisticUpdates: config.autoOptimistic !== false,\n    optimisticConfig: {\n      showPreview: true,\n      updateHistory: true,\n      showProgress: true,\n      estimatedProcessingTime: 8000,\n      ...config.defaultOptimisticConfig\n    },\n    cacheInvalidationConfig: {\n      invalidateHistory: true,\n      invalidateUserData: true,\n      invalidateStats: true,\n      invalidateTags: true,\n      preloadRelated: true,\n      ...config.defaultCacheConfig\n    },\n    ...config\n  }), [config]);\n\n  const [currentOptimisticId, setCurrentOptimisticId] = useState<string | null>(null);\n\n  // Initialize mutation hook with optimistic updates enabled\n  const mutation = useTryonMutation(mergedConfig);\n\n  // Initialize optimistic updates hook\n  const optimisticUpdates = useOptimisticUpdates({\n    enabled: mergedConfig.enableOptimisticUpdates\n  });\n\n  // Enhanced execute function with automatic progress tracking\n  const executeTryon = useCallback(async (variables: TryonMutationVariables): Promise<TryonMutationResponse> => {\n    let optimisticId: string | null = null;\n\n    try {\n      // Start optimistic updates if enabled\n      if (mergedConfig.enableOptimisticUpdates) {\n        optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n        setCurrentOptimisticId(optimisticId);\n      }\n\n      // Execute mutation\n      const result = await mutation.mutateAsync(variables);\n\n      // Complete optimistic updates if they were started\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.completeOptimistic(optimisticId, result);\n        setCurrentOptimisticId(null);\n      }\n\n      return result;\n    } catch (error) {\n      // Rollback optimistic updates on error\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.rollbackOptimistic(optimisticId, error);\n        setCurrentOptimisticId(null);\n      }\n      throw error;\n    }\n  }, [mutation, optimisticUpdates, mergedConfig]);\n\n  // Sync version that doesn't return a promise\n  const executeTryonSync = useCallback((variables: TryonMutationVariables): void => {\n    executeTryon(variables).catch(error => {\n      console.error('Try-on execution failed:', error);\n    });\n  }, [executeTryon]);\n\n  // Manual optimistic update controls\n  const startOptimistic = useCallback((variables: TryonMutationVariables): string => {\n    const optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n    setCurrentOptimisticId(optimisticId);\n    return optimisticId;\n  }, [optimisticUpdates, mergedConfig.optimisticConfig]);\n\n  const completeOptimistic = useCallback((optimisticId: string, result: TryonMutationResponse) => {\n    optimisticUpdates.completeOptimistic(optimisticId, result);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  const rollbackOptimistic = useCallback((optimisticId: string, error?: unknown) => {\n    optimisticUpdates.rollbackOptimistic(optimisticId, error);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  // Derived state\n  const hasActiveOptimistic = Boolean(currentOptimisticId) || optimisticUpdates.activeUpdates.length > 0;\n\n  return {\n    // Execution methods\n    executeTryon,\n    executeTryonSync,\n    \n    // Mutation state\n    data: mutation.data,\n    error: mutation.error,\n    isLoading: mutation.isLoading,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status,\n    reset: mutation.reset,\n    \n    // Optimistic updates state\n    currentOptimisticId,\n    hasActiveOptimistic,\n    activeOptimisticUpdates: optimisticUpdates.activeUpdates,\n    \n    // Manual optimistic controls\n    startOptimistic,\n    completeOptimistic,\n    rollbackOptimistic\n  };\n}\n\n/**\n * Simplified hook for basic try-on with progress (most common use case)\n */\nexport function useSimpleTryonWithProgress(\n  options: {\n    userId?: string;\n    tags?: string[];\n    estimatedProcessingTime?: number;\n    showProgress?: boolean;\n  } = {}\n): Pick<UseTryonWithProgressReturn, 'executeTryon' | 'isLoading' | 'currentOptimisticId' | 'error' | 'data'> {\n  const config: UseTryonWithProgressConfig = {\n    defaultOptimisticConfig: {\n      showProgress: options.showProgress !== false,\n      estimatedProcessingTime: options.estimatedProcessingTime || 8000\n    },\n    defaultCacheConfig: {\n      userContext: {\n        userId: options.userId,\n        tags: options.tags\n      }\n    }\n  };\n\n  const {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  } = useTryonWithProgress(config);\n\n  return {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  };\n}\n\n/**\n * Hook for batch try-on operations with progress tracking\n */\nexport function useBatchTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): {\n  executeBatch: (variablesList: TryonMutationVariables[]) => Promise<TryonMutationResponse[]>;\n  batchProgress: {\n    total: number;\n    completed: number;\n    failed: number;\n    inProgress: number;\n    progressPercentage: number;\n  };\n  activeBatchIds: string[];\n  cancelBatch: () => void;\n} {\n  const [activeBatchIds, setActiveBatchIds] = useState<string[]>([]);\n  const [batchResults, setBatchResults] = useState<{ success: number; failed: number; total: number }>({\n    success: 0,\n    failed: 0,\n    total: 0\n  });\n\n  const tryonWithProgress = useTryonWithProgress(config);\n\n  const executeBatch = useCallback(async (variablesList: TryonMutationVariables[]): Promise<TryonMutationResponse[]> => {\n    setBatchResults({ success: 0, failed: 0, total: variablesList.length });\n    const batchIds: string[] = [];\n\n    try {\n      const results = await Promise.allSettled(\n        variablesList.map(async (variables) => {\n          const optimisticId = tryonWithProgress.startOptimistic(variables);\n          batchIds.push(optimisticId);\n          setActiveBatchIds(prev => [...prev, optimisticId]);\n\n          try {\n            const result = await tryonWithProgress.executeTryon(variables);\n            setBatchResults(prev => ({ ...prev, success: prev.success + 1 }));\n            return result;\n          } catch (error) {\n            setBatchResults(prev => ({ ...prev, failed: prev.failed + 1 }));\n            throw error;\n          } finally {\n            setActiveBatchIds(prev => prev.filter(id => id !== optimisticId));\n          }\n        })\n      );\n\n      return results.map(result => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          throw result.reason;\n        }\n      });\n    } finally {\n      setActiveBatchIds([]);\n    }\n  }, [tryonWithProgress]);\n\n  const cancelBatch = useCallback(() => {\n    activeBatchIds.forEach(id => {\n      tryonWithProgress.rollbackOptimistic(id, new Error('Batch cancelled'));\n    });\n    setActiveBatchIds([]);\n    setBatchResults({ success: 0, failed: 0, total: 0 });\n  }, [activeBatchIds, tryonWithProgress]);\n\n  const batchProgress = useMemo(() => {\n    const { success, failed, total } = batchResults;\n    const completed = success + failed;\n    const inProgress = total - completed;\n    const progressPercentage = total > 0 ? (completed / total) * 100 : 0;\n\n    return {\n      total,\n      completed: success,\n      failed,\n      inProgress,\n      progressPercentage\n    };\n  }, [batchResults]);\n\n  return {\n    executeBatch,\n    batchProgress,\n    activeBatchIds,\n    cancelBatch\n  };\n}"],"names":["useBatchTryonWithProgress","useSimpleTryonWithProgress","useTryonWithProgress","DEFAULT_PROGRESS_CONFIG","autoOptimistic","config","mergedConfig","useMemo","enableOptimisticUpdates","optimisticConfig","showPreview","updateHistory","showProgress","estimatedProcessingTime","defaultOptimisticConfig","cacheInvalidationConfig","invalidateHistory","invalidateUserData","invalidateStats","invalidateTags","preloadRelated","defaultCacheConfig","currentOptimisticId","setCurrentOptimisticId","useState","mutation","useTryonMutation","optimisticUpdates","useOptimisticUpdates","enabled","executeTryon","useCallback","variables","optimisticId","startOptimistic","result","mutateAsync","completeOptimistic","error","rollbackOptimistic","executeTryonSync","catch","console","hasActiveOptimistic","Boolean","activeUpdates","length","data","isLoading","isSuccess","isError","isIdle","status","reset","activeOptimisticUpdates","options","userContext","userId","tags","activeBatchIds","setActiveBatchIds","batchResults","setBatchResults","success","failed","total","tryonWithProgress","executeBatch","variablesList","batchIds","results","Promise","allSettled","map","push","prev","filter","id","value","reason","cancelBatch","forEach","Error","batchProgress","completed","inProgress","progressPercentage"],"mappings":"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"}