a86d1cbec6971a2d765530526ffe7d4a
// Try-On Hook with Progress Tracking
// Combines mutation, optimistic updates, and progress tracking for easy component integration
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useBatchTryonWithProgress: function() {
        return useBatchTryonWithProgress;
    },
    useSimpleTryonWithProgress: function() {
        return useSimpleTryonWithProgress;
    },
    useTryonWithProgress: function() {
        return useTryonWithProgress;
    }
});
const _react = require("react");
const _useTryonMutation = require("../mutations/useTryonMutation");
const _useOptimisticUpdates = require("./useOptimisticUpdates");
/**
 * Default configuration
 */ const DEFAULT_PROGRESS_CONFIG = {
    autoOptimistic: true
};
function useTryonWithProgress(config = {}) {
    const mergedConfig = (0, _react.useMemo)(()=>({
            ...DEFAULT_PROGRESS_CONFIG,
            enableOptimisticUpdates: config.autoOptimistic !== false,
            optimisticConfig: {
                showPreview: true,
                updateHistory: true,
                showProgress: true,
                estimatedProcessingTime: 8000,
                ...config.defaultOptimisticConfig
            },
            cacheInvalidationConfig: {
                invalidateHistory: true,
                invalidateUserData: true,
                invalidateStats: true,
                invalidateTags: true,
                preloadRelated: true,
                ...config.defaultCacheConfig
            },
            ...config
        }), [
        config
    ]);
    const [currentOptimisticId, setCurrentOptimisticId] = (0, _react.useState)(null);
    // Initialize mutation hook with optimistic updates enabled
    const mutation = (0, _useTryonMutation.useTryonMutation)(mergedConfig);
    // Initialize optimistic updates hook
    const optimisticUpdates = (0, _useOptimisticUpdates.useOptimisticUpdates)({
        enabled: mergedConfig.enableOptimisticUpdates
    });
    // Enhanced execute function with automatic progress tracking
    const executeTryon = (0, _react.useCallback)(async (variables)=>{
        let optimisticId = null;
        try {
            // Start optimistic updates if enabled
            if (mergedConfig.enableOptimisticUpdates) {
                optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);
                setCurrentOptimisticId(optimisticId);
            }
            // Execute mutation
            const result = await mutation.mutateAsync(variables);
            // Complete optimistic updates if they were started
            if (optimisticId && mergedConfig.enableOptimisticUpdates) {
                optimisticUpdates.completeOptimistic(optimisticId, result);
                setCurrentOptimisticId(null);
            }
            return result;
        } catch (error) {
            // Rollback optimistic updates on error
            if (optimisticId && mergedConfig.enableOptimisticUpdates) {
                optimisticUpdates.rollbackOptimistic(optimisticId, error);
                setCurrentOptimisticId(null);
            }
            throw error;
        }
    }, [
        mutation,
        optimisticUpdates,
        mergedConfig
    ]);
    // Sync version that doesn't return a promise
    const executeTryonSync = (0, _react.useCallback)((variables)=>{
        executeTryon(variables).catch((error)=>{
            console.error('Try-on execution failed:', error);
        });
    }, [
        executeTryon
    ]);
    // Manual optimistic update controls
    const startOptimistic = (0, _react.useCallback)((variables)=>{
        const optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);
        setCurrentOptimisticId(optimisticId);
        return optimisticId;
    }, [
        optimisticUpdates,
        mergedConfig.optimisticConfig
    ]);
    const completeOptimistic = (0, _react.useCallback)((optimisticId, result)=>{
        optimisticUpdates.completeOptimistic(optimisticId, result);
        if (currentOptimisticId === optimisticId) {
            setCurrentOptimisticId(null);
        }
    }, [
        optimisticUpdates,
        currentOptimisticId
    ]);
    const rollbackOptimistic = (0, _react.useCallback)((optimisticId, error)=>{
        optimisticUpdates.rollbackOptimistic(optimisticId, error);
        if (currentOptimisticId === optimisticId) {
            setCurrentOptimisticId(null);
        }
    }, [
        optimisticUpdates,
        currentOptimisticId
    ]);
    // Derived state
    const hasActiveOptimistic = Boolean(currentOptimisticId) || optimisticUpdates.activeUpdates.length > 0;
    return {
        // Execution methods
        executeTryon,
        executeTryonSync,
        // Mutation state
        data: mutation.data,
        error: mutation.error,
        isLoading: mutation.isLoading,
        isSuccess: mutation.isSuccess,
        isError: mutation.isError,
        isIdle: mutation.isIdle,
        status: mutation.status,
        reset: mutation.reset,
        // Optimistic updates state
        currentOptimisticId,
        hasActiveOptimistic,
        activeOptimisticUpdates: optimisticUpdates.activeUpdates,
        // Manual optimistic controls
        startOptimistic,
        completeOptimistic,
        rollbackOptimistic
    };
}
function useSimpleTryonWithProgress(options = {}) {
    const config = {
        defaultOptimisticConfig: {
            showProgress: options.showProgress !== false,
            estimatedProcessingTime: options.estimatedProcessingTime || 8000
        },
        defaultCacheConfig: {
            userContext: {
                userId: options.userId,
                tags: options.tags
            }
        }
    };
    const { executeTryon, isLoading, currentOptimisticId, error, data } = useTryonWithProgress(config);
    return {
        executeTryon,
        isLoading,
        currentOptimisticId,
        error,
        data
    };
}
function useBatchTryonWithProgress(config = {}) {
    const [activeBatchIds, setActiveBatchIds] = (0, _react.useState)([]);
    const [batchResults, setBatchResults] = (0, _react.useState)({
        success: 0,
        failed: 0,
        total: 0
    });
    const tryonWithProgress = useTryonWithProgress(config);
    const executeBatch = (0, _react.useCallback)(async (variablesList)=>{
        setBatchResults({
            success: 0,
            failed: 0,
            total: variablesList.length
        });
        const batchIds = [];
        try {
            const results = await Promise.allSettled(variablesList.map(async (variables)=>{
                const optimisticId = tryonWithProgress.startOptimistic(variables);
                batchIds.push(optimisticId);
                setActiveBatchIds((prev)=>[
                        ...prev,
                        optimisticId
                    ]);
                try {
                    const result = await tryonWithProgress.executeTryon(variables);
                    setBatchResults((prev)=>({
                            ...prev,
                            success: prev.success + 1
                        }));
                    return result;
                } catch (error) {
                    setBatchResults((prev)=>({
                            ...prev,
                            failed: prev.failed + 1
                        }));
                    throw error;
                } finally{
                    setActiveBatchIds((prev)=>prev.filter((id)=>id !== optimisticId));
                }
            }));
            return results.map((result)=>{
                if (result.status === 'fulfilled') {
                    return result.value;
                } else {
                    throw result.reason;
                }
            });
        } finally{
            setActiveBatchIds([]);
        }
    }, [
        tryonWithProgress
    ]);
    const cancelBatch = (0, _react.useCallback)(()=>{
        activeBatchIds.forEach((id)=>{
            tryonWithProgress.rollbackOptimistic(id, new Error('Batch cancelled'));
        });
        setActiveBatchIds([]);
        setBatchResults({
            success: 0,
            failed: 0,
            total: 0
        });
    }, [
        activeBatchIds,
        tryonWithProgress
    ]);
    const batchProgress = (0, _react.useMemo)(()=>{
        const { success, failed, total } = batchResults;
        const completed = success + failed;
        const inProgress = total - completed;
        const progressPercentage = total > 0 ? completed / total * 100 : 0;
        return {
            total,
            completed: success,
            failed,
            inProgress,
            progressPercentage
        };
    }, [
        batchResults
    ]);
    return {
        executeBatch,
        batchProgress,
        activeBatchIds,
        cancelBatch
    };
}

//# sourceMappingURL=data:application/json;base64,