{"version":3,"names":["HISTORY_QUERY_KEYS","cov_ehs10y23g","f","s","useTryonHistory","useTryonHistoryEntry","useTryonHistoryStats","all","entries","options","entry","id","stats","DEFAULT_CONFIG","historyService","_tryonHistoryService","defaultHistoryService","defaultQueryOptions","page","pageSize","sortBy","sortDirection","enableRefetch","refetchInterval","staleTime","cacheTime","queryOptions","b","config","queryClient","_reactquery","useQueryClient","mergedConfig","_react","useMemo","mergedQueryOptions","historyQuery","useQuery","queryKey","queryFn","getEntries","gcTime","refetchOnWindowFocus","retry","addEntryMutation","useMutation","mutationFn","addEntry","onSuccess","newEntry","invalidateQueries","setQueryData","oldData","totalCount","lastUpdated","Date","toISOString","updateEntryMutation","updates","updateEntry","updatedEntry","map","deleteEntryMutation","deleteEntry","success","deletedId","removeQueries","filter","Math","max","clearAllMutation","clearAll","currentPage","hasMore","useCallback","mutateAsync","loadMore","data","isFetching","nextPage","nextPageOptions","nextPageData","fetchQuery","refresh","isLoading","error","getEntry","enabled","Boolean","getStorageStats"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonHistory.ts"],"sourcesContent":["// Try-On History React Query Hooks\n// Provides React Query integration for history management with caching and synchronization\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport type {\n  TryonHistoryEntry,\n  TryonHistoryCollection,\n  TryonHistoryQueryOptions,\n  CreateTryonHistoryEntryOptions,\n  UseTryonHistoryReturn,\n  TryonHistoryService\n} from '../types/history.types';\nimport { defaultHistoryService } from '../services/tryonHistoryService';\n\n/**\n * Query keys for history-related React Query operations\n */\nexport const HISTORY_QUERY_KEYS = {\n  all: ['tryon-history'] as const,\n  entries: (options?: TryonHistoryQueryOptions) => ['tryon-history', 'entries', options] as const,\n  entry: (id: string) => ['tryon-history', 'entry', id] as const,\n  stats: () => ['tryon-history', 'stats'] as const\n} as const;\n\n/**\n * Configuration for history hooks\n */\ninterface UseTryonHistoryConfig {\n  /** History service instance to use */\n  historyService?: TryonHistoryService;\n  /** Default query options */\n  defaultQueryOptions?: TryonHistoryQueryOptions;\n  /** Enable automatic refetch */\n  enableRefetch?: boolean;\n  /** Refetch interval in milliseconds */\n  refetchInterval?: number;\n  /** Stale time in milliseconds */\n  staleTime?: number;\n  /** Cache time in milliseconds */\n  cacheTime?: number;\n}\n\n/**\n * Default hook configuration\n */\nconst DEFAULT_CONFIG: Required<UseTryonHistoryConfig> = {\n  historyService: defaultHistoryService,\n  defaultQueryOptions: {\n    page: 0,\n    pageSize: 20,\n    sortBy: 'timestamp',\n    sortDirection: 'desc'\n  },\n  enableRefetch: false,\n  refetchInterval: 0,\n  staleTime: 5 * 60 * 1000, // 5 minutes\n  cacheTime: 10 * 60 * 1000 // 10 minutes\n};\n\n/**\n * Hook for managing try-on history with React Query\n */\nexport function useTryonHistory(\n  queryOptions: TryonHistoryQueryOptions = {},\n  config: UseTryonHistoryConfig = {}\n): UseTryonHistoryReturn {\n  const queryClient = useQueryClient();\n  \n  // Merge configuration with defaults\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config\n  }), [config]);\n\n  // Merge query options with defaults\n  const mergedQueryOptions = useMemo(() => ({\n    ...mergedConfig.defaultQueryOptions,\n    ...queryOptions\n  }), [mergedConfig.defaultQueryOptions, queryOptions]);\n\n  // Query for history entries\n  const historyQuery = useQuery<TryonHistoryCollection>({\n    queryKey: HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n    queryFn: () => mergedConfig.historyService.getEntries(mergedQueryOptions),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    refetchInterval: mergedConfig.enableRefetch ? mergedConfig.refetchInterval : false,\n    refetchOnWindowFocus: false,\n    retry: 2\n  });\n\n  // Mutation for adding new entries\n  const addEntryMutation = useMutation({\n    mutationFn: (options: CreateTryonHistoryEntryOptions) => \n      mergedConfig.historyService.addEntry(options),\n    onSuccess: (newEntry) => {\n      // Invalidate and refetch history entries\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.all });\n      \n      // Optimistically update the cache\n      queryClient.setQueryData<TryonHistoryCollection>(\n        HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n        (oldData) => {\n          if (!oldData) return oldData;\n          \n          return {\n            ...oldData,\n            entries: [newEntry, ...oldData.entries],\n            totalCount: oldData.totalCount + 1,\n            lastUpdated: new Date().toISOString()\n          };\n        }\n      );\n    }\n  });\n\n  // Mutation for updating entries\n  const updateEntryMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<TryonHistoryEntry> }) =>\n      mergedConfig.historyService.updateEntry(id, updates),\n    onSuccess: (updatedEntry) => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entry(updatedEntry.id) });\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries() });\n      \n      // Update the entry in all relevant caches\n      queryClient.setQueryData(HISTORY_QUERY_KEYS.entry(updatedEntry.id), updatedEntry);\n      \n      // Update the entry in the entries list cache\n      queryClient.setQueryData<TryonHistoryCollection>(\n        HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n        (oldData) => {\n          if (!oldData) return oldData;\n          \n          return {\n            ...oldData,\n            entries: oldData.entries.map(entry => \n              entry.id === updatedEntry.id ? updatedEntry : entry\n            ),\n            lastUpdated: new Date().toISOString()\n          };\n        }\n      );\n    }\n  });\n\n  // Mutation for deleting entries\n  const deleteEntryMutation = useMutation({\n    mutationFn: (id: string) => mergedConfig.historyService.deleteEntry(id),\n    onSuccess: (success, deletedId) => {\n      if (success) {\n        // Remove from all caches\n        queryClient.removeQueries({ queryKey: HISTORY_QUERY_KEYS.entry(deletedId) });\n        queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries() });\n        \n        // Optimistically remove from entries list\n        queryClient.setQueryData<TryonHistoryCollection>(\n          HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n          (oldData) => {\n            if (!oldData) return oldData;\n            \n            return {\n              ...oldData,\n              entries: oldData.entries.filter(entry => entry.id !== deletedId),\n              totalCount: Math.max(0, oldData.totalCount - 1),\n              lastUpdated: new Date().toISOString()\n            };\n          }\n        );\n      }\n    }\n  });\n\n  // Mutation for clearing all entries\n  const clearAllMutation = useMutation({\n    mutationFn: () => mergedConfig.historyService.clearAll(),\n    onSuccess: (success) => {\n      if (success) {\n        // Clear all history-related caches\n        queryClient.removeQueries({ queryKey: HISTORY_QUERY_KEYS.all });\n        \n        // Set empty state\n        queryClient.setQueryData<TryonHistoryCollection>(\n          HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n          {\n            entries: [],\n            totalCount: 0,\n            currentPage: 0,\n            pageSize: mergedQueryOptions.pageSize!,\n            hasMore: false,\n            lastUpdated: new Date().toISOString()\n          }\n        );\n      }\n    }\n  });\n\n  // Memoized callback functions\n  const addEntry = useCallback(async (options: CreateTryonHistoryEntryOptions) => {\n    return addEntryMutation.mutateAsync(options);\n  }, [addEntryMutation]);\n\n  const updateEntry = useCallback(async (id: string, updates: Partial<TryonHistoryEntry>) => {\n    await updateEntryMutation.mutateAsync({ id, updates });\n  }, [updateEntryMutation]);\n\n  const deleteEntry = useCallback(async (id: string) => {\n    await deleteEntryMutation.mutateAsync(id);\n  }, [deleteEntryMutation]);\n\n  const loadMore = useCallback(async () => {\n    if (!historyQuery.data?.hasMore || historyQuery.isFetching) return;\n    \n    const nextPage = historyQuery.data.currentPage + 1;\n    const nextPageOptions = { ...mergedQueryOptions, page: nextPage };\n    \n    // Fetch next page\n    const nextPageData = await queryClient.fetchQuery({\n      queryKey: HISTORY_QUERY_KEYS.entries(nextPageOptions),\n      queryFn: () => mergedConfig.historyService.getEntries(nextPageOptions),\n      staleTime: mergedConfig.staleTime\n    });\n    \n    // Merge with current data\n    queryClient.setQueryData<TryonHistoryCollection>(\n      HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n      (oldData) => {\n        if (!oldData) return nextPageData;\n        \n        return {\n          ...nextPageData,\n          entries: [...oldData.entries, ...nextPageData.entries],\n          currentPage: nextPage\n        };\n      }\n    );\n  }, [historyQuery.data, historyQuery.isFetching, mergedQueryOptions, queryClient, mergedConfig.historyService, mergedConfig.staleTime]);\n\n  const refresh = useCallback(async () => {\n    await queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries(mergedQueryOptions) });\n  }, [queryClient, mergedQueryOptions]);\n\n  const clearAll = useCallback(async () => {\n    await clearAllMutation.mutateAsync();\n  }, [clearAllMutation]);\n\n  // Return hook interface\n  return useMemo<UseTryonHistoryReturn>(() => ({\n    entries: historyQuery.data?.entries || [],\n    isLoading: historyQuery.isLoading || historyQuery.isFetching,\n    error: historyQuery.error,\n    hasMore: historyQuery.data?.hasMore || false,\n    currentPage: historyQuery.data?.currentPage || 0,\n    totalCount: historyQuery.data?.totalCount || 0,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    loadMore,\n    refresh,\n    clearAll\n  }), [\n    historyQuery.data,\n    historyQuery.isLoading,\n    historyQuery.isFetching,\n    historyQuery.error,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    loadMore,\n    refresh,\n    clearAll\n  ]);\n}\n\n/**\n * Hook for getting a single history entry by ID\n */\nexport function useTryonHistoryEntry(\n  id: string,\n  config: Pick<UseTryonHistoryConfig, 'historyService' | 'staleTime' | 'cacheTime'> = {}\n) {\n  const mergedConfig = useMemo(() => ({\n    historyService: defaultHistoryService,\n    staleTime: 5 * 60 * 1000,\n    cacheTime: 10 * 60 * 1000,\n    ...config\n  }), [config]);\n\n  return useQuery({\n    queryKey: HISTORY_QUERY_KEYS.entry(id),\n    queryFn: () => mergedConfig.historyService.getEntry(id),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    enabled: Boolean(id),\n    retry: 2\n  });\n}\n\n/**\n * Hook for getting storage statistics\n */\nexport function useTryonHistoryStats(\n  config: Pick<UseTryonHistoryConfig, 'historyService' | 'staleTime' | 'cacheTime'> = {}\n) {\n  const mergedConfig = useMemo(() => ({\n    historyService: defaultHistoryService,\n    staleTime: 60 * 1000, // 1 minute\n    cacheTime: 5 * 60 * 1000, // 5 minutes\n    ...config\n  }), [config]);\n\n  return useQuery({\n    queryKey: HISTORY_QUERY_KEYS.stats(),\n    queryFn: () => mergedConfig.historyService.getStorageStats(),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    refetchOnWindowFocus: false\n  });\n}"],"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","ignoreList":[]}