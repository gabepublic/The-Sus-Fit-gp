d0f4ff8431bb5715a52edc57921762d0
// Advanced Cache Invalidation Strategies
// Comprehensive cache management for try-on mutations and related queries
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CacheInvalidationManager: function() {
        return CacheInvalidationManager;
    },
    createCacheAwareMutationCallbacks: function() {
        return createCacheAwareMutationCallbacks;
    },
    defaultCacheManager: function() {
        return defaultCacheManager;
    },
    getCacheInvalidationManager: function() {
        return getCacheInvalidationManager;
    },
    initializeCacheInvalidation: function() {
        return initializeCacheInvalidation;
    },
    invalidateCacheAfterMutation: function() {
        return invalidateCacheAfterMutation;
    }
});
/**
 * Default cache invalidation configuration
 */ const DEFAULT_CACHE_CONFIG = {
    invalidateHistory: true,
    invalidateUserData: true,
    invalidateStats: true,
    invalidateTags: true,
    preloadRelated: true,
    customQueryKeys: [],
    userContext: {}
};
class CacheInvalidationManager {
    constructor(queryClient){
        this.queryClient = queryClient;
    }
    /**
   * Invalidate caches after successful try-on mutation
   */ async invalidateAfterSuccess(data, variables, context, config = {}) {
        const mergedConfig = {
            ...DEFAULT_CACHE_CONFIG,
            ...config
        };
        const invalidationPromises = [];
        // 1. Invalidate history queries
        if (mergedConfig.invalidateHistory) {
            invalidationPromises.push(this.invalidateHistoryQueries());
        }
        // 2. Invalidate user-specific data
        if (mergedConfig.invalidateUserData && mergedConfig.userContext.userId) {
            invalidationPromises.push(this.invalidateUserQueries(mergedConfig.userContext.userId));
        }
        // 3. Invalidate statistics and aggregations
        if (mergedConfig.invalidateStats) {
            invalidationPromises.push(this.invalidateStatsQueries());
        }
        // 4. Invalidate tag-based queries
        if (mergedConfig.invalidateTags && mergedConfig.userContext.tags?.length) {
            invalidationPromises.push(this.invalidateTagQueries(mergedConfig.userContext.tags));
        }
        // 5. Invalidate custom query keys
        if (mergedConfig.customQueryKeys.length > 0) {
            invalidationPromises.push(this.invalidateCustomQueries(mergedConfig.customQueryKeys));
        }
        // Execute all invalidations in parallel
        await Promise.all(invalidationPromises);
        // 6. Preload related queries if enabled
        if (mergedConfig.preloadRelated) {
            await this.preloadRelatedQueries(mergedConfig.userContext);
        }
    }
    /**
   * Selective cache invalidation after error (lighter touch)
   */ async invalidateAfterError(error, variables, context, config = {}) {
        const lightConfig = {
            invalidateHistory: false,
            invalidateUserData: false,
            invalidateStats: false,
            invalidateTags: false,
            preloadRelated: false,
            ...config
        };
        // Only invalidate specific queries that might be affected by the error
        if (lightConfig.invalidateHistory) {
            await this.invalidateHistoryQueries();
        }
    }
    /**
   * Invalidate history-related queries
   */ async invalidateHistoryQueries() {
        const historyInvalidations = [
            // Main history entries
            this.queryClient.invalidateQueries({
                queryKey: [
                    'tryon-history'
                ],
                exact: false
            }),
            // History metadata
            this.queryClient.invalidateQueries({
                queryKey: [
                    'history-metadata'
                ],
                exact: false
            }),
            // Recent activity
            this.queryClient.invalidateQueries({
                queryKey: [
                    'recent-activity'
                ],
                exact: false
            }),
            // History search results
            this.queryClient.invalidateQueries({
                queryKey: [
                    'history-search'
                ],
                exact: false
            })
        ];
        await Promise.all(historyInvalidations);
    }
    /**
   * Invalidate user-specific queries
   */ async invalidateUserQueries(userId) {
        const userInvalidations = [
            // User profile data
            this.queryClient.invalidateQueries({
                queryKey: [
                    'user-data',
                    userId
                ],
                exact: false
            }),
            // User preferences
            this.queryClient.invalidateQueries({
                queryKey: [
                    'user-preferences',
                    userId
                ],
                exact: false
            }),
            // User activity
            this.queryClient.invalidateQueries({
                queryKey: [
                    'user-activity',
                    userId
                ],
                exact: false
            }),
            // User statistics
            this.queryClient.invalidateQueries({
                queryKey: [
                    'user-stats',
                    userId
                ],
                exact: false
            })
        ];
        await Promise.all(userInvalidations);
    }
    /**
   * Invalidate statistics and aggregation queries
   */ async invalidateStatsQueries() {
        const statsInvalidations = [
            // General try-on statistics
            this.queryClient.invalidateQueries({
                queryKey: [
                    'tryon-stats'
                ],
                exact: false
            }),
            // Usage analytics
            this.queryClient.invalidateQueries({
                queryKey: [
                    'usage-analytics'
                ],
                exact: false
            }),
            // Performance metrics
            this.queryClient.invalidateQueries({
                queryKey: [
                    'performance-metrics'
                ],
                exact: false
            }),
            // Popular items/combinations
            this.queryClient.invalidateQueries({
                queryKey: [
                    'popular-items'
                ],
                exact: false
            })
        ];
        await Promise.all(statsInvalidations);
    }
    /**
   * Invalidate tag-based queries
   */ async invalidateTagQueries(tags) {
        const tagInvalidations = tags.map((tag)=>this.queryClient.invalidateQueries({
                queryKey: [
                    'tryon-by-tag',
                    tag
                ],
                exact: false
            }));
        // Also invalidate general tag queries
        tagInvalidations.push(this.queryClient.invalidateQueries({
            queryKey: [
                'available-tags'
            ],
            exact: false
        }));
        await Promise.all(tagInvalidations);
    }
    /**
   * Invalidate custom query keys
   */ async invalidateCustomQueries(customQueryKeys) {
        const customInvalidations = customQueryKeys.map((queryKey)=>this.queryClient.invalidateQueries({
                queryKey,
                exact: false
            }));
        await Promise.all(customInvalidations);
    }
    /**
   * Preload related queries that are likely to be accessed next
   */ async preloadRelatedQueries(userContext = {}) {
        const preloadPromises = [];
        // Preload history entries (most likely to be viewed)
        preloadPromises.push(this.queryClient.prefetchQuery({
            queryKey: [
                'tryon-history',
                'entries'
            ],
            staleTime: 30000,
            gcTime: 5 * 60 * 1000 // Keep in cache for 5 minutes
        }));
        // Preload history stats
        preloadPromises.push(this.queryClient.prefetchQuery({
            queryKey: [
                'tryon-history',
                'stats'
            ],
            staleTime: 60000,
            gcTime: 10 * 60 * 1000 // Keep in cache for 10 minutes
        }));
        // Preload user data if userId available
        if (userContext.userId) {
            preloadPromises.push(this.queryClient.prefetchQuery({
                queryKey: [
                    'user-data',
                    userContext.userId
                ],
                staleTime: 60000,
                gcTime: 10 * 60 * 1000
            }));
        }
        // Preload popular items
        preloadPromises.push(this.queryClient.prefetchQuery({
            queryKey: [
                'popular-items'
            ],
            staleTime: 5 * 60 * 1000,
            gcTime: 15 * 60 * 1000 // Keep in cache for 15 minutes
        }));
        await Promise.allSettled(preloadPromises);
    }
    /**
   * Smart cache warming based on usage patterns
   */ async warmCache(options = {}) {
        const warmupPromises = [];
        // Warm up frequently accessed data structures
        if (options.popularItems?.length) {
            options.popularItems.forEach((item, index)=>{
                warmupPromises.push(this.queryClient.prefetchQuery({
                    queryKey: [
                        'warmup-cache',
                        'popular',
                        index
                    ],
                    queryFn: ()=>Promise.resolve(item),
                    staleTime: 10 * 60 * 1000,
                    gcTime: 30 * 60 * 1000 // Keep in cache for 30 minutes
                }));
            });
        }
        // Warm up user-specific frequently accessed queries
        if (options.userId) {
            warmupPromises.push(this.queryClient.prefetchQuery({
                queryKey: [
                    'user-favorites',
                    options.userId
                ],
                staleTime: 5 * 60 * 1000,
                gcTime: 20 * 60 * 1000
            }));
        }
        // Warm up recent tag queries
        if (options.recentTags?.length) {
            options.recentTags.forEach((tag)=>{
                warmupPromises.push(this.queryClient.prefetchQuery({
                    queryKey: [
                        'recent-by-tag',
                        tag
                    ],
                    staleTime: 2 * 60 * 1000,
                    gcTime: 10 * 60 * 1000
                }));
            });
        }
        await Promise.allSettled(warmupPromises);
    }
    /**
   * Cleanup stale cache entries
   */ async cleanupStaleCache() {
        // Remove queries that haven't been accessed in a while
        this.queryClient.removeQueries({
            predicate: (query)=>{
                const lastAccessed = query.state.dataUpdatedAt;
                const oneHourAgo = Date.now() - 60 * 60 * 1000;
                return lastAccessed < oneHourAgo;
            }
        });
        // Cleanup specific temporary cache entries
        this.queryClient.removeQueries({
            queryKey: [
                'warmup-cache'
            ],
            exact: false
        });
        this.queryClient.removeQueries({
            queryKey: [
                'temp'
            ],
            exact: false
        });
    }
}
let defaultCacheManager = null;
function initializeCacheInvalidation(queryClient) {
    defaultCacheManager = new CacheInvalidationManager(queryClient);
    return defaultCacheManager;
}
function getCacheInvalidationManager() {
    if (!defaultCacheManager) {
        throw new Error('CacheInvalidationManager not initialized. Call initializeCacheInvalidation first.');
    }
    return defaultCacheManager;
}
async function invalidateCacheAfterMutation(queryClient, data, variables, context, config) {
    const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);
    await cacheManager.invalidateAfterSuccess(data, variables, context, config);
}
function createCacheAwareMutationCallbacks(queryClient, config = {}) {
    const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);
    return {
        onSuccess: async (data, variables, context)=>{
            await cacheManager.invalidateAfterSuccess(data, variables, context, config);
        },
        onError: async (error, variables, context)=>{
            if (context) {
                await cacheManager.invalidateAfterError(error, variables, context, {
                    invalidateHistory: false,
                    invalidateUserData: false,
                    ...config
                });
            }
        }
    };
}

//# sourceMappingURL=data:application/json;base64,