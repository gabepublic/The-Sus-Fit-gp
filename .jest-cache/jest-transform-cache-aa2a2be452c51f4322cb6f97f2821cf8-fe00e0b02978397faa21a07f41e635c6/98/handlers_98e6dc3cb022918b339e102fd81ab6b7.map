{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/test/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw'\n\nexport const handlers = [\n  // Mock Claude API\n  http.post('https://api.anthropic.com/v1/messages', () => {\n    return HttpResponse.json({\n      id: 'msg_test123',\n      type: 'message',\n      role: 'assistant',\n      content: [\n        {\n          type: 'text',\n          text: 'This is a mock response from Claude API',\n        },\n      ],\n      model: 'claude-3-sonnet-20240229',\n      stop_reason: 'end_turn',\n      stop_sequence: null,\n      usage: {\n        input_tokens: 10,\n        output_tokens: 25,\n      },\n    })\n  }),\n\n  // Mock Pinecone API\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/upsert', () => {\n    return HttpResponse.json({\n      upsertedCount: 1,\n    })\n  }),\n\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/query', () => {\n    return HttpResponse.json({\n      matches: [\n        {\n          id: 'test-vector-1',\n          score: 0.9,\n          metadata: {\n            text: 'This is a test vector',\n            timestamp: '2023-01-01T00:00:00Z',\n          },\n        },\n      ],\n    })\n  }),\n\n  // Mock LangChain/OpenAI API\n  http.post('https://api.openai.com/v1/chat/completions', () => {\n    return HttpResponse.json({\n      id: 'chatcmpl-test123',\n      object: 'chat.completion',\n      created: 1677652288,\n      model: 'gpt-3.5-turbo',\n      choices: [\n        {\n          index: 0,\n          message: {\n            role: 'assistant',\n            content: 'This is a mock response from OpenAI API',\n          },\n          finish_reason: 'stop',\n        },\n      ],\n      usage: {\n        prompt_tokens: 9,\n        completion_tokens: 12,\n        total_tokens: 21,\n      },\n    })\n  }),\n]"],"names":["handlers","http","post","HttpResponse","json","id","type","role","content","text","model","stop_reason","stop_sequence","usage","input_tokens","output_tokens","upsertedCount","matches","score","metadata","timestamp","object","created","choices","index","message","finish_reason","prompt_tokens","completion_tokens","total_tokens"],"mappings":";;;;+BAEaA;;;eAAAA;;;qBAFsB;AAE5B,MAAMA,WAAW;IACtB,kBAAkB;IAClBC,SAAI,CAACC,IAAI,CAAC,yCAAyC;QACjD,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBC,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,SAAS;gBACP;oBACEF,MAAM;oBACNG,MAAM;gBACR;aACD;YACDC,OAAO;YACPC,aAAa;YACbC,eAAe;YACfC,OAAO;gBACLC,cAAc;gBACdC,eAAe;YACjB;QACF;IACF;IAEA,oBAAoB;IACpBd,SAAI,CAACC,IAAI,CAAC,uDAAuD;QAC/D,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBY,eAAe;QACjB;IACF;IAEAf,SAAI,CAACC,IAAI,CAAC,sDAAsD;QAC9D,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBa,SAAS;gBACP;oBACEZ,IAAI;oBACJa,OAAO;oBACPC,UAAU;wBACRV,MAAM;wBACNW,WAAW;oBACb;gBACF;aACD;QACH;IACF;IAEA,4BAA4B;IAC5BnB,SAAI,CAACC,IAAI,CAAC,8CAA8C;QACtD,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBC,IAAI;YACJgB,QAAQ;YACRC,SAAS;YACTZ,OAAO;YACPa,SAAS;gBACP;oBACEC,OAAO;oBACPC,SAAS;wBACPlB,MAAM;wBACNC,SAAS;oBACX;oBACAkB,eAAe;gBACjB;aACD;YACDb,OAAO;gBACLc,eAAe;gBACfC,mBAAmB;gBACnBC,cAAc;YAChB;QACF;IACF;CACD"}