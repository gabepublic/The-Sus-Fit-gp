ca06e7676c295b393aaf5a283497370d
'use client';
"use strict";

/* istanbul ignore next */
function cov_bceljhu8i() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts";
  var hash = "3a80970eb15cb8ec958425d82d7b18612192e788";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "7": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "9": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "10": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "11": {
        start: {
          line: 29,
          column: 34
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "12": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "13": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "14": {
        start: {
          line: 74,
          column: 21
        },
        end: {
          line: 74,
          column: 93
        }
      },
      "15": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 80,
          column: 6
        }
      },
      "16": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 49
        }
      },
      "17": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 55
        }
      },
      "18": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "19": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 86,
          column: 6
        }
      },
      "20": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "21": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 55
        }
      },
      "22": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "23": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "24": {
        start: {
          line: 111,
          column: 30
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "25": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "26": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 50
        }
      },
      "27": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "28": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 77
        }
      },
      "29": {
        start: {
          line: 120,
          column: 32
        },
        end: {
          line: 120,
          column: 102
        }
      },
      "30": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "31": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 28
        }
      },
      "32": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "33": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "34": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "35": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 80
        }
      },
      "36": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 105
        }
      },
      "37": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 57
        }
      },
      "38": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "39": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 36
        }
      },
      "40": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "41": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 39
        }
      },
      "42": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 37
        }
      },
      "43": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "44": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 60
        }
      },
      "45": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 49
        }
      },
      "46": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "47": {
        start: {
          line: 167,
          column: 36
        },
        end: {
          line: 167,
          column: 68
        }
      },
      "48": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 90
        }
      },
      "49": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "50": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 172,
          column: 21
        }
      },
      "51": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 54
        }
      },
      "52": {
        start: {
          line: 175,
          column: 32
        },
        end: {
          line: 175,
          column: 100
        }
      },
      "53": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 57
        }
      },
      "54": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 28
        }
      },
      "55": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "56": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 49
        }
      },
      "57": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 195,
          column: 17
        }
      },
      "58": {
        start: {
          line: 189,
          column: 36
        },
        end: {
          line: 189,
          column: 68
        }
      },
      "59": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 90
        }
      },
      "60": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 63
        }
      },
      "61": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "62": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "63": {
        start: {
          line: 197,
          column: 32
        },
        end: {
          line: 197,
          column: 101
        }
      },
      "64": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 57
        }
      },
      "65": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 28
        }
      },
      "66": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 37
        }
      },
      "67": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 36
        }
      },
      "68": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 39
        }
      },
      "69": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 37
        }
      },
      "70": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 34
        }
      },
      "71": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "72": {
        start: {
          line: 228,
          column: 76
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "73": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "74": {
        start: {
          line: 230,
          column: 29
        },
        end: {
          line: 230,
          column: 56
        }
      },
      "75": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 52
        }
      },
      "76": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 65
        }
      },
      "77": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 48
        }
      },
      "78": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 29
        }
      },
      "79": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 48
        }
      },
      "80": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 70
        }
      },
      "81": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 63
        }
      },
      "82": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 80
        }
      },
      "83": {
        start: {
          line: 246,
          column: 73
        },
        end: {
          line: 246,
          column: 80
        }
      },
      "84": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "85": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "86": {
        start: {
          line: 250,
          column: 37
        },
        end: {
          line: 250,
          column: 73
        }
      },
      "87": {
        start: {
          line: 251,
          column: 33
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "88": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 256,
          column: 22
        }
      },
      "89": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "90": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 81
        }
      },
      "91": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 74
        }
      },
      "92": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 60
        }
      },
      "93": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 288,
          column: 6
        }
      },
      "94": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 310,
          column: 5
        }
      },
      "95": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 39
        }
      },
      "96": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 41
        }
      },
      "97": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 42
        }
      },
      "98": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 60
        }
      },
      "99": {
        start: {
          line: 301,
          column: 31
        },
        end: {
          line: 301,
          column: 60
        }
      },
      "100": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "101": {
        start: {
          line: 302,
          column: 31
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "102": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 42
        }
      },
      "103": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 42
        }
      },
      "104": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 39
        }
      },
      "105": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 48
        }
      },
      "106": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 313,
          column: 53
        }
      },
      "107": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 325,
          column: 6
        }
      },
      "108": {
        start: {
          line: 328,
          column: 31
        },
        end: {
          line: 328,
          column: 53
        }
      },
      "109": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 338,
          column: 6
        }
      },
      "110": {
        start: {
          line: 343,
          column: 19
        },
        end: {
          line: 343,
          column: 20
        }
      },
      "111": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 345,
          column: 43
        }
      },
      "112": {
        start: {
          line: 345,
          column: 28
        },
        end: {
          line: 345,
          column: 43
        }
      },
      "113": {
        start: {
          line: 346,
          column: 4
        },
        end: {
          line: 346,
          column: 46
        }
      },
      "114": {
        start: {
          line: 346,
          column: 31
        },
        end: {
          line: 346,
          column: 46
        }
      },
      "115": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "116": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 41
        }
      },
      "117": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 351,
          column: 42
        }
      },
      "118": {
        start: {
          line: 351,
          column: 27
        },
        end: {
          line: 351,
          column: 42
        }
      },
      "119": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 352,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 21
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 21
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "useBridgeLayer",
        decl: {
          start: {
            line: 67,
            column: 9
          },
          end: {
            line: 67,
            column: 23
          }
        },
        loc: {
          start: {
            line: 67,
            column: 37
          },
          end: {
            line: 289,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 85
          },
          end: {
            line: 75,
            column: 86
          }
        },
        loc: {
          start: {
            line: 75,
            column: 93
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 7
          },
          end: {
            line: 77,
            column: 8
          }
        },
        loc: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 88
          },
          end: {
            line: 81,
            column: 89
          }
        },
        loc: {
          start: {
            line: 81,
            column: 96
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 7
          },
          end: {
            line: 83,
            column: 8
          }
        },
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 50
          }
        },
        loc: {
          start: {
            line: 113,
            column: 63
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 113
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 130,
            column: 52
          },
          end: {
            line: 130,
            column: 53
          }
        },
        loc: {
          start: {
            line: 130,
            column: 66
          },
          end: {
            line: 141,
            column: 9
          }
        },
        line: 130
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 50
          }
        },
        loc: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 147
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 154,
            column: 52
          },
          end: {
            line: 154,
            column: 53
          }
        },
        loc: {
          start: {
            line: 154,
            column: 56
          },
          end: {
            line: 157,
            column: 9
          }
        },
        line: 154
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 162,
            column: 42
          },
          end: {
            line: 162,
            column: 43
          }
        },
        loc: {
          start: {
            line: 162,
            column: 52
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 162
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 40
          }
        },
        loc: {
          start: {
            line: 185,
            column: 49
          },
          end: {
            line: 201,
            column: 9
          }
        },
        line: 185
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 40
          }
        },
        loc: {
          start: {
            line: 207,
            column: 43
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 207
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 217,
            column: 44
          },
          end: {
            line: 217,
            column: 45
          }
        },
        loc: {
          start: {
            line: 217,
            column: 48
          },
          end: {
            line: 219,
            column: 9
          }
        },
        line: 217
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 222,
            column: 44
          },
          end: {
            line: 222,
            column: 45
          }
        },
        loc: {
          start: {
            line: 222,
            column: 48
          },
          end: {
            line: 224,
            column: 9
          }
        },
        line: 222
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 227,
            column: 48
          },
          end: {
            line: 227,
            column: 49
          }
        },
        loc: {
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 240,
            column: 9
          }
        },
        line: 227
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 245,
            column: 45
          },
          end: {
            line: 245,
            column: 46
          }
        },
        loc: {
          start: {
            line: 245,
            column: 55
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 245
      },
      "20": {
        name: "getProgressMessage",
        decl: {
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 292,
            column: 31
          }
        },
        loc: {
          start: {
            line: 292,
            column: 57
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 292
      },
      "21": {
        name: "useSimpleTryon",
        decl: {
          start: {
            line: 312,
            column: 9
          },
          end: {
            line: 312,
            column: 23
          }
        },
        loc: {
          start: {
            line: 312,
            column: 37
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 312
      },
      "22": {
        name: "useTryonWithProgress",
        decl: {
          start: {
            line: 327,
            column: 9
          },
          end: {
            line: 327,
            column: 29
          }
        },
        loc: {
          start: {
            line: 327,
            column: 43
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 327
      },
      "23": {
        name: "calculateOverallProgress",
        decl: {
          start: {
            line: 342,
            column: 13
          },
          end: {
            line: 342,
            column: 37
          }
        },
        loc: {
          start: {
            line: 342,
            column: 45
          },
          end: {
            line: 353,
            column: 1
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 24
          },
          end: {
            line: 67,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 35
          }
        }],
        line: 67
      },
      "1": {
        loc: {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 39
          }
        }, {
          start: {
            line: 90,
            column: 43
          },
          end: {
            line: 90,
            column: 82
          }
        }, {
          start: {
            line: 90,
            column: 86
          },
          end: {
            line: 90,
            column: 128
          }
        }],
        line: 90
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 45
          }
        }, {
          start: {
            line: 95,
            column: 49
          },
          end: {
            line: 95,
            column: 53
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 50
          },
          end: {
            line: 96,
            column: 82
          }
        }, {
          start: {
            line: 96,
            column: 85
          },
          end: {
            line: 96,
            column: 89
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 98,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 98,
            column: 46
          }
        }, {
          start: {
            line: 98,
            column: 50
          },
          end: {
            line: 98,
            column: 67
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 52
          }
        }, {
          start: {
            line: 99,
            column: 56
          },
          end: {
            line: 99,
            column: 76
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 100,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 100,
            column: 48
          }
        }, {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 100,
            column: 76
          }
        }, {
          start: {
            line: 100,
            column: 80
          },
          end: {
            line: 100,
            column: 84
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 52
          }
        }, {
          start: {
            line: 101,
            column: 56
          },
          end: {
            line: 101,
            column: 83
          }
        }, {
          start: {
            line: 101,
            column: 87
          },
          end: {
            line: 101,
            column: 91
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 18
          },
          end: {
            line: 107,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 18
          },
          end: {
            line: 107,
            column: 35
          }
        }, {
          start: {
            line: 107,
            column: 39
          },
          end: {
            line: 107,
            column: 73
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 18
          },
          end: {
            line: 108,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 18
          },
          end: {
            line: 108,
            column: 51
          }
        }, {
          start: {
            line: 108,
            column: 55
          },
          end: {
            line: 108,
            column: 72
          }
        }, {
          start: {
            line: 108,
            column: 76
          },
          end: {
            line: 108,
            column: 96
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 120,
            column: 32
          },
          end: {
            line: 120,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 57
          },
          end: {
            line: 120,
            column: 70
          }
        }, {
          start: {
            line: 120,
            column: 73
          },
          end: {
            line: 120,
            column: 102
          }
        }],
        line: 120
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 32
          },
          end: {
            line: 137,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 70
          }
        }, {
          start: {
            line: 137,
            column: 73
          },
          end: {
            line: 137,
            column: 105
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 173,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 173,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "15": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "16": {
        loc: {
          start: {
            line: 175,
            column: 32
          },
          end: {
            line: 175,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 57
          },
          end: {
            line: 175,
            column: 70
          }
        }, {
          start: {
            line: 175,
            column: 73
          },
          end: {
            line: 175,
            column: 100
          }
        }],
        line: 175
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 195,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 195,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 194,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 194,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 32
          },
          end: {
            line: 197,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 57
          },
          end: {
            line: 197,
            column: 70
          }
        }, {
          start: {
            line: 197,
            column: 73
          },
          end: {
            line: 197,
            column: 101
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 40
          }
        }, {
          start: {
            line: 228,
            column: 44
          },
          end: {
            line: 228,
            column: 74
          }
        }],
        line: 228
      },
      "22": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "23": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 40
          }
        }, {
          start: {
            line: 246,
            column: 44
          },
          end: {
            line: 246,
            column: 71
          }
        }],
        line: 246
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        }, {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 268,
            column: 17
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 295,
            column: 39
          }
        }, {
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 297,
            column: 41
          }
        }, {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 299,
            column: 42
          }
        }, {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 303,
            column: 42
          }
        }, {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 305,
            column: 42
          }
        }, {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 307,
            column: 39
          }
        }, {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 309,
            column: 48
          }
        }],
        line: 293
      },
      "26": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "27": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "28": {
        loc: {
          start: {
            line: 312,
            column: 24
          },
          end: {
            line: 312,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 312,
            column: 33
          },
          end: {
            line: 312,
            column: 35
          }
        }],
        line: 312
      },
      "29": {
        loc: {
          start: {
            line: 327,
            column: 30
          },
          end: {
            line: 327,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 327,
            column: 39
          },
          end: {
            line: 327,
            column: 41
          }
        }],
        line: 327
      },
      "30": {
        loc: {
          start: {
            line: 334,
            column: 18
          },
          end: {
            line: 334,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 39
          },
          end: {
            line: 334,
            column: 42
          }
        }, {
          start: {
            line: 334,
            column: 45
          },
          end: {
            line: 334,
            column: 46
          }
        }],
        line: 334
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 21
          },
          end: {
            line: 335,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 45
          },
          end: {
            line: 335,
            column: 48
          }
        }, {
          start: {
            line: 335,
            column: 51
          },
          end: {
            line: 335,
            column: 52
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "33": {
        loc: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "34": {
        loc: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "35": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 348,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 348,
            column: 23
          }
        }, {
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 348,
            column: 45
          }
        }],
        line: 348
      },
      "36": {
        loc: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts"],
      sourcesContent: ["'use client';\n\n// Bridge Layer Component Interfaces\n// Clean, declarative APIs that hide business logic complexity from React components\n\nimport { useCallback } from 'react';\nimport { useTryonWorkflow, type WorkflowConfig, type TryonWorkflowState, type TryonWorkflowActions } from './useTryonWorkflow';\nimport { useSingleImageUpload, type UploadConfig, type UploadedFile, type UploadError } from './useImageUpload';\nimport { useToast } from './index';\n\n/**\n * Simplified component state interface\n * Abstracts away complex business logic and provides only what UI components need\n */\nexport interface SimplifiedTryonState {\n  // Core UI state\n  isLoading: boolean;\n  isReady: boolean;\n  showResult: boolean;\n\n  // User feedback\n  resultImage: string | null;\n  errorMessage: string | null;\n  successMessage: string | null;\n\n  // Upload state\n  hasUserImage: boolean;\n  hasApparelImage: boolean;\n  userImagePreview: string | null;\n  apparelImagePreview: string | null;\n\n  // Progress\n  progress: number;\n  progressMessage: string;\n\n  // Interaction state\n  canGenerate: boolean;\n  canRetry: boolean;\n  canReset: boolean;\n}\n\n/**\n * Simplified component actions interface\n * Provides clean, semantic actions for UI components\n */\nexport interface SimplifiedTryonActions {\n  // File upload actions\n  uploadUserImage: (file: File) => Promise<void>;\n  uploadApparelImage: (file: File) => Promise<void>;\n  removeUserImage: () => void;\n  removeApparelImage: () => void;\n\n  // Generation actions\n  generate: () => Promise<void>;\n  retry: () => Promise<void>;\n  reset: () => void;\n\n  // UI actions\n  hideResult: () => void;\n  clearError: () => void;\n  downloadResult: () => void;\n  shareResult: () => Promise<void>;\n}\n\n/**\n * Configuration for the simplified bridge layer\n */\nexport interface BridgeLayerConfig {\n  // Workflow configuration\n  workflow?: WorkflowConfig;\n\n  // Upload configuration\n  upload?: UploadConfig;\n\n  // UI behavior\n  ui?: {\n    autoHideMessages?: boolean;\n    messageTimeoutMs?: number;\n    enableShare?: boolean;\n    enableDownload?: boolean;\n    showDetailedProgress?: boolean;\n  };\n\n  // Callbacks\n  callbacks?: {\n    onGenerationStart?: () => void;\n    onGenerationComplete?: (imageUrl: string) => void;\n    onError?: (error: string) => void;\n    onSuccess?: (message: string) => void;\n  };\n}\n\n/**\n * Default bridge layer configuration\n */\nconst DEFAULT_BRIDGE_CONFIG: Required<BridgeLayerConfig> = {\n  workflow: {\n    timeoutMs: 60000,\n    compressionLimitKB: 2048,\n    autoRetry: false,\n    maxRetries: 3,\n    debug: process.env.NODE_ENV === 'development'\n  },\n  upload: {\n    maxSizeBytes: 10 * 1024 * 1024,\n    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    generateThumbnails: true,\n    thumbnailSizes: [150, 300],\n    enableDragDrop: true,\n    autoProcess: false,\n    validation: {\n      minWidth: 256,\n      minHeight: 256,\n      maxWidth: 4096,\n      maxHeight: 4096\n    }\n  },\n  ui: {\n    autoHideMessages: true,\n    messageTimeoutMs: 5000,\n    enableShare: true,\n    enableDownload: true,\n    showDetailedProgress: true\n  },\n  callbacks: {}\n};\n\n/**\n * Main bridge layer hook that provides simplified interface for UI components\n */\nexport function useBridgeLayer(config: BridgeLayerConfig = {}): {\n  state: SimplifiedTryonState;\n  actions: SimplifiedTryonActions;\n  advanced: {\n    workflow: TryonWorkflowState & TryonWorkflowActions;\n    uploads: {\n      user: ReturnType<typeof useSingleImageUpload>;\n      apparel: ReturnType<typeof useSingleImageUpload>;\n    };\n  };\n} {\n  const finalConfig = { ...DEFAULT_BRIDGE_CONFIG, ...config };\n  const { showToast } = useToast();\n\n  // Initialize underlying hooks\n  const workflow = useTryonWorkflow(\n    finalConfig.workflow,\n    showToast\n  );\n\n  const userUpload = useSingleImageUpload(\n    finalConfig.upload,\n    (file: UploadedFile) => {\n      workflow.handleUserFileUpload(file.file);\n    },\n    (error: UploadError) => {\n      finalConfig.callbacks.onError?.(error.message);\n      showToast(error.message, 'error');\n    }\n  );\n\n  const apparelUpload = useSingleImageUpload(\n    finalConfig.upload,\n    (file: UploadedFile) => {\n      workflow.handleApparelFileUpload(file.file);\n    },\n    (error: UploadError) => {\n      finalConfig.callbacks.onError?.(error.message);\n      showToast(error.message, 'error');\n    }\n  );\n\n  // Simplified state mapping\n  const simplifiedState: SimplifiedTryonState = {\n    // Core UI state\n    isLoading: workflow.isCapturing ||\n               userUpload.uploadState === 'processing' ||\n               apparelUpload.uploadState === 'processing',\n    isReady: workflow.canGenerate(),\n    showResult: workflow.showPolaroid,\n\n    // User feedback\n    resultImage: workflow.generatedImage,\n    errorMessage: workflow.error?.message || null,\n    successMessage: workflow.generatedImage ? 'Try-on generated successfully!' : null,\n\n    // Upload state\n    hasUserImage: !!workflow.userImageFile || !!userUpload.file,\n    hasApparelImage: !!workflow.apparelImageFile || !!apparelUpload.file,\n    userImagePreview: workflow.leftCardImage || userUpload.file?.preview || null,\n    apparelImagePreview: workflow.rightCardImage || apparelUpload.file?.preview || null,\n\n    // Progress\n    progress: workflow.progress,\n    progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),\n\n    // Interaction state\n    canGenerate: workflow.canGenerate(),\n    canRetry: workflow.hasError && workflow.error?.retryable === true,\n    canReset: workflow.workflowState !== 'idle' || !!userUpload.file || !!apparelUpload.file\n  };\n\n  // Simplified actions\n  const simplifiedActions: SimplifiedTryonActions = {\n    // File upload actions\n    uploadUserImage: useCallback(async (file: File) => {\n      try {\n        await userUpload.uploadFile(file);\n        if (finalConfig.ui.showDetailedProgress) {\n          showToast('User image uploaded successfully', 'success');\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to upload user image';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [userUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    uploadApparelImage: useCallback(async (file: File) => {\n      try {\n        await apparelUpload.uploadFile(file);\n        if (finalConfig.ui.showDetailedProgress) {\n          showToast('Apparel image uploaded successfully', 'success');\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to upload apparel image';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [apparelUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    removeUserImage: useCallback(() => {\n      userUpload.clearFiles();\n      workflow.resetWorkflow();\n    }, [userUpload, workflow]),\n\n    removeApparelImage: useCallback(() => {\n      apparelUpload.clearFiles();\n      workflow.resetWorkflow();\n    }, [apparelUpload, workflow]),\n\n    // Generation actions\n    generate: useCallback(async () => {\n      try {\n        finalConfig.callbacks.onGenerationStart?.();\n        await workflow.startGeneration();\n\n        if (workflow.generatedImage) {\n          const message = 'Try-on generated successfully!';\n          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);\n          finalConfig.callbacks.onSuccess?.(message);\n\n          if (finalConfig.ui.showDetailedProgress) {\n            showToast(message, 'success');\n          }\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to generate try-on';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    retry: useCallback(async () => {\n      try {\n        await workflow.retryGeneration();\n\n        if (workflow.generatedImage) {\n          const message = 'Try-on generated successfully!';\n          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);\n          finalConfig.callbacks.onSuccess?.(message);\n\n          if (finalConfig.ui.showDetailedProgress) {\n            showToast(message, 'success');\n          }\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to retry generation';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    reset: useCallback(() => {\n      workflow.resetWorkflow();\n      userUpload.clearFiles();\n      apparelUpload.clearFiles();\n    }, [workflow, userUpload, apparelUpload]),\n\n    // UI actions\n    hideResult: useCallback(() => {\n      workflow.closePolaroid();\n    }, [workflow]),\n\n    clearError: useCallback(() => {\n      workflow.clearError();\n    }, [workflow]),\n\n    downloadResult: useCallback(() => {\n      if (!workflow.generatedImage || !finalConfig.ui.enableDownload) return;\n\n      try {\n        const link = document.createElement('a');\n        link.href = workflow.generatedImage;\n        link.download = `tryon-result-${Date.now()}.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\n        showToast('Image downloaded successfully', 'success');\n      } catch (error) {\n        showToast('Failed to download image', 'error');\n      }\n    }, [workflow.generatedImage, finalConfig.ui.enableDownload, showToast]),\n\n    shareResult: useCallback(async () => {\n      if (!workflow.generatedImage || !finalConfig.ui.enableShare) return;\n\n      try {\n        if (navigator.share) {\n          // Use native share API if available\n          const response = await fetch(workflow.generatedImage);\n          const blob = await response.blob();\n          const file = new File([blob], 'tryon-result.png', { type: 'image/png' });\n\n          await navigator.share({\n            title: 'My Try-On Result',\n            text: 'Check out my virtual try-on!',\n            files: [file]\n          });\n        } else {\n          // Fallback to copying URL\n          await navigator.clipboard.writeText(workflow.generatedImage);\n          showToast('Image URL copied to clipboard', 'success');\n        }\n      } catch (error) {\n        showToast('Failed to share image', 'error');\n      }\n    }, [workflow.generatedImage, finalConfig.ui.enableShare, showToast])\n  };\n\n  return {\n    state: simplifiedState,\n    actions: simplifiedActions,\n    advanced: {\n      workflow,\n      uploads: {\n        user: userUpload,\n        apparel: apparelUpload\n      }\n    }\n  };\n}\n\n/**\n * Helper function to generate user-friendly progress messages\n */\nfunction getProgressMessage(workflowState: string, progress: number): string {\n  switch (workflowState) {\n    case 'idle':\n      return 'Ready to generate';\n    case 'uploading':\n      return 'Uploading images...';\n    case 'processing':\n      return 'Processing images...';\n    case 'generating':\n      if (progress < 30) return 'Preparing images...';\n      if (progress < 80) return 'Generating try-on...';\n      return 'Finalizing result...';\n    case 'complete':\n      return 'Generation complete!';\n    case 'error':\n      return 'Generation failed';\n    default:\n      return `Processing... ${progress}%`;\n  }\n}\n\n/**\n * Specialized hook for simple try-on generation (most basic use case)\n */\nexport function useSimpleTryon(config: BridgeLayerConfig = {}) {\n  const { state, actions } = useBridgeLayer(config);\n\n  return {\n    // Minimal state for simple components\n    isLoading: state.isLoading,\n    result: state.resultImage,\n    error: state.errorMessage,\n    canGenerate: state.canGenerate,\n\n    // Essential actions\n    uploadUserImage: actions.uploadUserImage,\n    uploadApparelImage: actions.uploadApparelImage,\n    generate: actions.generate,\n    reset: actions.reset\n  };\n}\n\n/**\n * Hook for components that need upload progress tracking\n */\nexport function useTryonWithProgress(config: BridgeLayerConfig = {}) {\n  const { state, actions } = useBridgeLayer(config);\n\n  return {\n    ...state,\n    ...actions,\n\n    // Additional progress information\n    uploadProgress: {\n      user: state.hasUserImage ? 100 : 0,\n      apparel: state.hasApparelImage ? 100 : 0\n    },\n\n    overallProgress: calculateOverallProgress(state)\n  };\n}\n\n/**\n * Helper function to calculate overall progress\n */\nfunction calculateOverallProgress(state: SimplifiedTryonState): number {\n  let progress = 0;\n\n  // Upload progress (40% of total)\n  if (state.hasUserImage) progress += 20;\n  if (state.hasApparelImage) progress += 20;\n\n  // Generation progress (60% of total)\n  if (state.isLoading || state.progress > 0) {\n    progress += (state.progress * 0.6);\n  }\n\n  if (state.resultImage) progress = 100;\n\n  return Math.round(progress);\n}\n"],
      names: ["useBridgeLayer", "useSimpleTryon", "useTryonWithProgress", "DEFAULT_BRIDGE_CONFIG", "workflow", "timeoutMs", "compressionLimitKB", "autoRetry", "maxRetries", "debug", "process", "env", "NODE_ENV", "upload", "maxSizeBytes", "allowedTypes", "generateThumbnails", "thumbnailSizes", "enableDragDrop", "autoProcess", "validation", "minWidth", "minHeight", "maxWidth", "maxHeight", "ui", "autoHideMessages", "messageTimeoutMs", "enableShare", "enableDownload", "showDetailedProgress", "callbacks", "config", "finalConfig", "showToast", "useToast", "useTryonWorkflow", "userUpload", "useSingleImageUpload", "file", "handleUserFileUpload", "error", "onError", "message", "apparelUpload", "handleApparelFileUpload", "simplifiedState", "isLoading", "isCapturing", "uploadState", "isReady", "canGenerate", "showResult", "showPolaroid", "resultImage", "generatedImage", "errorMessage", "successMessage", "hasUserImage", "userImageFile", "hasApparelImage", "apparelImageFile", "userImagePreview", "leftCardImage", "preview", "apparelImagePreview", "rightCardImage", "progress", "progressMessage", "getProgressMessage", "workflowState", "canRetry", "hasError", "retryable", "canReset", "simplifiedActions", "uploadUserImage", "useCallback", "uploadFile", "Error", "uploadApparelImage", "removeUserImage", "clearFiles", "resetWorkflow", "removeApparelImage", "generate", "onGenerationStart", "startGeneration", "onGenerationComplete", "onSuccess", "retry", "retryGeneration", "reset", "hideResult", "closePolaroid", "clearError", "downloadResult", "link", "document", "createElement", "href", "download", "Date", "now", "body", "appendChild", "click", "removeChild", "shareResult", "navigator", "share", "response", "fetch", "blob", "File", "type", "title", "text", "files", "clipboard", "writeText", "state", "actions", "advanced", "uploads", "user", "apparel", "result", "uploadProgress", "overallProgress", "calculateOverallProgress", "Math", "round"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3a80970eb15cb8ec958425d82d7b18612192e788"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bceljhu8i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bceljhu8i();
cov_bceljhu8i().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[0]++;
  cov_bceljhu8i().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bceljhu8i().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_bceljhu8i().s[3]++;
_export(exports, {
  useBridgeLayer: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[1]++;
    cov_bceljhu8i().s[4]++;
    return useBridgeLayer;
  },
  useSimpleTryon: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[2]++;
    cov_bceljhu8i().s[5]++;
    return useSimpleTryon;
  },
  useTryonWithProgress: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[3]++;
    cov_bceljhu8i().s[6]++;
    return useTryonWithProgress;
  }
});
const _react =
/* istanbul ignore next */
(cov_bceljhu8i().s[7]++, require("react"));
const _useTryonWorkflow =
/* istanbul ignore next */
(cov_bceljhu8i().s[8]++, require("./useTryonWorkflow"));
const _useImageUpload =
/* istanbul ignore next */
(cov_bceljhu8i().s[9]++, require("./useImageUpload"));
const _index =
/* istanbul ignore next */
(cov_bceljhu8i().s[10]++, require("./index"));
/**
 * Default bridge layer configuration
 */
const DEFAULT_BRIDGE_CONFIG =
/* istanbul ignore next */
(cov_bceljhu8i().s[11]++, {
  workflow: {
    timeoutMs: 60000,
    compressionLimitKB: 2048,
    autoRetry: false,
    maxRetries: 3,
    debug: process.env.NODE_ENV === 'development'
  },
  upload: {
    maxSizeBytes: 10 * 1024 * 1024,
    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],
    generateThumbnails: true,
    thumbnailSizes: [150, 300],
    enableDragDrop: true,
    autoProcess: false,
    validation: {
      minWidth: 256,
      minHeight: 256,
      maxWidth: 4096,
      maxHeight: 4096
    }
  },
  ui: {
    autoHideMessages: true,
    messageTimeoutMs: 5000,
    enableShare: true,
    enableDownload: true,
    showDetailedProgress: true
  },
  callbacks: {}
});
function useBridgeLayer(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[4]++;
  const finalConfig =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[12]++, {
    ...DEFAULT_BRIDGE_CONFIG,
    ...config
  });
  const {
    showToast
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[13]++, (0, _index.useToast)());
  // Initialize underlying hooks
  const workflow =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[14]++, (0, _useTryonWorkflow.useTryonWorkflow)(finalConfig.workflow, showToast));
  const userUpload =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[15]++, (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, file => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[5]++;
    cov_bceljhu8i().s[16]++;
    workflow.handleUserFileUpload(file.file);
  }, error => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[6]++;
    cov_bceljhu8i().s[17]++;
    finalConfig.callbacks.onError?.(error.message);
    /* istanbul ignore next */
    cov_bceljhu8i().s[18]++;
    showToast(error.message, 'error');
  }));
  const apparelUpload =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[19]++, (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, file => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[7]++;
    cov_bceljhu8i().s[20]++;
    workflow.handleApparelFileUpload(file.file);
  }, error => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[8]++;
    cov_bceljhu8i().s[21]++;
    finalConfig.callbacks.onError?.(error.message);
    /* istanbul ignore next */
    cov_bceljhu8i().s[22]++;
    showToast(error.message, 'error');
  }));
  // Simplified state mapping
  const simplifiedState =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[23]++, {
    // Core UI state
    isLoading:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][0]++, workflow.isCapturing) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][1]++, userUpload.uploadState === 'processing') ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][2]++, apparelUpload.uploadState === 'processing'),
    isReady: workflow.canGenerate(),
    showResult: workflow.showPolaroid,
    // User feedback
    resultImage: workflow.generatedImage,
    errorMessage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[2][0]++, workflow.error?.message) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[2][1]++, null),
    successMessage: workflow.generatedImage ?
    /* istanbul ignore next */
    (cov_bceljhu8i().b[3][0]++, 'Try-on generated successfully!') :
    /* istanbul ignore next */
    (cov_bceljhu8i().b[3][1]++, null),
    // Upload state
    hasUserImage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[4][0]++, !!workflow.userImageFile) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[4][1]++, !!userUpload.file),
    hasApparelImage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[5][0]++, !!workflow.apparelImageFile) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[5][1]++, !!apparelUpload.file),
    userImagePreview:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][0]++, workflow.leftCardImage) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][1]++, userUpload.file?.preview) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][2]++, null),
    apparelImagePreview:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][0]++, workflow.rightCardImage) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][1]++, apparelUpload.file?.preview) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][2]++, null),
    // Progress
    progress: workflow.progress,
    progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),
    // Interaction state
    canGenerate: workflow.canGenerate(),
    canRetry:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[8][0]++, workflow.hasError) &&
    /* istanbul ignore next */
    (cov_bceljhu8i().b[8][1]++, workflow.error?.retryable === true),
    canReset:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][0]++, workflow.workflowState !== 'idle') ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][1]++, !!userUpload.file) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][2]++, !!apparelUpload.file)
  });
  // Simplified actions
  const simplifiedActions =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[24]++, {
    // File upload actions
    uploadUserImage: (0, _react.useCallback)(async file => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[9]++;
      cov_bceljhu8i().s[25]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[26]++;
        await userUpload.uploadFile(file);
        /* istanbul ignore next */
        cov_bceljhu8i().s[27]++;
        if (finalConfig.ui.showDetailedProgress) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[10][0]++;
          cov_bceljhu8i().s[28]++;
          showToast('User image uploaded successfully', 'success');
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[10][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[29]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[11][1]++, 'Failed to upload user image'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[30]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[31]++;
        throw error;
      }
    }, [userUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    uploadApparelImage: (0, _react.useCallback)(async file => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[10]++;
      cov_bceljhu8i().s[32]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[33]++;
        await apparelUpload.uploadFile(file);
        /* istanbul ignore next */
        cov_bceljhu8i().s[34]++;
        if (finalConfig.ui.showDetailedProgress) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[12][0]++;
          cov_bceljhu8i().s[35]++;
          showToast('Apparel image uploaded successfully', 'success');
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[12][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[36]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[13][1]++, 'Failed to upload apparel image'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[37]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[38]++;
        throw error;
      }
    }, [apparelUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    removeUserImage: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[11]++;
      cov_bceljhu8i().s[39]++;
      userUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[40]++;
      workflow.resetWorkflow();
    }, [userUpload, workflow]),
    removeApparelImage: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[12]++;
      cov_bceljhu8i().s[41]++;
      apparelUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[42]++;
      workflow.resetWorkflow();
    }, [apparelUpload, workflow]),
    // Generation actions
    generate: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[13]++;
      cov_bceljhu8i().s[43]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[44]++;
        finalConfig.callbacks.onGenerationStart?.();
        /* istanbul ignore next */
        cov_bceljhu8i().s[45]++;
        await workflow.startGeneration();
        /* istanbul ignore next */
        cov_bceljhu8i().s[46]++;
        if (workflow.generatedImage) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[14][0]++;
          const message =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[47]++, 'Try-on generated successfully!');
          /* istanbul ignore next */
          cov_bceljhu8i().s[48]++;
          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[49]++;
          finalConfig.callbacks.onSuccess?.(message);
          /* istanbul ignore next */
          cov_bceljhu8i().s[50]++;
          if (finalConfig.ui.showDetailedProgress) {
            /* istanbul ignore next */
            cov_bceljhu8i().b[15][0]++;
            cov_bceljhu8i().s[51]++;
            showToast(message, 'success');
          } else
          /* istanbul ignore next */
          {
            cov_bceljhu8i().b[15][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[14][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[52]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[16][1]++, 'Failed to generate try-on'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[53]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[54]++;
        throw error;
      }
    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    retry: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[14]++;
      cov_bceljhu8i().s[55]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[56]++;
        await workflow.retryGeneration();
        /* istanbul ignore next */
        cov_bceljhu8i().s[57]++;
        if (workflow.generatedImage) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[17][0]++;
          const message =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[58]++, 'Try-on generated successfully!');
          /* istanbul ignore next */
          cov_bceljhu8i().s[59]++;
          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[60]++;
          finalConfig.callbacks.onSuccess?.(message);
          /* istanbul ignore next */
          cov_bceljhu8i().s[61]++;
          if (finalConfig.ui.showDetailedProgress) {
            /* istanbul ignore next */
            cov_bceljhu8i().b[18][0]++;
            cov_bceljhu8i().s[62]++;
            showToast(message, 'success');
          } else
          /* istanbul ignore next */
          {
            cov_bceljhu8i().b[18][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[17][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[63]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[19][1]++, 'Failed to retry generation'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[64]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[65]++;
        throw error;
      }
    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    reset: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[15]++;
      cov_bceljhu8i().s[66]++;
      workflow.resetWorkflow();
      /* istanbul ignore next */
      cov_bceljhu8i().s[67]++;
      userUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[68]++;
      apparelUpload.clearFiles();
    }, [workflow, userUpload, apparelUpload]),
    // UI actions
    hideResult: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[16]++;
      cov_bceljhu8i().s[69]++;
      workflow.closePolaroid();
    }, [workflow]),
    clearError: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[17]++;
      cov_bceljhu8i().s[70]++;
      workflow.clearError();
    }, [workflow]),
    downloadResult: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[18]++;
      cov_bceljhu8i().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_bceljhu8i().b[21][0]++, !workflow.generatedImage) ||
      /* istanbul ignore next */
      (cov_bceljhu8i().b[21][1]++, !finalConfig.ui.enableDownload)) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[20][0]++;
        cov_bceljhu8i().s[72]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[20][1]++;
      }
      cov_bceljhu8i().s[73]++;
      try {
        const link =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[74]++, document.createElement('a'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[75]++;
        link.href = workflow.generatedImage;
        /* istanbul ignore next */
        cov_bceljhu8i().s[76]++;
        link.download = `tryon-result-${Date.now()}.png`;
        /* istanbul ignore next */
        cov_bceljhu8i().s[77]++;
        document.body.appendChild(link);
        /* istanbul ignore next */
        cov_bceljhu8i().s[78]++;
        link.click();
        /* istanbul ignore next */
        cov_bceljhu8i().s[79]++;
        document.body.removeChild(link);
        /* istanbul ignore next */
        cov_bceljhu8i().s[80]++;
        showToast('Image downloaded successfully', 'success');
      } catch (error) {
        /* istanbul ignore next */
        cov_bceljhu8i().s[81]++;
        showToast('Failed to download image', 'error');
      }
    }, [workflow.generatedImage, finalConfig.ui.enableDownload, showToast]),
    shareResult: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[19]++;
      cov_bceljhu8i().s[82]++;
      if (
      /* istanbul ignore next */
      (cov_bceljhu8i().b[23][0]++, !workflow.generatedImage) ||
      /* istanbul ignore next */
      (cov_bceljhu8i().b[23][1]++, !finalConfig.ui.enableShare)) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[22][0]++;
        cov_bceljhu8i().s[83]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[22][1]++;
      }
      cov_bceljhu8i().s[84]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[85]++;
        if (navigator.share) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[24][0]++;
          // Use native share API if available
          const response =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[86]++, await fetch(workflow.generatedImage));
          const blob =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[87]++, await response.blob());
          const file =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[88]++, new File([blob], 'tryon-result.png', {
            type: 'image/png'
          }));
          /* istanbul ignore next */
          cov_bceljhu8i().s[89]++;
          await navigator.share({
            title: 'My Try-On Result',
            text: 'Check out my virtual try-on!',
            files: [file]
          });
        } else {
          /* istanbul ignore next */
          cov_bceljhu8i().b[24][1]++;
          cov_bceljhu8i().s[90]++;
          // Fallback to copying URL
          await navigator.clipboard.writeText(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[91]++;
          showToast('Image URL copied to clipboard', 'success');
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_bceljhu8i().s[92]++;
        showToast('Failed to share image', 'error');
      }
    }, [workflow.generatedImage, finalConfig.ui.enableShare, showToast])
  });
  /* istanbul ignore next */
  cov_bceljhu8i().s[93]++;
  return {
    state: simplifiedState,
    actions: simplifiedActions,
    advanced: {
      workflow,
      uploads: {
        user: userUpload,
        apparel: apparelUpload
      }
    }
  };
}
/**
 * Helper function to generate user-friendly progress messages
 */
function getProgressMessage(workflowState, progress) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[20]++;
  cov_bceljhu8i().s[94]++;
  switch (workflowState) {
    case 'idle':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][0]++;
      cov_bceljhu8i().s[95]++;
      return 'Ready to generate';
    case 'uploading':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][1]++;
      cov_bceljhu8i().s[96]++;
      return 'Uploading images...';
    case 'processing':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][2]++;
      cov_bceljhu8i().s[97]++;
      return 'Processing images...';
    case 'generating':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][3]++;
      cov_bceljhu8i().s[98]++;
      if (progress < 30) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[26][0]++;
        cov_bceljhu8i().s[99]++;
        return 'Preparing images...';
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[26][1]++;
      }
      cov_bceljhu8i().s[100]++;
      if (progress < 80) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[27][0]++;
        cov_bceljhu8i().s[101]++;
        return 'Generating try-on...';
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[27][1]++;
      }
      cov_bceljhu8i().s[102]++;
      return 'Finalizing result...';
    case 'complete':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][4]++;
      cov_bceljhu8i().s[103]++;
      return 'Generation complete!';
    case 'error':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][5]++;
      cov_bceljhu8i().s[104]++;
      return 'Generation failed';
    default:
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][6]++;
      cov_bceljhu8i().s[105]++;
      return `Processing... ${progress}%`;
  }
}
function useSimpleTryon(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[28][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[21]++;
  const {
    state,
    actions
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[106]++, useBridgeLayer(config));
  /* istanbul ignore next */
  cov_bceljhu8i().s[107]++;
  return {
    // Minimal state for simple components
    isLoading: state.isLoading,
    result: state.resultImage,
    error: state.errorMessage,
    canGenerate: state.canGenerate,
    // Essential actions
    uploadUserImage: actions.uploadUserImage,
    uploadApparelImage: actions.uploadApparelImage,
    generate: actions.generate,
    reset: actions.reset
  };
}
function useTryonWithProgress(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[29][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[22]++;
  const {
    state,
    actions
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[108]++, useBridgeLayer(config));
  /* istanbul ignore next */
  cov_bceljhu8i().s[109]++;
  return {
    ...state,
    ...actions,
    // Additional progress information
    uploadProgress: {
      user: state.hasUserImage ?
      /* istanbul ignore next */
      (cov_bceljhu8i().b[30][0]++, 100) :
      /* istanbul ignore next */
      (cov_bceljhu8i().b[30][1]++, 0),
      apparel: state.hasApparelImage ?
      /* istanbul ignore next */
      (cov_bceljhu8i().b[31][0]++, 100) :
      /* istanbul ignore next */
      (cov_bceljhu8i().b[31][1]++, 0)
    },
    overallProgress: calculateOverallProgress(state)
  };
}
/**
 * Helper function to calculate overall progress
 */
function calculateOverallProgress(state) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[23]++;
  let progress =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[110]++, 0);
  // Upload progress (40% of total)
  /* istanbul ignore next */
  cov_bceljhu8i().s[111]++;
  if (state.hasUserImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[32][0]++;
    cov_bceljhu8i().s[112]++;
    progress += 20;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[32][1]++;
  }
  cov_bceljhu8i().s[113]++;
  if (state.hasApparelImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[33][0]++;
    cov_bceljhu8i().s[114]++;
    progress += 20;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[33][1]++;
  }
  // Generation progress (60% of total)
  cov_bceljhu8i().s[115]++;
  if (
  /* istanbul ignore next */
  (cov_bceljhu8i().b[35][0]++, state.isLoading) ||
  /* istanbul ignore next */
  (cov_bceljhu8i().b[35][1]++, state.progress > 0)) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[34][0]++;
    cov_bceljhu8i().s[116]++;
    progress += state.progress * 0.6;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[34][1]++;
  }
  cov_bceljhu8i().s[117]++;
  if (state.resultImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[36][0]++;
    cov_bceljhu8i().s[118]++;
    progress = 100;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[36][1]++;
  }
  cov_bceljhu8i().s[119]++;
  return Math.round(progress);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYmNlbGpodThpIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwidXNlQnJpZGdlTGF5ZXIiLCJmIiwidXNlU2ltcGxlVHJ5b24iLCJ1c2VUcnlvbldpdGhQcm9ncmVzcyIsIkRFRkFVTFRfQlJJREdFX0NPTkZJRyIsIndvcmtmbG93IiwidGltZW91dE1zIiwiY29tcHJlc3Npb25MaW1pdEtCIiwiYXV0b1JldHJ5IiwibWF4UmV0cmllcyIsImRlYnVnIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidXBsb2FkIiwibWF4U2l6ZUJ5dGVzIiwiYWxsb3dlZFR5cGVzIiwiZ2VuZXJhdGVUaHVtYm5haWxzIiwidGh1bWJuYWlsU2l6ZXMiLCJlbmFibGVEcmFnRHJvcCIsImF1dG9Qcm9jZXNzIiwidmFsaWRhdGlvbiIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ1aSIsImF1dG9IaWRlTWVzc2FnZXMiLCJtZXNzYWdlVGltZW91dE1zIiwiZW5hYmxlU2hhcmUiLCJlbmFibGVEb3dubG9hZCIsInNob3dEZXRhaWxlZFByb2dyZXNzIiwiY2FsbGJhY2tzIiwiY29uZmlnIiwiYiIsImZpbmFsQ29uZmlnIiwic2hvd1RvYXN0IiwiX2luZGV4IiwidXNlVG9hc3QiLCJfdXNlVHJ5b25Xb3JrZmxvdyIsInVzZVRyeW9uV29ya2Zsb3ciLCJ1c2VyVXBsb2FkIiwiX3VzZUltYWdlVXBsb2FkIiwidXNlU2luZ2xlSW1hZ2VVcGxvYWQiLCJmaWxlIiwiaGFuZGxlVXNlckZpbGVVcGxvYWQiLCJlcnJvciIsIm9uRXJyb3IiLCJtZXNzYWdlIiwiYXBwYXJlbFVwbG9hZCIsImhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkIiwic2ltcGxpZmllZFN0YXRlIiwiaXNMb2FkaW5nIiwiaXNDYXB0dXJpbmciLCJ1cGxvYWRTdGF0ZSIsImlzUmVhZHkiLCJjYW5HZW5lcmF0ZSIsInNob3dSZXN1bHQiLCJzaG93UG9sYXJvaWQiLCJyZXN1bHRJbWFnZSIsImdlbmVyYXRlZEltYWdlIiwiZXJyb3JNZXNzYWdlIiwic3VjY2Vzc01lc3NhZ2UiLCJoYXNVc2VySW1hZ2UiLCJ1c2VySW1hZ2VGaWxlIiwiaGFzQXBwYXJlbEltYWdlIiwiYXBwYXJlbEltYWdlRmlsZSIsInVzZXJJbWFnZVByZXZpZXciLCJsZWZ0Q2FyZEltYWdlIiwicHJldmlldyIsImFwcGFyZWxJbWFnZVByZXZpZXciLCJyaWdodENhcmRJbWFnZSIsInByb2dyZXNzIiwicHJvZ3Jlc3NNZXNzYWdlIiwiZ2V0UHJvZ3Jlc3NNZXNzYWdlIiwid29ya2Zsb3dTdGF0ZSIsImNhblJldHJ5IiwiaGFzRXJyb3IiLCJyZXRyeWFibGUiLCJjYW5SZXNldCIsInNpbXBsaWZpZWRBY3Rpb25zIiwidXBsb2FkVXNlckltYWdlIiwiX3JlYWN0IiwidXNlQ2FsbGJhY2siLCJ1cGxvYWRGaWxlIiwiRXJyb3IiLCJ1cGxvYWRBcHBhcmVsSW1hZ2UiLCJyZW1vdmVVc2VySW1hZ2UiLCJjbGVhckZpbGVzIiwicmVzZXRXb3JrZmxvdyIsInJlbW92ZUFwcGFyZWxJbWFnZSIsImdlbmVyYXRlIiwib25HZW5lcmF0aW9uU3RhcnQiLCJzdGFydEdlbmVyYXRpb24iLCJvbkdlbmVyYXRpb25Db21wbGV0ZSIsIm9uU3VjY2VzcyIsInJldHJ5IiwicmV0cnlHZW5lcmF0aW9uIiwicmVzZXQiLCJoaWRlUmVzdWx0IiwiY2xvc2VQb2xhcm9pZCIsImNsZWFyRXJyb3IiLCJkb3dubG9hZFJlc3VsdCIsImxpbmsiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiZG93bmxvYWQiLCJEYXRlIiwibm93IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsInNoYXJlUmVzdWx0IiwibmF2aWdhdG9yIiwic2hhcmUiLCJyZXNwb25zZSIsImZldGNoIiwiYmxvYiIsIkZpbGUiLCJ0eXBlIiwidGl0bGUiLCJ0ZXh0IiwiZmlsZXMiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJzdGF0ZSIsImFjdGlvbnMiLCJhZHZhbmNlZCIsInVwbG9hZHMiLCJ1c2VyIiwiYXBwYXJlbCIsInJlc3VsdCIsInVwbG9hZFByb2dyZXNzIiwib3ZlcmFsbFByb2dyZXNzIiwiY2FsY3VsYXRlT3ZlcmFsbFByb2dyZXNzIiwiTWF0aCIsInJvdW5kIl0sInNvdXJjZXMiOlsiL1VzZXJzL3dpbGxzdHJlZXRlci9XZWJzdG9ybVByb2plY3RzL3ZpYmUtY29kaW5nL3Rob3NlLXBlb3BsZS9UaGUtU3VzLUZpdC1ncC9zcmMvaG9va3MvdXNlQnJpZGdlTGF5ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG4vLyBCcmlkZ2UgTGF5ZXIgQ29tcG9uZW50IEludGVyZmFjZXNcbi8vIENsZWFuLCBkZWNsYXJhdGl2ZSBBUElzIHRoYXQgaGlkZSBidXNpbmVzcyBsb2dpYyBjb21wbGV4aXR5IGZyb20gUmVhY3QgY29tcG9uZW50c1xuXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRyeW9uV29ya2Zsb3csIHR5cGUgV29ya2Zsb3dDb25maWcsIHR5cGUgVHJ5b25Xb3JrZmxvd1N0YXRlLCB0eXBlIFRyeW9uV29ya2Zsb3dBY3Rpb25zIH0gZnJvbSAnLi91c2VUcnlvbldvcmtmbG93JztcbmltcG9ydCB7IHVzZVNpbmdsZUltYWdlVXBsb2FkLCB0eXBlIFVwbG9hZENvbmZpZywgdHlwZSBVcGxvYWRlZEZpbGUsIHR5cGUgVXBsb2FkRXJyb3IgfSBmcm9tICcuL3VzZUltYWdlVXBsb2FkJztcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnLi9pbmRleCc7XG5cbi8qKlxuICogU2ltcGxpZmllZCBjb21wb25lbnQgc3RhdGUgaW50ZXJmYWNlXG4gKiBBYnN0cmFjdHMgYXdheSBjb21wbGV4IGJ1c2luZXNzIGxvZ2ljIGFuZCBwcm92aWRlcyBvbmx5IHdoYXQgVUkgY29tcG9uZW50cyBuZWVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxpZmllZFRyeW9uU3RhdGUge1xuICAvLyBDb3JlIFVJIHN0YXRlXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaXNSZWFkeTogYm9vbGVhbjtcbiAgc2hvd1Jlc3VsdDogYm9vbGVhbjtcblxuICAvLyBVc2VyIGZlZWRiYWNrXG4gIHJlc3VsdEltYWdlOiBzdHJpbmcgfCBudWxsO1xuICBlcnJvck1lc3NhZ2U6IHN0cmluZyB8IG51bGw7XG4gIHN1Y2Nlc3NNZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8vIFVwbG9hZCBzdGF0ZVxuICBoYXNVc2VySW1hZ2U6IGJvb2xlYW47XG4gIGhhc0FwcGFyZWxJbWFnZTogYm9vbGVhbjtcbiAgdXNlckltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcbiAgYXBwYXJlbEltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcblxuICAvLyBQcm9ncmVzc1xuICBwcm9ncmVzczogbnVtYmVyO1xuICBwcm9ncmVzc01lc3NhZ2U6IHN0cmluZztcblxuICAvLyBJbnRlcmFjdGlvbiBzdGF0ZVxuICBjYW5HZW5lcmF0ZTogYm9vbGVhbjtcbiAgY2FuUmV0cnk6IGJvb2xlYW47XG4gIGNhblJlc2V0OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFNpbXBsaWZpZWQgY29tcG9uZW50IGFjdGlvbnMgaW50ZXJmYWNlXG4gKiBQcm92aWRlcyBjbGVhbiwgc2VtYW50aWMgYWN0aW9ucyBmb3IgVUkgY29tcG9uZW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpbXBsaWZpZWRUcnlvbkFjdGlvbnMge1xuICAvLyBGaWxlIHVwbG9hZCBhY3Rpb25zXG4gIHVwbG9hZFVzZXJJbWFnZTogKGZpbGU6IEZpbGUpID0+IFByb21pc2U8dm9pZD47XG4gIHVwbG9hZEFwcGFyZWxJbWFnZTogKGZpbGU6IEZpbGUpID0+IFByb21pc2U8dm9pZD47XG4gIHJlbW92ZVVzZXJJbWFnZTogKCkgPT4gdm9pZDtcbiAgcmVtb3ZlQXBwYXJlbEltYWdlOiAoKSA9PiB2b2lkO1xuXG4gIC8vIEdlbmVyYXRpb24gYWN0aW9uc1xuICBnZW5lcmF0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgcmV0cnk6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHJlc2V0OiAoKSA9PiB2b2lkO1xuXG4gIC8vIFVJIGFjdGlvbnNcbiAgaGlkZVJlc3VsdDogKCkgPT4gdm9pZDtcbiAgY2xlYXJFcnJvcjogKCkgPT4gdm9pZDtcbiAgZG93bmxvYWRSZXN1bHQ6ICgpID0+IHZvaWQ7XG4gIHNoYXJlUmVzdWx0OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBzaW1wbGlmaWVkIGJyaWRnZSBsYXllclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyaWRnZUxheWVyQ29uZmlnIHtcbiAgLy8gV29ya2Zsb3cgY29uZmlndXJhdGlvblxuICB3b3JrZmxvdz86IFdvcmtmbG93Q29uZmlnO1xuXG4gIC8vIFVwbG9hZCBjb25maWd1cmF0aW9uXG4gIHVwbG9hZD86IFVwbG9hZENvbmZpZztcblxuICAvLyBVSSBiZWhhdmlvclxuICB1aT86IHtcbiAgICBhdXRvSGlkZU1lc3NhZ2VzPzogYm9vbGVhbjtcbiAgICBtZXNzYWdlVGltZW91dE1zPzogbnVtYmVyO1xuICAgIGVuYWJsZVNoYXJlPzogYm9vbGVhbjtcbiAgICBlbmFibGVEb3dubG9hZD86IGJvb2xlYW47XG4gICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M/OiBib29sZWFuO1xuICB9O1xuXG4gIC8vIENhbGxiYWNrc1xuICBjYWxsYmFja3M/OiB7XG4gICAgb25HZW5lcmF0aW9uU3RhcnQ/OiAoKSA9PiB2b2lkO1xuICAgIG9uR2VuZXJhdGlvbkNvbXBsZXRlPzogKGltYWdlVXJsOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgb25FcnJvcj86IChlcnJvcjogc3RyaW5nKSA9PiB2b2lkO1xuICAgIG9uU3VjY2Vzcz86IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIH07XG59XG5cbi8qKlxuICogRGVmYXVsdCBicmlkZ2UgbGF5ZXIgY29uZmlndXJhdGlvblxuICovXG5jb25zdCBERUZBVUxUX0JSSURHRV9DT05GSUc6IFJlcXVpcmVkPEJyaWRnZUxheWVyQ29uZmlnPiA9IHtcbiAgd29ya2Zsb3c6IHtcbiAgICB0aW1lb3V0TXM6IDYwMDAwLFxuICAgIGNvbXByZXNzaW9uTGltaXRLQjogMjA0OCxcbiAgICBhdXRvUmV0cnk6IGZhbHNlLFxuICAgIG1heFJldHJpZXM6IDMsXG4gICAgZGVidWc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnXG4gIH0sXG4gIHVwbG9hZDoge1xuICAgIG1heFNpemVCeXRlczogMTAgKiAxMDI0ICogMTAyNCxcbiAgICBhbGxvd2VkVHlwZXM6IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2Uvd2VicCddLFxuICAgIGdlbmVyYXRlVGh1bWJuYWlsczogdHJ1ZSxcbiAgICB0aHVtYm5haWxTaXplczogWzE1MCwgMzAwXSxcbiAgICBlbmFibGVEcmFnRHJvcDogdHJ1ZSxcbiAgICBhdXRvUHJvY2VzczogZmFsc2UsXG4gICAgdmFsaWRhdGlvbjoge1xuICAgICAgbWluV2lkdGg6IDI1NixcbiAgICAgIG1pbkhlaWdodDogMjU2LFxuICAgICAgbWF4V2lkdGg6IDQwOTYsXG4gICAgICBtYXhIZWlnaHQ6IDQwOTZcbiAgICB9XG4gIH0sXG4gIHVpOiB7XG4gICAgYXV0b0hpZGVNZXNzYWdlczogdHJ1ZSxcbiAgICBtZXNzYWdlVGltZW91dE1zOiA1MDAwLFxuICAgIGVuYWJsZVNoYXJlOiB0cnVlLFxuICAgIGVuYWJsZURvd25sb2FkOiB0cnVlLFxuICAgIHNob3dEZXRhaWxlZFByb2dyZXNzOiB0cnVlXG4gIH0sXG4gIGNhbGxiYWNrczoge31cbn07XG5cbi8qKlxuICogTWFpbiBicmlkZ2UgbGF5ZXIgaG9vayB0aGF0IHByb3ZpZGVzIHNpbXBsaWZpZWQgaW50ZXJmYWNlIGZvciBVSSBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCcmlkZ2VMYXllcihjb25maWc6IEJyaWRnZUxheWVyQ29uZmlnID0ge30pOiB7XG4gIHN0YXRlOiBTaW1wbGlmaWVkVHJ5b25TdGF0ZTtcbiAgYWN0aW9uczogU2ltcGxpZmllZFRyeW9uQWN0aW9ucztcbiAgYWR2YW5jZWQ6IHtcbiAgICB3b3JrZmxvdzogVHJ5b25Xb3JrZmxvd1N0YXRlICYgVHJ5b25Xb3JrZmxvd0FjdGlvbnM7XG4gICAgdXBsb2Fkczoge1xuICAgICAgdXNlcjogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2luZ2xlSW1hZ2VVcGxvYWQ+O1xuICAgICAgYXBwYXJlbDogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2luZ2xlSW1hZ2VVcGxvYWQ+O1xuICAgIH07XG4gIH07XG59IHtcbiAgY29uc3QgZmluYWxDb25maWcgPSB7IC4uLkRFRkFVTFRfQlJJREdFX0NPTkZJRywgLi4uY29uZmlnIH07XG4gIGNvbnN0IHsgc2hvd1RvYXN0IH0gPSB1c2VUb2FzdCgpO1xuXG4gIC8vIEluaXRpYWxpemUgdW5kZXJseWluZyBob29rc1xuICBjb25zdCB3b3JrZmxvdyA9IHVzZVRyeW9uV29ya2Zsb3coXG4gICAgZmluYWxDb25maWcud29ya2Zsb3csXG4gICAgc2hvd1RvYXN0XG4gICk7XG5cbiAgY29uc3QgdXNlclVwbG9hZCA9IHVzZVNpbmdsZUltYWdlVXBsb2FkKFxuICAgIGZpbmFsQ29uZmlnLnVwbG9hZCxcbiAgICAoZmlsZTogVXBsb2FkZWRGaWxlKSA9PiB7XG4gICAgICB3b3JrZmxvdy5oYW5kbGVVc2VyRmlsZVVwbG9hZChmaWxlLmZpbGUpO1xuICAgIH0sXG4gICAgKGVycm9yOiBVcGxvYWRFcnJvcikgPT4ge1xuICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihlcnJvci5tZXNzYWdlKTtcbiAgICAgIHNob3dUb2FzdChlcnJvci5tZXNzYWdlLCAnZXJyb3InKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgYXBwYXJlbFVwbG9hZCA9IHVzZVNpbmdsZUltYWdlVXBsb2FkKFxuICAgIGZpbmFsQ29uZmlnLnVwbG9hZCxcbiAgICAoZmlsZTogVXBsb2FkZWRGaWxlKSA9PiB7XG4gICAgICB3b3JrZmxvdy5oYW5kbGVBcHBhcmVsRmlsZVVwbG9hZChmaWxlLmZpbGUpO1xuICAgIH0sXG4gICAgKGVycm9yOiBVcGxvYWRFcnJvcikgPT4ge1xuICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihlcnJvci5tZXNzYWdlKTtcbiAgICAgIHNob3dUb2FzdChlcnJvci5tZXNzYWdlLCAnZXJyb3InKTtcbiAgICB9XG4gICk7XG5cbiAgLy8gU2ltcGxpZmllZCBzdGF0ZSBtYXBwaW5nXG4gIGNvbnN0IHNpbXBsaWZpZWRTdGF0ZTogU2ltcGxpZmllZFRyeW9uU3RhdGUgPSB7XG4gICAgLy8gQ29yZSBVSSBzdGF0ZVxuICAgIGlzTG9hZGluZzogd29ya2Zsb3cuaXNDYXB0dXJpbmcgfHxcbiAgICAgICAgICAgICAgIHVzZXJVcGxvYWQudXBsb2FkU3RhdGUgPT09ICdwcm9jZXNzaW5nJyB8fFxuICAgICAgICAgICAgICAgYXBwYXJlbFVwbG9hZC51cGxvYWRTdGF0ZSA9PT0gJ3Byb2Nlc3NpbmcnLFxuICAgIGlzUmVhZHk6IHdvcmtmbG93LmNhbkdlbmVyYXRlKCksXG4gICAgc2hvd1Jlc3VsdDogd29ya2Zsb3cuc2hvd1BvbGFyb2lkLFxuXG4gICAgLy8gVXNlciBmZWVkYmFja1xuICAgIHJlc3VsdEltYWdlOiB3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSxcbiAgICBlcnJvck1lc3NhZ2U6IHdvcmtmbG93LmVycm9yPy5tZXNzYWdlIHx8IG51bGwsXG4gICAgc3VjY2Vzc01lc3NhZ2U6IHdvcmtmbG93LmdlbmVyYXRlZEltYWdlID8gJ1RyeS1vbiBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5IScgOiBudWxsLFxuXG4gICAgLy8gVXBsb2FkIHN0YXRlXG4gICAgaGFzVXNlckltYWdlOiAhIXdvcmtmbG93LnVzZXJJbWFnZUZpbGUgfHwgISF1c2VyVXBsb2FkLmZpbGUsXG4gICAgaGFzQXBwYXJlbEltYWdlOiAhIXdvcmtmbG93LmFwcGFyZWxJbWFnZUZpbGUgfHwgISFhcHBhcmVsVXBsb2FkLmZpbGUsXG4gICAgdXNlckltYWdlUHJldmlldzogd29ya2Zsb3cubGVmdENhcmRJbWFnZSB8fCB1c2VyVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcbiAgICBhcHBhcmVsSW1hZ2VQcmV2aWV3OiB3b3JrZmxvdy5yaWdodENhcmRJbWFnZSB8fCBhcHBhcmVsVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcblxuICAgIC8vIFByb2dyZXNzXG4gICAgcHJvZ3Jlc3M6IHdvcmtmbG93LnByb2dyZXNzLFxuICAgIHByb2dyZXNzTWVzc2FnZTogZ2V0UHJvZ3Jlc3NNZXNzYWdlKHdvcmtmbG93LndvcmtmbG93U3RhdGUsIHdvcmtmbG93LnByb2dyZXNzKSxcblxuICAgIC8vIEludGVyYWN0aW9uIHN0YXRlXG4gICAgY2FuR2VuZXJhdGU6IHdvcmtmbG93LmNhbkdlbmVyYXRlKCksXG4gICAgY2FuUmV0cnk6IHdvcmtmbG93Lmhhc0Vycm9yICYmIHdvcmtmbG93LmVycm9yPy5yZXRyeWFibGUgPT09IHRydWUsXG4gICAgY2FuUmVzZXQ6IHdvcmtmbG93LndvcmtmbG93U3RhdGUgIT09ICdpZGxlJyB8fCAhIXVzZXJVcGxvYWQuZmlsZSB8fCAhIWFwcGFyZWxVcGxvYWQuZmlsZVxuICB9O1xuXG4gIC8vIFNpbXBsaWZpZWQgYWN0aW9uc1xuICBjb25zdCBzaW1wbGlmaWVkQWN0aW9uczogU2ltcGxpZmllZFRyeW9uQWN0aW9ucyA9IHtcbiAgICAvLyBGaWxlIHVwbG9hZCBhY3Rpb25zXG4gICAgdXBsb2FkVXNlckltYWdlOiB1c2VDYWxsYmFjayhhc3luYyAoZmlsZTogRmlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdXNlclVwbG9hZC51cGxvYWRGaWxlKGZpbGUpO1xuICAgICAgICBpZiAoZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBzaG93VG9hc3QoJ1VzZXIgaW1hZ2UgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5JywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byB1cGxvYWQgdXNlciBpbWFnZSc7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkVycm9yPy4obWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sIFt1c2VyVXBsb2FkLCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHVwbG9hZEFwcGFyZWxJbWFnZTogdXNlQ2FsbGJhY2soYXN5bmMgKGZpbGU6IEZpbGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGFwcGFyZWxVcGxvYWQudXBsb2FkRmlsZShmaWxlKTtcbiAgICAgICAgaWYgKGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzKSB7XG4gICAgICAgICAgc2hvd1RvYXN0KCdBcHBhcmVsIGltYWdlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScsICdzdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gdXBsb2FkIGFwcGFyZWwgaW1hZ2UnO1xuICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKG1lc3NhZ2UpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LCBbYXBwYXJlbFVwbG9hZCwgZmluYWxDb25maWcuY2FsbGJhY2tzLCBmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcywgc2hvd1RvYXN0XSksXG5cbiAgICByZW1vdmVVc2VySW1hZ2U6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHVzZXJVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgICAgd29ya2Zsb3cucmVzZXRXb3JrZmxvdygpO1xuICAgIH0sIFt1c2VyVXBsb2FkLCB3b3JrZmxvd10pLFxuXG4gICAgcmVtb3ZlQXBwYXJlbEltYWdlOiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBhcHBhcmVsVXBsb2FkLmNsZWFyRmlsZXMoKTtcbiAgICAgIHdvcmtmbG93LnJlc2V0V29ya2Zsb3coKTtcbiAgICB9LCBbYXBwYXJlbFVwbG9hZCwgd29ya2Zsb3ddKSxcblxuICAgIC8vIEdlbmVyYXRpb24gYWN0aW9uc1xuICAgIGdlbmVyYXRlOiB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25HZW5lcmF0aW9uU3RhcnQ/LigpO1xuICAgICAgICBhd2FpdCB3b3JrZmxvdy5zdGFydEdlbmVyYXRpb24oKTtcblxuICAgICAgICBpZiAod29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1RyeS1vbiBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5ISc7XG4gICAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uR2VuZXJhdGlvbkNvbXBsZXRlPy4od29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpO1xuICAgICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vblN1Y2Nlc3M/LihtZXNzYWdlKTtcblxuICAgICAgICAgIGlmIChmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcykge1xuICAgICAgICAgICAgc2hvd1RvYXN0KG1lc3NhZ2UsICdzdWNjZXNzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGdlbmVyYXRlIHRyeS1vbic7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkVycm9yPy4obWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sIFt3b3JrZmxvdywgZmluYWxDb25maWcuY2FsbGJhY2tzLCBmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcywgc2hvd1RvYXN0XSksXG5cbiAgICByZXRyeTogdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgd29ya2Zsb3cucmV0cnlHZW5lcmF0aW9uKCk7XG5cbiAgICAgICAgaWYgKHdvcmtmbG93LmdlbmVyYXRlZEltYWdlKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdUcnktb24gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSEnO1xuICAgICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkdlbmVyYXRpb25Db21wbGV0ZT8uKHdvcmtmbG93LmdlbmVyYXRlZEltYWdlKTtcbiAgICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25TdWNjZXNzPy4obWVzc2FnZSk7XG5cbiAgICAgICAgICBpZiAoZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHNob3dUb2FzdChtZXNzYWdlLCAnc3VjY2VzcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byByZXRyeSBnZW5lcmF0aW9uJztcbiAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihtZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSwgW3dvcmtmbG93LCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHJlc2V0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICB3b3JrZmxvdy5yZXNldFdvcmtmbG93KCk7XG4gICAgICB1c2VyVXBsb2FkLmNsZWFyRmlsZXMoKTtcbiAgICAgIGFwcGFyZWxVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgIH0sIFt3b3JrZmxvdywgdXNlclVwbG9hZCwgYXBwYXJlbFVwbG9hZF0pLFxuXG4gICAgLy8gVUkgYWN0aW9uc1xuICAgIGhpZGVSZXN1bHQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHdvcmtmbG93LmNsb3NlUG9sYXJvaWQoKTtcbiAgICB9LCBbd29ya2Zsb3ddKSxcblxuICAgIGNsZWFyRXJyb3I6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHdvcmtmbG93LmNsZWFyRXJyb3IoKTtcbiAgICB9LCBbd29ya2Zsb3ddKSxcblxuICAgIGRvd25sb2FkUmVzdWx0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBpZiAoIXdvcmtmbG93LmdlbmVyYXRlZEltYWdlIHx8ICFmaW5hbENvbmZpZy51aS5lbmFibGVEb3dubG9hZCkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBsaW5rLmhyZWYgPSB3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZTtcbiAgICAgICAgbGluay5kb3dubG9hZCA9IGB0cnlvbi1yZXN1bHQtJHtEYXRlLm5vdygpfS5wbmdgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG5cbiAgICAgICAgc2hvd1RvYXN0KCdJbWFnZSBkb3dubG9hZGVkIHN1Y2Nlc3NmdWxseScsICdzdWNjZXNzJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzaG93VG9hc3QoJ0ZhaWxlZCB0byBkb3dubG9hZCBpbWFnZScsICdlcnJvcicpO1xuICAgICAgfVxuICAgIH0sIFt3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSwgZmluYWxDb25maWcudWkuZW5hYmxlRG93bmxvYWQsIHNob3dUb2FzdF0pLFxuXG4gICAgc2hhcmVSZXN1bHQ6IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghd29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UgfHwgIWZpbmFsQ29uZmlnLnVpLmVuYWJsZVNoYXJlKSByZXR1cm47XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3Iuc2hhcmUpIHtcbiAgICAgICAgICAvLyBVc2UgbmF0aXZlIHNoYXJlIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHdvcmtmbG93LmdlbmVyYXRlZEltYWdlKTtcbiAgICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzcG9uc2UuYmxvYigpO1xuICAgICAgICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbYmxvYl0sICd0cnlvbi1yZXN1bHQucG5nJywgeyB0eXBlOiAnaW1hZ2UvcG5nJyB9KTtcblxuICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5zaGFyZSh7XG4gICAgICAgICAgICB0aXRsZTogJ015IFRyeS1PbiBSZXN1bHQnLFxuICAgICAgICAgICAgdGV4dDogJ0NoZWNrIG91dCBteSB2aXJ0dWFsIHRyeS1vbiEnLFxuICAgICAgICAgICAgZmlsZXM6IFtmaWxlXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvcHlpbmcgVVJMXG4gICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQod29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpO1xuICAgICAgICAgIHNob3dUb2FzdCgnSW1hZ2UgVVJMIGNvcGllZCB0byBjbGlwYm9hcmQnLCAnc3VjY2VzcycpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzaG93VG9hc3QoJ0ZhaWxlZCB0byBzaGFyZSBpbWFnZScsICdlcnJvcicpO1xuICAgICAgfVxuICAgIH0sIFt3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSwgZmluYWxDb25maWcudWkuZW5hYmxlU2hhcmUsIHNob3dUb2FzdF0pXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogc2ltcGxpZmllZFN0YXRlLFxuICAgIGFjdGlvbnM6IHNpbXBsaWZpZWRBY3Rpb25zLFxuICAgIGFkdmFuY2VkOiB7XG4gICAgICB3b3JrZmxvdyxcbiAgICAgIHVwbG9hZHM6IHtcbiAgICAgICAgdXNlcjogdXNlclVwbG9hZCxcbiAgICAgICAgYXBwYXJlbDogYXBwYXJlbFVwbG9hZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgdXNlci1mcmllbmRseSBwcm9ncmVzcyBtZXNzYWdlc1xuICovXG5mdW5jdGlvbiBnZXRQcm9ncmVzc01lc3NhZ2Uod29ya2Zsb3dTdGF0ZTogc3RyaW5nLCBwcm9ncmVzczogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoICh3b3JrZmxvd1N0YXRlKSB7XG4gICAgY2FzZSAnaWRsZSc6XG4gICAgICByZXR1cm4gJ1JlYWR5IHRvIGdlbmVyYXRlJztcbiAgICBjYXNlICd1cGxvYWRpbmcnOlxuICAgICAgcmV0dXJuICdVcGxvYWRpbmcgaW1hZ2VzLi4uJztcbiAgICBjYXNlICdwcm9jZXNzaW5nJzpcbiAgICAgIHJldHVybiAnUHJvY2Vzc2luZyBpbWFnZXMuLi4nO1xuICAgIGNhc2UgJ2dlbmVyYXRpbmcnOlxuICAgICAgaWYgKHByb2dyZXNzIDwgMzApIHJldHVybiAnUHJlcGFyaW5nIGltYWdlcy4uLic7XG4gICAgICBpZiAocHJvZ3Jlc3MgPCA4MCkgcmV0dXJuICdHZW5lcmF0aW5nIHRyeS1vbi4uLic7XG4gICAgICByZXR1cm4gJ0ZpbmFsaXppbmcgcmVzdWx0Li4uJztcbiAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICByZXR1cm4gJ0dlbmVyYXRpb24gY29tcGxldGUhJztcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gJ0dlbmVyYXRpb24gZmFpbGVkJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGBQcm9jZXNzaW5nLi4uICR7cHJvZ3Jlc3N9JWA7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGVjaWFsaXplZCBob29rIGZvciBzaW1wbGUgdHJ5LW9uIGdlbmVyYXRpb24gKG1vc3QgYmFzaWMgdXNlIGNhc2UpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTaW1wbGVUcnlvbihjb25maWc6IEJyaWRnZUxheWVyQ29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBzdGF0ZSwgYWN0aW9ucyB9ID0gdXNlQnJpZGdlTGF5ZXIoY29uZmlnKTtcblxuICByZXR1cm4ge1xuICAgIC8vIE1pbmltYWwgc3RhdGUgZm9yIHNpbXBsZSBjb21wb25lbnRzXG4gICAgaXNMb2FkaW5nOiBzdGF0ZS5pc0xvYWRpbmcsXG4gICAgcmVzdWx0OiBzdGF0ZS5yZXN1bHRJbWFnZSxcbiAgICBlcnJvcjogc3RhdGUuZXJyb3JNZXNzYWdlLFxuICAgIGNhbkdlbmVyYXRlOiBzdGF0ZS5jYW5HZW5lcmF0ZSxcblxuICAgIC8vIEVzc2VudGlhbCBhY3Rpb25zXG4gICAgdXBsb2FkVXNlckltYWdlOiBhY3Rpb25zLnVwbG9hZFVzZXJJbWFnZSxcbiAgICB1cGxvYWRBcHBhcmVsSW1hZ2U6IGFjdGlvbnMudXBsb2FkQXBwYXJlbEltYWdlLFxuICAgIGdlbmVyYXRlOiBhY3Rpb25zLmdlbmVyYXRlLFxuICAgIHJlc2V0OiBhY3Rpb25zLnJlc2V0XG4gIH07XG59XG5cbi8qKlxuICogSG9vayBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdXBsb2FkIHByb2dyZXNzIHRyYWNraW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcnlvbldpdGhQcm9ncmVzcyhjb25maWc6IEJyaWRnZUxheWVyQ29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBzdGF0ZSwgYWN0aW9ucyB9ID0gdXNlQnJpZGdlTGF5ZXIoY29uZmlnKTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIC4uLmFjdGlvbnMsXG5cbiAgICAvLyBBZGRpdGlvbmFsIHByb2dyZXNzIGluZm9ybWF0aW9uXG4gICAgdXBsb2FkUHJvZ3Jlc3M6IHtcbiAgICAgIHVzZXI6IHN0YXRlLmhhc1VzZXJJbWFnZSA/IDEwMCA6IDAsXG4gICAgICBhcHBhcmVsOiBzdGF0ZS5oYXNBcHBhcmVsSW1hZ2UgPyAxMDAgOiAwXG4gICAgfSxcblxuICAgIG92ZXJhbGxQcm9ncmVzczogY2FsY3VsYXRlT3ZlcmFsbFByb2dyZXNzKHN0YXRlKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgb3ZlcmFsbCBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVPdmVyYWxsUHJvZ3Jlc3Moc3RhdGU6IFNpbXBsaWZpZWRUcnlvblN0YXRlKTogbnVtYmVyIHtcbiAgbGV0IHByb2dyZXNzID0gMDtcblxuICAvLyBVcGxvYWQgcHJvZ3Jlc3MgKDQwJSBvZiB0b3RhbClcbiAgaWYgKHN0YXRlLmhhc1VzZXJJbWFnZSkgcHJvZ3Jlc3MgKz0gMjA7XG4gIGlmIChzdGF0ZS5oYXNBcHBhcmVsSW1hZ2UpIHByb2dyZXNzICs9IDIwO1xuXG4gIC8vIEdlbmVyYXRpb24gcHJvZ3Jlc3MgKDYwJSBvZiB0b3RhbClcbiAgaWYgKHN0YXRlLmlzTG9hZGluZyB8fCBzdGF0ZS5wcm9ncmVzcyA+IDApIHtcbiAgICBwcm9ncmVzcyArPSAoc3RhdGUucHJvZ3Jlc3MgKiAwLjYpO1xuICB9XG5cbiAgaWYgKHN0YXRlLnJlc3VsdEltYWdlKSBwcm9ncmVzcyA9IDEwMDtcblxuICByZXR1cm4gTWF0aC5yb3VuZChwcm9ncmVzcyk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBNlhnQjtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEzUEFDLGNBQWMsV0FBQUEsQ0FBQTtJQUFBO0lBQUFILGFBQUEsR0FBQUksQ0FBQTtJQUFBSixhQUFBLEdBQUFFLENBQUE7V0FBZEMsY0FBQTs7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