{"version":3,"names":["ConsoleErrorLogger","cov_2pf6b77u9z","f","s","ErrorCategory","ErrorSeverity","classifyTryonError","formatErrorForDisplay","getErrorLogger","getErrorRecoveryActions","getUserFriendlyErrorMessage","isErrorRetryable","logAndClassifyError","setErrorLogger","logError","error","additionalContext","logData","timestamp","Date","toISOString","category","severity","errorCode","userMessage","technicalMessage","retryable","originalError","context","b","console","warn","info","errorLogger","logger","_image","FileTypeNotSupportedError","message","recoveryActions","type","description","FileTooLargeError","_imageProcessing","ImageDimensionError","CompressionFailedError","ImageProcessingError","mutationError","status","automated","waitTime","Error","toLowerCase","includes","classifiedError","classified","title","actions","canRetry"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/errorHandling.ts"],"sourcesContent":["// Comprehensive Error Handling for Try-On Mutations\n// Error classification, user-friendly messages, and recovery suggestions\n\nimport { \n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError\n} from '../../utils/image';\nimport {\n  ImageProcessingError,\n  ImageDimensionError\n} from './imageProcessing';\nimport type { TryonMutationError } from '../types/tryon.types';\n\n/**\n * Error categories for classification\n */\nexport enum ErrorCategory {\n  VALIDATION = 'validation',\n  NETWORK = 'network',\n  TIMEOUT = 'timeout',\n  API_SERVER = 'api_server',\n  IMAGE_PROCESSING = 'image_processing',\n  RATE_LIMIT = 'rate_limit',\n  AUTHENTICATION = 'authentication',\n  UNKNOWN = 'unknown'\n}\n\n/**\n * Error severity levels\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n/**\n * Error recovery suggestions\n */\nexport interface ErrorRecoveryAction {\n  /** Action type identifier */\n  type: 'retry' | 'reduce_image_size' | 'check_connection' | 'contact_support' | 'try_different_image' | 'wait_and_retry';\n  /** User-friendly description of the action */\n  description: string;\n  /** Whether this action can be automated */\n  automated?: boolean;\n  /** Estimated time to wait before retry (in seconds) */\n  waitTime?: number;\n}\n\n/**\n * Comprehensive error information\n */\nexport interface ClassifiedError {\n  /** Original error object */\n  originalError: Error | TryonMutationError | unknown;\n  /** Error category for handling logic */\n  category: ErrorCategory;\n  /** Severity level */\n  severity: ErrorSeverity;\n  /** User-friendly error message */\n  userMessage: string;\n  /** Technical details for developers */\n  technicalMessage: string;\n  /** Suggested recovery actions */\n  recoveryActions: ErrorRecoveryAction[];\n  /** Whether the error is retryable */\n  retryable: boolean;\n  /** Error code for programmatic handling */\n  errorCode: string;\n  /** Additional context data */\n  context?: Record<string, unknown>;\n}\n\n/**\n * Error logging interface\n */\nexport interface ErrorLogger {\n  logError(error: ClassifiedError, additionalContext?: Record<string, unknown>): void;\n}\n\n/**\n * Default console-based error logger\n */\nexport class ConsoleErrorLogger implements ErrorLogger {\n  logError(error: ClassifiedError, additionalContext?: Record<string, unknown>): void {\n    const logData = {\n      timestamp: new Date().toISOString(),\n      category: error.category,\n      severity: error.severity,\n      errorCode: error.errorCode,\n      userMessage: error.userMessage,\n      technicalMessage: error.technicalMessage,\n      retryable: error.retryable,\n      originalError: error.originalError,\n      context: error.context,\n      additionalContext\n    };\n\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n      case ErrorSeverity.HIGH:\n        console.error('[TryOn Error]', logData);\n        break;\n      case ErrorSeverity.MEDIUM:\n        console.warn('[TryOn Warning]', logData);\n        break;\n      default:\n        console.info('[TryOn Info]', logData);\n    }\n  }\n}\n\n/**\n * Global error logger instance\n */\nlet errorLogger: ErrorLogger = new ConsoleErrorLogger();\n\n/**\n * Set custom error logger\n */\nexport function setErrorLogger(logger: ErrorLogger): void {\n  errorLogger = logger;\n}\n\n/**\n * Get current error logger\n */\nexport function getErrorLogger(): ErrorLogger {\n  return errorLogger;\n}\n\n/**\n * Classify and enhance error with user-friendly information\n */\nexport function classifyTryonError(error: unknown, context?: Record<string, unknown>): ClassifiedError {\n  // Handle known error types\n  if (error instanceof FileTypeNotSupportedError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.LOW,\n      userMessage: 'Please select a valid image file (JPEG, PNG, WebP, or GIF).',\n      technicalMessage: `File type validation failed: ${error.message}`,\n      errorCode: 'INVALID_FILE_TYPE',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Select a different image file in JPEG, PNG, WebP, or GIF format'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof FileTooLargeError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Image file is too large. Please select an image under 5MB or try compressing it.',\n      technicalMessage: `File size validation failed: ${error.message}`,\n      errorCode: 'FILE_TOO_LARGE',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'reduce_image_size',\n          description: 'Compress or resize your image to under 5MB'\n        },\n        {\n          type: 'try_different_image',\n          description: 'Select a smaller image file'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof ImageDimensionError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Image dimensions are not suitable. Please use an image that is at least 512x512 pixels.',\n      technicalMessage: `Image dimension validation failed: ${error.message}`,\n      errorCode: 'INVALID_DIMENSIONS',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Select an image with dimensions of at least 512x512 pixels'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof CompressionFailedError || error instanceof ImageProcessingError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.IMAGE_PROCESSING,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Unable to process the image. Please try a different image or reduce the file size.',\n      technicalMessage: `Image processing failed: ${error.message}`,\n      errorCode: 'IMAGE_PROCESSING_FAILED',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Try selecting a different image'\n        },\n        {\n          type: 'reduce_image_size',\n          description: 'Use a smaller or simpler image'\n        }\n      ],\n      context\n    };\n  }\n\n  // Handle TryonMutationError (API errors)\n  if (error && typeof error === 'object' && 'error' in error) {\n    const mutationError = error as TryonMutationError;\n    \n    // Rate limiting\n    if (mutationError.status === 429) {\n      return {\n        originalError: error,\n        category: ErrorCategory.RATE_LIMIT,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Too many requests. Please wait a moment before trying again.',\n        technicalMessage: 'Rate limit exceeded',\n        errorCode: 'RATE_LIMITED',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'wait_and_retry',\n            description: 'Wait 60 seconds and try again',\n            automated: true,\n            waitTime: 60\n          }\n        ],\n        context\n      };\n    }\n\n    // Server errors\n    if (mutationError.status && mutationError.status >= 500) {\n      return {\n        originalError: error,\n        category: ErrorCategory.API_SERVER,\n        severity: ErrorSeverity.HIGH,\n        userMessage: 'Server is temporarily unavailable. Please try again in a few moments.',\n        technicalMessage: `Server error: ${mutationError.error}`,\n        errorCode: 'SERVER_ERROR',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'retry',\n            description: 'Try again in a few moments',\n            automated: true,\n            waitTime: 30\n          },\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          }\n        ],\n        context\n      };\n    }\n\n    // Client errors (400-499)\n    if (mutationError.status && mutationError.status >= 400 && mutationError.status < 500) {\n      return {\n        originalError: error,\n        category: ErrorCategory.VALIDATION,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Request could not be processed. Please check your images and try again.',\n        technicalMessage: `Client error: ${mutationError.error}`,\n        errorCode: 'CLIENT_ERROR',\n        retryable: false,\n        recoveryActions: [\n          {\n            type: 'try_different_image',\n            description: 'Try using different images'\n          }\n        ],\n        context\n      };\n    }\n  }\n\n  // Handle network/timeout errors\n  if (error instanceof Error) {\n    const message = error.message.toLowerCase();\n    \n    if (message.includes('timeout') || message.includes('aborted')) {\n      return {\n        originalError: error,\n        category: ErrorCategory.TIMEOUT,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Request timed out. Please check your connection and try again.',\n        technicalMessage: `Timeout error: ${error.message}`,\n        errorCode: 'REQUEST_TIMEOUT',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          },\n          {\n            type: 'retry',\n            description: 'Try again with a stable connection',\n            automated: true,\n            waitTime: 10\n          }\n        ],\n        context\n      };\n    }\n\n    if (message.includes('network') || message.includes('fetch') || message.includes('connection')) {\n      return {\n        originalError: error,\n        category: ErrorCategory.NETWORK,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Network connection issue. Please check your internet and try again.',\n        technicalMessage: `Network error: ${error.message}`,\n        errorCode: 'NETWORK_ERROR',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          },\n          {\n            type: 'retry',\n            description: 'Try again when connection is stable',\n            automated: true,\n            waitTime: 15\n          }\n        ],\n        context\n      };\n    }\n  }\n\n  // Unknown error fallback\n  return {\n    originalError: error,\n    category: ErrorCategory.UNKNOWN,\n    severity: ErrorSeverity.HIGH,\n    userMessage: 'An unexpected error occurred. Please try again or contact support if the problem persists.',\n    technicalMessage: error instanceof Error ? error.message : 'Unknown error occurred',\n    errorCode: 'UNKNOWN_ERROR',\n    retryable: true,\n    recoveryActions: [\n      {\n        type: 'retry',\n        description: 'Try the operation again'\n      },\n      {\n        type: 'contact_support',\n        description: 'Contact support if the problem continues'\n      }\n    ],\n    context\n  };\n}\n\n/**\n * Log and classify error in one operation\n */\nexport function logAndClassifyError(\n  error: unknown, \n  context?: Record<string, unknown>\n): ClassifiedError {\n  const classifiedError = classifyTryonError(error, context);\n  errorLogger.logError(classifiedError, context);\n  return classifiedError;\n}\n\n/**\n * Get user-friendly error message\n */\nexport function getUserFriendlyErrorMessage(error: unknown): string {\n  const classified = classifyTryonError(error);\n  return classified.userMessage;\n}\n\n/**\n * Check if error is retryable\n */\nexport function isErrorRetryable(error: unknown): boolean {\n  const classified = classifyTryonError(error);\n  return classified.retryable;\n}\n\n/**\n * Get recovery actions for error\n */\nexport function getErrorRecoveryActions(error: unknown): ErrorRecoveryAction[] {\n  const classified = classifyTryonError(error);\n  return classified.recoveryActions;\n}\n\n/**\n * Format error for display in UI\n */\nexport function formatErrorForDisplay(error: unknown): {\n  title: string;\n  message: string;\n  actions: ErrorRecoveryAction[];\n  canRetry: boolean;\n} {\n  const classified = classifyTryonError(error);\n  \n  let title: string;\n  switch (classified.category) {\n    case ErrorCategory.VALIDATION:\n      title = 'Invalid Input';\n      break;\n    case ErrorCategory.NETWORK:\n      title = 'Connection Issue';\n      break;\n    case ErrorCategory.TIMEOUT:\n      title = 'Request Timed Out';\n      break;\n    case ErrorCategory.API_SERVER:\n      title = 'Server Error';\n      break;\n    case ErrorCategory.IMAGE_PROCESSING:\n      title = 'Image Processing Error';\n      break;\n    case ErrorCategory.RATE_LIMIT:\n      title = 'Too Many Requests';\n      break;\n    default:\n      title = 'Error';\n  }\n\n  return {\n    title,\n    message: classified.userMessage,\n    actions: classified.recoveryActions,\n    canRetry: classified.retryable\n  };\n}"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqFaA,kBAAkB,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAlBH,kBAAA;;EArEDI,aAAa,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAbC,aAAA;;EAcAC,aAAa,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAbE,aAAA;;EA0GIC,kBAAkB,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAlBG,kBAAA;;EAoRAC,qBAAqB,WAAAA,CAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAArBI,qBAAA;;EA3RAC,cAAc,WAAAA,CAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdK,cAAA;;EAmRAC,uBAAuB,WAAAA,CAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvBM,uBAAA;;EAhBAC,2BAA2B,WAAAA,CAAA;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAA3BO,2BAAA;;EAQAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAhBQ,gBAAA;;EApBAC,mBAAmB,WAAAA,CAAA;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAnBS,mBAAA;;EA9PAC,cAAc,WAAAA,CAAA;IAAA;IAAAZ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdU,cAAA;;;;;mCApHT;;;mCAIA;AAMA,IAAAT,aAAK;AAAA;AAAA,cAAAH,cAAA,GAAAE,CAAA,kBAAAC,aAAA;EAAA;EAAAH,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;SAAAC,aAAA;;AAcL,IAAAC,aAAK;AAAA;AAAA,cAAAJ,cAAA,GAAAE,CAAA,kBAAAE,aAAA;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;;;;;;;;;;;;;SAAAE,aAAA;;AAuDL,MAAML,kBAAA;EACXc,SAASC,KAAsB,EAAEC,iBAA2C,EAAQ;IAAA;IAAAf,cAAA,GAAAC,CAAA;IAClF,MAAMe,OAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAU;MACde,SAAA,EAAW,IAAIC,IAAA,GAAOC,WAAW;MACjCC,QAAA,EAAUN,KAAA,CAAMM,QAAQ;MACxBC,QAAA,EAAUP,KAAA,CAAMO,QAAQ;MACxBC,SAAA,EAAWR,KAAA,CAAMQ,SAAS;MAC1BC,WAAA,EAAaT,KAAA,CAAMS,WAAW;MAC9BC,gBAAA,EAAkBV,KAAA,CAAMU,gBAAgB;MACxCC,SAAA,EAAWX,KAAA,CAAMW,SAAS;MAC1BC,aAAA,EAAeZ,KAAA,CAAMY,aAAa;MAClCC,OAAA,EAASb,KAAA,CAAMa,OAAO;MACtBZ;IACF;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,QAAQY,KAAA,CAAMO,QAAQ;MACpB;QAAA;QAAArB,cAAA,GAAA4B,CAAA;MACA;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAE,CAAA;QACE2B,OAAA,CAAQf,KAAK,CAAC,iBAAiBE,OAAA;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QAC/B;MACF;QAAA;QAAAF,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAE,CAAA;QACE2B,OAAA,CAAQC,IAAI,CAAC,mBAAmBd,OAAA;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QAChC;MACF;QAAA;QAAAF,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAE,CAAA;QACE2B,OAAA,CAAQE,IAAI,CAAC,gBAAgBf,OAAA;IACjC;EACF;AACF;AAEA;;;AAGA,IAAIgB,WAAA;AAAA;AAAA,CAAAhC,cAAA,GAAAE,CAAA,QAA2B,IAAIH,kBAAA;AAK5B,SAASa,eAAeqB,MAAmB;EAAA;EAAAjC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAChD8B,WAAA,GAAcC,MAAA;AAChB;AAKO,SAAS1B,eAAA;EAAA;EAAAP,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACd,OAAO8B,WAAA;AACT;AAKO,SAAS3B,mBAAmBS,KAAc,EAAEa,OAAiC;EAAA;EAAA3B,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAClF;EACA,IAAIY,KAAA,YAAiBoB,MAAA,CAAAC,yBAAyB,EAAE;IAAA;IAAAnC,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAE,CAAA;IAC9C,OAAO;MACLwB,aAAA,EAAeZ,KAAA;MACfM,QAAQ;MACRC,QAAQ;MACRE,WAAA,EAAa;MACbC,gBAAA,EAAkB,gCAAgCV,KAAA,CAAMsB,OAAO,EAAE;MACjEd,SAAA,EAAW;MACXG,SAAA,EAAW;MACXY,eAAA,EAAiB,CACf;QACEC,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,EACD;MACDZ;IACF;EACF;EAAA;EAAA;IAAA3B,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAE,CAAA;EAEA,IAAIY,KAAA,YAAiBoB,MAAA,CAAAM,iBAAiB,EAAE;IAAA;IAAAxC,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAE,CAAA;IACtC,OAAO;MACLwB,aAAA,EAAeZ,KAAA;MACfM,QAAQ;MACRC,QAAQ;MACRE,WAAA,EAAa;MACbC,gBAAA,EAAkB,gCAAgCV,KAAA,CAAMsB,OAAO,EAAE;MACjEd,SAAA,EAAW;MACXG,SAAA,EAAW;MACXY,eAAA,EAAiB,CACf;QACEC,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,GACA;QACED,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,EACD;MACDZ;IACF;EACF;EAAA;EAAA;IAAA3B,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAE,CAAA;EAEA,IAAIY,KAAA,YAAiB2B,gBAAA,CAAAC,mBAAmB,EAAE;IAAA;IAAA1C,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAE,CAAA;IACxC,OAAO;MACLwB,aAAA,EAAeZ,KAAA;MACfM,QAAQ;MACRC,QAAQ;MACRE,WAAA,EAAa;MACbC,gBAAA,EAAkB,sCAAsCV,KAAA,CAAMsB,OAAO,EAAE;MACvEd,SAAA,EAAW;MACXG,SAAA,EAAW;MACXY,eAAA,EAAiB,CACf;QACEC,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,EACD;MACDZ;IACF;EACF;EAAA;EAAA;IAAA3B,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAE,CAAA;EAEA;EAAI;EAAA,CAAAF,cAAA,GAAA4B,CAAA,UAAAd,KAAA,YAAiBoB,MAAA,CAAAS,sBAAsB;EAAA;EAAA,CAAA3C,cAAA,GAAA4B,CAAA,UAAId,KAAA,YAAiB2B,gBAAA,CAAAG,oBAAoB,GAAE;IAAA;IAAA5C,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAE,CAAA;IACpF,OAAO;MACLwB,aAAA,EAAeZ,KAAA;MACfM,QAAQ;MACRC,QAAQ;MACRE,WAAA,EAAa;MACbC,gBAAA,EAAkB,4BAA4BV,KAAA,CAAMsB,OAAO,EAAE;MAC7Dd,SAAA,EAAW;MACXG,SAAA,EAAW;MACXY,eAAA,EAAiB,CACf;QACEC,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,GACA;QACED,IAAA,EAAM;QACNC,WAAA,EAAa;MACf,EACD;MACDZ;IACF;EACF;EAAA;EAAA;IAAA3B,cAAA,GAAA4B,CAAA;EAAA;EAEA;EAAA5B,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAA4B,CAAA,UAAAd,KAAA;EAAA;EAAA,CAAAd,cAAA,GAAA4B,CAAA,UAAS,OAAOd,KAAA,KAAU;EAAA;EAAA,CAAAd,cAAA,GAAA4B,CAAA,UAAY,WAAWd,KAAA,GAAO;IAAA;IAAAd,cAAA,GAAA4B,CAAA;IAC1D,MAAMiB,aAAA;IAAA;IAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAgBY,KAAA;IAEtB;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACA,IAAI2C,aAAA,CAAcC,MAAM,KAAK,KAAK;MAAA;MAAA9C,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MAChC,OAAO;QACLwB,aAAA,EAAeZ,KAAA;QACfM,QAAQ;QACRC,QAAQ;QACRE,WAAA,EAAa;QACbC,gBAAA,EAAkB;QAClBF,SAAA,EAAW;QACXG,SAAA,EAAW;QACXY,eAAA,EAAiB,CACf;UACEC,IAAA,EAAM;UACNC,WAAA,EAAa;UACbQ,SAAA,EAAW;UACXC,QAAA,EAAU;QACZ,EACD;QACDrB;MACF;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAA4B,CAAA;IAAA;IAEA;IAAA5B,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAA4B,CAAA,WAAAiB,aAAA,CAAcC,MAAM;IAAA;IAAA,CAAA9C,cAAA,GAAA4B,CAAA,WAAIiB,aAAA,CAAcC,MAAM,IAAI,MAAK;MAAA;MAAA9C,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACvD,OAAO;QACLwB,aAAA,EAAeZ,KAAA;QACfM,QAAQ;QACRC,QAAQ;QACRE,WAAA,EAAa;QACbC,gBAAA,EAAkB,iBAAiBqB,aAAA,CAAc/B,KAAK,EAAE;QACxDQ,SAAA,EAAW;QACXG,SAAA,EAAW;QACXY,eAAA,EAAiB,CACf;UACEC,IAAA,EAAM;UACNC,WAAA,EAAa;UACbQ,SAAA,EAAW;UACXC,QAAA,EAAU;QACZ,GACA;UACEV,IAAA,EAAM;UACNC,WAAA,EAAa;QACf,EACD;QACDZ;MACF;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAA4B,CAAA;IAAA;IAEA;IAAA5B,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAA4B,CAAA,WAAAiB,aAAA,CAAcC,MAAM;IAAA;IAAA,CAAA9C,cAAA,GAAA4B,CAAA,WAAIiB,aAAA,CAAcC,MAAM,IAAI;IAAA;IAAA,CAAA9C,cAAA,GAAA4B,CAAA,WAAOiB,aAAA,CAAcC,MAAM,GAAG,MAAK;MAAA;MAAA9C,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACrF,OAAO;QACLwB,aAAA,EAAeZ,KAAA;QACfM,QAAQ;QACRC,QAAQ;QACRE,WAAA,EAAa;QACbC,gBAAA,EAAkB,iBAAiBqB,aAAA,CAAc/B,KAAK,EAAE;QACxDQ,SAAA,EAAW;QACXG,SAAA,EAAW;QACXY,eAAA,EAAiB,CACf;UACEC,IAAA,EAAM;UACNC,WAAA,EAAa;QACf,EACD;QACDZ;MACF;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAA4B,CAAA;IAAA;EACF;EAAA;EAAA;IAAA5B,cAAA,GAAA4B,CAAA;EAAA;EAEA;EAAA5B,cAAA,GAAAE,CAAA;EACA,IAAIY,KAAA,YAAiBmC,KAAA,EAAO;IAAA;IAAAjD,cAAA,GAAA4B,CAAA;IAC1B,MAAMQ,OAAA;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA,QAAUY,KAAA,CAAMsB,OAAO,CAACc,WAAW;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAEzC;IAAI;IAAA,CAAAF,cAAA,GAAA4B,CAAA,WAAAQ,OAAA,CAAQe,QAAQ,CAAC;IAAA;IAAA,CAAAnD,cAAA,GAAA4B,CAAA,WAAcQ,OAAA,CAAQe,QAAQ,CAAC,aAAY;MAAA;MAAAnD,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MAC9D,OAAO;QACLwB,aAAA,EAAeZ,KAAA;QACfM,QAAQ;QACRC,QAAQ;QACRE,WAAA,EAAa;QACbC,gBAAA,EAAkB,kBAAkBV,KAAA,CAAMsB,OAAO,EAAE;QACnDd,SAAA,EAAW;QACXG,SAAA,EAAW;QACXY,eAAA,EAAiB,CACf;UACEC,IAAA,EAAM;UACNC,WAAA,EAAa;QACf,GACA;UACED,IAAA,EAAM;UACNC,WAAA,EAAa;UACbQ,SAAA,EAAW;UACXC,QAAA,EAAU;QACZ,EACD;QACDrB;MACF;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAA4B,CAAA;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,cAAA,GAAA4B,CAAA,WAAAQ,OAAA,CAAQe,QAAQ,CAAC;IAAA;IAAA,CAAAnD,cAAA,GAAA4B,CAAA,WAAcQ,OAAA,CAAQe,QAAQ,CAAC;IAAA;IAAA,CAAAnD,cAAA,GAAA4B,CAAA,WAAYQ,OAAA,CAAQe,QAAQ,CAAC,gBAAe;MAAA;MAAAnD,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MAC9F,OAAO;QACLwB,aAAA,EAAeZ,KAAA;QACfM,QAAQ;QACRC,QAAQ;QACRE,WAAA,EAAa;QACbC,gBAAA,EAAkB,kBAAkBV,KAAA,CAAMsB,OAAO,EAAE;QACnDd,SAAA,EAAW;QACXG,SAAA,EAAW;QACXY,eAAA,EAAiB,CACf;UACEC,IAAA,EAAM;UACNC,WAAA,EAAa;QACf,GACA;UACED,IAAA,EAAM;UACNC,WAAA,EAAa;UACbQ,SAAA,EAAW;UACXC,QAAA,EAAU;QACZ,EACD;QACDrB;MACF;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAA4B,CAAA;IAAA;EACF;EAAA;EAAA;IAAA5B,cAAA,GAAA4B,CAAA;EAAA;EAEA;EAAA5B,cAAA,GAAAE,CAAA;EACA,OAAO;IACLwB,aAAA,EAAeZ,KAAA;IACfM,QAAQ;IACRC,QAAQ;IACRE,WAAA,EAAa;IACbC,gBAAA,EAAkBV,KAAA,YAAiBmC,KAAA;IAAA;IAAA,CAAAjD,cAAA,GAAA4B,CAAA,WAAQd,KAAA,CAAMsB,OAAO;IAAA;IAAA,CAAApC,cAAA,GAAA4B,CAAA,WAAG;IAC3DN,SAAA,EAAW;IACXG,SAAA,EAAW;IACXY,eAAA,EAAiB,CACf;MACEC,IAAA,EAAM;MACNC,WAAA,EAAa;IACf,GACA;MACED,IAAA,EAAM;MACNC,WAAA,EAAa;IACf,EACD;IACDZ;EACF;AACF;AAKO,SAAShB,oBACdG,KAAc,EACda,OAAiC;EAAA;EAAA3B,cAAA,GAAAC,CAAA;EAEjC,MAAMmD,eAAA;EAAA;EAAA,CAAApD,cAAA,GAAAE,CAAA,QAAkBG,kBAAA,CAAmBS,KAAA,EAAOa,OAAA;EAAA;EAAA3B,cAAA,GAAAE,CAAA;EAClD8B,WAAA,CAAYnB,QAAQ,CAACuC,eAAA,EAAiBzB,OAAA;EAAA;EAAA3B,cAAA,GAAAE,CAAA;EACtC,OAAOkD,eAAA;AACT;AAKO,SAAS3C,4BAA4BK,KAAc;EAAA;EAAAd,cAAA,GAAAC,CAAA;EACxD,MAAMoD,UAAA;EAAA;EAAA,CAAArD,cAAA,GAAAE,CAAA,QAAaG,kBAAA,CAAmBS,KAAA;EAAA;EAAAd,cAAA,GAAAE,CAAA;EACtC,OAAOmD,UAAA,CAAW9B,WAAW;AAC/B;AAKO,SAASb,iBAAiBI,KAAc;EAAA;EAAAd,cAAA,GAAAC,CAAA;EAC7C,MAAMoD,UAAA;EAAA;EAAA,CAAArD,cAAA,GAAAE,CAAA,QAAaG,kBAAA,CAAmBS,KAAA;EAAA;EAAAd,cAAA,GAAAE,CAAA;EACtC,OAAOmD,UAAA,CAAW5B,SAAS;AAC7B;AAKO,SAASjB,wBAAwBM,KAAc;EAAA;EAAAd,cAAA,GAAAC,CAAA;EACpD,MAAMoD,UAAA;EAAA;EAAA,CAAArD,cAAA,GAAAE,CAAA,QAAaG,kBAAA,CAAmBS,KAAA;EAAA;EAAAd,cAAA,GAAAE,CAAA;EACtC,OAAOmD,UAAA,CAAWhB,eAAe;AACnC;AAKO,SAAS/B,sBAAsBQ,KAAc;EAAA;EAAAd,cAAA,GAAAC,CAAA;EAMlD,MAAMoD,UAAA;EAAA;EAAA,CAAArD,cAAA,GAAAE,CAAA,QAAaG,kBAAA,CAAmBS,KAAA;EAEtC,IAAIwC,KAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACJ,QAAQmD,UAAA,CAAWjC,QAAQ;IACzB;MAAA;MAAApB,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACR;IACF;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAE,CAAA;MACEoD,KAAA,GAAQ;EACZ;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAEA,OAAO;IACLoD,KAAA;IACAlB,OAAA,EAASiB,UAAA,CAAW9B,WAAW;IAC/BgC,OAAA,EAASF,UAAA,CAAWhB,eAAe;IACnCmB,QAAA,EAAUH,UAAA,CAAW5B;EACvB;AACF","ignoreList":[]}