e385303e9af9da9b4492a54c88a3de4f
/**
 * @jest-environment jsdom
 */ "use strict";
// Mock business layer dependencies
jest.mock('../src/business-layer', ()=>({
        useTryonMutation: jest.fn(()=>({
                mutate: jest.fn(),
                mutateAsync: jest.fn(),
                data: undefined,
                error: null,
                isError: false,
                isSuccess: false,
                isLoading: false,
                reset: jest.fn()
            })),
        useImageProcessing: jest.fn(()=>({
                processImage: jest.fn(),
                isProcessing: false,
                error: null
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _index = require("./test-utils/index");
const _useTryonWorkflow = require("../src/hooks/useTryonWorkflow");
const _useImageUpload = require("../src/hooks/useImageUpload");
const _index1 = require("../src/hooks/index");
describe('Debug Bridge Layer Dependencies', ()=>{
    it('should render useToast without error', ()=>{
        const { result } = (0, _index.renderBridgeHook)(()=>{
            const { showToast } = (0, _index1.useToast)();
            return {
                showToast
            };
        });
        expect(result.current).not.toBeNull();
        expect(typeof result.current.showToast).toBe('function');
    });
    it('should render useTryonWorkflow without error', ()=>{
        const { result } = (0, _index.renderBridgeHook)(()=>{
            const workflow = (0, _useTryonWorkflow.useTryonWorkflow)();
            return {
                workflow
            };
        });
        expect(result.current).not.toBeNull();
        expect(result.current.workflow).toBeDefined();
    });
    it('should render useSingleImageUpload without error', ()=>{
        const { result } = (0, _index.renderBridgeHook)(()=>{
            const upload = (0, _useImageUpload.useSingleImageUpload)();
            return {
                upload
            };
        });
        expect(result.current).not.toBeNull();
        expect(result.current.upload).toBeDefined();
    });
    it('should render all dependencies together', ()=>{
        const { result } = (0, _index.renderBridgeHook)(()=>{
            const { showToast } = (0, _index1.useToast)();
            const workflow = (0, _useTryonWorkflow.useTryonWorkflow)({}, showToast);
            const userUpload = (0, _useImageUpload.useSingleImageUpload)();
            const apparelUpload = (0, _useImageUpload.useSingleImageUpload)();
            return {
                showToast,
                workflow,
                userUpload,
                apparelUpload
            };
        });
        expect(result.current).not.toBeNull();
        expect(result.current.showToast).toBeDefined();
        expect(result.current.workflow).toBeDefined();
        expect(result.current.userUpload).toBeDefined();
        expect(result.current.apparelUpload).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL2RlYnVnLWJyaWRnZS1kZXBlbmRlbmNpZXMudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5pbXBvcnQgeyByZW5kZXJCcmlkZ2VIb29rIH0gZnJvbSAnLi90ZXN0LXV0aWxzL2luZGV4JztcbmltcG9ydCB7IHVzZVRyeW9uV29ya2Zsb3cgfSBmcm9tICcuLi9zcmMvaG9va3MvdXNlVHJ5b25Xb3JrZmxvdyc7XG5pbXBvcnQgeyB1c2VTaW5nbGVJbWFnZVVwbG9hZCB9IGZyb20gJy4uL3NyYy9ob29rcy91c2VJbWFnZVVwbG9hZCc7XG5pbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gJy4uL3NyYy9ob29rcy9pbmRleCc7XG5cbi8vIE1vY2sgYnVzaW5lc3MgbGF5ZXIgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uL3NyYy9idXNpbmVzcy1sYXllcicsICgpID0+ICh7XG4gIHVzZVRyeW9uTXV0YXRpb246IGplc3QuZm4oKCkgPT4gKHtcbiAgICBtdXRhdGU6IGplc3QuZm4oKSxcbiAgICBtdXRhdGVBc3luYzogamVzdC5mbigpLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgfSkpLFxuICB1c2VJbWFnZVByb2Nlc3Npbmc6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBwcm9jZXNzSW1hZ2U6IGplc3QuZm4oKSxcbiAgICBpc1Byb2Nlc3Npbmc6IGZhbHNlLFxuICAgIGVycm9yOiBudWxsLFxuICB9KSksXG59KSk7XG5cbmRlc2NyaWJlKCdEZWJ1ZyBCcmlkZ2UgTGF5ZXIgRGVwZW5kZW5jaWVzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJlbmRlciB1c2VUb2FzdCB3aXRob3V0IGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJCcmlkZ2VIb29rKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgc2hvd1RvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICAgcmV0dXJuIHsgc2hvd1RvYXN0IH07XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuc2hvd1RvYXN0KS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB1c2VUcnlvbldvcmtmbG93IHdpdGhvdXQgZXJyb3InLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckJyaWRnZUhvb2soKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3cgPSB1c2VUcnlvbldvcmtmbG93KCk7XG4gICAgICByZXR1cm4geyB3b3JrZmxvdyB9O1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQud29ya2Zsb3cpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHVzZVNpbmdsZUltYWdlVXBsb2FkIHdpdGhvdXQgZXJyb3InLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckJyaWRnZUhvb2soKCkgPT4ge1xuICAgICAgY29uc3QgdXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoKTtcbiAgICAgIHJldHVybiB7IHVwbG9hZCB9O1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXBsb2FkKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgZGVwZW5kZW5jaWVzIHRvZ2V0aGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJCcmlkZ2VIb29rKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgc2hvd1RvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICAgY29uc3Qgd29ya2Zsb3cgPSB1c2VUcnlvbldvcmtmbG93KHt9LCBzaG93VG9hc3QpO1xuICAgICAgY29uc3QgdXNlclVwbG9hZCA9IHVzZVNpbmdsZUltYWdlVXBsb2FkKCk7XG4gICAgICBjb25zdCBhcHBhcmVsVXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHsgc2hvd1RvYXN0LCB3b3JrZmxvdywgdXNlclVwbG9hZCwgYXBwYXJlbFVwbG9hZCB9O1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hvd1RvYXN0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC53b3JrZmxvdykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXNlclVwbG9hZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYXBwYXJlbFVwbG9hZCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VUcnlvbk11dGF0aW9uIiwiZm4iLCJtdXRhdGUiLCJtdXRhdGVBc3luYyIsImRhdGEiLCJ1bmRlZmluZWQiLCJlcnJvciIsImlzRXJyb3IiLCJpc1N1Y2Nlc3MiLCJpc0xvYWRpbmciLCJyZXNldCIsInVzZUltYWdlUHJvY2Vzc2luZyIsInByb2Nlc3NJbWFnZSIsImlzUHJvY2Vzc2luZyIsImRlc2NyaWJlIiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJCcmlkZ2VIb29rIiwic2hvd1RvYXN0IiwidXNlVG9hc3QiLCJleHBlY3QiLCJjdXJyZW50Iiwibm90IiwidG9CZU51bGwiLCJ0b0JlIiwid29ya2Zsb3ciLCJ1c2VUcnlvbldvcmtmbG93IiwidG9CZURlZmluZWQiLCJ1cGxvYWQiLCJ1c2VTaW5nbGVJbWFnZVVwbG9hZCIsInVzZXJVcGxvYWQiLCJhcHBhcmVsVXBsb2FkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQztBQU1ELG1DQUFtQztBQUNuQ0EsS0FBS0MsSUFBSSxDQUFDLHlCQUF5QixJQUFPLENBQUE7UUFDeENDLGtCQUFrQkYsS0FBS0csRUFBRSxDQUFDLElBQU8sQ0FBQTtnQkFDL0JDLFFBQVFKLEtBQUtHLEVBQUU7Z0JBQ2ZFLGFBQWFMLEtBQUtHLEVBQUU7Z0JBQ3BCRyxNQUFNQztnQkFDTkMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsV0FBVztnQkFDWEMsV0FBVztnQkFDWEMsT0FBT1osS0FBS0csRUFBRTtZQUNoQixDQUFBO1FBQ0FVLG9CQUFvQmIsS0FBS0csRUFBRSxDQUFDLElBQU8sQ0FBQTtnQkFDakNXLGNBQWNkLEtBQUtHLEVBQUU7Z0JBQ3JCWSxjQUFjO2dCQUNkUCxPQUFPO1lBQ1QsQ0FBQTtJQUNGLENBQUE7Ozs7dUJBdEJpQztrQ0FDQTtnQ0FDSTt3QkFDWjtBQXFCekJRLFNBQVMsbUNBQW1DO0lBQzFDQyxHQUFHLHdDQUF3QztRQUN6QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSx1QkFBZ0IsRUFBQztZQUNsQyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSxnQkFBUTtZQUM5QixPQUFPO2dCQUFFRDtZQUFVO1FBQ3JCO1FBRUFFLE9BQU9KLE9BQU9LLE9BQU8sRUFBRUMsR0FBRyxDQUFDQyxRQUFRO1FBQ25DSCxPQUFPLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0gsU0FBUyxFQUFFTSxJQUFJLENBQUM7SUFDL0M7SUFFQVQsR0FBRyxnREFBZ0Q7UUFDakQsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsdUJBQWdCLEVBQUM7WUFDbEMsTUFBTVEsV0FBV0MsSUFBQUEsa0NBQWdCO1lBQ2pDLE9BQU87Z0JBQUVEO1lBQVM7UUFDcEI7UUFFQUwsT0FBT0osT0FBT0ssT0FBTyxFQUFFQyxHQUFHLENBQUNDLFFBQVE7UUFDbkNILE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ksUUFBUSxFQUFFRSxXQUFXO0lBQzdDO0lBRUFaLEdBQUcsb0RBQW9EO1FBQ3JELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLHVCQUFnQixFQUFDO1lBQ2xDLE1BQU1XLFNBQVNDLElBQUFBLG9DQUFvQjtZQUNuQyxPQUFPO2dCQUFFRDtZQUFPO1FBQ2xCO1FBRUFSLE9BQU9KLE9BQU9LLE9BQU8sRUFBRUMsR0FBRyxDQUFDQyxRQUFRO1FBQ25DSCxPQUFPSixPQUFPSyxPQUFPLENBQUNPLE1BQU0sRUFBRUQsV0FBVztJQUMzQztJQUVBWixHQUFHLDJDQUEyQztRQUM1QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSx1QkFBZ0IsRUFBQztZQUNsQyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSxnQkFBUTtZQUM5QixNQUFNTSxXQUFXQyxJQUFBQSxrQ0FBZ0IsRUFBQyxDQUFDLEdBQUdSO1lBQ3RDLE1BQU1ZLGFBQWFELElBQUFBLG9DQUFvQjtZQUN2QyxNQUFNRSxnQkFBZ0JGLElBQUFBLG9DQUFvQjtZQUUxQyxPQUFPO2dCQUFFWDtnQkFBV087Z0JBQVVLO2dCQUFZQztZQUFjO1FBQzFEO1FBRUFYLE9BQU9KLE9BQU9LLE9BQU8sRUFBRUMsR0FBRyxDQUFDQyxRQUFRO1FBQ25DSCxPQUFPSixPQUFPSyxPQUFPLENBQUNILFNBQVMsRUFBRVMsV0FBVztRQUM1Q1AsT0FBT0osT0FBT0ssT0FBTyxDQUFDSSxRQUFRLEVBQUVFLFdBQVc7UUFDM0NQLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ1MsVUFBVSxFQUFFSCxXQUFXO1FBQzdDUCxPQUFPSixPQUFPSyxPQUFPLENBQUNVLGFBQWEsRUFBRUosV0FBVztJQUNsRDtBQUNGIn0=