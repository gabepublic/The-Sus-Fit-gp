927ee45f5821af9785a0314b133f45e4
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useBatchImageExport: function() {
        return useBatchImageExport;
    },
    useImageExport: function() {
        return useImageExport;
    },
    useSimpleImageExport: function() {
        return useSimpleImageExport;
    }
});
const _react = require("react");
const _CanvasProvider = require("../providers/CanvasProvider");
const _imageExport = require("../utils/imageExport");
const _errorHandling = require("../utils/errorHandling");
function useImageExport(canvasWidth, canvasHeight, canvasId, options = {}) {
    const canvas = (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId);
    const exporterRef = (0, _react.useRef)(undefined);
    const [state, setState] = (0, _react.useState)({
        isExporting: false,
        progress: 0,
        currentExport: null,
        completedExports: [],
        failedExports: [],
        totalExports: 0
    });
    // Initialize exporter
    if (!exporterRef.current) {
        exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
    }
    const updateProgress = (0, _react.useCallback)((progress)=>{
        setState((prev)=>({
                ...prev,
                progress
            }));
        options.onProgress?.(progress);
    }, [
        options
    ]);
    const exportImage = (0, _react.useCallback)(async (config = {})=>{
        if (!exporterRef.current) throw new Error('Exporter not initialized');
        const finalConfig = {
            ...options.defaultConfig,
            ...config
        };
        const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        setState((prev)=>({
                ...prev,
                isExporting: true,
                progress: 0,
                currentExport: exportId,
                totalExports: prev.totalExports + 1
            }));
        try {
            updateProgress(25);
            const result = await exporterRef.current.exportImage(finalConfig);
            updateProgress(75);
            setState((prev)=>({
                    ...prev,
                    isExporting: false,
                    progress: 100,
                    currentExport: null,
                    completedExports: [
                        ...prev.completedExports,
                        result
                    ]
                }));
            updateProgress(100);
            // Auto-download if enabled
            if (options.autoDownload) {
                exporterRef.current.downloadImage(result);
            }
            options.onExportComplete?.(result);
            return result;
        } catch (error) {
            const classifiedError = (0, _errorHandling.classifyTryonError)(error);
            setState((prev)=>({
                    ...prev,
                    isExporting: false,
                    progress: 0,
                    currentExport: null,
                    failedExports: [
                        ...prev.failedExports,
                        {
                            config: finalConfig,
                            error: classifiedError
                        }
                    ]
                }));
            (0, _errorHandling.logAndClassifyError)(error, {
                operation: 'image_export',
                config: finalConfig,
                exportId
            });
            options.onExportError?.(classifiedError);
            throw classifiedError;
        }
    }, [
        options,
        updateProgress
    ]);
    const exportWithPreset = (0, _react.useCallback)(async (preset)=>{
        return exportImage({
            preset
        });
    }, [
        exportImage
    ]);
    const exportMultiple = (0, _react.useCallback)(async (configs)=>{
        if (!exporterRef.current) throw new Error('Exporter not initialized');
        setState((prev)=>({
                ...prev,
                isExporting: true,
                progress: 0,
                totalExports: prev.totalExports + configs.length
            }));
        const results = [];
        const totalConfigs = configs.length;
        try {
            for(let i = 0; i < configs.length; i++){
                const config = {
                    ...options.defaultConfig,
                    ...configs[i]
                };
                updateProgress(i / totalConfigs * 100);
                const result = await exporterRef.current.exportImage(config);
                results.push(result);
                setState((prev)=>({
                        ...prev,
                        completedExports: [
                            ...prev.completedExports,
                            result
                        ]
                    }));
            }
            setState((prev)=>({
                    ...prev,
                    isExporting: false,
                    progress: 100
                }));
            updateProgress(100);
            return results;
        } catch (error) {
            const classifiedError = (0, _errorHandling.classifyTryonError)(error);
            setState((prev)=>({
                    ...prev,
                    isExporting: false,
                    progress: 0,
                    failedExports: [
                        ...prev.failedExports,
                        {
                            config: configs[results.length],
                            error: classifiedError
                        }
                    ]
                }));
            (0, _errorHandling.logAndClassifyError)(error, {
                operation: 'batch_export',
                completedCount: results.length,
                totalCount: totalConfigs
            });
            options.onExportError?.(classifiedError);
            throw classifiedError;
        }
    }, [
        options,
        updateProgress
    ]);
    const downloadLastExport = (0, _react.useCallback)(()=>{
        if (!exporterRef.current || state.completedExports.length === 0) return;
        const lastExport = state.completedExports[state.completedExports.length - 1];
        exporterRef.current.downloadImage(lastExport);
    }, [
        state.completedExports
    ]);
    const clearHistory = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                completedExports: [],
                failedExports: [],
                totalExports: 0
            }));
    }, []);
    const getOptimalConfig = (0, _react.useCallback)((useCase)=>{
        const baseConfig = {
            ..._imageExport.DEFAULT_EXPORT_CONFIG,
            ...options.defaultConfig
        };
        switch(useCase){
            case 'web':
                return {
                    ...baseConfig,
                    format: _imageExport.ExportFormat.WEBP,
                    preset: _imageExport.QualityPreset.WEB,
                    quality: 0.8
                };
            case 'social':
                return {
                    ...baseConfig,
                    format: _imageExport.ExportFormat.JPEG,
                    preset: _imageExport.QualityPreset.SOCIAL,
                    quality: 0.85,
                    width: 1080,
                    height: 1080
                };
            case 'print':
                return {
                    ...baseConfig,
                    format: _imageExport.ExportFormat.PNG,
                    preset: _imageExport.QualityPreset.PRINT,
                    quality: 1.0,
                    dpi: 300
                };
            case 'archive':
                return {
                    ...baseConfig,
                    format: _imageExport.ExportFormat.PNG,
                    preset: _imageExport.QualityPreset.MAXIMUM,
                    quality: 1.0
                };
            default:
                return baseConfig;
        }
    }, [
        options.defaultConfig
    ]);
    const estimateSize = (0, _react.useCallback)((config = {})=>{
        const finalConfig = {
            ..._imageExport.DEFAULT_EXPORT_CONFIG,
            ...options.defaultConfig,
            ...config
        };
        const { estimateFileSize } = require('../utils/imageExport');
        return estimateFileSize(finalConfig.width || canvasWidth, finalConfig.height || canvasHeight, finalConfig.format, finalConfig.quality);
    }, [
        canvasWidth,
        canvasHeight,
        options.defaultConfig
    ]);
    return {
        canvas,
        exporter: exporterRef.current,
        state,
        exportImage,
        exportWithPreset,
        exportMultiple,
        downloadLastExport,
        clearHistory,
        getOptimalConfig,
        estimateSize
    };
}
function useBatchImageExport(canvasWidth, canvasHeight, canvasId, concurrency = 2) {
    const canvas = (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId);
    const exporterRef = (0, _react.useRef)(undefined);
    const batchManagerRef = (0, _react.useRef)(undefined);
    const [queueStatus, setQueueStatus] = (0, _react.useState)({
        pending: 0,
        processing: false
    });
    // Initialize exporter and batch manager
    if (!exporterRef.current) {
        exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
        batchManagerRef.current = (0, _imageExport.createBatchExportManager)(exporterRef.current, concurrency);
    }
    const updateQueueStatus = (0, _react.useCallback)(()=>{
        if (batchManagerRef.current) {
            setQueueStatus(batchManagerRef.current.getQueueStatus());
        }
    }, []);
    const queueExport = (0, _react.useCallback)(async (config)=>{
        if (!batchManagerRef.current) throw new Error('Batch manager not initialized');
        updateQueueStatus();
        const result = await batchManagerRef.current.queueExport(config);
        updateQueueStatus();
        return result;
    }, [
        updateQueueStatus
    ]);
    const queueMultiple = (0, _react.useCallback)(async (configs)=>{
        if (!batchManagerRef.current) throw new Error('Batch manager not initialized');
        const promises = configs.map((config)=>queueExport(config));
        return Promise.all(promises);
    }, [
        queueExport
    ]);
    const clearQueue = (0, _react.useCallback)(()=>{
        if (batchManagerRef.current) {
            batchManagerRef.current.clearQueue();
            updateQueueStatus();
        }
    }, [
        updateQueueStatus
    ]);
    const exportPresets = (0, _react.useCallback)(async (presets)=>{
        const configs = presets.map((preset)=>({
                preset
            }));
        return queueMultiple(configs);
    }, [
        queueMultiple
    ]);
    return {
        canvas,
        batchManager: batchManagerRef.current,
        queueExport,
        queueMultiple,
        clearQueue,
        queueStatus,
        exportPresets
    };
}
function useSimpleImageExport(canvasWidth, canvasHeight, canvasId) {
    const { canvas, state, exportImage, downloadLastExport, getOptimalConfig } = useImageExport(canvasWidth, canvasHeight, canvasId, {
        autoDownload: true
    });
    const exportForWeb = (0, _react.useCallback)(()=>{
        return exportImage(getOptimalConfig('web'));
    }, [
        exportImage,
        getOptimalConfig
    ]);
    const exportForSocial = (0, _react.useCallback)(()=>{
        return exportImage(getOptimalConfig('social'));
    }, [
        exportImage,
        getOptimalConfig
    ]);
    const exportForPrint = (0, _react.useCallback)(()=>{
        return exportImage(getOptimalConfig('print'));
    }, [
        exportImage,
        getOptimalConfig
    ]);
    const exportPNG = (0, _react.useCallback)(()=>{
        return exportImage({
            format: _imageExport.ExportFormat.PNG,
            quality: 1.0
        });
    }, [
        exportImage
    ]);
    const exportJPEG = (0, _react.useCallback)((quality = 0.9)=>{
        return exportImage({
            format: _imageExport.ExportFormat.JPEG,
            quality
        });
    }, [
        exportImage
    ]);
    return {
        canvas,
        exportForWeb,
        exportForSocial,
        exportForPrint,
        exportPNG,
        exportJPEG,
        isExporting: state.isExporting,
        lastExport: state.completedExports[state.completedExports.length - 1] || null,
        downloadLast: downloadLastExport
    };
}

//# sourceMappingURL=data:application/json;base64,