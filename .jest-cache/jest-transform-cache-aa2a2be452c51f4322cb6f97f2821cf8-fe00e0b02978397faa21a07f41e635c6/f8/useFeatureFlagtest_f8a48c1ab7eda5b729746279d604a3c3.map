{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/business-layer/hooks/useFeatureFlag.test.tsx"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { FeatureFlagProvider } from '../../../src/business-layer/providers/FeatureFlagProvider';\nimport {\n  useFeatureFlag,\n  useFeatureFlagEnabled,\n  useFeatureFlagString,\n  useFeatureFlagNumber,\n  useFeatureFlags,\n  useAnyFeatureFlagEnabled,\n  useAllFeatureFlagsEnabled,\n  useFeatureFlagValue,\n  useFeatureFlagRefresh,\n  useAllFeatureFlags,\n  useExperimentVariant,\n} from '../../../src/business-layer/hooks/useFeatureFlag';\nimport type { FeatureFlagConfig } from '../../../src/business-layer/types/featureFlag.types';\n\n// Mock console.debug to avoid noise in tests\njest.spyOn(console, 'debug').mockImplementation(() => {});\n\ndescribe('useFeatureFlag Hooks', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n          gcTime: 0,\n        },\n      },\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n    queryClient.clear();\n  });\n\n  const mockFlags: FeatureFlagConfig[] = [\n    {\n      key: 'booleanFlag',\n      description: 'Boolean test flag',\n      category: 'experiment',\n      defaultValue: true,\n      type: 'boolean',\n    },\n    {\n      key: 'stringFlag',\n      description: 'String test flag',\n      category: 'ui',\n      defaultValue: 'test-value',\n      type: 'string',\n    },\n    {\n      key: 'numberFlag',\n      description: 'Number test flag',\n      category: 'performance',\n      defaultValue: 42,\n      type: 'number',\n    },\n    {\n      key: 'disabledFlag',\n      description: 'Disabled test flag',\n      category: 'experiment',\n      defaultValue: false,\n      type: 'boolean',\n    },\n    {\n      key: 'experimentFlag',\n      description: 'Experiment variant flag',\n      category: 'experiment',\n      defaultValue: 'variant-a',\n      type: 'string',\n    },\n  ];\n\n  const renderWithProvider = (children: React.ReactNode) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        <FeatureFlagProvider initialFlags={mockFlags} environment=\"test\">\n          {children}\n        </FeatureFlagProvider>\n      </QueryClientProvider>\n    );\n  };\n\n  describe('useFeatureFlag', () => {\n    it('should return flag value when flag exists and is enabled', () => {\n      const TestComponent = () => {\n        const { flag, isEnabled, value, isLoading, error } = useFeatureFlag('booleanFlag', false);\n        \n        return (\n          <div>\n            <div data-testid=\"flag-key\">{flag?.key || 'none'}</div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"value\">{value.toString()}</div>\n            <div data-testid=\"is-loading\">{isLoading.toString()}</div>\n            <div data-testid=\"error\">{error?.message || 'none'}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('flag-key')).toHaveTextContent('booleanFlag');\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('value')).toHaveTextContent('true');\n      expect(screen.getByTestId('is-loading')).toHaveTextContent('false');\n      expect(screen.getByTestId('error')).toHaveTextContent('none');\n    });\n\n    it('should return default value when flag does not exist', () => {\n      const TestComponent = () => {\n        const { flag, isEnabled, value } = useFeatureFlag('nonexistentFlag', 'default');\n        \n        return (\n          <div>\n            <div data-testid=\"flag-exists\">{flag ? 'true' : 'false'}</div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"value\">{value.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('flag-exists')).toHaveTextContent('false');\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true'); // Default value is truthy\n      expect(screen.getByTestId('value')).toHaveTextContent('default');\n    });\n\n    it('should return default value when flag is disabled', () => {\n      const TestComponent = () => {\n        const { isEnabled, value } = useFeatureFlag('disabledFlag', true);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"value\">{value.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('false');\n      expect(screen.getByTestId('value')).toHaveTextContent('false'); // Flag value, not default\n    });\n  });\n\n  describe('useFeatureFlagEnabled', () => {\n    it('should return boolean flag state correctly', () => {\n      const TestComponent = () => {\n        const { isEnabled, value } = useFeatureFlagEnabled('booleanFlag');\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"value\">{value.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('value')).toHaveTextContent('true');\n    });\n\n    it('should use default value for missing flags', () => {\n      const TestComponent = () => {\n        const { isEnabled, value } = useFeatureFlagEnabled('nonexistentFlag', true);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"value\">{value.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('value')).toHaveTextContent('true');\n    });\n  });\n\n  describe('useFeatureFlagString', () => {\n    it('should return string flag value correctly', () => {\n      const TestComponent = () => {\n        const { value } = useFeatureFlagString('stringFlag', 'default');\n        \n        return <div data-testid=\"value\">{value}</div>;\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('test-value');\n    });\n\n    it('should return default string for missing flags', () => {\n      const TestComponent = () => {\n        const { value } = useFeatureFlagString('nonexistentFlag', 'fallback');\n        \n        return <div data-testid=\"value\">{value}</div>;\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('fallback');\n    });\n  });\n\n  describe('useFeatureFlagNumber', () => {\n    it('should return number flag value correctly', () => {\n      const TestComponent = () => {\n        const { value } = useFeatureFlagNumber('numberFlag', 0);\n        \n        return <div data-testid=\"value\">{value}</div>;\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('42');\n    });\n\n    it('should return default number for missing flags', () => {\n      const TestComponent = () => {\n        const { value } = useFeatureFlagNumber('nonexistentFlag', 100);\n        \n        return <div data-testid=\"value\">{value}</div>;\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('100');\n    });\n  });\n\n  describe('useFeatureFlags', () => {\n    it('should return multiple flags correctly', () => {\n      const TestComponent = () => {\n        const { flags, values, isAnyEnabled, areAllEnabled } = useFeatureFlags(\n          ['booleanFlag', 'stringFlag', 'disabledFlag'],\n          { disabledFlag: true }\n        );\n        \n        return (\n          <div>\n            <div data-testid=\"boolean-value\">{values.booleanFlag?.toString()}</div>\n            <div data-testid=\"string-value\">{values.stringFlag?.toString()}</div>\n            <div data-testid=\"disabled-value\">{values.disabledFlag?.toString()}</div>\n            <div data-testid=\"any-enabled\">{isAnyEnabled.toString()}</div>\n            <div data-testid=\"all-enabled\">{areAllEnabled.toString()}</div>\n            <div data-testid=\"flags-count\">{Object.keys(flags).length}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('boolean-value')).toHaveTextContent('true');\n      expect(screen.getByTestId('string-value')).toHaveTextContent('test-value');\n      expect(screen.getByTestId('disabled-value')).toHaveTextContent('false');\n      expect(screen.getByTestId('any-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('all-enabled')).toHaveTextContent('false'); // disabledFlag is false\n      expect(screen.getByTestId('flags-count')).toHaveTextContent('3');\n    });\n\n    it('should handle empty flag array', () => {\n      const TestComponent = () => {\n        const { flags, values, isAnyEnabled, areAllEnabled } = useFeatureFlags([]);\n        \n        return (\n          <div>\n            <div data-testid=\"flags-count\">{Object.keys(flags).length}</div>\n            <div data-testid=\"values-count\">{Object.keys(values).length}</div>\n            <div data-testid=\"any-enabled\">{isAnyEnabled.toString()}</div>\n            <div data-testid=\"all-enabled\">{areAllEnabled.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('flags-count')).toHaveTextContent('0');\n      expect(screen.getByTestId('values-count')).toHaveTextContent('0');\n      expect(screen.getByTestId('any-enabled')).toHaveTextContent('false');\n      expect(screen.getByTestId('all-enabled')).toHaveTextContent('true'); // All 0 flags are enabled\n    });\n  });\n\n  describe('useAnyFeatureFlagEnabled', () => {\n    it('should return true when any flag is enabled', () => {\n      const TestComponent = () => {\n        const { isEnabled, enabledFlags } = useAnyFeatureFlagEnabled(['booleanFlag', 'disabledFlag']);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"enabled-flags\">{enabledFlags.join(',')}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('enabled-flags')).toHaveTextContent('booleanFlag');\n    });\n\n    it('should return false when no flags are enabled', () => {\n      const TestComponent = () => {\n        const { isEnabled, enabledFlags } = useAnyFeatureFlagEnabled(['disabledFlag', 'nonexistentFlag']);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"enabled-flags\">{enabledFlags.join(',')}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('false');\n      expect(screen.getByTestId('enabled-flags')).toHaveTextContent('');\n    });\n  });\n\n  describe('useAllFeatureFlagsEnabled', () => {\n    it('should return true when all flags are enabled', () => {\n      const TestComponent = () => {\n        const { isEnabled, disabledFlags } = useAllFeatureFlagsEnabled(['booleanFlag', 'stringFlag']);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"disabled-flags\">{disabledFlags.join(',')}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('disabled-flags')).toHaveTextContent('');\n    });\n\n    it('should return false when some flags are disabled', () => {\n      const TestComponent = () => {\n        const { isEnabled, disabledFlags } = useAllFeatureFlagsEnabled(['booleanFlag', 'disabledFlag']);\n        \n        return (\n          <div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n            <div data-testid=\"disabled-flags\">{disabledFlags.join(',')}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('false');\n      expect(screen.getByTestId('disabled-flags')).toHaveTextContent('disabledFlag');\n    });\n  });\n\n  describe('useFeatureFlagValue', () => {\n    it('should return enabled value when flag is enabled', () => {\n      const TestComponent = () => {\n        const { value, isEnabled } = useFeatureFlagValue('booleanFlag', 'enabled', 'disabled');\n        \n        return (\n          <div>\n            <div data-testid=\"value\">{value}</div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('enabled');\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('true');\n    });\n\n    it('should return disabled value when flag is disabled', () => {\n      const TestComponent = () => {\n        const { value, isEnabled } = useFeatureFlagValue('disabledFlag', 'enabled', 'disabled');\n        \n        return (\n          <div>\n            <div data-testid=\"value\">{value}</div>\n            <div data-testid=\"is-enabled\">{isEnabled.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('value')).toHaveTextContent('disabled');\n      expect(screen.getByTestId('is-enabled')).toHaveTextContent('false');\n    });\n  });\n\n  describe('useFeatureFlagRefresh', () => {\n    it('should provide refresh functionality', async () => {\n      const TestComponent = () => {\n        const { refresh, isRefreshing } = useFeatureFlagRefresh();\n        const [refreshed, setRefreshed] = React.useState(false);\n        \n        const handleRefresh = async () => {\n          await refresh();\n          setRefreshed(true);\n        };\n        \n        return (\n          <div>\n            <button onClick={handleRefresh} data-testid=\"refresh-button\">\n              Refresh\n            </button>\n            <div data-testid=\"is-refreshing\">{isRefreshing.toString()}</div>\n            <div data-testid=\"refreshed\">{refreshed.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('is-refreshing')).toHaveTextContent('false');\n      expect(screen.getByTestId('refreshed')).toHaveTextContent('false');\n\n      await act(async () => {\n        screen.getByTestId('refresh-button').click();\n      });\n\n      expect(screen.getByTestId('refreshed')).toHaveTextContent('true');\n    });\n  });\n\n  describe('useAllFeatureFlags', () => {\n    it('should return all flags in development mode', () => {\n      // Mock NODE_ENV\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n\n      const TestComponent = () => {\n        const allFlags = useAllFeatureFlags();\n        \n        return (\n          <div>\n            <div data-testid=\"flags-available\">{allFlags ? 'true' : 'false'}</div>\n            <div data-testid=\"flags-count\">{allFlags ? Object.keys(allFlags.flags).length : 0}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('flags-available')).toHaveTextContent('true');\n      expect(screen.getByTestId('flags-count')).toHaveTextContent('5'); // All mock flags\n\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('should return null in production mode', () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      const TestComponent = () => {\n        const allFlags = useAllFeatureFlags();\n        \n        return (\n          <div data-testid=\"flags-available\">{allFlags ? 'true' : 'false'}</div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('flags-available')).toHaveTextContent('false');\n\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n\n  describe('useExperimentVariant', () => {\n    it('should return correct variant and value', () => {\n      const variants = {\n        'control': 'Original Design',\n        'variant-a': 'New Design A',\n        'variant-b': 'New Design B',\n      };\n\n      const TestComponent = () => {\n        const { variant, value, isInExperiment } = useExperimentVariant(\n          'experimentFlag',\n          variants,\n          'control'\n        );\n        \n        return (\n          <div>\n            <div data-testid=\"variant\">{variant}</div>\n            <div data-testid=\"value\">{value}</div>\n            <div data-testid=\"in-experiment\">{isInExperiment.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('variant')).toHaveTextContent('variant-a');\n      expect(screen.getByTestId('value')).toHaveTextContent('New Design A');\n      expect(screen.getByTestId('in-experiment')).toHaveTextContent('true');\n    });\n\n    it('should fallback to default variant for invalid values', () => {\n      const variants = {\n        'control': 'Original Design',\n        'variant-a': 'New Design A',\n      };\n\n      const TestComponent = () => {\n        const { variant, value, isInExperiment } = useExperimentVariant(\n          'nonexistentFlag',\n          variants,\n          'control'\n        );\n        \n        return (\n          <div>\n            <div data-testid=\"variant\">{variant}</div>\n            <div data-testid=\"value\">{value}</div>\n            <div data-testid=\"in-experiment\">{isInExperiment.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(screen.getByTestId('variant')).toHaveTextContent('control');\n      expect(screen.getByTestId('value')).toHaveTextContent('Original Design');\n      expect(screen.getByTestId('in-experiment')).toHaveTextContent('false');\n    });\n\n    it('should fallback when flag value is not in variants', () => {\n      const variants = {\n        'control': 'Original Design',\n        'variant-a': 'New Design A',\n      };\n\n      // experimentFlag has value 'variant-a' but let's test with a different value\n      const customFlags: FeatureFlagConfig[] = [\n        {\n          key: 'invalidExperimentFlag',\n          description: 'Invalid experiment flag',\n          category: 'experiment',\n          defaultValue: 'invalid-variant',\n          type: 'string',\n        },\n      ];\n\n      const TestComponent = () => {\n        const { variant, value, isInExperiment } = useExperimentVariant(\n          'invalidExperimentFlag',\n          variants,\n          'control'\n        );\n        \n        return (\n          <div>\n            <div data-testid=\"variant\">{variant}</div>\n            <div data-testid=\"value\">{value}</div>\n            <div data-testid=\"in-experiment\">{isInExperiment.toString()}</div>\n          </div>\n        );\n      };\n\n      render(\n        <QueryClientProvider client={queryClient}>\n          <FeatureFlagProvider initialFlags={customFlags} environment=\"test\">\n            <TestComponent />\n          </FeatureFlagProvider>\n        </QueryClientProvider>\n      );\n\n      expect(screen.getByTestId('variant')).toHaveTextContent('control');\n      expect(screen.getByTestId('value')).toHaveTextContent('Original Design');\n      expect(screen.getByTestId('in-experiment')).toHaveTextContent('false');\n    });\n  });\n\n  describe('Hook error handling', () => {\n    it('should handle context not available gracefully', () => {\n      // Mock console.error to avoid noise\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      const TestComponent = () => {\n        useFeatureFlag('testFlag');\n        return <div data-testid=\"error\">none</div>;\n      };\n\n      expect(() => {\n        render(<TestComponent />);\n      }).toThrow('useFeatureFlagContext must be used within a FeatureFlagProvider');\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Development logging', () => {\n    it('should log flag usage in development mode', () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n      \n      const debugSpy = jest.spyOn(console, 'debug');\n\n      const TestComponent = () => {\n        useFeatureFlag('booleanFlag', false);\n        return <div>Test</div>;\n      };\n\n      renderWithProvider(<TestComponent />);\n\n      expect(debugSpy).toHaveBeenCalledWith(\n        expect.stringContaining('[FeatureFlag] booleanFlag: true (flag)')\n      );\n\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n});"],"names":["jest","spyOn","console","mockImplementation","describe","queryClient","beforeEach","QueryClient","defaultOptions","queries","retry","gcTime","afterEach","restoreAllMocks","clear","mockFlags","key","description","category","defaultValue","type","renderWithProvider","children","render","QueryClientProvider","client","FeatureFlagProvider","initialFlags","environment","it","TestComponent","flag","isEnabled","value","isLoading","error","useFeatureFlag","div","data-testid","toString","message","expect","screen","getByTestId","toHaveTextContent","useFeatureFlagEnabled","useFeatureFlagString","useFeatureFlagNumber","flags","values","isAnyEnabled","areAllEnabled","useFeatureFlags","disabledFlag","booleanFlag","stringFlag","Object","keys","length","enabledFlags","useAnyFeatureFlagEnabled","join","disabledFlags","useAllFeatureFlagsEnabled","useFeatureFlagValue","refresh","isRefreshing","useFeatureFlagRefresh","refreshed","setRefreshed","React","useState","handleRefresh","button","onClick","act","click","originalEnv","process","env","NODE_ENV","allFlags","useAllFeatureFlags","variants","variant","isInExperiment","useExperimentVariant","customFlags","consoleSpy","toThrow","mockRestore","debugSpy","toHaveBeenCalledWith","stringContaining"],"mappings":"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"}