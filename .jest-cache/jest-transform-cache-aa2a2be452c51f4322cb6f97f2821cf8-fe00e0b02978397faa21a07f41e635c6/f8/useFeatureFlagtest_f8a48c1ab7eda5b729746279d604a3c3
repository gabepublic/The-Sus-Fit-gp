67f1c1afac3af790a6ae680c7bd6a4aa
/**
 * @jest-environment jsdom
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _FeatureFlagProvider = require("../../../src/business-layer/providers/FeatureFlagProvider");
const _useFeatureFlag = require("../../../src/business-layer/hooks/useFeatureFlag");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock console.debug to avoid noise in tests
jest.spyOn(console, 'debug').mockImplementation(()=>{});
describe('useFeatureFlag Hooks', ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false,
                    gcTime: 0
                }
            }
        });
    });
    afterEach(()=>{
        jest.restoreAllMocks();
        queryClient.clear();
    });
    const mockFlags = [
        {
            key: 'booleanFlag',
            description: 'Boolean test flag',
            category: 'experiment',
            defaultValue: true,
            type: 'boolean'
        },
        {
            key: 'stringFlag',
            description: 'String test flag',
            category: 'ui',
            defaultValue: 'test-value',
            type: 'string'
        },
        {
            key: 'numberFlag',
            description: 'Number test flag',
            category: 'performance',
            defaultValue: 42,
            type: 'number'
        },
        {
            key: 'disabledFlag',
            description: 'Disabled test flag',
            category: 'experiment',
            defaultValue: false,
            type: 'boolean'
        },
        {
            key: 'experimentFlag',
            description: 'Experiment variant flag',
            category: 'experiment',
            defaultValue: 'variant-a',
            type: 'string'
        }
    ];
    const renderWithProvider = (children)=>{
        return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeatureFlagProvider.FeatureFlagProvider, {
                initialFlags: mockFlags,
                environment: "test",
                children: children
            })
        }));
    };
    describe('useFeatureFlag', ()=>{
        it('should return flag value when flag exists and is enabled', ()=>{
            const TestComponent = ()=>{
                const { flag, isEnabled, value, isLoading, error } = (0, _useFeatureFlag.useFeatureFlag)('booleanFlag', false);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-key",
                            children: flag?.key || 'none'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-loading",
                            children: isLoading.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "error",
                            children: error?.message || 'none'
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('flag-key')).toHaveTextContent('booleanFlag');
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('is-loading')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('error')).toHaveTextContent('none');
        });
        it('should return default value when flag does not exist', ()=>{
            const TestComponent = ()=>{
                const { flag, isEnabled, value } = (0, _useFeatureFlag.useFeatureFlag)('nonexistentFlag', 'default');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-exists",
                            children: flag ? 'true' : 'false'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('flag-exists')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true'); // Default value is truthy
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('default');
        });
        it('should return default value when flag is disabled', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, value } = (0, _useFeatureFlag.useFeatureFlag)('disabledFlag', true);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('false'); // Flag value, not default
        });
    });
    describe('useFeatureFlagEnabled', ()=>{
        it('should return boolean flag state correctly', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, value } = (0, _useFeatureFlag.useFeatureFlagEnabled)('booleanFlag');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('true');
        });
        it('should use default value for missing flags', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, value } = (0, _useFeatureFlag.useFeatureFlagEnabled)('nonexistentFlag', true);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('true');
        });
    });
    describe('useFeatureFlagString', ()=>{
        it('should return string flag value correctly', ()=>{
            const TestComponent = ()=>{
                const { value } = (0, _useFeatureFlag.useFeatureFlagString)('stringFlag', 'default');
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "value",
                    children: value
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('test-value');
        });
        it('should return default string for missing flags', ()=>{
            const TestComponent = ()=>{
                const { value } = (0, _useFeatureFlag.useFeatureFlagString)('nonexistentFlag', 'fallback');
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "value",
                    children: value
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('fallback');
        });
    });
    describe('useFeatureFlagNumber', ()=>{
        it('should return number flag value correctly', ()=>{
            const TestComponent = ()=>{
                const { value } = (0, _useFeatureFlag.useFeatureFlagNumber)('numberFlag', 0);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "value",
                    children: value
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('42');
        });
        it('should return default number for missing flags', ()=>{
            const TestComponent = ()=>{
                const { value } = (0, _useFeatureFlag.useFeatureFlagNumber)('nonexistentFlag', 100);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "value",
                    children: value
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('100');
        });
    });
    describe('useFeatureFlags', ()=>{
        it('should return multiple flags correctly', ()=>{
            const TestComponent = ()=>{
                const { flags, values, isAnyEnabled, areAllEnabled } = (0, _useFeatureFlag.useFeatureFlags)([
                    'booleanFlag',
                    'stringFlag',
                    'disabledFlag'
                ], {
                    disabledFlag: true
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "boolean-value",
                            children: values.booleanFlag?.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "string-value",
                            children: values.stringFlag?.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "disabled-value",
                            children: values.disabledFlag?.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "any-enabled",
                            children: isAnyEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "all-enabled",
                            children: areAllEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flags-count",
                            children: Object.keys(flags).length
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('boolean-value')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('string-value')).toHaveTextContent('test-value');
            expect(_react1.screen.getByTestId('disabled-value')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('any-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('all-enabled')).toHaveTextContent('false'); // disabledFlag is false
            expect(_react1.screen.getByTestId('flags-count')).toHaveTextContent('3');
        });
        it('should handle empty flag array', ()=>{
            const TestComponent = ()=>{
                const { flags, values, isAnyEnabled, areAllEnabled } = (0, _useFeatureFlag.useFeatureFlags)([]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flags-count",
                            children: Object.keys(flags).length
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "values-count",
                            children: Object.keys(values).length
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "any-enabled",
                            children: isAnyEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "all-enabled",
                            children: areAllEnabled.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('flags-count')).toHaveTextContent('0');
            expect(_react1.screen.getByTestId('values-count')).toHaveTextContent('0');
            expect(_react1.screen.getByTestId('any-enabled')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('all-enabled')).toHaveTextContent('true'); // All 0 flags are enabled
        });
    });
    describe('useAnyFeatureFlagEnabled', ()=>{
        it('should return true when any flag is enabled', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, enabledFlags } = (0, _useFeatureFlag.useAnyFeatureFlagEnabled)([
                    'booleanFlag',
                    'disabledFlag'
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "enabled-flags",
                            children: enabledFlags.join(',')
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('enabled-flags')).toHaveTextContent('booleanFlag');
        });
        it('should return false when no flags are enabled', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, enabledFlags } = (0, _useFeatureFlag.useAnyFeatureFlagEnabled)([
                    'disabledFlag',
                    'nonexistentFlag'
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "enabled-flags",
                            children: enabledFlags.join(',')
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('enabled-flags')).toHaveTextContent('');
        });
    });
    describe('useAllFeatureFlagsEnabled', ()=>{
        it('should return true when all flags are enabled', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, disabledFlags } = (0, _useFeatureFlag.useAllFeatureFlagsEnabled)([
                    'booleanFlag',
                    'stringFlag'
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "disabled-flags",
                            children: disabledFlags.join(',')
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('disabled-flags')).toHaveTextContent('');
        });
        it('should return false when some flags are disabled', ()=>{
            const TestComponent = ()=>{
                const { isEnabled, disabledFlags } = (0, _useFeatureFlag.useAllFeatureFlagsEnabled)([
                    'booleanFlag',
                    'disabledFlag'
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "disabled-flags",
                            children: disabledFlags.join(',')
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('disabled-flags')).toHaveTextContent('disabledFlag');
        });
    });
    describe('useFeatureFlagValue', ()=>{
        it('should return enabled value when flag is enabled', ()=>{
            const TestComponent = ()=>{
                const { value, isEnabled } = (0, _useFeatureFlag.useFeatureFlagValue)('booleanFlag', 'enabled', 'disabled');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('enabled');
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('true');
        });
        it('should return disabled value when flag is disabled', ()=>{
            const TestComponent = ()=>{
                const { value, isEnabled } = (0, _useFeatureFlag.useFeatureFlagValue)('disabledFlag', 'enabled', 'disabled');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-enabled",
                            children: isEnabled.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('disabled');
            expect(_react1.screen.getByTestId('is-enabled')).toHaveTextContent('false');
        });
    });
    describe('useFeatureFlagRefresh', ()=>{
        it('should provide refresh functionality', async ()=>{
            const TestComponent = ()=>{
                const { refresh, isRefreshing } = (0, _useFeatureFlag.useFeatureFlagRefresh)();
                const [refreshed, setRefreshed] = _react.default.useState(false);
                const handleRefresh = async ()=>{
                    await refresh();
                    setRefreshed(true);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: handleRefresh,
                            "data-testid": "refresh-button",
                            children: "Refresh"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "is-refreshing",
                            children: isRefreshing.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "refreshed",
                            children: refreshed.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('is-refreshing')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('refreshed')).toHaveTextContent('false');
            await (0, _react1.act)(async ()=>{
                _react1.screen.getByTestId('refresh-button').click();
            });
            expect(_react1.screen.getByTestId('refreshed')).toHaveTextContent('true');
        });
    });
    describe('useAllFeatureFlags', ()=>{
        it('should return all flags in development mode', ()=>{
            // Mock NODE_ENV
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            const TestComponent = ()=>{
                const allFlags = (0, _useFeatureFlag.useAllFeatureFlags)();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flags-available",
                            children: allFlags ? 'true' : 'false'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flags-count",
                            children: allFlags ? Object.keys(allFlags.flags).length : 0
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('flags-available')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('flags-count')).toHaveTextContent('5'); // All mock flags
            process.env.NODE_ENV = originalEnv;
        });
        it('should return null in production mode', ()=>{
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            const TestComponent = ()=>{
                const allFlags = (0, _useFeatureFlag.useAllFeatureFlags)();
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "flags-available",
                    children: allFlags ? 'true' : 'false'
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('flags-available')).toHaveTextContent('false');
            process.env.NODE_ENV = originalEnv;
        });
    });
    describe('useExperimentVariant', ()=>{
        it('should return correct variant and value', ()=>{
            const variants = {
                'control': 'Original Design',
                'variant-a': 'New Design A',
                'variant-b': 'New Design B'
            };
            const TestComponent = ()=>{
                const { variant, value, isInExperiment } = (0, _useFeatureFlag.useExperimentVariant)('experimentFlag', variants, 'control');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "variant",
                            children: variant
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "in-experiment",
                            children: isInExperiment.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('variant')).toHaveTextContent('variant-a');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('New Design A');
            expect(_react1.screen.getByTestId('in-experiment')).toHaveTextContent('true');
        });
        it('should fallback to default variant for invalid values', ()=>{
            const variants = {
                'control': 'Original Design',
                'variant-a': 'New Design A'
            };
            const TestComponent = ()=>{
                const { variant, value, isInExperiment } = (0, _useFeatureFlag.useExperimentVariant)('nonexistentFlag', variants, 'control');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "variant",
                            children: variant
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "in-experiment",
                            children: isInExperiment.toString()
                        })
                    ]
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react1.screen.getByTestId('variant')).toHaveTextContent('control');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('Original Design');
            expect(_react1.screen.getByTestId('in-experiment')).toHaveTextContent('false');
        });
        it('should fallback when flag value is not in variants', ()=>{
            const variants = {
                'control': 'Original Design',
                'variant-a': 'New Design A'
            };
            // experimentFlag has value 'variant-a' but let's test with a different value
            const customFlags = [
                {
                    key: 'invalidExperimentFlag',
                    description: 'Invalid experiment flag',
                    category: 'experiment',
                    defaultValue: 'invalid-variant',
                    type: 'string'
                }
            ];
            const TestComponent = ()=>{
                const { variant, value, isInExperiment } = (0, _useFeatureFlag.useExperimentVariant)('invalidExperimentFlag', variants, 'control');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "variant",
                            children: variant
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "value",
                            children: value
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "in-experiment",
                            children: isInExperiment.toString()
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeatureFlagProvider.FeatureFlagProvider, {
                    initialFlags: customFlags,
                    environment: "test",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
                })
            }));
            expect(_react1.screen.getByTestId('variant')).toHaveTextContent('control');
            expect(_react1.screen.getByTestId('value')).toHaveTextContent('Original Design');
            expect(_react1.screen.getByTestId('in-experiment')).toHaveTextContent('false');
        });
    });
    describe('Hook error handling', ()=>{
        it('should handle context not available gracefully', ()=>{
            // Mock console.error to avoid noise
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation(()=>{});
            const TestComponent = ()=>{
                (0, _useFeatureFlag.useFeatureFlag)('testFlag');
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "error",
                    children: "none"
                });
            };
            expect(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            }).toThrow('useFeatureFlagContext must be used within a FeatureFlagProvider');
            consoleSpy.mockRestore();
        });
    });
    describe('Development logging', ()=>{
        it('should log flag usage in development mode', ()=>{
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            const debugSpy = jest.spyOn(console, 'debug');
            const TestComponent = ()=>{
                (0, _useFeatureFlag.useFeatureFlag)('booleanFlag', false);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Test"
                });
            };
            renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(debugSpy).toHaveBeenCalledWith(expect.stringContaining('[FeatureFlag] booleanFlag: true (flag)'));
            process.env.NODE_ENV = originalEnv;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,