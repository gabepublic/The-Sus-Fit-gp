57b21f82a0ea67c3929e940e8b5a3794
/**
 * @jest-environment jsdom
 */ "use strict";
// Mock the feature flag config functions
jest.mock('../../../src/business-layer/config/featureFlags.config', ()=>({
        loadFeatureFlagConfig: jest.fn(),
        getCurrentEnvironment: jest.fn(()=>'test'),
        loadEnvironmentFlags: jest.fn(()=>({}))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _FeatureFlagProvider = require("../../../src/business-layer/providers/FeatureFlagProvider");
const _FeatureFlagContext = require("../../../src/business-layer/providers/FeatureFlagContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Test component that uses the feature flag context
const TestConsumer = ({ flagKey, defaultValue })=>{
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    const value = context.getValue(flagKey, defaultValue);
    const isEnabled = context.isEnabled(flagKey);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "flag-value",
                children: JSON.stringify(value)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "flag-enabled",
                children: isEnabled.toString()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loading",
                children: context.isLoading.toString()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error",
                children: context.error?.message || 'none'
            })
        ]
    });
};
// Test component that uses multiple flags
const MultiFlagConsumer = ()=>{
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    const enabledFlags = [
        'flag1',
        'flag2',
        'flag3'
    ].filter((key)=>context.isEnabled(key));
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "enabled-flags",
        children: enabledFlags.join(',')
    });
};
// Error throwing component for error boundary testing
const ErrorComponent = ()=>{
    throw new Error('Test error');
};
describe('FeatureFlagProvider', ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false,
                    gcTime: 0
                }
            }
        });
        // Suppress console.error for error boundary tests
        jest.spyOn(console, 'error').mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.restoreAllMocks();
        queryClient.clear();
    });
    const renderWithProviders = (children, providerProps)=>{
        return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeatureFlagProvider.FeatureFlagProvider, {
                ...providerProps,
                children: children
            })
        }));
    };
    describe('Basic Provider Functionality', ()=>{
        it('should provide default context values', ()=>{
            const mockConfigs = [
                {
                    key: 'testFlag',
                    description: 'Test flag',
                    category: 'experiment',
                    defaultValue: true,
                    type: 'boolean'
                }
            ];
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "testFlag",
                defaultValue: false
            }), {
                initialFlags: mockConfigs
            });
            expect(_react1.screen.getByTestId('flag-value')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('flag-enabled')).toHaveTextContent('true');
            expect(_react1.screen.getByTestId('loading')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('error')).toHaveTextContent('none');
        });
        it('should handle missing flags with default values', ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "nonexistentFlag",
                defaultValue: "fallback"
            }), {
                initialFlags: []
            });
            expect(_react1.screen.getByTestId('flag-value')).toHaveTextContent('"fallback"');
            expect(_react1.screen.getByTestId('flag-enabled')).toHaveTextContent('false');
        });
        it('should handle environment-specific flag filtering', ()=>{
            const mockConfigs = [
                {
                    key: 'devOnlyFlag',
                    description: 'Development only flag',
                    category: 'debugging',
                    defaultValue: true,
                    type: 'boolean',
                    environment: [
                        'development'
                    ]
                },
                {
                    key: 'globalFlag',
                    description: 'Global flag',
                    category: 'ui',
                    defaultValue: true,
                    type: 'boolean'
                }
            ];
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                        flagKey: "devOnlyFlag",
                        defaultValue: false
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                        flagKey: "globalFlag",
                        defaultValue: false
                    })
                ]
            }), {
                initialFlags: mockConfigs,
                environment: 'test' // devOnlyFlag should be disabled
            });
            const flagValues = _react1.screen.getAllByTestId('flag-value');
            const flagEnabled = _react1.screen.getAllByTestId('flag-enabled');
            // devOnlyFlag should be disabled in test environment
            expect(flagValues[0]).toHaveTextContent('false'); // defaultValue used
            expect(flagEnabled[0]).toHaveTextContent('false');
            // globalFlag should be enabled
            expect(flagValues[1]).toHaveTextContent('true');
            expect(flagEnabled[1]).toHaveTextContent('true');
        });
    });
    describe('Environment Variable Override', ()=>{
        beforeEach(()=>{
            // Mock environment variable parsing
            const { loadEnvironmentFlags } = require('../../../src/business-layer/config/featureFlags.config');
            loadEnvironmentFlags.mockReturnValue({
                testflag: false
            });
        });
        it('should override flag values with environment variables', ()=>{
            const mockConfigs = [
                {
                    key: 'testFlag',
                    description: 'Test flag',
                    category: 'experiment',
                    defaultValue: true,
                    type: 'boolean'
                }
            ];
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "testFlag",
                defaultValue: true
            }), {
                initialFlags: mockConfigs
            });
            expect(_react1.screen.getByTestId('flag-value')).toHaveTextContent('false');
            expect(_react1.screen.getByTestId('flag-enabled')).toHaveTextContent('false');
        });
    });
    describe('Error Handling', ()=>{
        it('should handle errors gracefully with fallback to defaults', ()=>{
            const onError = jest.fn();
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorComponent, {}),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                        flagKey: "testFlag",
                        defaultValue: "fallback"
                    })
                ]
            }), {
                onError,
                fallbackToDefaults: true,
                initialFlags: []
            });
            expect(onError).toHaveBeenCalled();
            expect(_react1.screen.getByTestId('flag-value')).toHaveTextContent('"fallback"');
        });
        it('should show error UI when fallbackToDefaults is false', ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorComponent, {}), {
                fallbackToDefaults: false,
                initialFlags: []
            });
            expect(_react1.screen.getByText(/Feature Flag Error/)).toBeInTheDocument();
            expect(_react1.screen.getByText('Test error')).toBeInTheDocument();
            expect(_react1.screen.getByText('Retry')).toBeInTheDocument();
        });
    });
    describe('Remote Configuration', ()=>{
        it('should handle remote config loading states', async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "remoteFlag",
                defaultValue: false
            }), {
                enableRemoteConfig: true,
                config: {
                    remoteConfigUrl: 'https://api.example.com/flags'
                },
                initialFlags: []
            });
            // Initially should show loading state
            expect(_react1.screen.getByTestId('loading')).toHaveTextContent('false'); // No remote config in test env
        });
        it('should disable remote config when enableRemoteConfig is false', ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "testFlag",
                defaultValue: false
            }), {
                enableRemoteConfig: false,
                initialFlags: []
            });
            expect(_react1.screen.getByTestId('loading')).toHaveTextContent('false');
        });
    });
    describe('Context Methods', ()=>{
        it('should provide working getFlag method', ()=>{
            const mockConfigs = [
                {
                    key: 'testFlag',
                    description: 'Test flag',
                    category: 'experiment',
                    defaultValue: 'test-value',
                    type: 'string'
                }
            ];
            const TestFlagGetter = ()=>{
                const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
                const flag = context.getFlag('testFlag');
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-key",
                            children: flag?.key || 'none'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-description",
                            children: flag?.description || 'none'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-category",
                            children: flag?.category || 'none'
                        })
                    ]
                });
            };
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestFlagGetter, {}), {
                initialFlags: mockConfigs
            });
            expect(_react1.screen.getByTestId('flag-key')).toHaveTextContent('testFlag');
            expect(_react1.screen.getByTestId('flag-description')).toHaveTextContent('Test flag');
            expect(_react1.screen.getByTestId('flag-category')).toHaveTextContent('experiment');
        });
        it('should provide working updateFlag method', ()=>{
            const mockConfigs = [
                {
                    key: 'testFlag',
                    description: 'Test flag',
                    category: 'experiment',
                    defaultValue: false,
                    type: 'boolean'
                }
            ];
            const TestFlagUpdater = ()=>{
                const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
                const [updated, setUpdated] = _react.default.useState(false);
                const handleUpdate = ()=>{
                    context.updateFlag('testFlag', true);
                    setUpdated(true);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: handleUpdate,
                            "data-testid": "update-button",
                            children: "Update Flag"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "updated",
                            children: updated.toString()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "flag-value",
                            children: context.getValue('testFlag', false).toString()
                        })
                    ]
                });
            };
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestFlagUpdater, {}), {
                initialFlags: mockConfigs
            });
            // Initial state
            expect(_react1.screen.getByTestId('flag-value')).toHaveTextContent('false');
            // Update flag
            (0, _react1.act)(()=>{
                _react1.screen.getByTestId('update-button').click();
            });
            expect(_react1.screen.getByTestId('updated')).toHaveTextContent('true');
        // Note: updateFlag modifies the flag object directly, but doesn't trigger re-render
        // In real usage, this would be combined with state management
        });
        it('should provide working refreshFlags method', async ()=>{
            const TestFlagRefresher = ()=>{
                const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
                const [refreshed, setRefreshed] = _react.default.useState(false);
                const handleRefresh = async ()=>{
                    await context.refreshFlags();
                    setRefreshed(true);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: handleRefresh,
                            "data-testid": "refresh-button",
                            children: "Refresh Flags"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "refreshed",
                            children: refreshed.toString()
                        })
                    ]
                });
            };
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestFlagRefresher, {}), {
                enableRemoteConfig: false,
                initialFlags: []
            });
            await (0, _react1.act)(async ()=>{
                _react1.screen.getByTestId('refresh-button').click();
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('refreshed')).toHaveTextContent('true');
            });
        });
    });
    describe('Multiple Flag Operations', ()=>{
        it('should handle multiple flags correctly', ()=>{
            const mockConfigs = [
                {
                    key: 'flag1',
                    description: 'Flag 1',
                    category: 'ui',
                    defaultValue: true,
                    type: 'boolean'
                },
                {
                    key: 'flag2',
                    description: 'Flag 2',
                    category: 'ui',
                    defaultValue: false,
                    type: 'boolean'
                },
                {
                    key: 'flag3',
                    description: 'Flag 3',
                    category: 'ui',
                    defaultValue: true,
                    type: 'boolean'
                }
            ];
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(MultiFlagConsumer, {}), {
                initialFlags: mockConfigs
            });
            expect(_react1.screen.getByTestId('enabled-flags')).toHaveTextContent('flag1,flag3');
        });
    });
    describe('Provider Configuration', ()=>{
        it('should respect custom configuration', ()=>{
            const customConfig = {
                refreshInterval: 1000,
                fallbackToDefaults: false
            };
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                flagKey: "testFlag",
                defaultValue: false
            }), {
                config: customConfig,
                initialFlags: []
            });
            // Provider should be configured with custom settings
            expect(_react1.screen.getByTestId('flag-enabled')).toHaveTextContent('false');
        });
        it('should handle different environments', ()=>{
            const environments = [
                'development',
                'staging',
                'production',
                'test'
            ];
            environments.forEach((env)=>{
                const { unmount } = renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestConsumer, {
                    flagKey: "testFlag",
                    defaultValue: false
                }), {
                    environment: env,
                    initialFlags: []
                });
                // Should render without errors for all environments
                expect(_react1.screen.getByTestId('flag-enabled')).toHaveTextContent('false');
                unmount();
            });
        });
    });
    describe('Error Boundary Integration', ()=>{
        it('should catch and handle context errors', ()=>{
            const onError = jest.fn();
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorComponent, {}), {
                onError,
                fallbackToDefaults: true,
                initialFlags: []
            });
            expect(onError).toHaveBeenCalledWith(expect.any(Error));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,