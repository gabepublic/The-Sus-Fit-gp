{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/getEnv.spec.ts"],"sourcesContent":["import { getEnv, getEnvOptional, OpenAIEnv } from '../src/lib/getEnv';\n\ndescribe('getEnv', () => {\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    // Reset process.env before each test\n    process.env = { ...originalEnv };\n  });\n\n  afterAll(() => {\n    // Restore original process.env after all tests\n    process.env = originalEnv;\n  });\n\n  describe('getEnv', () => {\n    it('should return OpenAI environment variables when API key is present', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = 'test-api-key-123';\n      process.env.OPENAI_MODEL = 'gpt-4';\n\n      // Act\n      const result = getEnv();\n\n      // Assert\n      expect(result).toEqual({\n        key: 'test-api-key-123',\n        model: 'gpt-4',\n      });\n    });\n\n    it('should use default model when OPENAI_MODEL is not set', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = 'test-api-key-123';\n      delete process.env.OPENAI_MODEL;\n\n      // Act\n      const result = getEnv();\n\n      // Assert\n      expect(result).toEqual({\n        key: 'test-api-key-123',\n        model: 'gpt-image-1',\n      });\n    });\n\n    it('should use default model when OPENAI_MODEL is empty string', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = 'test-api-key-123';\n      process.env.OPENAI_MODEL = '';\n\n      // Act\n      const result = getEnv();\n\n      // Assert\n      expect(result).toEqual({\n        key: 'test-api-key-123',\n        model: 'gpt-image-1',\n      });\n    });\n\n    it('should throw error when OPENAI_API_KEY is not set', () => {\n      // Arrange\n      delete process.env.OPENAI_API_KEY;\n\n      // Act & Assert\n      expect(() => getEnv()).toThrow('OPENAI_API_KEY not found');\n    });\n\n    it('should throw error when OPENAI_API_KEY is empty string', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = '';\n\n      // Act & Assert\n      expect(() => getEnv()).toThrow('OPENAI_API_KEY not found');\n    });\n\n    it('should throw error when OPENAI_API_KEY is only whitespace', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = '   ';\n\n      // Act & Assert\n      expect(() => getEnv()).toThrow('OPENAI_API_KEY not found');\n    });\n  });\n\n  describe('getEnvOptional', () => {\n    it('should return OpenAI environment variables when API key is present', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = 'test-api-key-123';\n      process.env.OPENAI_MODEL = 'gpt-4';\n\n      // Act\n      const result = getEnvOptional();\n\n      // Assert\n      expect(result).toEqual({\n        key: 'test-api-key-123',\n        model: 'gpt-4',\n      });\n    });\n\n    it('should use default model when OPENAI_MODEL is not set', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = 'test-api-key-123';\n      delete process.env.OPENAI_MODEL;\n\n      // Act\n      const result = getEnvOptional();\n\n      // Assert\n      expect(result).toEqual({\n        key: 'test-api-key-123',\n        model: 'gpt-image-1',\n      });\n    });\n\n    it('should return undefined when OPENAI_API_KEY is not set', () => {\n      // Arrange\n      delete process.env.OPENAI_API_KEY;\n\n      // Act\n      const result = getEnvOptional();\n\n      // Assert\n      expect(result).toBeUndefined();\n    });\n\n    it('should return undefined when OPENAI_API_KEY is empty string', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = '';\n\n      // Act\n      const result = getEnvOptional();\n\n      // Assert\n      expect(result).toBeUndefined();\n    });\n\n    it('should return undefined when OPENAI_API_KEY is only whitespace', () => {\n      // Arrange\n      process.env.OPENAI_API_KEY = '   ';\n\n      // Act\n      const result = getEnvOptional();\n\n      // Assert\n      expect(result).toBeUndefined();\n    });\n  });\n\n  describe('TypeScript interface', () => {\n    it('should have correct OpenAIEnv interface', () => {\n      // Arrange\n      const mockEnv: OpenAIEnv = {\n        key: 'test-key',\n        model: 'test-model',\n      };\n\n      // Act & Assert\n      expect(mockEnv).toHaveProperty('key');\n      expect(mockEnv).toHaveProperty('model');\n      expect(typeof mockEnv.key).toBe('string');\n      expect(typeof mockEnv.model).toBe('string');\n    });\n  });\n}); "],"names":["describe","originalEnv","process","env","beforeEach","afterAll","it","OPENAI_API_KEY","OPENAI_MODEL","result","getEnv","expect","toEqual","key","model","toThrow","getEnvOptional","toBeUndefined","mockEnv","toHaveProperty","toBe"],"mappings":"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"}