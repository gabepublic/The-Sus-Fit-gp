e79eb090755d2d9d9dddab386f976896
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WorkflowState: function() {
        return WorkflowState;
    },
    useTryonWorkflow: function() {
        return useTryonWorkflow;
    }
});
const _react = require("react");
const _businesslayer = require("../business-layer");
const _image = require("../utils/image");
const _errorToMessage = require("../lib/errorToMessage");
var WorkflowState = /*#__PURE__*/ function(WorkflowState) {
    WorkflowState["IDLE"] = "idle";
    WorkflowState["UPLOADING"] = "uploading";
    WorkflowState["PROCESSING"] = "processing";
    WorkflowState["GENERATING"] = "generating";
    WorkflowState["COMPLETE"] = "complete";
    WorkflowState["ERROR"] = "error";
    return WorkflowState;
}({});
/**
 * Default configuration
 */ const DEFAULT_CONFIG = {
    timeoutMs: 60000,
    compressionLimitKB: 2048,
    autoRetry: false,
    maxRetries: 3,
    debug: process.env.NODE_ENV === 'development',
    imageProcessing: {
        targetWidth: 1024,
        targetHeight: 1536,
        quality: 0.9
    }
};
function useTryonWorkflow(config = {}, showToast) {
    const finalConfig = {
        ...DEFAULT_CONFIG,
        ...config
    };
    // Business layer hooks
    const tryonMutation = (0, _businesslayer.useTryonMutation)();
    const { processBasic } = (0, _businesslayer.useImageProcessing)();
    // Abort controller for cancellation
    const abortControllerRef = (0, _react.useRef)(null);
    // Core state
    const [state, setState] = (0, _react.useState)({
        workflowState: "idle",
        isCapturing: false,
        showPolaroid: false,
        generatedImage: null,
        hasError: false,
        userImageFile: null,
        apparelImageFile: null,
        leftCardImage: null,
        rightCardImage: null,
        progress: 0,
        error: null,
        retryCount: 0,
        lastOperationTime: null
    });
    // Debug logging
    const log = (0, _react.useCallback)((...args)=>{
        if (finalConfig.debug) {
            console.log('[useTryonWorkflow]', ...args);
        }
    }, [
        finalConfig.debug
    ]);
    // Error handler
    const handleError = (0, _react.useCallback)((error, type = 'unknown')=>{
        let workflowError;
        if (error instanceof _image.CompressionFailedError) {
            workflowError = {
                type: 'compression',
                message: 'Image is too large even after compression. Please upload a smaller file.',
                originalError: error,
                retryable: false
            };
        } else if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('AbortError'))) {
            workflowError = {
                type: 'timeout',
                message: `Request timed out after ${finalConfig.timeoutMs}ms`,
                originalError: error,
                retryable: true
            };
        } else if (error instanceof Error && error.message.includes('API request failed:')) {
            const statusMatch = error.message.match(/API request failed: (\d+)/);
            const status = statusMatch ? parseInt(statusMatch[1]) : undefined;
            workflowError = {
                type: 'generation',
                message: (0, _errorToMessage.errorToMessage)(status),
                originalError: error,
                retryable: status ? status >= 500 : true
            };
        } else {
            workflowError = {
                type,
                message: error instanceof Error ? error.message : String(error),
                originalError: error instanceof Error ? error : undefined,
                retryable: type !== 'validation'
            };
        }
        log('Error occurred:', workflowError);
        setState((prev)=>({
                ...prev,
                workflowState: "error",
                hasError: true,
                isCapturing: false,
                error: workflowError,
                progress: 0
            }));
        // Show toast notification
        if (showToast) {
            showToast(workflowError.message, 'error');
        }
        return workflowError;
    }, [
        finalConfig.timeoutMs,
        log,
        showToast
    ]);
    // Update progress
    const updateProgress = (0, _react.useCallback)((progress)=>{
        setState((prev)=>({
                ...prev,
                progress
            }));
    }, []);
    // Validation helper
    const validateFiles = (0, _react.useCallback)(()=>{
        const errors = [];
        if (!state.userImageFile && !state.leftCardImage) {
            errors.push('Please upload model photo');
        }
        if (!state.apparelImageFile && !state.rightCardImage) {
            errors.push('Please upload apparel photo');
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }, [
        state.userImageFile,
        state.apparelImageFile,
        state.leftCardImage,
        state.rightCardImage
    ]);
    // Check if generation can start
    const canGenerate = (0, _react.useCallback)(()=>{
        const { isValid } = validateFiles();
        return isValid && state.workflowState !== "generating";
    }, [
        validateFiles,
        state.workflowState
    ]);
    // Utility function to resize and create file from URL
    const createFileFromImageUrl = (0, _react.useCallback)(async (imageUrl, filename)=>{
        try {
            const response = await fetch(imageUrl);
            const blob = await response.blob();
            return new File([
                blob
            ], filename, {
                type: 'image/jpeg'
            });
        } catch (error) {
            log('Failed to create file from URL:', error);
            throw new Error('Failed to create file from image URL');
        }
    }, [
        log
    ]);
    // Resize image utility
    const resizeImage = (0, _react.useCallback)(async (imageUrl)=>{
        const { targetWidth, targetHeight, quality } = finalConfig.imageProcessing;
        return new Promise((resolve, reject)=>{
            const img = new Image();
            img.crossOrigin = "anonymous";
            img.onload = ()=>{
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                if (!ctx) {
                    reject(new Error('Could not get canvas context'));
                    return;
                }
                canvas.width = targetWidth;
                canvas.height = targetHeight;
                ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
                const resizedImageUrl = canvas.toDataURL('image/jpeg', quality);
                resolve(resizedImageUrl);
            };
            img.onerror = ()=>reject(new Error('Failed to load image for resizing'));
            img.src = imageUrl;
        });
    }, [
        finalConfig.imageProcessing
    ]);
    // File upload handlers
    const handleUserFileUpload = (0, _react.useCallback)((file)=>{
        log('User file uploaded:', file.name, file.size);
        setState((prev)=>({
                ...prev,
                userImageFile: file
            }));
    }, [
        log
    ]);
    const handleApparelFileUpload = (0, _react.useCallback)((file)=>{
        log('Apparel file uploaded:', file.name, file.size);
        setState((prev)=>({
                ...prev,
                apparelImageFile: file
            }));
    }, [
        log
    ]);
    const handleLeftCardImageUpload = (0, _react.useCallback)(async (imageUrl)=>{
        try {
            log('Left card image upload started');
            setState((prev)=>({
                    ...prev,
                    workflowState: "processing"
                }));
            const resizedImageUrl = await resizeImage(imageUrl);
            const file = await createFileFromImageUrl(imageUrl, 'user-image.jpg');
            setState((prev)=>({
                    ...prev,
                    leftCardImage: resizedImageUrl,
                    userImageFile: file,
                    workflowState: "idle"
                }));
            log('Left card image processed successfully');
        } catch (error) {
            handleError(error, 'processing');
            // Fallback to original image
            setState((prev)=>({
                    ...prev,
                    leftCardImage: imageUrl,
                    workflowState: "idle"
                }));
        }
    }, [
        log,
        resizeImage,
        createFileFromImageUrl,
        handleError
    ]);
    const handleRightCardImageUpload = (0, _react.useCallback)(async (imageUrl)=>{
        try {
            log('Right card image upload started');
            setState((prev)=>({
                    ...prev,
                    workflowState: "processing"
                }));
            const resizedImageUrl = await resizeImage(imageUrl);
            const file = await createFileFromImageUrl(imageUrl, 'apparel-image.jpg');
            setState((prev)=>({
                    ...prev,
                    rightCardImage: resizedImageUrl,
                    apparelImageFile: file,
                    workflowState: "idle"
                }));
            log('Right card image processed successfully');
        } catch (error) {
            handleError(error, 'processing');
            // Fallback to original image
            setState((prev)=>({
                    ...prev,
                    rightCardImage: imageUrl,
                    workflowState: "idle"
                }));
        }
    }, [
        log,
        resizeImage,
        createFileFromImageUrl,
        handleError
    ]);
    // Main generation function
    const startGeneration = (0, _react.useCallback)(async ()=>{
        try {
            log('Starting generation workflow');
            // Validate files
            const validation = validateFiles();
            if (!validation.isValid) {
                const message = validation.errors.length === 2 ? 'Please upload model photo and apparel photo before generating your fit.' : validation.errors[0];
                if (showToast) {
                    showToast(message, 'warning');
                }
                return;
            }
            // Set initial state
            setState((prev)=>({
                    ...prev,
                    workflowState: "generating",
                    isCapturing: true,
                    showPolaroid: true,
                    hasError: false,
                    error: null,
                    progress: 0,
                    lastOperationTime: Date.now()
                }));
            // Create abort controller for timeout
            abortControllerRef.current = new AbortController();
            const timeoutId = setTimeout(()=>abortControllerRef.current?.abort(), finalConfig.timeoutMs);
            try {
                updateProgress(10);
                // Convert and compress images
                const [modelB64, apparelB64] = await Promise.all([
                    (0, _image.fileToBase64)(state.userImageFile).then((b64)=>(0, _image.compressBase64)(b64, finalConfig.compressionLimitKB)),
                    (0, _image.fileToBase64)(state.apparelImageFile).then((b64)=>(0, _image.compressBase64)(b64, finalConfig.compressionLimitKB))
                ]);
                log('Images converted to base64 successfully');
                updateProgress(30);
                // Make API request
                const response = await fetch('/api/tryon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        modelImage: modelB64,
                        apparelImages: [
                            apparelB64
                        ]
                    }),
                    signal: abortControllerRef.current.signal
                });
                clearTimeout(timeoutId);
                updateProgress(80);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`API request failed: ${response.status} - ${errorText}`);
                }
                const { img_generated } = await response.json();
                log('Generation completed successfully');
                updateProgress(100);
                // Update state with success
                setState((prev)=>({
                        ...prev,
                        workflowState: "complete",
                        isCapturing: false,
                        generatedImage: img_generated,
                        progress: 100,
                        retryCount: 0
                    }));
            } catch (error) {
                clearTimeout(timeoutId);
                handleError(error, 'generation');
            }
        } catch (error) {
            handleError(error, 'unknown');
        }
    }, [
        log,
        validateFiles,
        showToast,
        state.userImageFile,
        state.apparelImageFile,
        finalConfig.timeoutMs,
        finalConfig.compressionLimitKB,
        updateProgress,
        handleError
    ]);
    // Retry generation
    const retryGeneration = (0, _react.useCallback)(async ()=>{
        log('Retrying generation');
        setState((prev)=>({
                ...prev,
                retryCount: prev.retryCount + 1,
                hasError: false,
                error: null,
                generatedImage: null
            }));
        // Small delay before retry
        setTimeout(()=>{
            setState((prev)=>({
                    ...prev,
                    showPolaroid: false
                }));
        }, 100);
        await startGeneration();
    }, [
        log,
        startGeneration
    ]);
    // Cancel generation
    const cancelGeneration = (0, _react.useCallback)(()=>{
        log('Cancelling generation');
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }
        setState((prev)=>({
                ...prev,
                workflowState: "idle",
                isCapturing: false,
                progress: 0
            }));
    }, [
        log
    ]);
    // Reset workflow
    const resetWorkflow = (0, _react.useCallback)(()=>{
        log('Resetting workflow');
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }
        setState({
            workflowState: "idle",
            isCapturing: false,
            showPolaroid: false,
            generatedImage: null,
            hasError: false,
            userImageFile: null,
            apparelImageFile: null,
            leftCardImage: null,
            rightCardImage: null,
            progress: 0,
            error: null,
            retryCount: 0,
            lastOperationTime: null
        });
    }, [
        log
    ]);
    // Close polaroid
    const closePolaroid = (0, _react.useCallback)(()=>{
        log('Closing polaroid');
        setState((prev)=>({
                ...prev,
                showPolaroid: false
            }));
    }, [
        log
    ]);
    // Clear error
    const clearError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                hasError: false,
                error: null,
                workflowState: "idle"
            }));
    }, []);
    // Auto-retry logic
    (0, _react.useEffect)(()=>{
        if (finalConfig.autoRetry && state.error?.retryable && state.retryCount < finalConfig.maxRetries) {
            const delay = Math.min(1000 * Math.pow(2, state.retryCount), 10000); // Exponential backoff
            log(`Auto-retrying in ${delay}ms (attempt ${state.retryCount + 1}/${finalConfig.maxRetries})`);
            const timeoutId = setTimeout(()=>{
                retryGeneration();
            }, delay);
            return ()=>clearTimeout(timeoutId);
        }
    }, [
        state.error,
        state.retryCount,
        finalConfig.autoRetry,
        finalConfig.maxRetries,
        retryGeneration,
        log
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
        };
    }, []);
    return {
        // State
        ...state,
        // Actions
        handleUserFileUpload,
        handleApparelFileUpload,
        handleLeftCardImageUpload,
        handleRightCardImageUpload,
        startGeneration,
        retryGeneration,
        cancelGeneration,
        resetWorkflow,
        closePolaroid,
        clearError,
        validateFiles,
        canGenerate
    };
}

//# sourceMappingURL=data:application/json;base64,