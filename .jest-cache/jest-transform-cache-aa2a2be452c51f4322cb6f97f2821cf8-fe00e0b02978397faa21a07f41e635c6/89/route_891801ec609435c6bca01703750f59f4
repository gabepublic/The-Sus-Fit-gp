e74acbb487910719c29f294416710978
"use strict";

/* istanbul ignore next */
function cov_2cufqgrfb1() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/route.ts";
  var hash = "de42c60c409c0e6917bc83aa4d996c085602b33d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 23
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 34,
          column: 6
        }
      },
      "11": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 90
        }
      },
      "12": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 41,
          column: 7
        }
      },
      "13": {
        start: {
          line: 44,
          column: 19
        },
        end: {
          line: 44,
          column: 90
        }
      },
      "14": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 49
        }
      },
      "15": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "16": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 48,
          column: 41
        }
      },
      "17": {
        start: {
          line: 50,
          column: 46
        },
        end: {
          line: 50,
          column: 77
        }
      },
      "18": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "20": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "21": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "22": {
        start: {
          line: 68,
          column: 50
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "23": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 50
        }
      },
      "24": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 79,
          column: 161
        }
      },
      "25": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 13
          },
          end: {
            line: 12,
            column: 14
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "createCorsHeaders",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 26
          }
        },
        loc: {
          start: {
            line: 29,
            column: 35
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 29
      },
      "4": {
        name: "OPTIONS",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 22
          }
        },
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 36
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 19
          }
        },
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 42
          },
          end: {
            line: 68,
            column: 43
          }
        },
        loc: {
          start: {
            line: 68,
            column: 50
          },
          end: {
            line: 71,
            column: 21
          }
        },
        line: 68
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 48
          }
        }, {
          start: {
            line: 37,
            column: 52
          },
          end: {
            line: 37,
            column: 84
          }
        }, {
          start: {
            line: 37,
            column: 88
          },
          end: {
            line: 37,
            column: 90
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 44,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 44,
            column: 48
          }
        }, {
          start: {
            line: 44,
            column: 52
          },
          end: {
            line: 44,
            column: 84
          }
        }, {
          start: {
            line: 44,
            column: 88
          },
          end: {
            line: 44,
            column: 90
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 79,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 70
          },
          end: {
            line: 79,
            column: 135
          }
        }, {
          start: {
            line: 79,
            column: 138
          },
          end: {
            line: 79,
            column: 161
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 70
          },
          end: {
            line: 79,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 95
          },
          end: {
            line: 79,
            column: 108
          }
        }, {
          start: {
            line: 79,
            column: 111
          },
          end: {
            line: 79,
            column: 135
          }
        }],
        line: 79
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { ZodError } from 'zod';\nimport { TryonSchema } from './schema';\nimport { generateTryOn } from '../../../lib/openaiClient';\n\n// TODO: Implement try-on functionality\n// - \u2705 Add request validation (subtask 3.2) - COMPLETED\n// - \u2705 Add request parsing & payload validation (subtask 3.3) - COMPLETED\n// - \u2705 Add image processing logic (subtask 3.4) - COMPLETED\n// - \u2705 Add error handling (subtask 3.5) - COMPLETED\n\n// Helper function to create CORS headers\nfunction createCorsHeaders(origin: string) {\n  return {\n    'Access-Control-Allow-Origin': origin,\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type'\n  };\n}\n\n// Handle OPTIONS preflight requests\nexport async function OPTIONS(request: NextRequest): Promise<NextResponse> {\n  const origin = request.headers.get('origin') ?? process.env.NEXT_PUBLIC_BASE_URL ?? '';\n  return new NextResponse(null, {\n    status: 200,\n    headers: createCorsHeaders(origin)\n  });\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  const origin = request.headers.get('origin') ?? process.env.NEXT_PUBLIC_BASE_URL ?? '';\n  const corsHeaders = createCorsHeaders(origin);\n\n  try {\n    // Parse request body\n    const body = await request.json();\n    \n    // Validate payload against schema\n    const { modelImage, apparelImages } = TryonSchema.parse(body);\n    \n    // Generate try-on image using OpenAI\n    const img_generated = await generateTryOn({ modelImage, apparelImages });\n    \n    // Return generated image with CORS headers\n    return NextResponse.json({ \n      img_generated \n    }, { \n      status: 200,\n      headers: corsHeaders\n    });\n    \n  } catch (error) {\n    // Handle Zod validation errors\n    if (error instanceof ZodError) {\n      return NextResponse.json({ \n        error: 'Validation failed',\n        details: error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message\n        }))\n      }, { \n        status: 400,\n        headers: corsHeaders\n      });\n    }\n    \n    // Handle generateTryOn errors and other internal errors\n    console.error('Try-on API error:', error);\n    const errorMessage = process.env.NODE_ENV === 'development' \n      ? (error instanceof Error ? error.message : 'Unknown error occurred')\n      : 'Internal Server Error';\n    \n    return NextResponse.json({ \n      error: errorMessage\n    }, { \n      status: 500,\n      headers: corsHeaders\n    });\n  }\n} "],
      names: ["OPTIONS", "POST", "createCorsHeaders", "origin", "request", "headers", "get", "process", "env", "NEXT_PUBLIC_BASE_URL", "NextResponse", "status", "corsHeaders", "body", "json", "modelImage", "apparelImages", "TryonSchema", "parse", "img_generated", "generateTryOn", "error", "ZodError", "details", "errors", "map", "err", "field", "path", "join", "message", "console", "errorMessage", "NODE_ENV", "Error"],
      mappings: ";;;;;;;;;;;IAqBsBA,OAAO;eAAPA;;IAQAC,IAAI;eAAJA;;;wBA7BoB;qBACjB;wBACG;8BACE;AAE9B,uCAAuC;AACvC,uDAAuD;AACvD,yEAAyE;AACzE,2DAA2D;AAC3D,mDAAmD;AAEnD,yCAAyC;AACzC,SAASC,kBAAkBC,MAAc;IACvC,OAAO;QACL,+BAA+BA;QAC/B,gCAAgC;QAChC,gCAAgC;IAClC;AACF;AAGO,eAAeH,QAAQI,OAAoB;IAChD,MAAMD,SAASC,QAAQC,OAAO,CAACC,GAAG,CAAC,aAAaC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IACpF,OAAO,IAAIC,oBAAY,CAAC,MAAM;QAC5BC,QAAQ;QACRN,SAASH,kBAAkBC;IAC7B;AACF;AAEO,eAAeF,KAAKG,OAAoB;IAC7C,MAAMD,SAASC,QAAQC,OAAO,CAACC,GAAG,CAAC,aAAaC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IACpF,MAAMG,cAAcV,kBAAkBC;IAEtC,IAAI;QACF,qBAAqB;QACrB,MAAMU,OAAO,MAAMT,QAAQU,IAAI;QAE/B,kCAAkC;QAClC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAE,GAAGC,mBAAW,CAACC,KAAK,CAACL;QAExD,qCAAqC;QACrC,MAAMM,gBAAgB,MAAMC,IAAAA,2BAAa,EAAC;YAAEL;YAAYC;QAAc;QAEtE,2CAA2C;QAC3C,OAAON,oBAAY,CAACI,IAAI,CAAC;YACvBK;QACF,GAAG;YACDR,QAAQ;YACRN,SAASO;QACX;IAEF,EAAE,OAAOS,OAAO;QACd,+BAA+B;QAC/B,IAAIA,iBAAiBC,aAAQ,EAAE;YAC7B,OAAOZ,oBAAY,CAACI,IAAI,CAAC;gBACvBO,OAAO;gBACPE,SAASF,MAAMG,MAAM,CAACC,GAAG,CAACC,CAAAA,MAAQ,CAAA;wBAChCC,OAAOD,IAAIE,IAAI,CAACC,IAAI,CAAC;wBACrBC,SAASJ,IAAII,OAAO;oBACtB,CAAA;YACF,GAAG;gBACDnB,QAAQ;gBACRN,SAASO;YACX;QACF;QAEA,wDAAwD;QACxDmB,QAAQV,KAAK,CAAC,qBAAqBA;QACnC,MAAMW,eAAezB,QAAQC,GAAG,CAACyB,QAAQ,KAAK,gBACzCZ,iBAAiBa,QAAQb,MAAMS,OAAO,GAAG,2BAC1C;QAEJ,OAAOpB,oBAAY,CAACI,IAAI,CAAC;YACvBO,OAAOW;QACT,GAAG;YACDrB,QAAQ;YACRN,SAASO;QACX;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "de42c60c409c0e6917bc83aa4d996c085602b33d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2cufqgrfb1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2cufqgrfb1();
cov_2cufqgrfb1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2cufqgrfb1().f[0]++;
  cov_2cufqgrfb1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2cufqgrfb1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2cufqgrfb1().s[3]++;
_export(exports, {
  OPTIONS: function () {
    /* istanbul ignore next */
    cov_2cufqgrfb1().f[1]++;
    cov_2cufqgrfb1().s[4]++;
    return OPTIONS;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2cufqgrfb1().f[2]++;
    cov_2cufqgrfb1().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2cufqgrfb1().s[6]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_2cufqgrfb1().s[7]++, require("zod"));
const _schema =
/* istanbul ignore next */
(cov_2cufqgrfb1().s[8]++, require("./schema"));
const _openaiClient =
/* istanbul ignore next */
(cov_2cufqgrfb1().s[9]++, require("../../../lib/openaiClient"));
// TODO: Implement try-on functionality
// - ✅ Add request validation (subtask 3.2) - COMPLETED
// - ✅ Add request parsing & payload validation (subtask 3.3) - COMPLETED
// - ✅ Add image processing logic (subtask 3.4) - COMPLETED
// - ✅ Add error handling (subtask 3.5) - COMPLETED
// Helper function to create CORS headers
function createCorsHeaders(origin) {
  /* istanbul ignore next */
  cov_2cufqgrfb1().f[3]++;
  cov_2cufqgrfb1().s[10]++;
  return {
    'Access-Control-Allow-Origin': origin,
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  };
}
async function OPTIONS(request) {
  /* istanbul ignore next */
  cov_2cufqgrfb1().f[4]++;
  const origin =
  /* istanbul ignore next */
  (cov_2cufqgrfb1().s[11]++,
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[0][0]++, request.headers.get('origin')) ??
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[0][1]++, process.env.NEXT_PUBLIC_BASE_URL) ??
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[0][2]++, ''));
  /* istanbul ignore next */
  cov_2cufqgrfb1().s[12]++;
  return new _server.NextResponse(null, {
    status: 200,
    headers: createCorsHeaders(origin)
  });
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2cufqgrfb1().f[5]++;
  const origin =
  /* istanbul ignore next */
  (cov_2cufqgrfb1().s[13]++,
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[1][0]++, request.headers.get('origin')) ??
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[1][1]++, process.env.NEXT_PUBLIC_BASE_URL) ??
  /* istanbul ignore next */
  (cov_2cufqgrfb1().b[1][2]++, ''));
  const corsHeaders =
  /* istanbul ignore next */
  (cov_2cufqgrfb1().s[14]++, createCorsHeaders(origin));
  /* istanbul ignore next */
  cov_2cufqgrfb1().s[15]++;
  try {
    // Parse request body
    const body =
    /* istanbul ignore next */
    (cov_2cufqgrfb1().s[16]++, await request.json());
    // Validate payload against schema
    const {
      modelImage,
      apparelImages
    } =
    /* istanbul ignore next */
    (cov_2cufqgrfb1().s[17]++, _schema.TryonSchema.parse(body));
    // Generate try-on image using OpenAI
    const img_generated =
    /* istanbul ignore next */
    (cov_2cufqgrfb1().s[18]++, await (0, _openaiClient.generateTryOn)({
      modelImage,
      apparelImages
    }));
    // Return generated image with CORS headers
    /* istanbul ignore next */
    cov_2cufqgrfb1().s[19]++;
    return _server.NextResponse.json({
      img_generated
    }, {
      status: 200,
      headers: corsHeaders
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2cufqgrfb1().s[20]++;
    // Handle Zod validation errors
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_2cufqgrfb1().b[2][0]++;
      cov_2cufqgrfb1().s[21]++;
      return _server.NextResponse.json({
        error: 'Validation failed',
        details: error.errors.map(err => {
          /* istanbul ignore next */
          cov_2cufqgrfb1().f[6]++;
          cov_2cufqgrfb1().s[22]++;
          return {
            field: err.path.join('.'),
            message: err.message
          };
        })
      }, {
        status: 400,
        headers: corsHeaders
      });
    } else
    /* istanbul ignore next */
    {
      cov_2cufqgrfb1().b[2][1]++;
    }
    // Handle generateTryOn errors and other internal errors
    cov_2cufqgrfb1().s[23]++;
    console.error('Try-on API error:', error);
    const errorMessage =
    /* istanbul ignore next */
    (cov_2cufqgrfb1().s[24]++, process.env.NODE_ENV === 'development' ?
    /* istanbul ignore next */
    (cov_2cufqgrfb1().b[3][0]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_2cufqgrfb1().b[4][0]++, error.message) :
    /* istanbul ignore next */
    (cov_2cufqgrfb1().b[4][1]++, 'Unknown error occurred')) :
    /* istanbul ignore next */
    (cov_2cufqgrfb1().b[3][1]++, 'Internal Server Error'));
    /* istanbul ignore next */
    cov_2cufqgrfb1().s[25]++;
    return _server.NextResponse.json({
      error: errorMessage
    }, {
      status: 500,
      headers: corsHeaders
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,