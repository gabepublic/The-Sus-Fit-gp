19220bde9670f1a532dd920965b96509
'use client';
"use strict";

/* istanbul ignore next */
function cov_2o6cjfsmml() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts";
  var hash = "a1cd2d5b645dfaf71e639373a77536b1ea01ef8e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "7": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "9": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 52
        }
      },
      "10": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 56
        }
      },
      "11": {
        start: {
          line: 28,
          column: 19
        },
        end: {
          line: 28,
          column: 93
        }
      },
      "12": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 76
        }
      },
      "16": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "18": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "20": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 112,
          column: 6
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "22": {
        start: {
          line: 52,
          column: 34
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "23": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "24": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 90
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 64,
          column: 16
        }
      },
      "26": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "29": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 77
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "31": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 78,
          column: 20
        }
      },
      "32": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "33": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "35": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "36": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 47
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 26
        }
      },
      "38": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 87,
          column: 81
        }
      },
      "39": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 100,
          column: 20
        }
      },
      "40": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 100,
          column: 17
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "42": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 53
        }
      },
      "43": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 34
        }
      },
      "44": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 119,
          column: 6
        }
      },
      "45": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "46": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 179,
          column: 6
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 78
        }
      },
      "48": {
        start: {
          line: 121,
          column: 34
        },
        end: {
          line: 121,
          column: 78
        }
      },
      "49": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 127,
          column: 16
        }
      },
      "50": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "51": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 26
        }
      },
      "52": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 129,
          column: 43
        }
      },
      "53": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "54": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "55": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 25
        }
      },
      "56": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 55
        }
      },
      "58": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 137,
          column: 76
        }
      },
      "59": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 37
        }
      },
      "60": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "61": {
        start: {
          line: 139,
          column: 34
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "62": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 151,
          column: 20
        }
      },
      "63": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "64": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 32
        }
      },
      "65": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 27
        }
      },
      "66": {
        start: {
          line: 155,
          column: 36
        },
        end: {
          line: 155,
          column: 81
        }
      },
      "67": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 167,
          column: 20
        }
      },
      "68": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "69": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "70": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 53
        }
      },
      "71": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 34
        }
      },
      "72": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 186,
          column: 6
        }
      },
      "73": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "74": {
        start: {
          line: 181,
          column: 73
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "75": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 84
        }
      },
      "76": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "77": {
        start: {
          line: 187,
          column: 25
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "78": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 193,
          column: 16
        }
      },
      "79": {
        start: {
          line: 188,
          column: 26
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "80": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 237,
          column: 6
        }
      },
      "81": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "82": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "83": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 207,
          column: 18
        }
      },
      "84": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 216,
          column: 18
        }
      },
      "85": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 224,
          column: 18
        }
      },
      "86": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "87": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 34
        }
      },
      "88": {
        start: {
          line: 238,
          column: 25
        },
        end: {
          line: 250,
          column: 6
        }
      },
      "89": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "90": {
        start: {
          line: 244,
          column: 37
        },
        end: {
          line: 244,
          column: 68
        }
      },
      "91": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 143
        }
      },
      "92": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 262,
          column: 6
        }
      },
      "93": {
        start: {
          line: 265,
          column: 19
        },
        end: {
          line: 265,
          column: 93
        }
      },
      "94": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 44
        }
      },
      "95": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 267,
          column: 48
        }
      },
      "96": {
        start: {
          line: 268,
          column: 42
        },
        end: {
          line: 271,
          column: 6
        }
      },
      "97": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "98": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 76
        }
      },
      "99": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 111
        }
      },
      "100": {
        start: {
          line: 277,
          column: 30
        },
        end: {
          line: 281,
          column: 10
        }
      },
      "101": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "102": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 69
        }
      },
      "103": {
        start: {
          line: 282,
          column: 24
        },
        end: {
          line: 290,
          column: 6
        }
      },
      "104": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 87
        }
      },
      "105": {
        start: {
          line: 283,
          column: 38
        },
        end: {
          line: 283,
          column: 87
        }
      },
      "106": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 28
        }
      },
      "107": {
        start: {
          line: 285,
          column: 23
        },
        end: {
          line: 285,
          column: 72
        }
      },
      "108": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 28
        }
      },
      "109": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 22
        }
      },
      "110": {
        start: {
          line: 291,
          column: 26
        },
        end: {
          line: 297,
          column: 6
        }
      },
      "111": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 87
        }
      },
      "112": {
        start: {
          line: 292,
          column: 38
        },
        end: {
          line: 292,
          column: 87
        }
      },
      "113": {
        start: {
          line: 293,
          column: 25
        },
        end: {
          line: 293,
          column: 67
        }
      },
      "114": {
        start: {
          line: 293,
          column: 47
        },
        end: {
          line: 293,
          column: 66
        }
      },
      "115": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 37
        }
      },
      "116": {
        start: {
          line: 298,
          column: 23
        },
        end: {
          line: 305,
          column: 6
        }
      },
      "117": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "118": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 49
        }
      },
      "119": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 32
        }
      },
      "120": {
        start: {
          line: 306,
          column: 26
        },
        end: {
          line: 313,
          column: 6
        }
      },
      "121": {
        start: {
          line: 307,
          column: 24
        },
        end: {
          line: 309,
          column: 15
        }
      },
      "122": {
        start: {
          line: 307,
          column: 47
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "123": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 38
        }
      },
      "124": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 322,
          column: 6
        }
      },
      "125": {
        start: {
          line: 325,
          column: 81
        },
        end: {
          line: 327,
          column: 6
        }
      },
      "126": {
        start: {
          line: 328,
          column: 25
        },
        end: {
          line: 333,
          column: 6
        }
      },
      "127": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 52
        }
      },
      "128": {
        start: {
          line: 334,
          column: 28
        },
        end: {
          line: 339,
          column: 6
        }
      },
      "129": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 55
        }
      },
      "130": {
        start: {
          line: 340,
          column: 27
        },
        end: {
          line: 345,
          column: 6
        }
      },
      "131": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 54
        }
      },
      "132": {
        start: {
          line: 346,
          column: 22
        },
        end: {
          line: 353,
          column: 6
        }
      },
      "133": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 350,
          column: 11
        }
      },
      "134": {
        start: {
          line: 354,
          column: 23
        },
        end: {
          line: 361,
          column: 6
        }
      },
      "135": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 358,
          column: 11
        }
      },
      "136": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 372,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 26
          }
        },
        loc: {
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 21
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "useImageExport",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 23
          }
        },
        loc: {
          start: {
            line: 27,
            column: 75
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 42,
            column: 51
          },
          end: {
            line: 42,
            column: 52
          }
        },
        loc: {
          start: {
            line: 42,
            column: 63
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 42
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 18
          }
        },
        loc: {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 46,
            column: 13
          }
        },
        line: 43
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 49
          }
        },
        loc: {
          start: {
            line: 51,
            column: 69
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 51
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 58,
            column: 17
          },
          end: {
            line: 58,
            column: 18
          }
        },
        loc: {
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 64,
            column: 13
          }
        },
        line: 58
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 69,
            column: 21
          },
          end: {
            line: 69,
            column: 22
          }
        },
        loc: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 78,
            column: 17
          }
        },
        line: 69
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 22
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 100,
            column: 17
          }
        },
        line: 88
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 113,
            column: 53
          },
          end: {
            line: 113,
            column: 54
          }
        },
        loc: {
          start: {
            line: 113,
            column: 69
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 113
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 51
          },
          end: {
            line: 120,
            column: 52
          }
        },
        loc: {
          start: {
            line: 120,
            column: 68
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 18
          }
        },
        loc: {
          start: {
            line: 122,
            column: 26
          },
          end: {
            line: 127,
            column: 13
          }
        },
        line: 122
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 25
          },
          end: {
            line: 139,
            column: 26
          }
        },
        loc: {
          start: {
            line: 139,
            column: 34
          },
          end: {
            line: 145,
            column: 21
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 147,
            column: 22
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 151,
            column: 17
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 22
          }
        },
        loc: {
          start: {
            line: 156,
            column: 30
          },
          end: {
            line: 167,
            column: 17
          }
        },
        line: 156
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 55
          },
          end: {
            line: 180,
            column: 56
          }
        },
        loc: {
          start: {
            line: 180,
            column: 59
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 187,
            column: 49
          },
          end: {
            line: 187,
            column: 50
          }
        },
        loc: {
          start: {
            line: 187,
            column: 53
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 187
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 188,
            column: 17
          },
          end: {
            line: 188,
            column: 18
          }
        },
        loc: {
          start: {
            line: 188,
            column: 26
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 188
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 195,
            column: 53
          },
          end: {
            line: 195,
            column: 54
          }
        },
        loc: {
          start: {
            line: 195,
            column: 64
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 195
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 238,
            column: 49
          },
          end: {
            line: 238,
            column: 50
          }
        },
        loc: {
          start: {
            line: 238,
            column: 64
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 238
      },
      "22": {
        name: "useBatchImageExport",
        decl: {
          start: {
            line: 264,
            column: 9
          },
          end: {
            line: 264,
            column: 28
          }
        },
        loc: {
          start: {
            line: 264,
            column: 83
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 264
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 277,
            column: 54
          },
          end: {
            line: 277,
            column: 55
          }
        },
        loc: {
          start: {
            line: 277,
            column: 58
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 277
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 49
          }
        },
        loc: {
          start: {
            line: 282,
            column: 64
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 282
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 291,
            column: 50
          },
          end: {
            line: 291,
            column: 51
          }
        },
        loc: {
          start: {
            line: 291,
            column: 67
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 291
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 293,
            column: 37
          },
          end: {
            line: 293,
            column: 38
          }
        },
        loc: {
          start: {
            line: 293,
            column: 47
          },
          end: {
            line: 293,
            column: 66
          }
        },
        line: 293
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 298,
            column: 48
          }
        },
        loc: {
          start: {
            line: 298,
            column: 51
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 298
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 306,
            column: 50
          },
          end: {
            line: 306,
            column: 51
          }
        },
        loc: {
          start: {
            line: 306,
            column: 67
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 306
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 307,
            column: 36
          },
          end: {
            line: 307,
            column: 37
          }
        },
        loc: {
          start: {
            line: 307,
            column: 47
          },
          end: {
            line: 309,
            column: 13
          }
        },
        line: 307
      },
      "30": {
        name: "useSimpleImageExport",
        decl: {
          start: {
            line: 324,
            column: 9
          },
          end: {
            line: 324,
            column: 29
          }
        },
        loc: {
          start: {
            line: 324,
            column: 67
          },
          end: {
            line: 373,
            column: 1
          }
        },
        line: 324
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 328,
            column: 49
          },
          end: {
            line: 328,
            column: 50
          }
        },
        loc: {
          start: {
            line: 328,
            column: 53
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 328
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 334,
            column: 52
          },
          end: {
            line: 334,
            column: 53
          }
        },
        loc: {
          start: {
            line: 334,
            column: 56
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 334
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 340,
            column: 51
          },
          end: {
            line: 340,
            column: 52
          }
        },
        loc: {
          start: {
            line: 340,
            column: 55
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 340
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 346,
            column: 46
          },
          end: {
            line: 346,
            column: 47
          }
        },
        loc: {
          start: {
            line: 346,
            column: 50
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 346
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 354,
            column: 47
          },
          end: {
            line: 354,
            column: 48
          }
        },
        loc: {
          start: {
            line: 354,
            column: 64
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 354
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 61
          },
          end: {
            line: 27,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 71
          },
          end: {
            line: 27,
            column: 73
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 55
          },
          end: {
            line: 51,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 64
          },
          end: {
            line: 51,
            column: 66
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "6": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "7": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 32
          }
        }, {
          start: {
            line: 181,
            column: 36
          },
          end: {
            line: 181,
            column: 71
          }
        }],
        line: 181
      },
      "8": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 207,
            column: 18
          }
        }, {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 216,
            column: 18
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 224,
            column: 18
          }
        }, {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 231,
            column: 18
          }
        }, {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 233,
            column: 34
          }
        }],
        line: 200
      },
      "9": {
        loc: {
          start: {
            line: 238,
            column: 50
          },
          end: {
            line: 238,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 59
          },
          end: {
            line: 238,
            column: 61
          }
        }],
        line: 238
      },
      "10": {
        loc: {
          start: {
            line: 245,
            column: 32
          },
          end: {
            line: 245,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 32
          },
          end: {
            line: 245,
            column: 49
          }
        }, {
          start: {
            line: 245,
            column: 53
          },
          end: {
            line: 245,
            column: 64
          }
        }],
        line: 245
      },
      "11": {
        loc: {
          start: {
            line: 245,
            column: 66
          },
          end: {
            line: 245,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 66
          },
          end: {
            line: 245,
            column: 84
          }
        }, {
          start: {
            line: 245,
            column: 88
          },
          end: {
            line: 245,
            column: 100
          }
        }],
        line: 245
      },
      "12": {
        loc: {
          start: {
            line: 264,
            column: 66
          },
          end: {
            line: 264,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 264,
            column: 80
          },
          end: {
            line: 264,
            column: 81
          }
        }],
        line: 264
      },
      "13": {
        loc: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "14": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "15": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 283,
            column: 87
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 283,
            column: 87
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "16": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 87
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 87
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "17": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "18": {
        loc: {
          start: {
            line: 354,
            column: 48
          },
          end: {
            line: 354,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 354,
            column: 58
          },
          end: {
            line: 354,
            column: 61
          }
        }],
        line: 354
      },
      "19": {
        loc: {
          start: {
            line: 370,
            column: 20
          },
          end: {
            line: 370,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 20
          },
          end: {
            line: 370,
            column: 77
          }
        }, {
          start: {
            line: 370,
            column: 81
          },
          end: {
            line: 370,
            column: 85
          }
        }],
        line: 370
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts"],
      sourcesContent: ["'use client';\n\n// Image Export React Hooks\n// React hooks for managing image export operations with progress tracking and optimization\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  ImageExporter,\n  BatchExportManager,\n  createImageExporter,\n  createBatchExportManager,\n  ExportFormat,\n  QualityPreset,\n  type ExportConfig,\n  type ExportResult,\n  type BatchExportConfig,\n  DEFAULT_EXPORT_CONFIG\n} from '../utils/imageExport';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  type ClassifiedError\n} from '../utils/errorHandling';\n\n/**\n * Export hook options\n */\nexport interface UseImageExportOptions {\n  /** Default export configuration */\n  defaultConfig?: Partial<ExportConfig>;\n  /** Enable auto-download after export */\n  autoDownload?: boolean;\n  /** Callback when export completes */\n  onExportComplete?: (result: ExportResult) => void;\n  /** Callback when export fails */\n  onExportError?: (error: ClassifiedError) => void;\n  /** Callback for export progress */\n  onProgress?: (progress: number) => void;\n}\n\n/**\n * Export state\n */\nexport interface ExportState {\n  isExporting: boolean;\n  progress: number;\n  currentExport: string | null;\n  completedExports: ExportResult[];\n  failedExports: Array<{ config: Partial<ExportConfig>; error: ClassifiedError }>;\n  totalExports: number;\n}\n\n/**\n * Main image export hook\n */\nexport function useImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  options: UseImageExportOptions = {}\n): {\n  canvas: any;\n  exporter: ImageExporter;\n  state: ExportState;\n  exportImage: (config?: Partial<ExportConfig>) => Promise<ExportResult>;\n  exportWithPreset: (preset: QualityPreset) => Promise<ExportResult>;\n  exportMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  downloadLastExport: () => void;\n  clearHistory: () => void;\n  getOptimalConfig: (useCase: 'web' | 'social' | 'print' | 'archive') => ExportConfig;\n  estimateSize: (config?: Partial<ExportConfig>) => number;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter>();\n  const [state, setState] = useState<ExportState>({\n    isExporting: false,\n    progress: 0,\n    currentExport: null,\n    completedExports: [],\n    failedExports: [],\n    totalExports: 0\n  });\n\n  // Initialize exporter\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n  }\n\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n    options.onProgress?.(progress);\n  }, [options]);\n\n  const exportImage = useCallback(async (config: Partial<ExportConfig> = {}): Promise<ExportResult> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    const finalConfig = { ...options.defaultConfig, ...config };\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      currentExport: exportId,\n      totalExports: prev.totalExports + 1\n    }));\n\n    try {\n      updateProgress(25);\n      \n      const result = await exporterRef.current.exportImage(finalConfig);\n      \n      updateProgress(75);\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100,\n        currentExport: null,\n        completedExports: [...prev.completedExports, result]\n      }));\n\n      updateProgress(100);\n\n      // Auto-download if enabled\n      if (options.autoDownload) {\n        exporterRef.current!.downloadImage(result);\n      }\n\n      options.onExportComplete?.(result);\n      return result;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        currentExport: null,\n        failedExports: [...prev.failedExports, { config: finalConfig, error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'image_export',\n        config: finalConfig,\n        exportId\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const exportWithPreset = useCallback(async (preset: QualityPreset): Promise<ExportResult> => {\n    return exportImage({ preset });\n  }, [exportImage]);\n\n  const exportMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      totalExports: prev.totalExports + configs.length\n    }));\n\n    const results: ExportResult[] = [];\n    const totalConfigs = configs.length;\n\n    try {\n      for (let i = 0; i < configs.length; i++) {\n        const config = { ...options.defaultConfig, ...configs[i] };\n        updateProgress((i / totalConfigs) * 100);\n        \n        const result = await exporterRef.current.exportImage(config);\n        results.push(result);\n        \n        setState(prev => ({\n          ...prev,\n          completedExports: [...prev.completedExports, result]\n        }));\n      }\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100\n      }));\n\n      updateProgress(100);\n      return results;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        failedExports: [...prev.failedExports, { config: configs[results.length], error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'batch_export',\n        completedCount: results.length,\n        totalCount: totalConfigs\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const downloadLastExport = useCallback(() => {\n    if (!exporterRef.current || state.completedExports.length === 0) return;\n    \n    const lastExport = state.completedExports[state.completedExports.length - 1];\n    exporterRef.current.downloadImage(lastExport);\n  }, [state.completedExports]);\n\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      completedExports: [],\n      failedExports: [],\n      totalExports: 0\n    }));\n  }, []);\n\n  const getOptimalConfig = useCallback((useCase: 'web' | 'social' | 'print' | 'archive'): ExportConfig => {\n    const baseConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig };\n\n    switch (useCase) {\n      case 'web':\n        return {\n          ...baseConfig,\n          format: ExportFormat.WEBP,\n          preset: QualityPreset.WEB,\n          quality: 0.8\n        };\n      case 'social':\n        return {\n          ...baseConfig,\n          format: ExportFormat.JPEG,\n          preset: QualityPreset.SOCIAL,\n          quality: 0.85,\n          width: 1080,\n          height: 1080\n        };\n      case 'print':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.PRINT,\n          quality: 1.0,\n          dpi: 300\n        };\n      case 'archive':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.MAXIMUM,\n          quality: 1.0\n        };\n      default:\n        return baseConfig;\n    }\n  }, [options.defaultConfig]);\n\n  const estimateSize = useCallback((config: Partial<ExportConfig> = {}): number => {\n    const finalConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig, ...config };\n    const { estimateFileSize } = require('../utils/imageExport');\n    \n    return estimateFileSize(\n      finalConfig.width || canvasWidth,\n      finalConfig.height || canvasHeight,\n      finalConfig.format,\n      finalConfig.quality\n    );\n  }, [canvasWidth, canvasHeight, options.defaultConfig]);\n\n  return {\n    canvas,\n    exporter: exporterRef.current!,\n    state,\n    exportImage,\n    exportWithPreset,\n    exportMultiple,\n    downloadLastExport,\n    clearHistory,\n    getOptimalConfig,\n    estimateSize\n  };\n}\n\n/**\n * Batch export hook with queue management\n */\nexport function useBatchImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  concurrency: number = 2\n): {\n  canvas: any;\n  batchManager: BatchExportManager;\n  queueExport: (config: Partial<ExportConfig>) => Promise<ExportResult>;\n  queueMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  clearQueue: () => void;\n  queueStatus: { pending: number; processing: boolean };\n  exportPresets: (presets: QualityPreset[]) => Promise<ExportResult[]>;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter>();\n  const batchManagerRef = useRef<BatchExportManager>();\n  const [queueStatus, setQueueStatus] = useState({ pending: 0, processing: false });\n\n  // Initialize exporter and batch manager\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n    batchManagerRef.current = createBatchExportManager(exporterRef.current, concurrency);\n  }\n\n  const updateQueueStatus = useCallback(() => {\n    if (batchManagerRef.current) {\n      setQueueStatus(batchManagerRef.current.getQueueStatus());\n    }\n  }, []);\n\n  const queueExport = useCallback(async (config: Partial<ExportConfig>): Promise<ExportResult> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    updateQueueStatus();\n    const result = await batchManagerRef.current.queueExport(config);\n    updateQueueStatus();\n    \n    return result;\n  }, [updateQueueStatus]);\n\n  const queueMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    const promises = configs.map(config => queueExport(config));\n    return Promise.all(promises);\n  }, [queueExport]);\n\n  const clearQueue = useCallback(() => {\n    if (batchManagerRef.current) {\n      batchManagerRef.current.clearQueue();\n      updateQueueStatus();\n    }\n  }, [updateQueueStatus]);\n\n  const exportPresets = useCallback(async (presets: QualityPreset[]): Promise<ExportResult[]> => {\n    const configs = presets.map(preset => ({ preset }));\n    return queueMultiple(configs);\n  }, [queueMultiple]);\n\n  return {\n    canvas,\n    batchManager: batchManagerRef.current!,\n    queueExport,\n    queueMultiple,\n    clearQueue,\n    queueStatus,\n    exportPresets\n  };\n}\n\n/**\n * Simple export hook with common presets\n */\nexport function useSimpleImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: any;\n  exportForWeb: () => Promise<ExportResult>;\n  exportForSocial: () => Promise<ExportResult>;\n  exportForPrint: () => Promise<ExportResult>;\n  exportPNG: () => Promise<ExportResult>;\n  exportJPEG: (quality?: number) => Promise<ExportResult>;\n  isExporting: boolean;\n  lastExport: ExportResult | null;\n  downloadLast: () => void;\n} {\n  const {\n    canvas,\n    state,\n    exportImage,\n    downloadLastExport,\n    getOptimalConfig\n  } = useImageExport(canvasWidth, canvasHeight, canvasId, { autoDownload: true });\n\n  const exportForWeb = useCallback(() => {\n    return exportImage(getOptimalConfig('web'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForSocial = useCallback(() => {\n    return exportImage(getOptimalConfig('social'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForPrint = useCallback(() => {\n    return exportImage(getOptimalConfig('print'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportPNG = useCallback(() => {\n    return exportImage({ format: ExportFormat.PNG, quality: 1.0 });\n  }, [exportImage]);\n\n  const exportJPEG = useCallback((quality: number = 0.9) => {\n    return exportImage({ format: ExportFormat.JPEG, quality });\n  }, [exportImage]);\n\n  return {\n    canvas,\n    exportForWeb,\n    exportForSocial,\n    exportForPrint,\n    exportPNG,\n    exportJPEG,\n    isExporting: state.isExporting,\n    lastExport: state.completedExports[state.completedExports.length - 1] || null,\n    downloadLast: downloadLastExport\n  };\n}"],
      names: ["useBatchImageExport", "useImageExport", "useSimpleImageExport", "canvasWidth", "canvasHeight", "canvasId", "options", "canvas", "useManagedCanvas", "exporterRef", "useRef", "state", "setState", "useState", "isExporting", "progress", "currentExport", "completedExports", "failedExports", "totalExports", "current", "createImageExporter", "updateProgress", "useCallback", "prev", "onProgress", "exportImage", "config", "Error", "finalConfig", "defaultConfig", "exportId", "Date", "now", "Math", "random", "toString", "substr", "result", "autoDownload", "downloadImage", "onExportComplete", "error", "classifiedError", "classifyTryonError", "logAndClassifyError", "operation", "onExportError", "exportWithPreset", "preset", "exportMultiple", "configs", "length", "results", "totalConfigs", "i", "push", "completedCount", "totalCount", "downloadLastExport", "lastExport", "clearHistory", "getOptimalConfig", "useCase", "baseConfig", "DEFAULT_EXPORT_CONFIG", "format", "ExportFormat", "WEBP", "QualityPreset", "WEB", "quality", "JPEG", "SOCIAL", "width", "height", "PNG", "PRINT", "dpi", "MAXIMUM", "estimateSize", "estimateFileSize", "require", "exporter", "concurrency", "batchManagerRef", "queueStatus", "setQueueStatus", "pending", "processing", "createBatchExportManager", "updateQueueStatus", "getQueueStatus", "queueExport", "queueMultiple", "promises", "map", "Promise", "all", "clearQueue", "exportPresets", "presets", "batchManager", "exportForWeb", "exportForSocial", "exportForPrint", "exportPNG", "exportJPEG", "downloadLast"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a1cd2d5b645dfaf71e639373a77536b1ea01ef8e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2o6cjfsmml = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2o6cjfsmml();
cov_2o6cjfsmml().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[0]++;
  cov_2o6cjfsmml().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2o6cjfsmml().s[3]++;
_export(exports, {
  useBatchImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[1]++;
    cov_2o6cjfsmml().s[4]++;
    return useBatchImageExport;
  },
  useImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[2]++;
    cov_2o6cjfsmml().s[5]++;
    return useImageExport;
  },
  useSimpleImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[3]++;
    cov_2o6cjfsmml().s[6]++;
    return useSimpleImageExport;
  }
});
const _react =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[7]++, require("react"));
const _CanvasProvider =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[8]++, require("../providers/CanvasProvider"));
const _imageExport =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[9]++, require("../utils/imageExport"));
const _errorHandling =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[10]++, require("../utils/errorHandling"));
function useImageExport(canvasWidth, canvasHeight, canvasId, options =
/* istanbul ignore next */
(cov_2o6cjfsmml().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[4]++;
  const canvas =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[11]++, (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId));
  const exporterRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[12]++, (0, _react.useRef)());
  const [state, setState] =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[13]++, (0, _react.useState)({
    isExporting: false,
    progress: 0,
    currentExport: null,
    completedExports: [],
    failedExports: [],
    totalExports: 0
  }));
  // Initialize exporter
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[14]++;
  if (!exporterRef.current) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().b[1][0]++;
    cov_2o6cjfsmml().s[15]++;
    exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
  } else
  /* istanbul ignore next */
  {
    cov_2o6cjfsmml().b[1][1]++;
  }
  const updateProgress =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[16]++, (0, _react.useCallback)(progress => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[5]++;
    cov_2o6cjfsmml().s[17]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[6]++;
      cov_2o6cjfsmml().s[18]++;
      return {
        ...prev,
        progress
      };
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[19]++;
    options.onProgress?.(progress);
  }, [options]));
  const exportImage =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[20]++, (0, _react.useCallback)(async (config =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[2][0]++, {})) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[7]++;
    cov_2o6cjfsmml().s[21]++;
    if (!exporterRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[3][0]++;
      cov_2o6cjfsmml().s[22]++;
      throw new Error('Exporter not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[3][1]++;
    }
    const finalConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[23]++, {
      ...options.defaultConfig,
      ...config
    });
    const exportId =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[24]++, `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[25]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[8]++;
      cov_2o6cjfsmml().s[26]++;
      return {
        ...prev,
        isExporting: true,
        progress: 0,
        currentExport: exportId,
        totalExports: prev.totalExports + 1
      };
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[27]++;
    try {
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[28]++;
      updateProgress(25);
      const result =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[29]++, await exporterRef.current.exportImage(finalConfig));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[30]++;
      updateProgress(75);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[31]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[9]++;
        cov_2o6cjfsmml().s[32]++;
        return {
          ...prev,
          isExporting: false,
          progress: 100,
          currentExport: null,
          completedExports: [...prev.completedExports, result]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[33]++;
      updateProgress(100);
      // Auto-download if enabled
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[34]++;
      if (options.autoDownload) {
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[4][0]++;
        cov_2o6cjfsmml().s[35]++;
        exporterRef.current.downloadImage(result);
      } else
      /* istanbul ignore next */
      {
        cov_2o6cjfsmml().b[4][1]++;
      }
      cov_2o6cjfsmml().s[36]++;
      options.onExportComplete?.(result);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[37]++;
      return result;
    } catch (error) {
      const classifiedError =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[38]++, (0, _errorHandling.classifyTryonError)(error));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[39]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[10]++;
        cov_2o6cjfsmml().s[40]++;
        return {
          ...prev,
          isExporting: false,
          progress: 0,
          currentExport: null,
          failedExports: [...prev.failedExports, {
            config: finalConfig,
            error: classifiedError
          }]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[41]++;
      (0, _errorHandling.logAndClassifyError)(error, {
        operation: 'image_export',
        config: finalConfig,
        exportId
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[42]++;
      options.onExportError?.(classifiedError);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[43]++;
      throw classifiedError;
    }
  }, [options, updateProgress]));
  const exportWithPreset =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[44]++, (0, _react.useCallback)(async preset => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[11]++;
    cov_2o6cjfsmml().s[45]++;
    return exportImage({
      preset
    });
  }, [exportImage]));
  const exportMultiple =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[46]++, (0, _react.useCallback)(async configs => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[12]++;
    cov_2o6cjfsmml().s[47]++;
    if (!exporterRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[5][0]++;
      cov_2o6cjfsmml().s[48]++;
      throw new Error('Exporter not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[5][1]++;
    }
    cov_2o6cjfsmml().s[49]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[13]++;
      cov_2o6cjfsmml().s[50]++;
      return {
        ...prev,
        isExporting: true,
        progress: 0,
        totalExports: prev.totalExports + configs.length
      };
    });
    const results =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[51]++, []);
    const totalConfigs =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[52]++, configs.length);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[53]++;
    try {
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[54]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[55]++, 0); i < configs.length; i++) {
        const config =
        /* istanbul ignore next */
        (cov_2o6cjfsmml().s[56]++, {
          ...options.defaultConfig,
          ...configs[i]
        });
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[57]++;
        updateProgress(i / totalConfigs * 100);
        const result =
        /* istanbul ignore next */
        (cov_2o6cjfsmml().s[58]++, await exporterRef.current.exportImage(config));
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[59]++;
        results.push(result);
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[60]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_2o6cjfsmml().f[14]++;
          cov_2o6cjfsmml().s[61]++;
          return {
            ...prev,
            completedExports: [...prev.completedExports, result]
          };
        });
      }
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[62]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[15]++;
        cov_2o6cjfsmml().s[63]++;
        return {
          ...prev,
          isExporting: false,
          progress: 100
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[64]++;
      updateProgress(100);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[65]++;
      return results;
    } catch (error) {
      const classifiedError =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[66]++, (0, _errorHandling.classifyTryonError)(error));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[67]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[16]++;
        cov_2o6cjfsmml().s[68]++;
        return {
          ...prev,
          isExporting: false,
          progress: 0,
          failedExports: [...prev.failedExports, {
            config: configs[results.length],
            error: classifiedError
          }]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[69]++;
      (0, _errorHandling.logAndClassifyError)(error, {
        operation: 'batch_export',
        completedCount: results.length,
        totalCount: totalConfigs
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[70]++;
      options.onExportError?.(classifiedError);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[71]++;
      throw classifiedError;
    }
  }, [options, updateProgress]));
  const downloadLastExport =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[72]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[17]++;
    cov_2o6cjfsmml().s[73]++;
    if (
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[7][0]++, !exporterRef.current) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[7][1]++, state.completedExports.length === 0)) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[6][0]++;
      cov_2o6cjfsmml().s[74]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[6][1]++;
    }
    const lastExport =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[75]++, state.completedExports[state.completedExports.length - 1]);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[76]++;
    exporterRef.current.downloadImage(lastExport);
  }, [state.completedExports]));
  const clearHistory =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[77]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[18]++;
    cov_2o6cjfsmml().s[78]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[19]++;
      cov_2o6cjfsmml().s[79]++;
      return {
        ...prev,
        completedExports: [],
        failedExports: [],
        totalExports: 0
      };
    });
  }, []));
  const getOptimalConfig =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[80]++, (0, _react.useCallback)(useCase => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[20]++;
    const baseConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[81]++, {
      ..._imageExport.DEFAULT_EXPORT_CONFIG,
      ...options.defaultConfig
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[82]++;
    switch (useCase) {
      case 'web':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][0]++;
        cov_2o6cjfsmml().s[83]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.WEBP,
          preset: _imageExport.QualityPreset.WEB,
          quality: 0.8
        };
      case 'social':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][1]++;
        cov_2o6cjfsmml().s[84]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.JPEG,
          preset: _imageExport.QualityPreset.SOCIAL,
          quality: 0.85,
          width: 1080,
          height: 1080
        };
      case 'print':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][2]++;
        cov_2o6cjfsmml().s[85]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.PNG,
          preset: _imageExport.QualityPreset.PRINT,
          quality: 1.0,
          dpi: 300
        };
      case 'archive':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][3]++;
        cov_2o6cjfsmml().s[86]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.PNG,
          preset: _imageExport.QualityPreset.MAXIMUM,
          quality: 1.0
        };
      default:
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][4]++;
        cov_2o6cjfsmml().s[87]++;
        return baseConfig;
    }
  }, [options.defaultConfig]));
  const estimateSize =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[88]++, (0, _react.useCallback)((config =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[9][0]++, {})) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[21]++;
    const finalConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[89]++, {
      ..._imageExport.DEFAULT_EXPORT_CONFIG,
      ...options.defaultConfig,
      ...config
    });
    const {
      estimateFileSize
    } =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[90]++, require('../utils/imageExport'));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[91]++;
    return estimateFileSize(
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[10][0]++, finalConfig.width) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[10][1]++, canvasWidth),
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[11][0]++, finalConfig.height) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[11][1]++, canvasHeight), finalConfig.format, finalConfig.quality);
  }, [canvasWidth, canvasHeight, options.defaultConfig]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[92]++;
  return {
    canvas,
    exporter: exporterRef.current,
    state,
    exportImage,
    exportWithPreset,
    exportMultiple,
    downloadLastExport,
    clearHistory,
    getOptimalConfig,
    estimateSize
  };
}
function useBatchImageExport(canvasWidth, canvasHeight, canvasId, concurrency =
/* istanbul ignore next */
(cov_2o6cjfsmml().b[12][0]++, 2)) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[22]++;
  const canvas =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[93]++, (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId));
  const exporterRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[94]++, (0, _react.useRef)());
  const batchManagerRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[95]++, (0, _react.useRef)());
  const [queueStatus, setQueueStatus] =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[96]++, (0, _react.useState)({
    pending: 0,
    processing: false
  }));
  // Initialize exporter and batch manager
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[97]++;
  if (!exporterRef.current) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().b[13][0]++;
    cov_2o6cjfsmml().s[98]++;
    exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[99]++;
    batchManagerRef.current = (0, _imageExport.createBatchExportManager)(exporterRef.current, concurrency);
  } else
  /* istanbul ignore next */
  {
    cov_2o6cjfsmml().b[13][1]++;
  }
  const updateQueueStatus =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[100]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[23]++;
    cov_2o6cjfsmml().s[101]++;
    if (batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[14][0]++;
      cov_2o6cjfsmml().s[102]++;
      setQueueStatus(batchManagerRef.current.getQueueStatus());
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[14][1]++;
    }
  }, []));
  const queueExport =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[103]++, (0, _react.useCallback)(async config => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[24]++;
    cov_2o6cjfsmml().s[104]++;
    if (!batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[15][0]++;
      cov_2o6cjfsmml().s[105]++;
      throw new Error('Batch manager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[15][1]++;
    }
    cov_2o6cjfsmml().s[106]++;
    updateQueueStatus();
    const result =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[107]++, await batchManagerRef.current.queueExport(config));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[108]++;
    updateQueueStatus();
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[109]++;
    return result;
  }, [updateQueueStatus]));
  const queueMultiple =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[110]++, (0, _react.useCallback)(async configs => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[25]++;
    cov_2o6cjfsmml().s[111]++;
    if (!batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[16][0]++;
      cov_2o6cjfsmml().s[112]++;
      throw new Error('Batch manager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[16][1]++;
    }
    const promises =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[113]++, configs.map(config => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[26]++;
      cov_2o6cjfsmml().s[114]++;
      return queueExport(config);
    }));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[115]++;
    return Promise.all(promises);
  }, [queueExport]));
  const clearQueue =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[116]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[27]++;
    cov_2o6cjfsmml().s[117]++;
    if (batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[17][0]++;
      cov_2o6cjfsmml().s[118]++;
      batchManagerRef.current.clearQueue();
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[119]++;
      updateQueueStatus();
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[17][1]++;
    }
  }, [updateQueueStatus]));
  const exportPresets =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[120]++, (0, _react.useCallback)(async presets => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[28]++;
    const configs =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[121]++, presets.map(preset => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[29]++;
      cov_2o6cjfsmml().s[122]++;
      return {
        preset
      };
    }));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[123]++;
    return queueMultiple(configs);
  }, [queueMultiple]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[124]++;
  return {
    canvas,
    batchManager: batchManagerRef.current,
    queueExport,
    queueMultiple,
    clearQueue,
    queueStatus,
    exportPresets
  };
}
function useSimpleImageExport(canvasWidth, canvasHeight, canvasId) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[30]++;
  const {
    canvas,
    state,
    exportImage,
    downloadLastExport,
    getOptimalConfig
  } =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[125]++, useImageExport(canvasWidth, canvasHeight, canvasId, {
    autoDownload: true
  }));
  const exportForWeb =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[126]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[31]++;
    cov_2o6cjfsmml().s[127]++;
    return exportImage(getOptimalConfig('web'));
  }, [exportImage, getOptimalConfig]));
  const exportForSocial =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[128]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[32]++;
    cov_2o6cjfsmml().s[129]++;
    return exportImage(getOptimalConfig('social'));
  }, [exportImage, getOptimalConfig]));
  const exportForPrint =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[130]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[33]++;
    cov_2o6cjfsmml().s[131]++;
    return exportImage(getOptimalConfig('print'));
  }, [exportImage, getOptimalConfig]));
  const exportPNG =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[132]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[34]++;
    cov_2o6cjfsmml().s[133]++;
    return exportImage({
      format: _imageExport.ExportFormat.PNG,
      quality: 1.0
    });
  }, [exportImage]));
  const exportJPEG =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[134]++, (0, _react.useCallback)((quality =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[18][0]++, 0.9)) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[35]++;
    cov_2o6cjfsmml().s[135]++;
    return exportImage({
      format: _imageExport.ExportFormat.JPEG,
      quality
    });
  }, [exportImage]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[136]++;
  return {
    canvas,
    exportForWeb,
    exportForSocial,
    exportForPrint,
    exportPNG,
    exportJPEG,
    isExporting: state.isExporting,
    lastExport:
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[19][0]++, state.completedExports[state.completedExports.length - 1]) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[19][1]++, null),
    downloadLast: downloadLastExport
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm82Y2pmc21tbCIsImFjdHVhbENvdmVyYWdlIiwicyIsInVzZUJhdGNoSW1hZ2VFeHBvcnQiLCJmIiwidXNlSW1hZ2VFeHBvcnQiLCJ1c2VTaW1wbGVJbWFnZUV4cG9ydCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiY2FudmFzSWQiLCJvcHRpb25zIiwiYiIsImNhbnZhcyIsIl9DYW52YXNQcm92aWRlciIsInVzZU1hbmFnZWRDYW52YXMiLCJleHBvcnRlclJlZiIsIl9yZWFjdCIsInVzZVJlZiIsInN0YXRlIiwic2V0U3RhdGUiLCJ1c2VTdGF0ZSIsImlzRXhwb3J0aW5nIiwicHJvZ3Jlc3MiLCJjdXJyZW50RXhwb3J0IiwiY29tcGxldGVkRXhwb3J0cyIsImZhaWxlZEV4cG9ydHMiLCJ0b3RhbEV4cG9ydHMiLCJjdXJyZW50IiwiX2ltYWdlRXhwb3J0IiwiY3JlYXRlSW1hZ2VFeHBvcnRlciIsInVwZGF0ZVByb2dyZXNzIiwidXNlQ2FsbGJhY2siLCJwcmV2Iiwib25Qcm9ncmVzcyIsImV4cG9ydEltYWdlIiwiY29uZmlnIiwiRXJyb3IiLCJmaW5hbENvbmZpZyIsImRlZmF1bHRDb25maWciLCJleHBvcnRJZCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJyZXN1bHQiLCJhdXRvRG93bmxvYWQiLCJkb3dubG9hZEltYWdlIiwib25FeHBvcnRDb21wbGV0ZSIsImVycm9yIiwiY2xhc3NpZmllZEVycm9yIiwiX2Vycm9ySGFuZGxpbmciLCJjbGFzc2lmeVRyeW9uRXJyb3IiLCJsb2dBbmRDbGFzc2lmeUVycm9yIiwib3BlcmF0aW9uIiwib25FeHBvcnRFcnJvciIsImV4cG9ydFdpdGhQcmVzZXQiLCJwcmVzZXQiLCJleHBvcnRNdWx0aXBsZSIsImNvbmZpZ3MiLCJsZW5ndGgiLCJyZXN1bHRzIiwidG90YWxDb25maWdzIiwiaSIsInB1c2giLCJjb21wbGV0ZWRDb3VudCIsInRvdGFsQ291bnQiLCJkb3dubG9hZExhc3RFeHBvcnQiLCJsYXN0RXhwb3J0IiwiY2xlYXJIaXN0b3J5IiwiZ2V0T3B0aW1hbENvbmZpZyIsInVzZUNhc2UiLCJiYXNlQ29uZmlnIiwiREVGQVVMVF9FWFBPUlRfQ09ORklHIiwiZm9ybWF0IiwiRXhwb3J0Rm9ybWF0IiwiV0VCUCIsIlF1YWxpdHlQcmVzZXQiLCJXRUIiLCJxdWFsaXR5IiwiSlBFRyIsIlNPQ0lBTCIsIndpZHRoIiwiaGVpZ2h0IiwiUE5HIiwiUFJJTlQiLCJkcGkiLCJNQVhJTVVNIiwiZXN0aW1hdGVTaXplIiwiZXN0aW1hdGVGaWxlU2l6ZSIsInJlcXVpcmUiLCJleHBvcnRlciIsImNvbmN1cnJlbmN5IiwiYmF0Y2hNYW5hZ2VyUmVmIiwicXVldWVTdGF0dXMiLCJzZXRRdWV1ZVN0YXR1cyIsInBlbmRpbmciLCJwcm9jZXNzaW5nIiwiY3JlYXRlQmF0Y2hFeHBvcnRNYW5hZ2VyIiwidXBkYXRlUXVldWVTdGF0dXMiLCJnZXRRdWV1ZVN0YXR1cyIsInF1ZXVlRXhwb3J0IiwicXVldWVNdWx0aXBsZSIsInByb21pc2VzIiwibWFwIiwiUHJvbWlzZSIsImFsbCIsImNsZWFyUXVldWUiLCJleHBvcnRQcmVzZXRzIiwicHJlc2V0cyIsImJhdGNoTWFuYWdlciIsImV4cG9ydEZvcldlYiIsImV4cG9ydEZvclNvY2lhbCIsImV4cG9ydEZvclByaW50IiwiZXhwb3J0UE5HIiwiZXhwb3J0SlBFRyIsImRvd25sb2FkTGFzdCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2J1c2luZXNzLWxheWVyL2hvb2tzL3VzZUltYWdlRXhwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuLy8gSW1hZ2UgRXhwb3J0IFJlYWN0IEhvb2tzXG4vLyBSZWFjdCBob29rcyBmb3IgbWFuYWdpbmcgaW1hZ2UgZXhwb3J0IG9wZXJhdGlvbnMgd2l0aCBwcm9ncmVzcyB0cmFja2luZyBhbmQgb3B0aW1pemF0aW9uXG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTWFuYWdlZENhbnZhcyB9IGZyb20gJy4uL3Byb3ZpZGVycy9DYW52YXNQcm92aWRlcic7XG5pbXBvcnQge1xuICBJbWFnZUV4cG9ydGVyLFxuICBCYXRjaEV4cG9ydE1hbmFnZXIsXG4gIGNyZWF0ZUltYWdlRXhwb3J0ZXIsXG4gIGNyZWF0ZUJhdGNoRXhwb3J0TWFuYWdlcixcbiAgRXhwb3J0Rm9ybWF0LFxuICBRdWFsaXR5UHJlc2V0LFxuICB0eXBlIEV4cG9ydENvbmZpZyxcbiAgdHlwZSBFeHBvcnRSZXN1bHQsXG4gIHR5cGUgQmF0Y2hFeHBvcnRDb25maWcsXG4gIERFRkFVTFRfRVhQT1JUX0NPTkZJR1xufSBmcm9tICcuLi91dGlscy9pbWFnZUV4cG9ydCc7XG5pbXBvcnQge1xuICBjbGFzc2lmeVRyeW9uRXJyb3IsXG4gIGxvZ0FuZENsYXNzaWZ5RXJyb3IsXG4gIHR5cGUgQ2xhc3NpZmllZEVycm9yXG59IGZyb20gJy4uL3V0aWxzL2Vycm9ySGFuZGxpbmcnO1xuXG4vKipcbiAqIEV4cG9ydCBob29rIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VJbWFnZUV4cG9ydE9wdGlvbnMge1xuICAvKiogRGVmYXVsdCBleHBvcnQgY29uZmlndXJhdGlvbiAqL1xuICBkZWZhdWx0Q29uZmlnPzogUGFydGlhbDxFeHBvcnRDb25maWc+O1xuICAvKiogRW5hYmxlIGF1dG8tZG93bmxvYWQgYWZ0ZXIgZXhwb3J0ICovXG4gIGF1dG9Eb3dubG9hZD86IGJvb2xlYW47XG4gIC8qKiBDYWxsYmFjayB3aGVuIGV4cG9ydCBjb21wbGV0ZXMgKi9cbiAgb25FeHBvcnRDb21wbGV0ZT86IChyZXN1bHQ6IEV4cG9ydFJlc3VsdCkgPT4gdm9pZDtcbiAgLyoqIENhbGxiYWNrIHdoZW4gZXhwb3J0IGZhaWxzICovXG4gIG9uRXhwb3J0RXJyb3I/OiAoZXJyb3I6IENsYXNzaWZpZWRFcnJvcikgPT4gdm9pZDtcbiAgLyoqIENhbGxiYWNrIGZvciBleHBvcnQgcHJvZ3Jlc3MgKi9cbiAgb25Qcm9ncmVzcz86IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIEV4cG9ydCBzdGF0ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydFN0YXRlIHtcbiAgaXNFeHBvcnRpbmc6IGJvb2xlYW47XG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIGN1cnJlbnRFeHBvcnQ6IHN0cmluZyB8IG51bGw7XG4gIGNvbXBsZXRlZEV4cG9ydHM6IEV4cG9ydFJlc3VsdFtdO1xuICBmYWlsZWRFeHBvcnRzOiBBcnJheTx7IGNvbmZpZzogUGFydGlhbDxFeHBvcnRDb25maWc+OyBlcnJvcjogQ2xhc3NpZmllZEVycm9yIH0+O1xuICB0b3RhbEV4cG9ydHM6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBNYWluIGltYWdlIGV4cG9ydCBob29rXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbWFnZUV4cG9ydChcbiAgY2FudmFzV2lkdGg6IG51bWJlcixcbiAgY2FudmFzSGVpZ2h0OiBudW1iZXIsXG4gIGNhbnZhc0lkPzogc3RyaW5nLFxuICBvcHRpb25zOiBVc2VJbWFnZUV4cG9ydE9wdGlvbnMgPSB7fVxuKToge1xuICBjYW52YXM6IGFueTtcbiAgZXhwb3J0ZXI6IEltYWdlRXhwb3J0ZXI7XG4gIHN0YXRlOiBFeHBvcnRTdGF0ZTtcbiAgZXhwb3J0SW1hZ2U6IChjb25maWc/OiBQYXJ0aWFsPEV4cG9ydENvbmZpZz4pID0+IFByb21pc2U8RXhwb3J0UmVzdWx0PjtcbiAgZXhwb3J0V2l0aFByZXNldDogKHByZXNldDogUXVhbGl0eVByZXNldCkgPT4gUHJvbWlzZTxFeHBvcnRSZXN1bHQ+O1xuICBleHBvcnRNdWx0aXBsZTogKGNvbmZpZ3M6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPltdKSA9PiBQcm9taXNlPEV4cG9ydFJlc3VsdFtdPjtcbiAgZG93bmxvYWRMYXN0RXhwb3J0OiAoKSA9PiB2b2lkO1xuICBjbGVhckhpc3Rvcnk6ICgpID0+IHZvaWQ7XG4gIGdldE9wdGltYWxDb25maWc6ICh1c2VDYXNlOiAnd2ViJyB8ICdzb2NpYWwnIHwgJ3ByaW50JyB8ICdhcmNoaXZlJykgPT4gRXhwb3J0Q29uZmlnO1xuICBlc3RpbWF0ZVNpemU6IChjb25maWc/OiBQYXJ0aWFsPEV4cG9ydENvbmZpZz4pID0+IG51bWJlcjtcbn0ge1xuICBjb25zdCBjYW52YXMgPSB1c2VNYW5hZ2VkQ2FudmFzKGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIGNhbnZhc0lkKTtcbiAgY29uc3QgZXhwb3J0ZXJSZWYgPSB1c2VSZWY8SW1hZ2VFeHBvcnRlcj4oKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxFeHBvcnRTdGF0ZT4oe1xuICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcbiAgICBwcm9ncmVzczogMCxcbiAgICBjdXJyZW50RXhwb3J0OiBudWxsLFxuICAgIGNvbXBsZXRlZEV4cG9ydHM6IFtdLFxuICAgIGZhaWxlZEV4cG9ydHM6IFtdLFxuICAgIHRvdGFsRXhwb3J0czogMFxuICB9KTtcblxuICAvLyBJbml0aWFsaXplIGV4cG9ydGVyXG4gIGlmICghZXhwb3J0ZXJSZWYuY3VycmVudCkge1xuICAgIGV4cG9ydGVyUmVmLmN1cnJlbnQgPSBjcmVhdGVJbWFnZUV4cG9ydGVyKGNhbnZhcyk7XG4gIH1cblxuICBjb25zdCB1cGRhdGVQcm9ncmVzcyA9IHVzZUNhbGxiYWNrKChwcm9ncmVzczogbnVtYmVyKSA9PiB7XG4gICAgc2V0U3RhdGUocHJldiA9PiAoeyAuLi5wcmV2LCBwcm9ncmVzcyB9KSk7XG4gICAgb3B0aW9ucy5vblByb2dyZXNzPy4ocHJvZ3Jlc3MpO1xuICB9LCBbb3B0aW9uc10pO1xuXG4gIGNvbnN0IGV4cG9ydEltYWdlID0gdXNlQ2FsbGJhY2soYXN5bmMgKGNvbmZpZzogUGFydGlhbDxFeHBvcnRDb25maWc+ID0ge30pOiBQcm9taXNlPEV4cG9ydFJlc3VsdD4gPT4ge1xuICAgIGlmICghZXhwb3J0ZXJSZWYuY3VycmVudCkgdGhyb3cgbmV3IEVycm9yKCdFeHBvcnRlciBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgIGNvbnN0IGZpbmFsQ29uZmlnID0geyAuLi5vcHRpb25zLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xuICAgIGNvbnN0IGV4cG9ydElkID0gYGV4cG9ydF8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG5cbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgaXNFeHBvcnRpbmc6IHRydWUsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIGN1cnJlbnRFeHBvcnQ6IGV4cG9ydElkLFxuICAgICAgdG90YWxFeHBvcnRzOiBwcmV2LnRvdGFsRXhwb3J0cyArIDFcbiAgICB9KSk7XG5cbiAgICB0cnkge1xuICAgICAgdXBkYXRlUHJvZ3Jlc3MoMjUpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleHBvcnRlclJlZi5jdXJyZW50LmV4cG9ydEltYWdlKGZpbmFsQ29uZmlnKTtcbiAgICAgIFxuICAgICAgdXBkYXRlUHJvZ3Jlc3MoNzUpO1xuXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAgIC4uLnByZXYsXG4gICAgICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgICAgcHJvZ3Jlc3M6IDEwMCxcbiAgICAgICAgY3VycmVudEV4cG9ydDogbnVsbCxcbiAgICAgICAgY29tcGxldGVkRXhwb3J0czogWy4uLnByZXYuY29tcGxldGVkRXhwb3J0cywgcmVzdWx0XVxuICAgICAgfSkpO1xuXG4gICAgICB1cGRhdGVQcm9ncmVzcygxMDApO1xuXG4gICAgICAvLyBBdXRvLWRvd25sb2FkIGlmIGVuYWJsZWRcbiAgICAgIGlmIChvcHRpb25zLmF1dG9Eb3dubG9hZCkge1xuICAgICAgICBleHBvcnRlclJlZi5jdXJyZW50IS5kb3dubG9hZEltYWdlKHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMub25FeHBvcnRDb21wbGV0ZT8uKHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBjbGFzc2lmaWVkRXJyb3IgPSBjbGFzc2lmeVRyeW9uRXJyb3IoZXJyb3IpO1xuICAgICAgXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAgIC4uLnByZXYsXG4gICAgICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgIGN1cnJlbnRFeHBvcnQ6IG51bGwsXG4gICAgICAgIGZhaWxlZEV4cG9ydHM6IFsuLi5wcmV2LmZhaWxlZEV4cG9ydHMsIHsgY29uZmlnOiBmaW5hbENvbmZpZywgZXJyb3I6IGNsYXNzaWZpZWRFcnJvciB9XVxuICAgICAgfSkpO1xuXG4gICAgICBsb2dBbmRDbGFzc2lmeUVycm9yKGVycm9yLCB7XG4gICAgICAgIG9wZXJhdGlvbjogJ2ltYWdlX2V4cG9ydCcsXG4gICAgICAgIGNvbmZpZzogZmluYWxDb25maWcsXG4gICAgICAgIGV4cG9ydElkXG4gICAgICB9KTtcblxuICAgICAgb3B0aW9ucy5vbkV4cG9ydEVycm9yPy4oY2xhc3NpZmllZEVycm9yKTtcbiAgICAgIHRocm93IGNsYXNzaWZpZWRFcnJvcjtcbiAgICB9XG4gIH0sIFtvcHRpb25zLCB1cGRhdGVQcm9ncmVzc10pO1xuXG4gIGNvbnN0IGV4cG9ydFdpdGhQcmVzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAocHJlc2V0OiBRdWFsaXR5UHJlc2V0KTogUHJvbWlzZTxFeHBvcnRSZXN1bHQ+ID0+IHtcbiAgICByZXR1cm4gZXhwb3J0SW1hZ2UoeyBwcmVzZXQgfSk7XG4gIH0sIFtleHBvcnRJbWFnZV0pO1xuXG4gIGNvbnN0IGV4cG9ydE11bHRpcGxlID0gdXNlQ2FsbGJhY2soYXN5bmMgKGNvbmZpZ3M6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPltdKTogUHJvbWlzZTxFeHBvcnRSZXN1bHRbXT4gPT4ge1xuICAgIGlmICghZXhwb3J0ZXJSZWYuY3VycmVudCkgdGhyb3cgbmV3IEVycm9yKCdFeHBvcnRlciBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgIHNldFN0YXRlKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBpc0V4cG9ydGluZzogdHJ1ZSxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdG90YWxFeHBvcnRzOiBwcmV2LnRvdGFsRXhwb3J0cyArIGNvbmZpZ3MubGVuZ3RoXG4gICAgfSkpO1xuXG4gICAgY29uc3QgcmVzdWx0czogRXhwb3J0UmVzdWx0W10gPSBbXTtcbiAgICBjb25zdCB0b3RhbENvbmZpZ3MgPSBjb25maWdzLmxlbmd0aDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0geyAuLi5vcHRpb25zLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZ3NbaV0gfTtcbiAgICAgICAgdXBkYXRlUHJvZ3Jlc3MoKGkgLyB0b3RhbENvbmZpZ3MpICogMTAwKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4cG9ydGVyUmVmLmN1cnJlbnQuZXhwb3J0SW1hZ2UoY29uZmlnKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIFxuICAgICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICBjb21wbGV0ZWRFeHBvcnRzOiBbLi4ucHJldi5jb21wbGV0ZWRFeHBvcnRzLCByZXN1bHRdXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBpc0V4cG9ydGluZzogZmFsc2UsXG4gICAgICAgIHByb2dyZXNzOiAxMDBcbiAgICAgIH0pKTtcblxuICAgICAgdXBkYXRlUHJvZ3Jlc3MoMTAwKTtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBjbGFzc2lmaWVkRXJyb3IgPSBjbGFzc2lmeVRyeW9uRXJyb3IoZXJyb3IpO1xuICAgICAgXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAgIC4uLnByZXYsXG4gICAgICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgIGZhaWxlZEV4cG9ydHM6IFsuLi5wcmV2LmZhaWxlZEV4cG9ydHMsIHsgY29uZmlnOiBjb25maWdzW3Jlc3VsdHMubGVuZ3RoXSwgZXJyb3I6IGNsYXNzaWZpZWRFcnJvciB9XVxuICAgICAgfSkpO1xuXG4gICAgICBsb2dBbmRDbGFzc2lmeUVycm9yKGVycm9yLCB7XG4gICAgICAgIG9wZXJhdGlvbjogJ2JhdGNoX2V4cG9ydCcsXG4gICAgICAgIGNvbXBsZXRlZENvdW50OiByZXN1bHRzLmxlbmd0aCxcbiAgICAgICAgdG90YWxDb3VudDogdG90YWxDb25maWdzXG4gICAgICB9KTtcblxuICAgICAgb3B0aW9ucy5vbkV4cG9ydEVycm9yPy4oY2xhc3NpZmllZEVycm9yKTtcbiAgICAgIHRocm93IGNsYXNzaWZpZWRFcnJvcjtcbiAgICB9XG4gIH0sIFtvcHRpb25zLCB1cGRhdGVQcm9ncmVzc10pO1xuXG4gIGNvbnN0IGRvd25sb2FkTGFzdEV4cG9ydCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWV4cG9ydGVyUmVmLmN1cnJlbnQgfHwgc3RhdGUuY29tcGxldGVkRXhwb3J0cy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBsYXN0RXhwb3J0ID0gc3RhdGUuY29tcGxldGVkRXhwb3J0c1tzdGF0ZS5jb21wbGV0ZWRFeHBvcnRzLmxlbmd0aCAtIDFdO1xuICAgIGV4cG9ydGVyUmVmLmN1cnJlbnQuZG93bmxvYWRJbWFnZShsYXN0RXhwb3J0KTtcbiAgfSwgW3N0YXRlLmNvbXBsZXRlZEV4cG9ydHNdKTtcblxuICBjb25zdCBjbGVhckhpc3RvcnkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U3RhdGUocHJldiA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIGNvbXBsZXRlZEV4cG9ydHM6IFtdLFxuICAgICAgZmFpbGVkRXhwb3J0czogW10sXG4gICAgICB0b3RhbEV4cG9ydHM6IDBcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBnZXRPcHRpbWFsQ29uZmlnID0gdXNlQ2FsbGJhY2soKHVzZUNhc2U6ICd3ZWInIHwgJ3NvY2lhbCcgfCAncHJpbnQnIHwgJ2FyY2hpdmUnKTogRXhwb3J0Q29uZmlnID0+IHtcbiAgICBjb25zdCBiYXNlQ29uZmlnID0geyAuLi5ERUZBVUxUX0VYUE9SVF9DT05GSUcsIC4uLm9wdGlvbnMuZGVmYXVsdENvbmZpZyB9O1xuXG4gICAgc3dpdGNoICh1c2VDYXNlKSB7XG4gICAgICBjYXNlICd3ZWInOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmJhc2VDb25maWcsXG4gICAgICAgICAgZm9ybWF0OiBFeHBvcnRGb3JtYXQuV0VCUCxcbiAgICAgICAgICBwcmVzZXQ6IFF1YWxpdHlQcmVzZXQuV0VCLFxuICAgICAgICAgIHF1YWxpdHk6IDAuOFxuICAgICAgICB9O1xuICAgICAgY2FzZSAnc29jaWFsJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5iYXNlQ29uZmlnLFxuICAgICAgICAgIGZvcm1hdDogRXhwb3J0Rm9ybWF0LkpQRUcsXG4gICAgICAgICAgcHJlc2V0OiBRdWFsaXR5UHJlc2V0LlNPQ0lBTCxcbiAgICAgICAgICBxdWFsaXR5OiAwLjg1LFxuICAgICAgICAgIHdpZHRoOiAxMDgwLFxuICAgICAgICAgIGhlaWdodDogMTA4MFxuICAgICAgICB9O1xuICAgICAgY2FzZSAncHJpbnQnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmJhc2VDb25maWcsXG4gICAgICAgICAgZm9ybWF0OiBFeHBvcnRGb3JtYXQuUE5HLFxuICAgICAgICAgIHByZXNldDogUXVhbGl0eVByZXNldC5QUklOVCxcbiAgICAgICAgICBxdWFsaXR5OiAxLjAsXG4gICAgICAgICAgZHBpOiAzMDBcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgJ2FyY2hpdmUnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmJhc2VDb25maWcsXG4gICAgICAgICAgZm9ybWF0OiBFeHBvcnRGb3JtYXQuUE5HLFxuICAgICAgICAgIHByZXNldDogUXVhbGl0eVByZXNldC5NQVhJTVVNLFxuICAgICAgICAgIHF1YWxpdHk6IDEuMFxuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGJhc2VDb25maWc7XG4gICAgfVxuICB9LCBbb3B0aW9ucy5kZWZhdWx0Q29uZmlnXSk7XG5cbiAgY29uc3QgZXN0aW1hdGVTaXplID0gdXNlQ2FsbGJhY2soKGNvbmZpZzogUGFydGlhbDxFeHBvcnRDb25maWc+ID0ge30pOiBudW1iZXIgPT4ge1xuICAgIGNvbnN0IGZpbmFsQ29uZmlnID0geyAuLi5ERUZBVUxUX0VYUE9SVF9DT05GSUcsIC4uLm9wdGlvbnMuZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG4gICAgY29uc3QgeyBlc3RpbWF0ZUZpbGVTaXplIH0gPSByZXF1aXJlKCcuLi91dGlscy9pbWFnZUV4cG9ydCcpO1xuICAgIFxuICAgIHJldHVybiBlc3RpbWF0ZUZpbGVTaXplKFxuICAgICAgZmluYWxDb25maWcud2lkdGggfHwgY2FudmFzV2lkdGgsXG4gICAgICBmaW5hbENvbmZpZy5oZWlnaHQgfHwgY2FudmFzSGVpZ2h0LFxuICAgICAgZmluYWxDb25maWcuZm9ybWF0LFxuICAgICAgZmluYWxDb25maWcucXVhbGl0eVxuICAgICk7XG4gIH0sIFtjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBvcHRpb25zLmRlZmF1bHRDb25maWddKTtcblxuICByZXR1cm4ge1xuICAgIGNhbnZhcyxcbiAgICBleHBvcnRlcjogZXhwb3J0ZXJSZWYuY3VycmVudCEsXG4gICAgc3RhdGUsXG4gICAgZXhwb3J0SW1hZ2UsXG4gICAgZXhwb3J0V2l0aFByZXNldCxcbiAgICBleHBvcnRNdWx0aXBsZSxcbiAgICBkb3dubG9hZExhc3RFeHBvcnQsXG4gICAgY2xlYXJIaXN0b3J5LFxuICAgIGdldE9wdGltYWxDb25maWcsXG4gICAgZXN0aW1hdGVTaXplXG4gIH07XG59XG5cbi8qKlxuICogQmF0Y2ggZXhwb3J0IGhvb2sgd2l0aCBxdWV1ZSBtYW5hZ2VtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCYXRjaEltYWdlRXhwb3J0KFxuICBjYW52YXNXaWR0aDogbnVtYmVyLFxuICBjYW52YXNIZWlnaHQ6IG51bWJlcixcbiAgY2FudmFzSWQ/OiBzdHJpbmcsXG4gIGNvbmN1cnJlbmN5OiBudW1iZXIgPSAyXG4pOiB7XG4gIGNhbnZhczogYW55O1xuICBiYXRjaE1hbmFnZXI6IEJhdGNoRXhwb3J0TWFuYWdlcjtcbiAgcXVldWVFeHBvcnQ6IChjb25maWc6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPikgPT4gUHJvbWlzZTxFeHBvcnRSZXN1bHQ+O1xuICBxdWV1ZU11bHRpcGxlOiAoY29uZmlnczogUGFydGlhbDxFeHBvcnRDb25maWc+W10pID0+IFByb21pc2U8RXhwb3J0UmVzdWx0W10+O1xuICBjbGVhclF1ZXVlOiAoKSA9PiB2b2lkO1xuICBxdWV1ZVN0YXR1czogeyBwZW5kaW5nOiBudW1iZXI7IHByb2Nlc3Npbmc6IGJvb2xlYW4gfTtcbiAgZXhwb3J0UHJlc2V0czogKHByZXNldHM6IFF1YWxpdHlQcmVzZXRbXSkgPT4gUHJvbWlzZTxFeHBvcnRSZXN1bHRbXT47XG59IHtcbiAgY29uc3QgY2FudmFzID0gdXNlTWFuYWdlZENhbnZhcyhjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBjYW52YXNJZCk7XG4gIGNvbnN0IGV4cG9ydGVyUmVmID0gdXNlUmVmPEltYWdlRXhwb3J0ZXI+KCk7XG4gIGNvbnN0IGJhdGNoTWFuYWdlclJlZiA9IHVzZVJlZjxCYXRjaEV4cG9ydE1hbmFnZXI+KCk7XG4gIGNvbnN0IFtxdWV1ZVN0YXR1cywgc2V0UXVldWVTdGF0dXNdID0gdXNlU3RhdGUoeyBwZW5kaW5nOiAwLCBwcm9jZXNzaW5nOiBmYWxzZSB9KTtcblxuICAvLyBJbml0aWFsaXplIGV4cG9ydGVyIGFuZCBiYXRjaCBtYW5hZ2VyXG4gIGlmICghZXhwb3J0ZXJSZWYuY3VycmVudCkge1xuICAgIGV4cG9ydGVyUmVmLmN1cnJlbnQgPSBjcmVhdGVJbWFnZUV4cG9ydGVyKGNhbnZhcyk7XG4gICAgYmF0Y2hNYW5hZ2VyUmVmLmN1cnJlbnQgPSBjcmVhdGVCYXRjaEV4cG9ydE1hbmFnZXIoZXhwb3J0ZXJSZWYuY3VycmVudCwgY29uY3VycmVuY3kpO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlUXVldWVTdGF0dXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGJhdGNoTWFuYWdlclJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRRdWV1ZVN0YXR1cyhiYXRjaE1hbmFnZXJSZWYuY3VycmVudC5nZXRRdWV1ZVN0YXR1cygpKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBxdWV1ZUV4cG9ydCA9IHVzZUNhbGxiYWNrKGFzeW5jIChjb25maWc6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPik6IFByb21pc2U8RXhwb3J0UmVzdWx0PiA9PiB7XG4gICAgaWYgKCFiYXRjaE1hbmFnZXJSZWYuY3VycmVudCkgdGhyb3cgbmV3IEVycm9yKCdCYXRjaCBtYW5hZ2VyIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIFxuICAgIHVwZGF0ZVF1ZXVlU3RhdHVzKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYmF0Y2hNYW5hZ2VyUmVmLmN1cnJlbnQucXVldWVFeHBvcnQoY29uZmlnKTtcbiAgICB1cGRhdGVRdWV1ZVN0YXR1cygpO1xuICAgIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIFt1cGRhdGVRdWV1ZVN0YXR1c10pO1xuXG4gIGNvbnN0IHF1ZXVlTXVsdGlwbGUgPSB1c2VDYWxsYmFjayhhc3luYyAoY29uZmlnczogUGFydGlhbDxFeHBvcnRDb25maWc+W10pOiBQcm9taXNlPEV4cG9ydFJlc3VsdFtdPiA9PiB7XG4gICAgaWYgKCFiYXRjaE1hbmFnZXJSZWYuY3VycmVudCkgdGhyb3cgbmV3IEVycm9yKCdCYXRjaCBtYW5hZ2VyIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIFxuICAgIGNvbnN0IHByb21pc2VzID0gY29uZmlncy5tYXAoY29uZmlnID0+IHF1ZXVlRXhwb3J0KGNvbmZpZykpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH0sIFtxdWV1ZUV4cG9ydF0pO1xuXG4gIGNvbnN0IGNsZWFyUXVldWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGJhdGNoTWFuYWdlclJlZi5jdXJyZW50KSB7XG4gICAgICBiYXRjaE1hbmFnZXJSZWYuY3VycmVudC5jbGVhclF1ZXVlKCk7XG4gICAgICB1cGRhdGVRdWV1ZVN0YXR1cygpO1xuICAgIH1cbiAgfSwgW3VwZGF0ZVF1ZXVlU3RhdHVzXSk7XG5cbiAgY29uc3QgZXhwb3J0UHJlc2V0cyA9IHVzZUNhbGxiYWNrKGFzeW5jIChwcmVzZXRzOiBRdWFsaXR5UHJlc2V0W10pOiBQcm9taXNlPEV4cG9ydFJlc3VsdFtdPiA9PiB7XG4gICAgY29uc3QgY29uZmlncyA9IHByZXNldHMubWFwKHByZXNldCA9PiAoeyBwcmVzZXQgfSkpO1xuICAgIHJldHVybiBxdWV1ZU11bHRpcGxlKGNvbmZpZ3MpO1xuICB9LCBbcXVldWVNdWx0aXBsZV0pO1xuXG4gIHJldHVybiB7XG4gICAgY2FudmFzLFxuICAgIGJhdGNoTWFuYWdlcjogYmF0Y2hNYW5hZ2VyUmVmLmN1cnJlbnQhLFxuICAgIHF1ZXVlRXhwb3J0LFxuICAgIHF1ZXVlTXVsdGlwbGUsXG4gICAgY2xlYXJRdWV1ZSxcbiAgICBxdWV1ZVN0YXR1cyxcbiAgICBleHBvcnRQcmVzZXRzXG4gIH07XG59XG5cbi8qKlxuICogU2ltcGxlIGV4cG9ydCBob29rIHdpdGggY29tbW9uIHByZXNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNpbXBsZUltYWdlRXhwb3J0KFxuICBjYW52YXNXaWR0aDogbnVtYmVyLFxuICBjYW52YXNIZWlnaHQ6IG51bWJlcixcbiAgY2FudmFzSWQ/OiBzdHJpbmdcbik6IHtcbiAgY2FudmFzOiBhbnk7XG4gIGV4cG9ydEZvcldlYjogKCkgPT4gUHJvbWlzZTxFeHBvcnRSZXN1bHQ+O1xuICBleHBvcnRGb3JTb2NpYWw6ICgpID0+IFByb21pc2U8RXhwb3J0UmVzdWx0PjtcbiAgZXhwb3J0Rm9yUHJpbnQ6ICgpID0+IFByb21pc2U8RXhwb3J0UmVzdWx0PjtcbiAgZXhwb3J0UE5HOiAoKSA9PiBQcm9taXNlPEV4cG9ydFJlc3VsdD47XG4gIGV4cG9ydEpQRUc6IChxdWFsaXR5PzogbnVtYmVyKSA9PiBQcm9taXNlPEV4cG9ydFJlc3VsdD47XG4gIGlzRXhwb3J0aW5nOiBib29sZWFuO1xuICBsYXN0RXhwb3J0OiBFeHBvcnRSZXN1bHQgfCBudWxsO1xuICBkb3dubG9hZExhc3Q6ICgpID0+IHZvaWQ7XG59IHtcbiAgY29uc3Qge1xuICAgIGNhbnZhcyxcbiAgICBzdGF0ZSxcbiAgICBleHBvcnRJbWFnZSxcbiAgICBkb3dubG9hZExhc3RFeHBvcnQsXG4gICAgZ2V0T3B0aW1hbENvbmZpZ1xuICB9ID0gdXNlSW1hZ2VFeHBvcnQoY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCwgY2FudmFzSWQsIHsgYXV0b0Rvd25sb2FkOiB0cnVlIH0pO1xuXG4gIGNvbnN0IGV4cG9ydEZvcldlYiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gZXhwb3J0SW1hZ2UoZ2V0T3B0aW1hbENvbmZpZygnd2ViJykpO1xuICB9LCBbZXhwb3J0SW1hZ2UsIGdldE9wdGltYWxDb25maWddKTtcblxuICBjb25zdCBleHBvcnRGb3JTb2NpYWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGV4cG9ydEltYWdlKGdldE9wdGltYWxDb25maWcoJ3NvY2lhbCcpKTtcbiAgfSwgW2V4cG9ydEltYWdlLCBnZXRPcHRpbWFsQ29uZmlnXSk7XG5cbiAgY29uc3QgZXhwb3J0Rm9yUHJpbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGV4cG9ydEltYWdlKGdldE9wdGltYWxDb25maWcoJ3ByaW50JykpO1xuICB9LCBbZXhwb3J0SW1hZ2UsIGdldE9wdGltYWxDb25maWddKTtcblxuICBjb25zdCBleHBvcnRQTkcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGV4cG9ydEltYWdlKHsgZm9ybWF0OiBFeHBvcnRGb3JtYXQuUE5HLCBxdWFsaXR5OiAxLjAgfSk7XG4gIH0sIFtleHBvcnRJbWFnZV0pO1xuXG4gIGNvbnN0IGV4cG9ydEpQRUcgPSB1c2VDYWxsYmFjaygocXVhbGl0eTogbnVtYmVyID0gMC45KSA9PiB7XG4gICAgcmV0dXJuIGV4cG9ydEltYWdlKHsgZm9ybWF0OiBFeHBvcnRGb3JtYXQuSlBFRywgcXVhbGl0eSB9KTtcbiAgfSwgW2V4cG9ydEltYWdlXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjYW52YXMsXG4gICAgZXhwb3J0Rm9yV2ViLFxuICAgIGV4cG9ydEZvclNvY2lhbCxcbiAgICBleHBvcnRGb3JQcmludCxcbiAgICBleHBvcnRQTkcsXG4gICAgZXhwb3J0SlBFRyxcbiAgICBpc0V4cG9ydGluZzogc3RhdGUuaXNFeHBvcnRpbmcsXG4gICAgbGFzdEV4cG9ydDogc3RhdGUuY29tcGxldGVkRXhwb3J0c1tzdGF0ZS5jb21wbGV0ZWRFeHBvcnRzLmxlbmd0aCAtIDFdIHx8IG51bGwsXG4gICAgZG93bmxvYWRMYXN0OiBkb3dubG9hZExhc3RFeHBvcnRcbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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