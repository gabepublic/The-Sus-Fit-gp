{"version":3,"names":["cov_2o6cjfsmml","actualCoverage","s","useBatchImageExport","f","useImageExport","useSimpleImageExport","canvasWidth","canvasHeight","canvasId","options","b","canvas","_CanvasProvider","useManagedCanvas","exporterRef","_react","useRef","state","setState","useState","isExporting","progress","currentExport","completedExports","failedExports","totalExports","current","_imageExport","createImageExporter","updateProgress","useCallback","prev","onProgress","exportImage","config","Error","finalConfig","defaultConfig","exportId","Date","now","Math","random","toString","substr","result","autoDownload","downloadImage","onExportComplete","error","classifiedError","_errorHandling","classifyTryonError","logAndClassifyError","operation","onExportError","exportWithPreset","preset","exportMultiple","configs","length","results","totalConfigs","i","push","completedCount","totalCount","downloadLastExport","lastExport","clearHistory","getOptimalConfig","useCase","baseConfig","DEFAULT_EXPORT_CONFIG","format","ExportFormat","WEBP","QualityPreset","WEB","quality","JPEG","SOCIAL","width","height","PNG","PRINT","dpi","MAXIMUM","estimateSize","estimateFileSize","require","exporter","concurrency","batchManagerRef","queueStatus","setQueueStatus","pending","processing","createBatchExportManager","updateQueueStatus","getQueueStatus","queueExport","queueMultiple","promises","map","Promise","all","clearQueue","exportPresets","presets","batchManager","exportForWeb","exportForSocial","exportForPrint","exportPNG","exportJPEG","downloadLast"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts"],"sourcesContent":["'use client';\n\n// Image Export React Hooks\n// React hooks for managing image export operations with progress tracking and optimization\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  ImageExporter,\n  BatchExportManager,\n  createImageExporter,\n  createBatchExportManager,\n  ExportFormat,\n  QualityPreset,\n  type ExportConfig,\n  type ExportResult,\n  type BatchExportConfig,\n  DEFAULT_EXPORT_CONFIG\n} from '../utils/imageExport';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  type ClassifiedError\n} from '../utils/errorHandling';\n\n/**\n * Export hook options\n */\nexport interface UseImageExportOptions {\n  /** Default export configuration */\n  defaultConfig?: Partial<ExportConfig>;\n  /** Enable auto-download after export */\n  autoDownload?: boolean;\n  /** Callback when export completes */\n  onExportComplete?: (result: ExportResult) => void;\n  /** Callback when export fails */\n  onExportError?: (error: ClassifiedError) => void;\n  /** Callback for export progress */\n  onProgress?: (progress: number) => void;\n}\n\n/**\n * Export state\n */\nexport interface ExportState {\n  isExporting: boolean;\n  progress: number;\n  currentExport: string | null;\n  completedExports: ExportResult[];\n  failedExports: Array<{ config: Partial<ExportConfig>; error: ClassifiedError }>;\n  totalExports: number;\n}\n\n/**\n * Main image export hook\n */\nexport function useImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  options: UseImageExportOptions = {}\n): {\n  canvas: any;\n  exporter: ImageExporter;\n  state: ExportState;\n  exportImage: (config?: Partial<ExportConfig>) => Promise<ExportResult>;\n  exportWithPreset: (preset: QualityPreset) => Promise<ExportResult>;\n  exportMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  downloadLastExport: () => void;\n  clearHistory: () => void;\n  getOptimalConfig: (useCase: 'web' | 'social' | 'print' | 'archive') => ExportConfig;\n  estimateSize: (config?: Partial<ExportConfig>) => number;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter>();\n  const [state, setState] = useState<ExportState>({\n    isExporting: false,\n    progress: 0,\n    currentExport: null,\n    completedExports: [],\n    failedExports: [],\n    totalExports: 0\n  });\n\n  // Initialize exporter\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n  }\n\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n    options.onProgress?.(progress);\n  }, [options]);\n\n  const exportImage = useCallback(async (config: Partial<ExportConfig> = {}): Promise<ExportResult> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    const finalConfig = { ...options.defaultConfig, ...config };\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      currentExport: exportId,\n      totalExports: prev.totalExports + 1\n    }));\n\n    try {\n      updateProgress(25);\n      \n      const result = await exporterRef.current.exportImage(finalConfig);\n      \n      updateProgress(75);\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100,\n        currentExport: null,\n        completedExports: [...prev.completedExports, result]\n      }));\n\n      updateProgress(100);\n\n      // Auto-download if enabled\n      if (options.autoDownload) {\n        exporterRef.current!.downloadImage(result);\n      }\n\n      options.onExportComplete?.(result);\n      return result;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        currentExport: null,\n        failedExports: [...prev.failedExports, { config: finalConfig, error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'image_export',\n        config: finalConfig,\n        exportId\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const exportWithPreset = useCallback(async (preset: QualityPreset): Promise<ExportResult> => {\n    return exportImage({ preset });\n  }, [exportImage]);\n\n  const exportMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      totalExports: prev.totalExports + configs.length\n    }));\n\n    const results: ExportResult[] = [];\n    const totalConfigs = configs.length;\n\n    try {\n      for (let i = 0; i < configs.length; i++) {\n        const config = { ...options.defaultConfig, ...configs[i] };\n        updateProgress((i / totalConfigs) * 100);\n        \n        const result = await exporterRef.current.exportImage(config);\n        results.push(result);\n        \n        setState(prev => ({\n          ...prev,\n          completedExports: [...prev.completedExports, result]\n        }));\n      }\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100\n      }));\n\n      updateProgress(100);\n      return results;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        failedExports: [...prev.failedExports, { config: configs[results.length], error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'batch_export',\n        completedCount: results.length,\n        totalCount: totalConfigs\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const downloadLastExport = useCallback(() => {\n    if (!exporterRef.current || state.completedExports.length === 0) return;\n    \n    const lastExport = state.completedExports[state.completedExports.length - 1];\n    exporterRef.current.downloadImage(lastExport);\n  }, [state.completedExports]);\n\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      completedExports: [],\n      failedExports: [],\n      totalExports: 0\n    }));\n  }, []);\n\n  const getOptimalConfig = useCallback((useCase: 'web' | 'social' | 'print' | 'archive'): ExportConfig => {\n    const baseConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig };\n\n    switch (useCase) {\n      case 'web':\n        return {\n          ...baseConfig,\n          format: ExportFormat.WEBP,\n          preset: QualityPreset.WEB,\n          quality: 0.8\n        };\n      case 'social':\n        return {\n          ...baseConfig,\n          format: ExportFormat.JPEG,\n          preset: QualityPreset.SOCIAL,\n          quality: 0.85,\n          width: 1080,\n          height: 1080\n        };\n      case 'print':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.PRINT,\n          quality: 1.0,\n          dpi: 300\n        };\n      case 'archive':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.MAXIMUM,\n          quality: 1.0\n        };\n      default:\n        return baseConfig;\n    }\n  }, [options.defaultConfig]);\n\n  const estimateSize = useCallback((config: Partial<ExportConfig> = {}): number => {\n    const finalConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig, ...config };\n    const { estimateFileSize } = require('../utils/imageExport');\n    \n    return estimateFileSize(\n      finalConfig.width || canvasWidth,\n      finalConfig.height || canvasHeight,\n      finalConfig.format,\n      finalConfig.quality\n    );\n  }, [canvasWidth, canvasHeight, options.defaultConfig]);\n\n  return {\n    canvas,\n    exporter: exporterRef.current!,\n    state,\n    exportImage,\n    exportWithPreset,\n    exportMultiple,\n    downloadLastExport,\n    clearHistory,\n    getOptimalConfig,\n    estimateSize\n  };\n}\n\n/**\n * Batch export hook with queue management\n */\nexport function useBatchImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  concurrency: number = 2\n): {\n  canvas: any;\n  batchManager: BatchExportManager;\n  queueExport: (config: Partial<ExportConfig>) => Promise<ExportResult>;\n  queueMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  clearQueue: () => void;\n  queueStatus: { pending: number; processing: boolean };\n  exportPresets: (presets: QualityPreset[]) => Promise<ExportResult[]>;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter>();\n  const batchManagerRef = useRef<BatchExportManager>();\n  const [queueStatus, setQueueStatus] = useState({ pending: 0, processing: false });\n\n  // Initialize exporter and batch manager\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n    batchManagerRef.current = createBatchExportManager(exporterRef.current, concurrency);\n  }\n\n  const updateQueueStatus = useCallback(() => {\n    if (batchManagerRef.current) {\n      setQueueStatus(batchManagerRef.current.getQueueStatus());\n    }\n  }, []);\n\n  const queueExport = useCallback(async (config: Partial<ExportConfig>): Promise<ExportResult> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    updateQueueStatus();\n    const result = await batchManagerRef.current.queueExport(config);\n    updateQueueStatus();\n    \n    return result;\n  }, [updateQueueStatus]);\n\n  const queueMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    const promises = configs.map(config => queueExport(config));\n    return Promise.all(promises);\n  }, [queueExport]);\n\n  const clearQueue = useCallback(() => {\n    if (batchManagerRef.current) {\n      batchManagerRef.current.clearQueue();\n      updateQueueStatus();\n    }\n  }, [updateQueueStatus]);\n\n  const exportPresets = useCallback(async (presets: QualityPreset[]): Promise<ExportResult[]> => {\n    const configs = presets.map(preset => ({ preset }));\n    return queueMultiple(configs);\n  }, [queueMultiple]);\n\n  return {\n    canvas,\n    batchManager: batchManagerRef.current!,\n    queueExport,\n    queueMultiple,\n    clearQueue,\n    queueStatus,\n    exportPresets\n  };\n}\n\n/**\n * Simple export hook with common presets\n */\nexport function useSimpleImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: any;\n  exportForWeb: () => Promise<ExportResult>;\n  exportForSocial: () => Promise<ExportResult>;\n  exportForPrint: () => Promise<ExportResult>;\n  exportPNG: () => Promise<ExportResult>;\n  exportJPEG: (quality?: number) => Promise<ExportResult>;\n  isExporting: boolean;\n  lastExport: ExportResult | null;\n  downloadLast: () => void;\n} {\n  const {\n    canvas,\n    state,\n    exportImage,\n    downloadLastExport,\n    getOptimalConfig\n  } = useImageExport(canvasWidth, canvasHeight, canvasId, { autoDownload: true });\n\n  const exportForWeb = useCallback(() => {\n    return exportImage(getOptimalConfig('web'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForSocial = useCallback(() => {\n    return exportImage(getOptimalConfig('social'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForPrint = useCallback(() => {\n    return exportImage(getOptimalConfig('print'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportPNG = useCallback(() => {\n    return exportImage({ format: ExportFormat.PNG, quality: 1.0 });\n  }, [exportImage]);\n\n  const exportJPEG = useCallback((quality: number = 0.9) => {\n    return exportImage({ format: ExportFormat.JPEG, quality });\n  }, [exportImage]);\n\n  return {\n    canvas,\n    exportForWeb,\n    exportForSocial,\n    exportForPrint,\n    exportPNG,\n    exportJPEG,\n    isExporting: state.isExporting,\n    lastExport: state.completedExports[state.completedExports.length - 1] || null,\n    downloadLast: downloadLastExport\n  };\n}"],"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","ignoreList":[]}