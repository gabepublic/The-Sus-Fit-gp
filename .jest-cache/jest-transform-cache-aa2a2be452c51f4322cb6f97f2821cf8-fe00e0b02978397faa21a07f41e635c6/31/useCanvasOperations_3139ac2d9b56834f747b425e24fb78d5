0fb1d07067f291c190a5d2a4a1fc2643
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAdvancedCanvasOperations: function() {
        return useAdvancedCanvasOperations;
    },
    useCanvasAnimation: function() {
        return useCanvasAnimation;
    },
    useCanvasHistory: function() {
        return useCanvasHistory;
    },
    useCanvasImageLoader: function() {
        return useCanvasImageLoader;
    },
    useCanvasPerformance: function() {
        return useCanvasPerformance;
    },
    useCanvasResize: function() {
        return useCanvasResize;
    }
});
const _react = require("react");
const _CanvasProvider = require("../providers/CanvasProvider");
const _canvasUtils = require("../utils/canvasUtils");
function useAdvancedCanvasOperations(width, height, canvasId) {
    const canvas = (0, _CanvasProvider.useManagedCanvas)(width, height, canvasId);
    const operationsRef = (0, _react.useRef)(undefined);
    if (!operationsRef.current) {
        operationsRef.current = (0, _canvasUtils.createAdvancedCanvasOperations)(canvas);
    }
    const saveState = (0, _react.useCallback)(()=>{
        return operationsRef.current.saveState();
    }, []);
    const restoreState = (0, _react.useCallback)((state)=>{
        operationsRef.current.restoreState(state);
    }, []);
    const clear = (0, _react.useCallback)(()=>{
        canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);
    }, [
        canvas
    ]);
    return {
        canvas,
        operations: operationsRef.current,
        saveState,
        restoreState,
        clear
    };
}
function useCanvasAnimation() {
    const [isRunning, setIsRunning] = (0, _react.useState)(false);
    const animationUtilsRef = (0, _react.useRef)(undefined);
    if (!animationUtilsRef.current) {
        animationUtilsRef.current = (0, _canvasUtils.createCanvasAnimationUtils)();
    }
    const startAnimation = (0, _react.useCallback)((callback)=>{
        animationUtilsRef.current.startAnimation(callback);
        setIsRunning(true);
    }, []);
    const stopAnimation = (0, _react.useCallback)(()=>{
        animationUtilsRef.current.stopAnimation();
        setIsRunning(false);
    }, []);
    const animateProperty = (0, _react.useCallback)((from, to, duration, easing, onUpdate, onComplete)=>{
        return _canvasUtils.CanvasAnimationUtils.animateProperty(from, to, duration, easing, onUpdate, ()=>{
            onComplete?.();
            setIsRunning(false);
        });
    }, []);
    (0, _react.useEffect)(()=>{
        return ()=>{
            stopAnimation();
        };
    }, [
        stopAnimation
    ]);
    return {
        isRunning,
        startAnimation,
        stopAnimation,
        animateProperty
    };
}
function useCanvasHistory(canvas, maxHistorySize = 20) {
    const [history, setHistory] = (0, _react.useState)([]);
    const [currentIndex, setCurrentIndex] = (0, _react.useState)(-1);
    const operationsRef = (0, _react.useRef)((0, _canvasUtils.createAdvancedCanvasOperations)(canvas));
    const canUndo = currentIndex > 0;
    const canRedo = currentIndex < history.length - 1;
    const saveState = (0, _react.useCallback)(()=>{
        const state = operationsRef.current.saveState();
        setHistory((prev)=>{
            const newHistory = prev.slice(0, currentIndex + 1);
            newHistory.push(state);
            // Limit history size
            if (newHistory.length > maxHistorySize) {
                newHistory.shift();
                return newHistory;
            }
            return newHistory;
        });
        setCurrentIndex((prev)=>{
            const newIndex = prev + 1;
            return newIndex >= maxHistorySize ? maxHistorySize - 1 : newIndex;
        });
    }, [
        currentIndex,
        maxHistorySize
    ]);
    const undo = (0, _react.useCallback)(()=>{
        if (!canUndo) return;
        const newIndex = currentIndex - 1;
        const state = history[newIndex];
        if (state) {
            operationsRef.current.restoreState(state);
            setCurrentIndex(newIndex);
        }
    }, [
        canUndo,
        currentIndex,
        history
    ]);
    const redo = (0, _react.useCallback)(()=>{
        if (!canRedo) return;
        const newIndex = currentIndex + 1;
        const state = history[newIndex];
        if (state) {
            operationsRef.current.restoreState(state);
            setCurrentIndex(newIndex);
        }
    }, [
        canRedo,
        currentIndex,
        history
    ]);
    const clear = (0, _react.useCallback)(()=>{
        setHistory([]);
        setCurrentIndex(-1);
    }, []);
    // Save initial state
    (0, _react.useEffect)(()=>{
        if (history.length === 0) {
            saveState();
        }
    }, []);
    return {
        canUndo,
        canRedo,
        saveState,
        undo,
        redo,
        clear,
        historySize: history.length
    };
}
function useCanvasPerformance() {
    const measureOperation = (0, _react.useCallback)((operation, name)=>{
        return _canvasUtils.CanvasPerformanceUtils.measureOperation(operation, name);
    }, []);
    const debounce = (0, _react.useCallback)((func, wait)=>{
        return _canvasUtils.CanvasPerformanceUtils.debounce(func, wait);
    }, []);
    const throttle = (0, _react.useCallback)((func, limit)=>{
        return _canvasUtils.CanvasPerformanceUtils.throttle(func, limit);
    }, []);
    const isCanvasSizeSafe = (0, _react.useCallback)((width, height)=>{
        return _canvasUtils.CanvasPerformanceUtils.isCanvasSizeSafe(width, height);
    }, []);
    return {
        measureOperation,
        debounce,
        throttle,
        isCanvasSizeSafe
    };
}
function useCanvasImageLoader(canvas) {
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { utils } = (0, _CanvasProvider.useCanvas)();
    const operationsRef = (0, _react.useRef)((0, _canvasUtils.createAdvancedCanvasOperations)(canvas));
    const loadImage = (0, _react.useCallback)(async (url)=>{
        setIsLoading(true);
        setError(null);
        try {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            await new Promise((resolve, reject)=>{
                img.onload = ()=>resolve();
                img.onerror = ()=>reject(new Error('Failed to load image'));
                img.src = url;
            });
            setIsLoading(false);
            return img;
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Unknown error loading image';
            setError(errorMessage);
            setIsLoading(false);
            throw new Error(errorMessage);
        }
    }, []);
    const drawImage = (0, _react.useCallback)((image, x = 0, y = 0, width, height, blendMode = _canvasUtils.BlendMode.Normal, opacity = 1)=>{
        operationsRef.current.drawImageWithBlendMode(image, x, y, width, height, blendMode, opacity);
    }, []);
    const loadAndDrawImage = (0, _react.useCallback)(async (url, x = 0, y = 0, width, height, blendMode = _canvasUtils.BlendMode.Normal, opacity = 1)=>{
        const image = await loadImage(url);
        drawImage(image, x, y, width, height, blendMode, opacity);
    }, [
        loadImage,
        drawImage
    ]);
    return {
        loadImage,
        drawImage,
        loadAndDrawImage,
        isLoading,
        error
    };
}
function useCanvasResize(canvas, maintainContent = true) {
    const [dimensions, setDimensions] = (0, _react.useState)(canvas.dimensions);
    const { utils } = (0, _CanvasProvider.useCanvas)();
    const resize = (0, _react.useCallback)((newWidth, newHeight)=>{
        if (maintainContent) {
            utils.resizeCanvas(canvas.canvas, newWidth, newHeight);
        } else {
            canvas.canvas.width = newWidth;
            canvas.canvas.height = newHeight;
            canvas.canvas.style.width = `${newWidth}px`;
            canvas.canvas.style.height = `${newHeight}px`;
        }
        canvas.dimensions = {
            width: newWidth,
            height: newHeight
        };
        setDimensions({
            width: newWidth,
            height: newHeight
        });
    }, [
        canvas,
        maintainContent,
        utils
    ]);
    const autoResize = (0, _react.useCallback)((container)=>{
        const resizeObserver = new ResizeObserver((entries)=>{
            const entry = entries[0];
            if (entry) {
                const { width, height } = entry.contentRect;
                resize(width, height);
            }
        });
        resizeObserver.observe(container);
        return ()=>{
            resizeObserver.disconnect();
        };
    }, [
        resize
    ]);
    return {
        resize,
        autoResize,
        dimensions
    };
}

//# sourceMappingURL=data:application/json;base64,