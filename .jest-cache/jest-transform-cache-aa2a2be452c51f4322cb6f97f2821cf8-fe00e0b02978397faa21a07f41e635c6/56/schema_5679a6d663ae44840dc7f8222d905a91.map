{"version":3,"names":["cov_vcochls2l","actualCoverage","s","TryonSchema","base64Regex","_zod","z","object","modelImage","string","regex","min","apparelImages","array"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/schema.ts"],"sourcesContent":["import { z } from 'zod';\n\n/**\n * Base64 regex pattern for validating image data\n * Matches both data URLs (data:image/...;base64,...) and pure base64 strings\n * with optional padding\n */\nconst base64Regex = /^(?:data:image\\/[a-zA-Z]+;base64,)?(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\n\n/**\n * Zod schema for validating try-on request payload\n * \n * Validates that:\n * - modelImage is a valid base64 string (data URL or pure base64)\n * - apparelImages is an array of valid base64 strings (data URL or pure base64)\n * - At least one apparel image is provided\n */\nexport const TryonSchema = z.object({\n  modelImage: z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Missing model image'),\n  apparelImages: z.array(z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Invalid apparel image')).min(1, 'At least one apparel image required')\n});\n\n/**\n * TypeScript type inferred from the Zod schema\n */\nexport type TryonRequest = z.infer<typeof TryonSchema>; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOM;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;+BAUO;;;;;;WAAAC,WAAA;;;;;iCAjBK;AAElB;;;;;AAKA,MAAMC,WAAA;AAAA;AAAA,CAAAJ,aAAA,GAAAE,CAAA,OAAc;AAUb,MAAMC,WAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,OAAcG,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EAClCC,UAAA,EAAYH,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,KAAK,CAACN,WAAA,EAAa,6BAA6BO,GAAG,CAAC,GAAG;EAC9EC,aAAA,EAAeP,IAAA,CAAAC,CAAC,CAACO,KAAK,CAACR,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,KAAK,CAACN,WAAA,EAAa,6BAA6BO,GAAG,CAAC,GAAG,0BAA0BA,GAAG,CAAC,GAAG;AAC5H","ignoreList":[]}