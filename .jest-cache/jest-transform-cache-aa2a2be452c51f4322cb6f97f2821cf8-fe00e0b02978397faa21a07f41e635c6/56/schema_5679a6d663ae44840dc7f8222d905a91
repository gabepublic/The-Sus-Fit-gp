a8ac1b4425316d309ddcd545a165e2eb
"use strict";

/* istanbul ignore next */
function cov_vcochls2l() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/schema.ts";
  var hash = "bda018bc3b2fd7afb76400092cde0dd45a503b10";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/schema.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 13
        },
        end: {
          line: 11,
          column: 27
        }
      },
      "4": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 124
        }
      },
      "5": {
        start: {
          line: 17,
          column: 20
        },
        end: {
          line: 20,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/app/api/tryon/schema.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n/**\n * Base64 regex pattern for validating image data\n * Matches both data URLs (data:image/...;base64,...) and pure base64 strings\n * with optional padding\n */\nconst base64Regex = /^(?:data:image\\/[a-zA-Z]+;base64,)?(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\n\n/**\n * Zod schema for validating try-on request payload\n * \n * Validates that:\n * - modelImage is a valid base64 string (data URL or pure base64)\n * - apparelImages is an array of valid base64 strings (data URL or pure base64)\n * - At least one apparel image is provided\n */\nexport const TryonSchema = z.object({\n  modelImage: z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Missing model image'),\n  apparelImages: z.array(z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Invalid apparel image')).min(1, 'At least one apparel image required')\n});\n\n/**\n * TypeScript type inferred from the Zod schema\n */\nexport type TryonRequest = z.infer<typeof TryonSchema>; "],
      names: ["TryonSchema", "base64Regex", "z", "object", "modelImage", "string", "regex", "min", "apparelImages", "array"],
      mappings: ";;;;+BAiBaA;;;eAAAA;;;qBAjBK;AAElB;;;;CAIC,GACD,MAAMC,cAAc;AAUb,MAAMD,cAAcE,MAAC,CAACC,MAAM,CAAC;IAClCC,YAAYF,MAAC,CAACG,MAAM,GAAGC,KAAK,CAACL,aAAa,6BAA6BM,GAAG,CAAC,GAAG;IAC9EC,eAAeN,MAAC,CAACO,KAAK,CAACP,MAAC,CAACG,MAAM,GAAGC,KAAK,CAACL,aAAa,6BAA6BM,GAAG,CAAC,GAAG,0BAA0BA,GAAG,CAAC,GAAG;AAC5H"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bda018bc3b2fd7afb76400092cde0dd45a503b10"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vcochls2l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vcochls2l();
cov_vcochls2l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_vcochls2l().s[1]++;
Object.defineProperty(exports, "TryonSchema", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_vcochls2l().f[0]++;
    cov_vcochls2l().s[2]++;
    return TryonSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_vcochls2l().s[3]++, require("zod"));
/**
 * Base64 regex pattern for validating image data
 * Matches both data URLs (data:image/...;base64,...) and pure base64 strings
 * with optional padding
 */
const base64Regex =
/* istanbul ignore next */
(cov_vcochls2l().s[4]++, /^(?:data:image\/[a-zA-Z]+;base64,)?(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/);
const TryonSchema =
/* istanbul ignore next */
(cov_vcochls2l().s[5]++, _zod.z.object({
  modelImage: _zod.z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Missing model image'),
  apparelImages: _zod.z.array(_zod.z.string().regex(base64Regex, 'Invalid base64 image data').min(1, 'Invalid apparel image')).min(1, 'At least one apparel image required')
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdmNvY2hsczJsIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiVHJ5b25TY2hlbWEiLCJiYXNlNjRSZWdleCIsIl96b2QiLCJ6Iiwib2JqZWN0IiwibW9kZWxJbWFnZSIsInN0cmluZyIsInJlZ2V4IiwibWluIiwiYXBwYXJlbEltYWdlcyIsImFycmF5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3dpbGxzdHJlZXRlci9XZWJzdG9ybVByb2plY3RzL3ZpYmUtY29kaW5nL3Rob3NlLXBlb3BsZS9UaGUtU3VzLUZpdC1ncC9zcmMvYXBwL2FwaS90cnlvbi9zY2hlbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8qKlxuICogQmFzZTY0IHJlZ2V4IHBhdHRlcm4gZm9yIHZhbGlkYXRpbmcgaW1hZ2UgZGF0YVxuICogTWF0Y2hlcyBib3RoIGRhdGEgVVJMcyAoZGF0YTppbWFnZS8uLi47YmFzZTY0LC4uLikgYW5kIHB1cmUgYmFzZTY0IHN0cmluZ3NcbiAqIHdpdGggb3B0aW9uYWwgcGFkZGluZ1xuICovXG5jb25zdCBiYXNlNjRSZWdleCA9IC9eKD86ZGF0YTppbWFnZVxcL1thLXpBLVpdKztiYXNlNjQsKT8oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvO1xuXG4vKipcbiAqIFpvZCBzY2hlbWEgZm9yIHZhbGlkYXRpbmcgdHJ5LW9uIHJlcXVlc3QgcGF5bG9hZFxuICogXG4gKiBWYWxpZGF0ZXMgdGhhdDpcbiAqIC0gbW9kZWxJbWFnZSBpcyBhIHZhbGlkIGJhc2U2NCBzdHJpbmcgKGRhdGEgVVJMIG9yIHB1cmUgYmFzZTY0KVxuICogLSBhcHBhcmVsSW1hZ2VzIGlzIGFuIGFycmF5IG9mIHZhbGlkIGJhc2U2NCBzdHJpbmdzIChkYXRhIFVSTCBvciBwdXJlIGJhc2U2NClcbiAqIC0gQXQgbGVhc3Qgb25lIGFwcGFyZWwgaW1hZ2UgaXMgcHJvdmlkZWRcbiAqL1xuZXhwb3J0IGNvbnN0IFRyeW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICBtb2RlbEltYWdlOiB6LnN0cmluZygpLnJlZ2V4KGJhc2U2NFJlZ2V4LCAnSW52YWxpZCBiYXNlNjQgaW1hZ2UgZGF0YScpLm1pbigxLCAnTWlzc2luZyBtb2RlbCBpbWFnZScpLFxuICBhcHBhcmVsSW1hZ2VzOiB6LmFycmF5KHouc3RyaW5nKCkucmVnZXgoYmFzZTY0UmVnZXgsICdJbnZhbGlkIGJhc2U2NCBpbWFnZSBkYXRhJykubWluKDEsICdJbnZhbGlkIGFwcGFyZWwgaW1hZ2UnKSkubWluKDEsICdBdCBsZWFzdCBvbmUgYXBwYXJlbCBpbWFnZSByZXF1aXJlZCcpXG59KTtcblxuLyoqXG4gKiBUeXBlU2NyaXB0IHR5cGUgaW5mZXJyZWQgZnJvbSB0aGUgWm9kIHNjaGVtYVxuICovXG5leHBvcnQgdHlwZSBUcnlvblJlcXVlc3QgPSB6LmluZmVyPHR5cGVvZiBUcnlvblNjaGVtYT47ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU9NO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFBQUEsYUFBQSxHQUFBRSxDQUFBOzs7Ozs7K0JBVU87Ozs7OztXQUFBQyxXQUFBOzs7OztpQ0FqQks7QUFFbEI7Ozs7O0FBS0EsTUFBTUMsV0FBQTtBQUFBO0FBQUEsQ0FBQUosYUFBQSxHQUFBRSxDQUFBLE9BQWM7QUFVYixNQUFNQyxXQUFBO0FBQUE7QUFBQSxDQUFBSCxhQUFBLEdBQUFFLENBQUEsT0FBY0csSUFBQSxDQUFBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQztFQUNsQ0MsVUFBQSxFQUFZSCxJQUFBLENBQUFDLENBQUMsQ0FBQ0csTUFBTSxHQUFHQyxLQUFLLENBQUNOLFdBQUEsRUFBYSw2QkFBNkJPLEdBQUcsQ0FBQyxHQUFHO0VBQzlFQyxhQUFBLEVBQWVQLElBQUEsQ0FBQUMsQ0FBQyxDQUFDTyxLQUFLLENBQUNSLElBQUEsQ0FBQUMsQ0FBQyxDQUFDRyxNQUFNLEdBQUdDLEtBQUssQ0FBQ04sV0FBQSxFQUFhLDZCQUE2Qk8sR0FBRyxDQUFDLEdBQUcsMEJBQTBCQSxHQUFHLENBQUMsR0FBRztBQUM1SCIsImlnbm9yZUxpc3QiOltdfQ==