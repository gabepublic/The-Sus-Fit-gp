6b6bea725e26dd3b73b8703268ecc9ea
// History Integration Utilities
// Utilities for integrating try-on mutations with history tracking
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createHistoryEntryFromMutation: function() {
        return createHistoryEntryFromMutation;
    },
    createHistoryIntegratedCallbacks: function() {
        return createHistoryIntegratedCallbacks;
    },
    createShareableHistoryEntry: function() {
        return createShareableHistoryEntry;
    },
    useHistoryIntegratedMutationConfig: function() {
        return useHistoryIntegratedMutationConfig;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _tryonHistoryService = require("../services/tryonHistoryService");
const _useTryonHistory = require("../hooks/useTryonHistory");
/**
 * Default configuration for history integration
 */ const DEFAULT_HISTORY_CONFIG = {
    historyService: _tryonHistoryService.defaultHistoryService,
    autoSave: true,
    trackErrors: true,
    defaultTags: [],
    transformHistoryEntry: ()=>({})
};
function createHistoryIntegratedCallbacks(config = {}, userConfig) {
    const historyConfig = {
        ...DEFAULT_HISTORY_CONFIG,
        ...config
    };
    const onSuccess = async (data, variables, context)=>{
        // Auto-save to history if enabled
        if (historyConfig.autoSave) {
            try {
                // Calculate processing time
                const processingTime = context.startTime ? Date.now() - context.startTime : undefined;
                // Create base history entry options
                const baseHistoryEntry = {
                    generatedImage: data.img_generated,
                    modelImage: variables.modelImage,
                    apparelImages: variables.apparelImages,
                    processingTime,
                    metadata: {
                        modelVersion: data.metadata?.modelVersion,
                        appliedQuality: data.metadata?.appliedQuality,
                        processingConfig: {
                            imageProcessing: variables.options?.imageProcessing,
                            requestOptions: {
                                timeout: variables.options?.timeout,
                                quality: variables.options?.quality
                            }
                        },
                        imageProcessingResults: context.imageProcessingResults
                    },
                    tags: [
                        ...historyConfig.defaultTags
                    ],
                    isFavorite: false
                };
                // Apply custom transformation if provided
                const customizations = historyConfig.transformHistoryEntry(data, variables, context);
                const finalHistoryEntry = {
                    ...baseHistoryEntry,
                    ...customizations
                };
                // Save to history
                await historyConfig.historyService.addEntry(finalHistoryEntry);
                console.log('Successfully saved try-on result to history');
            } catch (error) {
                console.error('Failed to save try-on result to history:', error);
            // Don't throw - history saving shouldn't break the main flow
            }
        }
        // Call user-provided onSuccess callback
        if (userConfig?.onSuccess) {
            userConfig.onSuccess(data, variables, context);
        }
    };
    const onError = (error, variables, context)=>{
        // Track errors in history metadata if enabled
        if (historyConfig.trackErrors && context.previousError) {
            // This could be enhanced to create error-only history entries or update metadata
            console.log('Error tracked for history integration:', {
                error: error?.error || (error instanceof Error ? error.message : String(error)),
                timestamp: new Date().toISOString(),
                retryAttempt: context.retryCount
            });
        }
        // Call user-provided onError callback
        if (userConfig?.onError) {
            userConfig.onError(error, variables, context);
        }
    };
    const onSettled = (data, error, variables, context)=>{
        // Additional settled handling could go here
        // For example, updating analytics or logging
        // Call user-provided onSettled callback
        if (userConfig?.onSettled) {
            userConfig.onSettled(data, error, variables, context);
        }
    };
    return {
        onSuccess,
        onError,
        onSettled
    };
}
function useHistoryIntegratedMutationConfig(historyConfig = {}, userConfig = {}) {
    const queryClient = (0, _reactquery.useQueryClient)();
    // Create history-integrated callbacks
    const historyCallbacks = createHistoryIntegratedCallbacks(historyConfig, userConfig);
    // Enhanced onSuccess that also invalidates history queries
    const enhancedOnSuccess = (0, _react.useCallback)((data, variables, context)=>{
        // Invalidate history queries to ensure fresh data
        queryClient.invalidateQueries({
            queryKey: _useTryonHistory.HISTORY_QUERY_KEYS.all,
            exact: false
        });
        // Call the history-integrated onSuccess
        if (historyCallbacks.onSuccess) {
            historyCallbacks.onSuccess(data, variables, context);
        }
    }, [
        queryClient,
        historyCallbacks
    ]);
    return {
        ...userConfig,
        onSuccess: enhancedOnSuccess,
        onError: historyCallbacks.onError,
        onSettled: historyCallbacks.onSettled
    };
}
async function createHistoryEntryFromMutation(data, variables, context, options = {}) {
    const historyService = options.historyService || _tryonHistoryService.defaultHistoryService;
    const processingTime = context.startTime ? Date.now() - context.startTime : undefined;
    const historyEntry = {
        generatedImage: data.img_generated,
        modelImage: variables.modelImage,
        apparelImages: variables.apparelImages,
        processingTime,
        metadata: {
            modelVersion: data.metadata?.modelVersion,
            appliedQuality: data.metadata?.appliedQuality,
            processingConfig: {
                imageProcessing: variables.options?.imageProcessing,
                requestOptions: {
                    timeout: variables.options?.timeout,
                    quality: variables.options?.quality
                }
            },
            imageProcessingResults: context.imageProcessingResults
        },
        tags: options.additionalTags || [],
        notes: options.notes,
        isFavorite: options.isFavorite || false
    };
    await historyService.addEntry(historyEntry);
}
function createShareableHistoryEntry(entry) {
    return {
        id: entry.id,
        timestamp: entry.timestamp,
        generatedImage: entry.generatedImage,
        processingTime: entry.processingTime,
        tags: entry.tags,
        isFavorite: entry.isFavorite,
        notes: entry.notes,
        // Don't include original images for privacy in sharing
        metadata: {
            modelVersion: entry.metadata?.modelVersion,
            appliedQuality: entry.metadata?.appliedQuality,
            processingTime: entry.processingTime
        }
    };
}

//# sourceMappingURL=data:application/json;base64,