03ff3447124f1cf15fcceccab4228bbe
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ToastProvider = require("../../src/components/ToastProvider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Test component that uses the toast
const TestComponent = ()=>{
    const { showToast } = (0, _ToastProvider.useToast)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>showToast('Test message', 'success'),
                children: "Show Success Toast"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>showToast('Error message', 'error'),
                children: "Show Error Toast"
            })
        ]
    });
};
// Wrapper component for testing
const TestWrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_ToastProvider.ToastProvider, {
        children: children
    });
describe('ToastProvider', ()=>{
    beforeEach(()=>{
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.runOnlyPendingTimers();
        jest.useRealTimers();
    });
    it('renders without crashing', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react1.screen.getByText('Show Success Toast')).toBeInTheDocument();
        expect(_react1.screen.getByText('Show Error Toast')).toBeInTheDocument();
    });
    it('shows toast when showToast is called', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const successButton = _react1.screen.getByText('Show Success Toast');
        (0, _react1.act)(()=>{
            successButton.click();
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Test message')).toBeInTheDocument();
        });
    });
    it('shows error toast with correct styling', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const errorButton = _react1.screen.getByText('Show Error Toast');
        (0, _react1.act)(()=>{
            errorButton.click();
        });
        await (0, _react1.waitFor)(()=>{
            const toast = _react1.screen.getByText('Error message');
            expect(toast).toBeInTheDocument();
            // Check if it has error styling (red background)
            expect(toast.closest('[class*="bg-red-500"]')).toBeInTheDocument();
        });
    });
    it('shows success toast with correct styling', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const successButton = _react1.screen.getByText('Show Success Toast');
        (0, _react1.act)(()=>{
            successButton.click();
        });
        await (0, _react1.waitFor)(()=>{
            const toast = _react1.screen.getByText('Test message');
            expect(toast).toBeInTheDocument();
            // Check if it has success styling (green background)
            expect(toast.closest('[class*="bg-green-500"]')).toBeInTheDocument();
        });
    });
    it('auto-dismisses toast after 5 seconds', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const successButton = _react1.screen.getByText('Show Success Toast');
        (0, _react1.act)(()=>{
            successButton.click();
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Test message')).toBeInTheDocument();
        });
        // Fast-forward time by 5 seconds
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(5000);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText('Test message')).not.toBeInTheDocument();
        });
    });
    it('throws error when useToast is used outside provider', ()=>{
        // Suppress console.error for this test
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(()=>{});
        expect(()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        }).toThrow('useToast must be used within a ToastProvider');
        consoleSpy.mockRestore();
    });
});

//# sourceMappingURL=data:application/json;base64,