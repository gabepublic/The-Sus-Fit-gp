07b1b888391dc6782dae3264532fa607
// Sticker Placement System for Canvas
// Comprehensive sticker management with positioning, scaling, rotation, and layering
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_STICKER_CONFIG: function() {
        return DEFAULT_STICKER_CONFIG;
    },
    StickerAnchor: function() {
        return StickerAnchor;
    },
    StickerManager: function() {
        return StickerManager;
    },
    createStickerManager: function() {
        return createStickerManager;
    }
});
const _canvasUtils = require("./canvasUtils");
var StickerAnchor = /*#__PURE__*/ function(StickerAnchor) {
    StickerAnchor["TopLeft"] = "top-left";
    StickerAnchor["TopCenter"] = "top-center";
    StickerAnchor["TopRight"] = "top-right";
    StickerAnchor["MiddleLeft"] = "middle-left";
    StickerAnchor["MiddleCenter"] = "middle-center";
    StickerAnchor["MiddleRight"] = "middle-right";
    StickerAnchor["BottomLeft"] = "bottom-left";
    StickerAnchor["BottomCenter"] = "bottom-center";
    StickerAnchor["BottomRight"] = "bottom-right";
    return StickerAnchor;
}({});
const DEFAULT_STICKER_CONFIG = {
    transform: {
        x: 0,
        y: 0,
        scale: 1,
        rotation: 0,
        flipX: false,
        flipY: false
    },
    visual: {
        opacity: 1,
        blendMode: _canvasUtils.BlendMode.Normal
    },
    anchor: "middle-center",
    zIndex: 0,
    locked: false,
    visible: true,
    maintainAspectRatio: true
};
class StickerManager {
    constructor(managedCanvas){
        this.stickers = new Map();
        this.selectedStickerId = null;
        this.gridConfig = {
            enabled: false,
            size: 20,
            showGrid: false,
            gridColor: 'rgba(0, 0, 0, 0.1)',
            snapThreshold: 10
        };
        this.canvas = managedCanvas.canvas;
        this.ctx = managedCanvas.context;
    }
    /**
   * Calculate sticker bounds
   */ calculateBounds(sticker) {
        const { transform, originalSize, anchor } = sticker;
        const { x, y, scale, rotation } = transform;
        const width = originalSize.width * scale;
        const height = originalSize.height * scale;
        // Calculate anchor offset
        let anchorOffsetX = 0;
        let anchorOffsetY = 0;
        switch(anchor){
            case "top-left":
                anchorOffsetX = 0;
                anchorOffsetY = 0;
                break;
            case "top-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = 0;
                break;
            case "top-right":
                anchorOffsetX = -width;
                anchorOffsetY = 0;
                break;
            case "middle-left":
                anchorOffsetX = 0;
                anchorOffsetY = -height / 2;
                break;
            case "middle-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = -height / 2;
                break;
            case "middle-right":
                anchorOffsetX = -width;
                anchorOffsetY = -height / 2;
                break;
            case "bottom-left":
                anchorOffsetX = 0;
                anchorOffsetY = -height;
                break;
            case "bottom-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = -height;
                break;
            case "bottom-right":
                anchorOffsetX = -width;
                anchorOffsetY = -height;
                break;
        }
        const centerX = x;
        const centerY = y;
        // Calculate corner points (before rotation)
        const corners = [
            {
                x: anchorOffsetX,
                y: anchorOffsetY
            },
            {
                x: anchorOffsetX + width,
                y: anchorOffsetY
            },
            {
                x: anchorOffsetX + width,
                y: anchorOffsetY + height
            },
            {
                x: anchorOffsetX,
                y: anchorOffsetY + height
            } // bottom-left
        ];
        // Apply rotation to corners
        const cos = Math.cos(rotation);
        const sin = Math.sin(rotation);
        const rotatedCorners = corners.map((corner)=>({
                x: centerX + (corner.x * cos - corner.y * sin),
                y: centerY + (corner.x * sin + corner.y * cos)
            }));
        // Calculate bounding rectangle
        const minX = Math.min(...rotatedCorners.map((c)=>c.x));
        const maxX = Math.max(...rotatedCorners.map((c)=>c.x));
        const minY = Math.min(...rotatedCorners.map((c)=>c.y));
        const maxY = Math.max(...rotatedCorners.map((c)=>c.y));
        return {
            rect: {
                x: minX,
                y: minY,
                width: maxX - minX,
                height: maxY - minY
            },
            corners: rotatedCorners,
            center: {
                x: centerX,
                y: centerY
            }
        };
    }
    /**
   * Snap position to grid
   */ snapToGrid(x, y) {
        if (!this.gridConfig.enabled) {
            return {
                x,
                y
            };
        }
        const { size, snapThreshold } = this.gridConfig;
        const snappedX = Math.round(x / size) * size;
        const snappedY = Math.round(y / size) * size;
        const deltaX = Math.abs(x - snappedX);
        const deltaY = Math.abs(y - snappedY);
        return {
            x: deltaX <= snapThreshold ? snappedX : x,
            y: deltaY <= snapThreshold ? snappedY : y
        };
    }
    /**
   * Load image from source
   */ async loadImage(source) {
        if (source instanceof HTMLImageElement) {
            return source;
        }
        if (source instanceof HTMLCanvasElement) {
            const img = new Image();
            img.src = source.toDataURL();
            return new Promise((resolve, reject)=>{
                img.onload = ()=>resolve(img);
                img.onerror = reject;
            });
        }
        // String URL
        const img = new Image();
        img.crossOrigin = 'anonymous';
        return new Promise((resolve, reject)=>{
            img.onload = ()=>resolve(img);
            img.onerror = reject;
            img.src = source;
        });
    }
    /**
   * Add sticker to canvas
   */ async addSticker(config) {
        const id = config.id || `sticker-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        try {
            const image = await this.loadImage(config.imageSource);
            const sticker = {
                ...DEFAULT_STICKER_CONFIG,
                ...config,
                id,
                image,
                interactionState: {
                    selected: false,
                    dragging: false,
                    scaling: false,
                    rotating: false,
                    showHandles: false
                }
            };
            // Calculate initial bounds
            sticker.bounds = this.calculateBounds(sticker);
            this.stickers.set(id, sticker);
            return id;
        } catch (error) {
            throw new Error(`Failed to load sticker image: ${error}`);
        }
    }
    /**
   * Remove sticker
   */ removeSticker(id) {
        const removed = this.stickers.delete(id);
        if (this.selectedStickerId === id) {
            this.selectedStickerId = null;
        }
        return removed;
    }
    /**
   * Update sticker configuration
   */ updateSticker(id, updates) {
        const sticker = this.stickers.get(id);
        if (!sticker) return false;
        Object.assign(sticker, updates);
        // Update metadata timestamp
        if (sticker.metadata) {
            sticker.metadata.updatedAt = new Date();
        }
        // Recalculate bounds
        sticker.bounds = this.calculateBounds(sticker);
        return true;
    }
    /**
   * Get sticker by ID
   */ getSticker(id) {
        return this.stickers.get(id);
    }
    /**
   * Get all stickers sorted by z-index
   */ getAllStickers() {
        return Array.from(this.stickers.values()).sort((a, b)=>a.zIndex - b.zIndex);
    }
    /**
   * Select sticker
   */ selectSticker(id) {
        // Deselect previous sticker
        if (this.selectedStickerId) {
            const prevSticker = this.stickers.get(this.selectedStickerId);
            if (prevSticker) {
                prevSticker.interactionState.selected = false;
                prevSticker.interactionState.showHandles = false;
            }
        }
        this.selectedStickerId = id;
        // Select new sticker
        if (id) {
            const sticker = this.stickers.get(id);
            if (sticker && !sticker.locked) {
                sticker.interactionState.selected = true;
                sticker.interactionState.showHandles = true;
            }
        }
    }
    /**
   * Move sticker to position
   */ moveStickerTo(id, x, y) {
        const sticker = this.stickers.get(id);
        if (!sticker || sticker.locked) return false;
        const snapped = this.snapToGrid(x, y);
        sticker.transform.x = snapped.x;
        sticker.transform.y = snapped.y;
        sticker.bounds = this.calculateBounds(sticker);
        return true;
    }
    /**
   * Scale sticker
   */ scaleSticker(id, scale, maintainAspectRatio) {
        const sticker = this.stickers.get(id);
        if (!sticker || sticker.locked) return false;
        // Apply scale constraints
        if (sticker.scaleConstraints) {
            scale = Math.max(sticker.scaleConstraints.min, Math.min(sticker.scaleConstraints.max, scale));
        }
        sticker.transform.scale = scale;
        sticker.bounds = this.calculateBounds(sticker);
        return true;
    }
    /**
   * Rotate sticker
   */ rotateSticker(id, rotation) {
        const sticker = this.stickers.get(id);
        if (!sticker || sticker.locked) return false;
        // Normalize rotation to 0-2π range
        sticker.transform.rotation = rotation % (2 * Math.PI);
        sticker.bounds = this.calculateBounds(sticker);
        return true;
    }
    /**
   * Flip sticker
   */ flipSticker(id, flipX, flipY) {
        const sticker = this.stickers.get(id);
        if (!sticker || sticker.locked) return false;
        if (flipX !== undefined) sticker.transform.flipX = flipX;
        if (flipY !== undefined) sticker.transform.flipY = flipY;
        sticker.bounds = this.calculateBounds(sticker);
        return true;
    }
    /**
   * Set sticker z-index
   */ setStickerZIndex(id, zIndex) {
        const sticker = this.stickers.get(id);
        if (!sticker) return false;
        sticker.zIndex = zIndex;
        return true;
    }
    /**
   * Bring sticker to front
   */ bringToFront(id) {
        const maxZ = Math.max(0, ...Array.from(this.stickers.values()).map((s)=>s.zIndex));
        return this.setStickerZIndex(id, maxZ + 1);
    }
    /**
   * Send sticker to back
   */ sendToBack(id) {
        const minZ = Math.min(0, ...Array.from(this.stickers.values()).map((s)=>s.zIndex));
        return this.setStickerZIndex(id, minZ - 1);
    }
    /**
   * Check collision between stickers
   */ checkCollisions(excludeId) {
        const stickers = this.getAllStickers().filter((s)=>s.id !== excludeId && s.visible);
        const collidingStickers = [];
        for(let i = 0; i < stickers.length; i++){
            for(let j = i + 1; j < stickers.length; j++){
                const a = stickers[i];
                const b = stickers[j];
                if (!a.bounds || !b.bounds) continue;
                // Simple bounding box collision detection
                const aRect = a.bounds.rect;
                const bRect = b.bounds.rect;
                if (aRect.x < bRect.x + bRect.width && aRect.x + aRect.width > bRect.x && aRect.y < bRect.y + bRect.height && aRect.y + aRect.height > bRect.y) {
                    if (!collidingStickers.includes(a.id)) collidingStickers.push(a.id);
                    if (!collidingStickers.includes(b.id)) collidingStickers.push(b.id);
                }
            }
        }
        return {
            hasCollision: collidingStickers.length > 0,
            collidingStickers
        };
    }
    /**
   * Find sticker at position
   */ getStickerAtPosition(x, y) {
        const stickers = this.getAllStickers().filter((s)=>s.visible).reverse(); // Check from top to bottom
        for (const sticker of stickers){
            if (!sticker.bounds) continue;
            const { rect } = sticker.bounds;
            if (x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height) {
                return sticker.id;
            }
        }
        return null;
    }
    /**
   * Render grid
   */ renderGrid() {
        if (!this.gridConfig.enabled || !this.gridConfig.showGrid) return;
        this.ctx.save();
        this.ctx.strokeStyle = this.gridConfig.gridColor;
        this.ctx.lineWidth = 0.5;
        this.ctx.beginPath();
        const { size } = this.gridConfig;
        const { width, height } = this.canvas;
        // Vertical lines
        for(let x = 0; x <= width; x += size){
            this.ctx.moveTo(x, 0);
            this.ctx.lineTo(x, height);
        }
        // Horizontal lines
        for(let y = 0; y <= height; y += size){
            this.ctx.moveTo(0, y);
            this.ctx.lineTo(width, y);
        }
        this.ctx.stroke();
        this.ctx.restore();
    }
    /**
   * Render sticker with all transforms
   */ renderSticker(sticker) {
        if (!sticker.visible || !sticker.image) return;
        const { transform, visual, originalSize } = sticker;
        const { x, y, scale, rotation, flipX, flipY } = transform;
        this.ctx.save();
        // Apply global alpha and blend mode
        this.ctx.globalAlpha = visual.opacity;
        this.ctx.globalCompositeOperation = visual.blendMode;
        // Apply shadow if configured
        if (visual.shadow) {
            this.ctx.shadowColor = visual.shadow.color;
            this.ctx.shadowOffsetX = visual.shadow.offsetX;
            this.ctx.shadowOffsetY = visual.shadow.offsetY;
            this.ctx.shadowBlur = visual.shadow.blur;
        }
        // Transform context
        this.ctx.translate(x, y);
        this.ctx.rotate(rotation);
        this.ctx.scale(flipX ? -scale : scale, flipY ? -scale : scale);
        const width = originalSize.width;
        const height = originalSize.height;
        // Apply anchor offset
        let anchorOffsetX = 0;
        let anchorOffsetY = 0;
        switch(sticker.anchor){
            case "top-left":
                anchorOffsetX = 0;
                anchorOffsetY = 0;
                break;
            case "top-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = 0;
                break;
            case "top-right":
                anchorOffsetX = -width;
                anchorOffsetY = 0;
                break;
            case "middle-left":
                anchorOffsetX = 0;
                anchorOffsetY = -height / 2;
                break;
            case "middle-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = -height / 2;
                break;
            case "middle-right":
                anchorOffsetX = -width;
                anchorOffsetY = -height / 2;
                break;
            case "bottom-left":
                anchorOffsetX = 0;
                anchorOffsetY = -height;
                break;
            case "bottom-center":
                anchorOffsetX = -width / 2;
                anchorOffsetY = -height;
                break;
            case "bottom-right":
                anchorOffsetX = -width;
                anchorOffsetY = -height;
                break;
        }
        // Draw the sticker
        this.ctx.drawImage(sticker.image, anchorOffsetX, anchorOffsetY, width, height);
        // Apply tint overlay
        if (visual.tint) {
            this.ctx.globalCompositeOperation = 'source-atop';
            this.ctx.fillStyle = visual.tint;
            this.ctx.fillRect(anchorOffsetX, anchorOffsetY, width, height);
        }
        this.ctx.restore();
        // Draw border if configured
        if (visual.border && sticker.bounds) {
            this.ctx.save();
            this.ctx.strokeStyle = visual.border.color;
            this.ctx.lineWidth = visual.border.width;
            if (visual.border.style === 'dashed') {
                this.ctx.setLineDash([
                    5,
                    5
                ]);
            } else if (visual.border.style === 'dotted') {
                this.ctx.setLineDash([
                    2,
                    2
                ]);
            }
            const { corners } = sticker.bounds;
            this.ctx.beginPath();
            this.ctx.moveTo(corners[0].x, corners[0].y);
            corners.forEach((corner)=>this.ctx.lineTo(corner.x, corner.y));
            this.ctx.closePath();
            this.ctx.stroke();
            this.ctx.restore();
        }
    }
    /**
   * Render selection handles
   */ renderSelectionHandles(sticker) {
        if (!sticker.interactionState.showHandles || !sticker.bounds) return;
        const { corners, center } = sticker.bounds;
        const handleSize = 8;
        const handleColor = '#4A90E2';
        const handleBorderColor = '#FFFFFF';
        this.ctx.save();
        // Draw corner handles
        corners.forEach((corner)=>{
            this.ctx.fillStyle = handleColor;
            this.ctx.strokeStyle = handleBorderColor;
            this.ctx.lineWidth = 2;
            this.ctx.fillRect(corner.x - handleSize / 2, corner.y - handleSize / 2, handleSize, handleSize);
            this.ctx.strokeRect(corner.x - handleSize / 2, corner.y - handleSize / 2, handleSize, handleSize);
        });
        // Draw rotation handle
        const rotationHandleY = corners[0].y - 30;
        this.ctx.beginPath();
        this.ctx.arc(center.x, rotationHandleY, handleSize / 2, 0, 2 * Math.PI);
        this.ctx.fillStyle = '#FF6B6B';
        this.ctx.fill();
        this.ctx.strokeStyle = handleBorderColor;
        this.ctx.stroke();
        // Draw line to rotation handle
        this.ctx.beginPath();
        this.ctx.moveTo(center.x, corners[0].y);
        this.ctx.lineTo(center.x, rotationHandleY);
        this.ctx.strokeStyle = '#CCCCCC';
        this.ctx.lineWidth = 1;
        this.ctx.stroke();
        this.ctx.restore();
    }
    /**
   * Render all stickers
   */ renderAllStickers() {
        // Clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        // Render grid
        this.renderGrid();
        // Render stickers in z-index order
        const sortedStickers = this.getAllStickers();
        sortedStickers.forEach((sticker)=>{
            this.renderSticker(sticker);
            // Render selection handles for selected sticker
            if (sticker.interactionState.selected) {
                this.renderSelectionHandles(sticker);
            }
        });
    }
    /**
   * Configure grid settings
   */ setGridConfig(config) {
        Object.assign(this.gridConfig, config);
    }
    /**
   * Get grid configuration
   */ getGridConfig() {
        return {
            ...this.gridConfig
        };
    }
    /**
   * Export stickers data
   */ exportStickers() {
        return this.getAllStickers().map((sticker)=>{
            const { image, bounds, interactionState, ...config } = sticker;
            return config;
        });
    }
    /**
   * Import stickers data
   */ async importStickers(stickers) {
        const importedIds = [];
        for (const stickerConfig of stickers){
            try {
                const id = await this.addSticker(stickerConfig);
                importedIds.push(id);
            } catch (error) {
                console.error(`Failed to import sticker ${stickerConfig.id}:`, error);
            }
        }
        return importedIds;
    }
    /**
   * Clear all stickers
   */ clearAllStickers() {
        this.stickers.clear();
        this.selectedStickerId = null;
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}
function createStickerManager(managedCanvas) {
    return new StickerManager(managedCanvas);
}

//# sourceMappingURL=data:application/json;base64,