{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/lib/openaiClient.test.ts"],"sourcesContent":["/**\n * Unit tests for OpenAI Client Wrapper\n * \n * Tests the generateTryOn function with mocked OpenAI SDK to ensure:\n * - Happy path scenarios work correctly\n * - Error scenarios are properly handled\n * - Correct parameters are passed to the SDK\n * - Full branch and line coverage is achieved\n */\n\nimport { ZodError } from 'zod';\n\n// Mock getEnv first\njest.mock('../../src/lib/getEnv', () => ({\n  getEnv: jest.fn(() => ({\n    key: 'test-api-key',\n    model: 'dall-e-2'\n  }))\n}));\n\n// Mock OpenAI SDK\njest.mock('openai', () => {\n  const mockImagesEdit = jest.fn();\n  return jest.fn().mockImplementation(() => ({\n    images: {\n      edit: mockImagesEdit\n    }\n  }));\n});\n\n// Import after mocks are set up\nimport { generateTryOn } from '../../src/lib/openaiClient';\n\ndescribe('openaiClient', () => {\n  const validBase64Image = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';\n  const validDataUrlImage = `data:image/png;base64,${validBase64Image}`;\n  \n  // Get the mock function from the mocked module\n  const getMockImagesEdit = () => {\n    const OpenAI = require('openai');\n    const mockInstance = new OpenAI();\n    return mockInstance.images.edit;\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('generateTryOn', () => {\n    describe('Happy Path Scenarios', () => {\n      it('should resolve base64 URL when SDK returns b64_json data', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act\n        const result = await generateTryOn(params);\n\n        // Assert\n        expect(result).toBe('ZmFrZUJhc2U2NA==');\n        expect(mockImagesEdit).toHaveBeenCalledTimes(1);\n      });\n\n      it('should handle data URL format for model image', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validDataUrlImage,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act\n        const result = await generateTryOn(params);\n\n        // Assert\n        expect(result).toBe('ZmFrZUJhc2U2NA==');\n        expect(mockImagesEdit).toHaveBeenCalledWith(\n          expect.objectContaining({\n            model: 'dall-e-2',\n            image: expect.arrayContaining([\n              expect.any(File),\n              expect.any(File)\n            ]),\n            prompt: 'Change the garment of the model in the first image with the garment from the second image.',\n            n: 1,\n            size: '1024x1024',\n            quality: 'low'\n          })\n        );\n      });\n\n      it('should handle data URL format for apparel images', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validDataUrlImage]\n        };\n\n        // Act\n        const result = await generateTryOn(params);\n\n        // Assert\n        expect(result).toBe('ZmFrZUJhc2U2NA==');\n        expect(mockImagesEdit).toHaveBeenCalledWith(\n          expect.objectContaining({\n            image: expect.arrayContaining([\n              expect.any(File),\n              expect.any(File)\n            ])\n          })\n        );\n      });\n\n      it('should use only the first apparel image when multiple are provided', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image, validBase64Image, validBase64Image]\n        };\n\n        // Act\n        const result = await generateTryOn(params);\n\n        // Assert\n        expect(result).toBe('ZmFrZUJhc2U2NA==');\n        expect(mockImagesEdit).toHaveBeenCalledWith(\n          expect.objectContaining({\n            image: expect.arrayContaining([\n              expect.any(File), // model.png\n              expect.any(File)  // apparel.png (only first one)\n            ])\n          })\n        );\n        \n        // Verify only 2 files are passed (model + first apparel)\n        const callArgs = mockImagesEdit.mock.calls[0][0];\n        expect(callArgs.image).toHaveLength(2);\n        expect(callArgs.image[0].name).toBe('model.png');\n        expect(callArgs.image[1].name).toBe('apparel.png');\n      });\n\n      it('should pass correct parameters to OpenAI SDK', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act\n        await generateTryOn(params);\n\n        // Assert\n        expect(mockImagesEdit).toHaveBeenCalledWith({\n          model: 'dall-e-2',\n          image: expect.arrayContaining([\n            expect.any(File),\n            expect.any(File)\n          ]),\n          prompt: 'Change the garment of the model in the first image with the garment from the second image.',\n          n: 1,\n          size: '1024x1024',\n          quality: 'low'\n        });\n      });\n    });\n\n    describe('Error Scenarios', () => {\n      it('should propagate SDK rejection with custom error context', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const sdkError = new Error('OpenAI API error');\n        mockImagesEdit.mockRejectedValueOnce(sdkError);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: OpenAI API error');\n        \n        // Verify the original error is preserved as cause\n        try {\n          await generateTryOn(params);\n        } catch (error) {\n          expect((error as Error & { cause?: unknown }).cause).toBe(sdkError);\n        }\n      });\n\n      it('should handle SDK returning empty data array', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = { data: [] };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: No response data received from OpenAI API');\n      });\n\n      it('should handle SDK returning data without b64_json', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = { data: [{ url: 'https://example.com/image.png' }] };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: No image data received from OpenAI API');\n      });\n\n      it('should handle SDK returning null/undefined data', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = { data: null };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: No response data received from OpenAI API');\n      });\n\n      it('should handle SDK returning data with null b64_json', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = { data: [{ b64_json: null }] };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: No image data received from OpenAI API');\n      });\n\n      it('should handle non-Error objects thrown by SDK', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const nonError = 'String error';\n        mockImagesEdit.mockRejectedValueOnce(nonError);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow('generateTryOn failed: Unknown error occurred');\n      });\n    });\n\n    describe('Input Validation', () => {\n      it('should reject invalid model image format', async () => {\n        // Arrange\n        const params = {\n          modelImage: 'invalid-base64!@#',\n          apparelImages: [validBase64Image]\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow();\n      });\n\n      it('should reject empty apparel images array', async () => {\n        // Arrange\n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: []\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow();\n      });\n\n      it('should reject invalid apparel image format', async () => {\n        // Arrange\n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: ['invalid-base64!@#']\n        };\n\n        // Act & Assert\n        await expect(generateTryOn(params)).rejects.toThrow();\n      });\n    });\n\n    describe('File Object Creation', () => {\n      it('should create File objects with correct names and types', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validBase64Image,\n          apparelImages: [validBase64Image]\n        };\n\n        // Act\n        await generateTryOn(params);\n\n        // Assert\n        const callArgs = mockImagesEdit.mock.calls[0][0];\n        const [modelFile, apparelFile] = callArgs.image;\n        \n        expect(modelFile).toBeInstanceOf(File);\n        expect(apparelFile).toBeInstanceOf(File);\n        expect(modelFile.name).toBe('model.png');\n        expect(apparelFile.name).toBe('apparel.png');\n        expect(modelFile.type).toBe('image/png');\n        expect(apparelFile.type).toBe('image/png');\n      });\n\n      it('should handle base64 strings with and without data URL prefix', async () => {\n        // Arrange\n        const mockImagesEdit = getMockImagesEdit();\n        const mockResponse = {\n          data: [{ b64_json: 'ZmFrZUJhc2U2NA==' }]\n        };\n        mockImagesEdit.mockResolvedValue(mockResponse);\n        \n        const params = {\n          modelImage: validDataUrlImage, // with data URL prefix\n          apparelImages: [validBase64Image] // without data URL prefix\n        };\n\n        // Act\n        await generateTryOn(params);\n\n        // Assert - should work with both formats\n        expect(mockImagesEdit).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n});\n"],"names":["jest","mock","getEnv","fn","key","model","mockImagesEdit","mockImplementation","images","edit","describe","validBase64Image","validDataUrlImage","getMockImagesEdit","OpenAI","require","mockInstance","beforeEach","clearAllMocks","it","mockResponse","data","b64_json","mockResolvedValue","params","modelImage","apparelImages","result","generateTryOn","expect","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","image","arrayContaining","any","File","prompt","n","size","quality","callArgs","calls","toHaveLength","name","sdkError","Error","mockRejectedValueOnce","rejects","toThrow","error","cause","url","nonError","modelFile","apparelFile","toBeInstanceOf","type"],"mappings":"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"}