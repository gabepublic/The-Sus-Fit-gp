bbd97527f2d5495a77e86718d3e6f84f
'use client';
"use strict";

/* istanbul ignore next */
function cov_3vmvqaeo1() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useTryonWorkflow.ts";
  var hash = "e97394d32104053191c92a452d593e1913cdd955";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useTryonWorkflow.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "6": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "7": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 51
        }
      },
      "8": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "9": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "10": {
        start: {
          line: 24,
          column: 34
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "14": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "15": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "16": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "17": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 25
        }
      },
      "18": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "19": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "20": {
        start: {
          line: 53,
          column: 26
        },
        end: {
          line: 53,
          column: 64
        }
      },
      "21": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 69
        }
      },
      "22": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "23": {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 72,
          column: 6
        }
      },
      "24": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 80,
          column: 6
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "26": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "27": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 133,
          column: 6
        }
      },
      "28": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "29": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "30": {
        start: {
          line: 91,
          column: 15
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "31": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "32": {
        start: {
          line: 98,
          column: 15
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "33": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 99,
          column: 80
        }
      },
      "34": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 77
        }
      },
      "35": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "36": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "37": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 46
        }
      },
      "38": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 123,
          column: 16
        }
      },
      "39": {
        start: {
          line: 116,
          column: 26
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "40": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "41": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 54
        }
      },
      "42": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 29
        }
      },
      "43": {
        start: {
          line: 135,
          column: 27
        },
        end: {
          line: 140,
          column: 10
        }
      },
      "44": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 16
        }
      },
      "45": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "46": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 159,
          column: 6
        }
      },
      "47": {
        start: {
          line: 143,
          column: 23
        },
        end: {
          line: 143,
          column: 25
        }
      },
      "48": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "49": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 53
        }
      },
      "50": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "51": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 55
        }
      },
      "52": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 10
        }
      },
      "53": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 167,
          column: 6
        }
      },
      "54": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 43
        }
      },
      "55": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 63
        }
      },
      "56": {
        start: {
          line: 169,
          column: 35
        },
        end: {
          line: 184,
          column: 6
        }
      },
      "57": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "58": {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 171,
          column: 50
        }
      },
      "59": {
        start: {
          line: 172,
          column: 25
        },
        end: {
          line: 172,
          column: 46
        }
      },
      "60": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "61": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 58
        }
      },
      "62": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 68
        }
      },
      "63": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 209,
          column: 6
        }
      },
      "64": {
        start: {
          line: 187,
          column: 55
        },
        end: {
          line: 187,
          column: 82
        }
      },
      "65": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 206,
          column: 11
        }
      },
      "66": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 35
        }
      },
      "67": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 42
        }
      },
      "68": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 203,
          column: 14
        }
      },
      "69": {
        start: {
          line: 192,
          column: 31
        },
        end: {
          line: 192,
          column: 63
        }
      },
      "70": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 51
        }
      },
      "71": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 197,
          column: 17
        }
      },
      "72": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 70
        }
      },
      "73": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 196,
          column: 27
        }
      },
      "74": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "75": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 53
        }
      },
      "76": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 84
        }
      },
      "77": {
        start: {
          line: 201,
          column: 40
        },
        end: {
          line: 201,
          column: 79
        }
      },
      "78": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 41
        }
      },
      "79": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 85
        }
      },
      "80": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 84
        }
      },
      "81": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 31
        }
      },
      "82": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 219,
          column: 6
        }
      },
      "83": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 57
        }
      },
      "84": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 16
        }
      },
      "85": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "86": {
        start: {
          line: 220,
          column: 36
        },
        end: {
          line: 228,
          column: 6
        }
      },
      "87": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 60
        }
      },
      "88": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 225,
          column: 16
        }
      },
      "89": {
        start: {
          line: 222,
          column: 26
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "90": {
        start: {
          line: 229,
          column: 38
        },
        end: {
          line: 259,
          column: 6
        }
      },
      "91": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "92": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 50
        }
      },
      "93": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 235,
          column: 20
        }
      },
      "94": {
        start: {
          line: 232,
          column: 30
        },
        end: {
          line: 235,
          column: 17
        }
      },
      "95": {
        start: {
          line: 236,
          column: 36
        },
        end: {
          line: 236,
          column: 63
        }
      },
      "96": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 237,
          column: 81
        }
      },
      "97": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 243,
          column: 20
        }
      },
      "98": {
        start: {
          line: 238,
          column: 30
        },
        end: {
          line: 243,
          column: 17
        }
      },
      "99": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 58
        }
      },
      "100": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 45
        }
      },
      "101": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 252,
          column: 20
        }
      },
      "102": {
        start: {
          line: 248,
          column: 30
        },
        end: {
          line: 252,
          column: 17
        }
      },
      "103": {
        start: {
          line: 260,
          column: 39
        },
        end: {
          line: 290,
          column: 6
        }
      },
      "104": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "105": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 51
        }
      },
      "106": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 266,
          column: 20
        }
      },
      "107": {
        start: {
          line: 263,
          column: 30
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "108": {
        start: {
          line: 267,
          column: 36
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "109": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 268,
          column: 84
        }
      },
      "110": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 274,
          column: 20
        }
      },
      "111": {
        start: {
          line: 269,
          column: 30
        },
        end: {
          line: 274,
          column: 17
        }
      },
      "112": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 59
        }
      },
      "113": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 45
        }
      },
      "114": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 283,
          column: 20
        }
      },
      "115": {
        start: {
          line: 279,
          column: 30
        },
        end: {
          line: 283,
          column: 17
        }
      },
      "116": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 376,
          column: 6
        }
      },
      "117": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "118": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "119": {
        start: {
          line: 296,
          column: 31
        },
        end: {
          line: 296,
          column: 46
        }
      },
      "120": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "121": {
        start: {
          line: 298,
          column: 32
        },
        end: {
          line: 298,
          column: 161
        }
      },
      "122": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 301,
          column: 17
        }
      },
      "123": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 50
        }
      },
      "124": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 23
        }
      },
      "125": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 314,
          column: 20
        }
      },
      "126": {
        start: {
          line: 305,
          column: 30
        },
        end: {
          line: 314,
          column: 17
        }
      },
      "127": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 63
        }
      },
      "128": {
        start: {
          line: 317,
          column: 30
        },
        end: {
          line: 317,
          column: 104
        }
      },
      "129": {
        start: {
          line: 317,
          column: 45
        },
        end: {
          line: 317,
          column: 80
        }
      },
      "130": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "131": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 35
        }
      },
      "132": {
        start: {
          line: 321,
          column: 47
        },
        end: {
          line: 324,
          column: 18
        }
      },
      "133": {
        start: {
          line: 322,
          column: 78
        },
        end: {
          line: 322,
          column: 141
        }
      },
      "134": {
        start: {
          line: 323,
          column: 81
        },
        end: {
          line: 323,
          column: 144
        }
      },
      "135": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 63
        }
      },
      "136": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 35
        }
      },
      "137": {
        start: {
          line: 328,
          column: 33
        },
        end: {
          line: 340,
          column: 18
        }
      },
      "138": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 40
        }
      },
      "139": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 35
        }
      },
      "140": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 346,
          column: 17
        }
      },
      "141": {
        start: {
          line: 344,
          column: 38
        },
        end: {
          line: 344,
          column: 59
        }
      },
      "142": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 93
        }
      },
      "143": {
        start: {
          line: 347,
          column: 42
        },
        end: {
          line: 347,
          column: 63
        }
      },
      "144": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 57
        }
      },
      "145": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 36
        }
      },
      "146": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 358,
          column: 24
        }
      },
      "147": {
        start: {
          line: 351,
          column: 34
        },
        end: {
          line: 358,
          column: 21
        }
      },
      "148": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 40
        }
      },
      "149": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 49
        }
      },
      "150": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 42
        }
      },
      "151": {
        start: {
          line: 378,
          column: 28
        },
        end: {
          line: 398,
          column: 6
        }
      },
      "152": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 35
        }
      },
      "153": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 386,
          column: 16
        }
      },
      "154": {
        start: {
          line: 380,
          column: 26
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "155": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 393,
          column: 16
        }
      },
      "156": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 392,
          column: 20
        }
      },
      "157": {
        start: {
          line: 389,
          column: 30
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "158": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 32
        }
      },
      "159": {
        start: {
          line: 400,
          column: 29
        },
        end: {
          line: 413,
          column: 6
        }
      },
      "160": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 37
        }
      },
      "161": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "162": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 47
        }
      },
      "163": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 410,
          column: 16
        }
      },
      "164": {
        start: {
          line: 405,
          column: 26
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "165": {
        start: {
          line: 415,
          column: 26
        },
        end: {
          line: 437,
          column: 6
        }
      },
      "166": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 34
        }
      },
      "167": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "168": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 47
        }
      },
      "169": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "170": {
        start: {
          line: 439,
          column: 26
        },
        end: {
          line: 447,
          column: 6
        }
      },
      "171": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 32
        }
      },
      "172": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 444,
          column: 16
        }
      },
      "173": {
        start: {
          line: 441,
          column: 26
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "174": {
        start: {
          line: 449,
          column: 23
        },
        end: {
          line: 456,
          column: 10
        }
      },
      "175": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 455,
          column: 16
        }
      },
      "176": {
        start: {
          line: 450,
          column: 26
        },
        end: {
          line: 455,
          column: 13
        }
      },
      "177": {
        start: {
          line: 458,
          column: 4
        },
        end: {
          line: 474,
          column: 7
        }
      },
      "178": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "179": {
        start: {
          line: 460,
          column: 26
        },
        end: {
          line: 460,
          column: 79
        }
      },
      "180": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 107
        }
      },
      "181": {
        start: {
          line: 462,
          column: 30
        },
        end: {
          line: 464,
          column: 21
        }
      },
      "182": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "183": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 47
        }
      },
      "184": {
        start: {
          line: 465,
          column: 23
        },
        end: {
          line: 465,
          column: 46
        }
      },
      "185": {
        start: {
          line: 476,
          column: 4
        },
        end: {
          line: 482,
          column: 11
        }
      },
      "186": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 481,
          column: 10
        }
      },
      "187": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "188": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 51
        }
      },
      "189": {
        start: {
          line: 483,
          column: 4
        },
        end: {
          line: 499,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 13,
            column: 20
          }
        },
        loc: {
          start: {
            line: 13,
            column: 30
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 23
          }
        },
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 24,
            column: 35
          }
        },
        loc: {
          start: {
            line: 24,
            column: 58
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "useTryonWorkflow",
        decl: {
          start: {
            line: 47,
            column: 9
          },
          end: {
            line: 47,
            column: 25
          }
        },
        loc: {
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 500,
            column: 1
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 40
          },
          end: {
            line: 74,
            column: 41
          }
        },
        loc: {
          start: {
            line: 74,
            column: 51
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 48
          },
          end: {
            line: 82,
            column: 49
          }
        },
        loc: {
          start: {
            line: 82,
            column: 75
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 82
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 116,
            column: 18
          }
        },
        loc: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 135,
            column: 51
          },
          end: {
            line: 135,
            column: 52
          }
        },
        loc: {
          start: {
            line: 135,
            column: 63
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 135
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 18
          }
        },
        loc: {
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 139,
            column: 13
          }
        },
        line: 136
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 50
          },
          end: {
            line: 142,
            column: 51
          }
        },
        loc: {
          start: {
            line: 142,
            column: 54
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 161,
            column: 48
          },
          end: {
            line: 161,
            column: 49
          }
        },
        loc: {
          start: {
            line: 161,
            column: 52
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 161
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 169,
            column: 59
          },
          end: {
            line: 169,
            column: 60
          }
        },
        loc: {
          start: {
            line: 169,
            column: 87
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 169
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 186,
            column: 48
          },
          end: {
            line: 186,
            column: 49
          }
        },
        loc: {
          start: {
            line: 186,
            column: 66
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 186
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 188,
            column: 27
          },
          end: {
            line: 188,
            column: 28
          }
        },
        loc: {
          start: {
            line: 188,
            column: 46
          },
          end: {
            line: 206,
            column: 9
          }
        },
        line: 188
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 191,
            column: 25
          },
          end: {
            line: 191,
            column: 26
          }
        },
        loc: {
          start: {
            line: 191,
            column: 29
          },
          end: {
            line: 203,
            column: 13
          }
        },
        line: 191
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 204,
            column: 27
          }
        },
        loc: {
          start: {
            line: 204,
            column: 30
          },
          end: {
            line: 204,
            column: 84
          }
        },
        line: 204
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 211,
            column: 57
          },
          end: {
            line: 211,
            column: 58
          }
        },
        loc: {
          start: {
            line: 211,
            column: 65
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 211
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 213,
            column: 17
          },
          end: {
            line: 213,
            column: 18
          }
        },
        loc: {
          start: {
            line: 213,
            column: 26
          },
          end: {
            line: 216,
            column: 13
          }
        },
        line: 213
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 220,
            column: 60
          },
          end: {
            line: 220,
            column: 61
          }
        },
        loc: {
          start: {
            line: 220,
            column: 68
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 220
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 222,
            column: 17
          },
          end: {
            line: 222,
            column: 18
          }
        },
        loc: {
          start: {
            line: 222,
            column: 26
          },
          end: {
            line: 225,
            column: 13
          }
        },
        line: 222
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 229,
            column: 62
          },
          end: {
            line: 229,
            column: 63
          }
        },
        loc: {
          start: {
            line: 229,
            column: 80
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 229
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 232,
            column: 21
          },
          end: {
            line: 232,
            column: 22
          }
        },
        loc: {
          start: {
            line: 232,
            column: 30
          },
          end: {
            line: 235,
            column: 17
          }
        },
        line: 232
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 238,
            column: 21
          },
          end: {
            line: 238,
            column: 22
          }
        },
        loc: {
          start: {
            line: 238,
            column: 30
          },
          end: {
            line: 243,
            column: 17
          }
        },
        line: 238
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 248,
            column: 21
          },
          end: {
            line: 248,
            column: 22
          }
        },
        loc: {
          start: {
            line: 248,
            column: 30
          },
          end: {
            line: 252,
            column: 17
          }
        },
        line: 248
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 260,
            column: 63
          },
          end: {
            line: 260,
            column: 64
          }
        },
        loc: {
          start: {
            line: 260,
            column: 81
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 260
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 263,
            column: 21
          },
          end: {
            line: 263,
            column: 22
          }
        },
        loc: {
          start: {
            line: 263,
            column: 30
          },
          end: {
            line: 266,
            column: 17
          }
        },
        line: 263
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 269,
            column: 21
          },
          end: {
            line: 269,
            column: 22
          }
        },
        loc: {
          start: {
            line: 269,
            column: 30
          },
          end: {
            line: 274,
            column: 17
          }
        },
        line: 269
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 279,
            column: 21
          },
          end: {
            line: 279,
            column: 22
          }
        },
        loc: {
          start: {
            line: 279,
            column: 30
          },
          end: {
            line: 283,
            column: 17
          }
        },
        line: 279
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 292,
            column: 52
          },
          end: {
            line: 292,
            column: 53
          }
        },
        loc: {
          start: {
            line: 292,
            column: 62
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 292
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 305,
            column: 21
          },
          end: {
            line: 305,
            column: 22
          }
        },
        loc: {
          start: {
            line: 305,
            column: 30
          },
          end: {
            line: 314,
            column: 17
          }
        },
        line: 305
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 317,
            column: 41
          },
          end: {
            line: 317,
            column: 42
          }
        },
        loc: {
          start: {
            line: 317,
            column: 45
          },
          end: {
            line: 317,
            column: 80
          }
        },
        line: 317
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 322,
            column: 71
          },
          end: {
            line: 322,
            column: 72
          }
        },
        loc: {
          start: {
            line: 322,
            column: 78
          },
          end: {
            line: 322,
            column: 141
          }
        },
        line: 322
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 323,
            column: 74
          },
          end: {
            line: 323,
            column: 75
          }
        },
        loc: {
          start: {
            line: 323,
            column: 81
          },
          end: {
            line: 323,
            column: 144
          }
        },
        line: 323
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 351,
            column: 25
          },
          end: {
            line: 351,
            column: 26
          }
        },
        loc: {
          start: {
            line: 351,
            column: 34
          },
          end: {
            line: 358,
            column: 21
          }
        },
        line: 351
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 378,
            column: 52
          },
          end: {
            line: 378,
            column: 53
          }
        },
        loc: {
          start: {
            line: 378,
            column: 62
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 378
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 380,
            column: 17
          },
          end: {
            line: 380,
            column: 18
          }
        },
        loc: {
          start: {
            line: 380,
            column: 26
          },
          end: {
            line: 386,
            column: 13
          }
        },
        line: 380
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 388,
            column: 19
          },
          end: {
            line: 388,
            column: 20
          }
        },
        loc: {
          start: {
            line: 388,
            column: 23
          },
          end: {
            line: 393,
            column: 9
          }
        },
        line: 388
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 389,
            column: 21
          },
          end: {
            line: 389,
            column: 22
          }
        },
        loc: {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 392,
            column: 17
          }
        },
        line: 389
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 400,
            column: 53
          },
          end: {
            line: 400,
            column: 54
          }
        },
        loc: {
          start: {
            line: 400,
            column: 57
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 400
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 405,
            column: 17
          },
          end: {
            line: 405,
            column: 18
          }
        },
        loc: {
          start: {
            line: 405,
            column: 26
          },
          end: {
            line: 410,
            column: 13
          }
        },
        line: 405
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 415,
            column: 50
          },
          end: {
            line: 415,
            column: 51
          }
        },
        loc: {
          start: {
            line: 415,
            column: 54
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 415
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 439,
            column: 50
          },
          end: {
            line: 439,
            column: 51
          }
        },
        loc: {
          start: {
            line: 439,
            column: 54
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 439
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 441,
            column: 17
          },
          end: {
            line: 441,
            column: 18
          }
        },
        loc: {
          start: {
            line: 441,
            column: 26
          },
          end: {
            line: 444,
            column: 13
          }
        },
        line: 441
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 449,
            column: 47
          },
          end: {
            line: 449,
            column: 48
          }
        },
        loc: {
          start: {
            line: 449,
            column: 51
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 449
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 450,
            column: 17
          },
          end: {
            line: 450,
            column: 18
          }
        },
        loc: {
          start: {
            line: 450,
            column: 26
          },
          end: {
            line: 455,
            column: 13
          }
        },
        line: 450
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 458,
            column: 26
          },
          end: {
            line: 458,
            column: 27
          }
        },
        loc: {
          start: {
            line: 458,
            column: 30
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 458
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 462,
            column: 41
          },
          end: {
            line: 462,
            column: 42
          }
        },
        loc: {
          start: {
            line: 462,
            column: 45
          },
          end: {
            line: 464,
            column: 13
          }
        },
        line: 462
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 465,
            column: 19
          },
          end: {
            line: 465,
            column: 20
          }
        },
        loc: {
          start: {
            line: 465,
            column: 23
          },
          end: {
            line: 465,
            column: 46
          }
        },
        line: 465
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 476,
            column: 26
          },
          end: {
            line: 476,
            column: 27
          }
        },
        loc: {
          start: {
            line: 476,
            column: 30
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 476
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 477,
            column: 15
          },
          end: {
            line: 477,
            column: 16
          }
        },
        loc: {
          start: {
            line: 477,
            column: 19
          },
          end: {
            line: 481,
            column: 9
          }
        },
        line: 477
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 47,
            column: 37
          }
        }],
        line: 47
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 56
          },
          end: {
            line: 82,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 63
          },
          end: {
            line: 82,
            column: 72
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 98,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 41
          }
        }, {
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 91,
            column: 73
          }
        }, {
          start: {
            line: 91,
            column: 77
          },
          end: {
            line: 91,
            column: 113
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 41
          }
        }, {
          start: {
            line: 98,
            column: 45
          },
          end: {
            line: 98,
            column: 90
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 41
          },
          end: {
            line: 100,
            column: 65
          }
        }, {
          start: {
            line: 100,
            column: 68
          },
          end: {
            line: 100,
            column: 77
          }
        }],
        line: 100
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 36
          },
          end: {
            line: 105,
            column: 49
          }
        }, {
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 105,
            column: 56
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 50
          },
          end: {
            line: 110,
            column: 63
          }
        }, {
          start: {
            line: 110,
            column: 66
          },
          end: {
            line: 110,
            column: 79
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 111,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 56
          },
          end: {
            line: 111,
            column: 61
          }
        }, {
          start: {
            line: 111,
            column: 64
          },
          end: {
            line: 111,
            column: 73
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 32
          }
        }, {
          start: {
            line: 144,
            column: 36
          },
          end: {
            line: 144,
            column: 56
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "16": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 35
          }
        }, {
          start: {
            line: 147,
            column: 39
          },
          end: {
            line: 147,
            column: 60
          }
        }],
        line: 147
      },
      "17": {
        loc: {
          start: {
            line: 163,
            column: 15
          },
          end: {
            line: 163,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 15
          },
          end: {
            line: 163,
            column: 22
          }
        }, {
          start: {
            line: 163,
            column: 26
          },
          end: {
            line: 163,
            column: 62
          }
        }],
        line: 163
      },
      "18": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 197,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 197,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 198,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 198,
            column: 42
          }
        }, {
          start: {
            line: 198,
            column: 46
          },
          end: {
            line: 198,
            column: 50
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 199,
            column: 32
          },
          end: {
            line: 199,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 32
          },
          end: {
            line: 199,
            column: 44
          }
        }, {
          start: {
            line: 199,
            column: 48
          },
          end: {
            line: 199,
            column: 52
          }
        }],
        line: 199
      },
      "21": {
        loc: {
          start: {
            line: 200,
            column: 41
          },
          end: {
            line: 200,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 41
          },
          end: {
            line: 200,
            column: 52
          }
        }, {
          start: {
            line: 200,
            column: 56
          },
          end: {
            line: 200,
            column: 60
          }
        }],
        line: 200
      },
      "22": {
        loc: {
          start: {
            line: 200,
            column: 62
          },
          end: {
            line: 200,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 62
          },
          end: {
            line: 200,
            column: 74
          }
        }, {
          start: {
            line: 200,
            column: 78
          },
          end: {
            line: 200,
            column: 82
          }
        }],
        line: 200
      },
      "23": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "24": {
        loc: {
          start: {
            line: 298,
            column: 32
          },
          end: {
            line: 298,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 65
          },
          end: {
            line: 298,
            column: 138
          }
        }, {
          start: {
            line: 298,
            column: 141
          },
          end: {
            line: 298,
            column: 161
          }
        }],
        line: 298
      },
      "25": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 301,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 301,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "26": {
        loc: {
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 346,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 346,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "27": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "28": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "29": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "30": {
        loc: {
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 459,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 459,
            column: 33
          }
        }, {
          start: {
            line: 459,
            column: 37
          },
          end: {
            line: 459,
            column: 59
          }
        }, {
          start: {
            line: 459,
            column: 63
          },
          end: {
            line: 459,
            column: 104
          }
        }],
        line: 459
      },
      "31": {
        loc: {
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useTryonWorkflow.ts"],
      sourcesContent: ["'use client';\n\n// Try-on Workflow Coordination Hook\n// Bridge layer hook that coordinates the complete try-on generation process\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  useTryonMutation,\n  useImageProcessing,\n  processImageForTryon,\n  resizeImageTo1024x1536,\n  type TryonMutationVariables,\n  type TryonMutationResponse\n} from '../business-layer';\nimport { fileToBase64, compressBase64, CompressionFailedError } from '../utils/image';\nimport { errorToMessage } from '../lib/errorToMessage';\n\n/**\n * Workflow state enum for better type safety\n */\nexport enum WorkflowState {\n  IDLE = 'idle',\n  UPLOADING = 'uploading',\n  PROCESSING = 'processing',\n  GENERATING = 'generating',\n  COMPLETE = 'complete',\n  ERROR = 'error'\n}\n\n/**\n * Error types that can occur during workflow\n */\nexport type WorkflowError = {\n  type: 'validation' | 'upload' | 'processing' | 'generation' | 'timeout' | 'compression' | 'unknown';\n  message: string;\n  originalError?: Error;\n  retryable: boolean;\n};\n\n/**\n * Workflow configuration options\n */\nexport interface WorkflowConfig {\n  /** Timeout for generation in milliseconds */\n  timeoutMs?: number;\n  /** Base64 compression limit in KB */\n  compressionLimitKB?: number;\n  /** Auto-retry failed operations */\n  autoRetry?: boolean;\n  /** Number of retry attempts */\n  maxRetries?: number;\n  /** Enable debug logging */\n  debug?: boolean;\n  /** Image processing options */\n  imageProcessing?: {\n    targetWidth?: number;\n    targetHeight?: number;\n    quality?: number;\n  };\n}\n\n/**\n * Workflow state interface (backward compatible with existing page state)\n */\nexport interface TryonWorkflowState {\n  // Core workflow state\n  workflowState: WorkflowState;\n  \n  // Backward compatible state (maintains existing page.tsx structure)\n  isCapturing: boolean;\n  showPolaroid: boolean;\n  generatedImage: string | null;\n  hasError: boolean;\n  \n  // File management\n  userImageFile: File | null;\n  apparelImageFile: File | null;\n  leftCardImage: string | null;\n  rightCardImage: string | null;\n  \n  // Progress and error tracking\n  progress: number;\n  error: WorkflowError | null;\n  \n  // Operation tracking\n  retryCount: number;\n  lastOperationTime: number | null;\n}\n\n/**\n * Workflow actions interface\n */\nexport interface TryonWorkflowActions {\n  // File upload handlers (backward compatible)\n  handleUserFileUpload: (file: File) => void;\n  handleApparelFileUpload: (file: File) => void;\n  handleLeftCardImageUpload: (imageUrl: string) => Promise<void>;\n  handleRightCardImageUpload: (imageUrl: string) => Promise<void>;\n  \n  // Main workflow actions\n  startGeneration: () => Promise<void>;\n  retryGeneration: () => Promise<void>;\n  cancelGeneration: () => void;\n  \n  // State management\n  resetWorkflow: () => void;\n  closePolaroid: () => void;\n  clearError: () => void;\n  \n  // Validation\n  validateFiles: () => { isValid: boolean; errors: string[] };\n  canGenerate: () => boolean;\n}\n\n/**\n * Toast notification function type\n */\ntype ToastFunction = (message: string, type?: 'success' | 'error' | 'warning' | 'info') => void;\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<WorkflowConfig> = {\n  timeoutMs: 60000, // 60 seconds\n  compressionLimitKB: 2048, // 2MB\n  autoRetry: false,\n  maxRetries: 3,\n  debug: process.env.NODE_ENV === 'development',\n  imageProcessing: {\n    targetWidth: 1024,\n    targetHeight: 1536,\n    quality: 0.9\n  }\n};\n\n/**\n * Main try-on workflow hook\n */\nexport function useTryonWorkflow(\n  config: WorkflowConfig = {},\n  showToast?: ToastFunction\n): TryonWorkflowState & TryonWorkflowActions {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // Business layer hooks\n  const tryonMutation = useTryonMutation();\n  const { processBasic } = useImageProcessing();\n  \n  // Abort controller for cancellation\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Core state\n  const [state, setState] = useState<TryonWorkflowState>({\n    workflowState: WorkflowState.IDLE,\n    isCapturing: false,\n    showPolaroid: false,\n    generatedImage: null,\n    hasError: false,\n    userImageFile: null,\n    apparelImageFile: null,\n    leftCardImage: null,\n    rightCardImage: null,\n    progress: 0,\n    error: null,\n    retryCount: 0,\n    lastOperationTime: null\n  });\n\n  // Debug logging\n  const log = useCallback((...args: any[]) => {\n    if (finalConfig.debug) {\n      console.log('[useTryonWorkflow]', ...args);\n    }\n  }, [finalConfig.debug]);\n\n  // Error handler\n  const handleError = useCallback((error: unknown, type: WorkflowError['type'] = 'unknown'): WorkflowError => {\n    let workflowError: WorkflowError;\n    \n    if (error instanceof CompressionFailedError) {\n      workflowError = {\n        type: 'compression',\n        message: 'Image is too large even after compression. Please upload a smaller file.',\n        originalError: error,\n        retryable: false\n      };\n    } else if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('AbortError'))) {\n      workflowError = {\n        type: 'timeout',\n        message: `Request timed out after ${finalConfig.timeoutMs}ms`,\n        originalError: error,\n        retryable: true\n      };\n    } else if (error instanceof Error && error.message.includes('API request failed:')) {\n      const statusMatch = error.message.match(/API request failed: (\\d+)/);\n      const status = statusMatch ? parseInt(statusMatch[1]) : undefined;\n      workflowError = {\n        type: 'generation',\n        message: errorToMessage(status),\n        originalError: error,\n        retryable: status ? status >= 500 : true\n      };\n    } else {\n      workflowError = {\n        type,\n        message: error instanceof Error ? error.message : String(error),\n        originalError: error instanceof Error ? error : undefined,\n        retryable: type !== 'validation'\n      };\n    }\n\n    log('Error occurred:', workflowError);\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.ERROR,\n      hasError: true,\n      isCapturing: false,\n      error: workflowError,\n      progress: 0\n    }));\n\n    // Show toast notification\n    if (showToast) {\n      showToast(workflowError.message, 'error');\n    }\n\n    return workflowError;\n  }, [finalConfig.timeoutMs, log, showToast]);\n\n  // Update progress\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n  }, []);\n\n  // Validation helper\n  const validateFiles = useCallback((): { isValid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n    \n    if (!state.userImageFile && !state.leftCardImage) {\n      errors.push('Please upload model photo');\n    }\n    \n    if (!state.apparelImageFile && !state.rightCardImage) {\n      errors.push('Please upload apparel photo');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }, [state.userImageFile, state.apparelImageFile, state.leftCardImage, state.rightCardImage]);\n\n  // Check if generation can start\n  const canGenerate = useCallback((): boolean => {\n    const { isValid } = validateFiles();\n    return isValid && state.workflowState !== WorkflowState.GENERATING;\n  }, [validateFiles, state.workflowState]);\n\n  // Utility function to resize and create file from URL\n  const createFileFromImageUrl = useCallback(async (imageUrl: string, filename: string): Promise<File> => {\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      return new File([blob], filename, { type: 'image/jpeg' });\n    } catch (error) {\n      log('Failed to create file from URL:', error);\n      throw new Error('Failed to create file from image URL');\n    }\n  }, [log]);\n\n  // Resize image utility\n  const resizeImage = useCallback(async (imageUrl: string): Promise<string> => {\n    const { targetWidth, targetHeight, quality } = finalConfig.imageProcessing;\n    \n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      \n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        canvas.width = targetWidth || 1024;\n        canvas.height = targetHeight || 1536;\n        ctx.drawImage(img, 0, 0, targetWidth || 1024, targetHeight || 1536);\n        \n        const resizedImageUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(resizedImageUrl);\n      };\n      \n      img.onerror = () => reject(new Error('Failed to load image for resizing'));\n      img.src = imageUrl;\n    });\n  }, [finalConfig.imageProcessing]);\n\n  // File upload handlers\n  const handleUserFileUpload = useCallback((file: File) => {\n    log('User file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, userImageFile: file }));\n  }, [log]);\n\n  const handleApparelFileUpload = useCallback((file: File) => {\n    log('Apparel file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, apparelImageFile: file }));\n  }, [log]);\n\n  const handleLeftCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Left card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'user-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        leftCardImage: resizedImageUrl,\n        userImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Left card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        leftCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  const handleRightCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Right card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'apparel-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        rightCardImage: resizedImageUrl,\n        apparelImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Right card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        rightCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  // Main generation function\n  const startGeneration = useCallback(async () => {\n    try {\n      log('Starting generation workflow');\n      \n      // Validate files\n      const validation = validateFiles();\n      if (!validation.isValid) {\n        const message = validation.errors.length === 2 \n          ? 'Please upload model photo and apparel photo before generating your fit.'\n          : validation.errors[0];\n        \n        if (showToast) {\n          showToast(message, 'warning');\n        }\n        return;\n      }\n\n      // Set initial state\n      setState(prev => ({\n        ...prev,\n        workflowState: WorkflowState.GENERATING,\n        isCapturing: true,\n        showPolaroid: true,\n        hasError: false,\n        error: null,\n        progress: 0,\n        lastOperationTime: Date.now()\n      }));\n\n      // Create abort controller for timeout\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(\n        () => abortControllerRef.current?.abort(), \n        finalConfig.timeoutMs\n      );\n\n      try {\n        updateProgress(10);\n\n        // Convert and compress images\n        const [modelB64, apparelB64] = await Promise.all([\n          fileToBase64(state.userImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB)),\n          fileToBase64(state.apparelImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB))\n        ]);\n\n        log('Images converted to base64 successfully');\n        updateProgress(30);\n\n        // Make API request\n        const response = await fetch('/api/tryon', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            modelImage: modelB64, \n            apparelImages: [apparelB64] \n          }),\n          signal: abortControllerRef.current.signal\n        });\n\n        clearTimeout(timeoutId);\n        updateProgress(80);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API request failed: ${response.status} - ${errorText}`);\n        }\n\n        const { img_generated } = await response.json();\n        log('Generation completed successfully');\n        \n        updateProgress(100);\n\n        // Update state with success\n        setState(prev => ({\n          ...prev,\n          workflowState: WorkflowState.COMPLETE,\n          isCapturing: false,\n          generatedImage: img_generated,\n          progress: 100,\n          retryCount: 0\n        }));\n\n      } catch (error) {\n        clearTimeout(timeoutId);\n        handleError(error, 'generation');\n      }\n\n    } catch (error) {\n      handleError(error, 'unknown');\n    }\n  }, [\n    log, \n    validateFiles, \n    showToast, \n    state.userImageFile, \n    state.apparelImageFile, \n    finalConfig.timeoutMs, \n    finalConfig.compressionLimitKB, \n    updateProgress, \n    handleError\n  ]);\n\n  // Retry generation\n  const retryGeneration = useCallback(async () => {\n    log('Retrying generation');\n    setState(prev => ({ \n      ...prev, \n      retryCount: prev.retryCount + 1,\n      hasError: false,\n      error: null,\n      generatedImage: null\n    }));\n    \n    // Small delay before retry\n    setTimeout(() => {\n      setState(prev => ({ ...prev, showPolaroid: false }));\n    }, 100);\n    \n    await startGeneration();\n  }, [log, startGeneration]);\n\n  // Cancel generation\n  const cancelGeneration = useCallback(() => {\n    log('Cancelling generation');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      progress: 0\n    }));\n  }, [log]);\n\n  // Reset workflow\n  const resetWorkflow = useCallback(() => {\n    log('Resetting workflow');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState({\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      showPolaroid: false,\n      generatedImage: null,\n      hasError: false,\n      userImageFile: null,\n      apparelImageFile: null,\n      leftCardImage: null,\n      rightCardImage: null,\n      progress: 0,\n      error: null,\n      retryCount: 0,\n      lastOperationTime: null\n    });\n  }, [log]);\n\n  // Close polaroid\n  const closePolaroid = useCallback(() => {\n    log('Closing polaroid');\n    setState(prev => ({ ...prev, showPolaroid: false }));\n  }, [log]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ \n      ...prev, \n      hasError: false, \n      error: null,\n      workflowState: WorkflowState.IDLE\n    }));\n  }, []);\n\n  // Auto-retry logic\n  useEffect(() => {\n    if (\n      finalConfig.autoRetry && \n      state.error?.retryable && \n      state.retryCount < finalConfig.maxRetries\n    ) {\n      const delay = Math.min(1000 * Math.pow(2, state.retryCount), 10000); // Exponential backoff\n      log(`Auto-retrying in ${delay}ms (attempt ${state.retryCount + 1}/${finalConfig.maxRetries})`);\n      \n      const timeoutId = setTimeout(() => {\n        retryGeneration();\n      }, delay);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [state.error, state.retryCount, finalConfig.autoRetry, finalConfig.maxRetries, retryGeneration, log]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    handleUserFileUpload,\n    handleApparelFileUpload,\n    handleLeftCardImageUpload,\n    handleRightCardImageUpload,\n    startGeneration,\n    retryGeneration,\n    cancelGeneration,\n    resetWorkflow,\n    closePolaroid,\n    clearError,\n    validateFiles,\n    canGenerate\n  };\n}"],
      names: ["WorkflowState", "useTryonWorkflow", "DEFAULT_CONFIG", "timeoutMs", "compressionLimitKB", "autoRetry", "maxRetries", "debug", "process", "env", "NODE_ENV", "imageProcessing", "targetWidth", "targetHeight", "quality", "config", "showToast", "finalConfig", "tryonMutation", "useTryonMutation", "processBasic", "useImageProcessing", "abortControllerRef", "useRef", "state", "setState", "useState", "workflowState", "isCapturing", "showPolaroid", "generatedImage", "hasError", "userImageFile", "apparelImageFile", "leftCardImage", "rightCardImage", "progress", "error", "retryCount", "lastOperationTime", "log", "useCallback", "args", "console", "handleError", "type", "workflowError", "CompressionFailedError", "message", "originalError", "retryable", "Error", "name", "includes", "statusMatch", "match", "status", "parseInt", "undefined", "errorToMessage", "String", "prev", "updateProgress", "validateFiles", "errors", "push", "isValid", "length", "canGenerate", "createFileFromImageUrl", "imageUrl", "filename", "response", "fetch", "blob", "File", "resizeImage", "Promise", "resolve", "reject", "img", "Image", "crossOrigin", "onload", "canvas", "document", "createElement", "ctx", "getContext", "width", "height", "drawImage", "resizedImageUrl", "toDataURL", "onerror", "src", "handleUserFileUpload", "file", "size", "handleApparelFileUpload", "handleLeftCardImageUpload", "handleRightCardImageUpload", "startGeneration", "validation", "Date", "now", "current", "AbortController", "timeoutId", "setTimeout", "abort", "modelB64", "apparelB64", "all", "fileToBase64", "then", "b64", "compressBase64", "method", "headers", "body", "JSON", "stringify", "modelImage", "apparelImages", "signal", "clearTimeout", "ok", "errorText", "text", "img_generated", "json", "retryGeneration", "cancelGeneration", "resetWorkflow", "closePolaroid", "clearError", "useEffect", "delay", "Math", "min", "pow"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e97394d32104053191c92a452d593e1913cdd955"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3vmvqaeo1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3vmvqaeo1();
cov_3vmvqaeo1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_3vmvqaeo1().f[0]++;
  cov_3vmvqaeo1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_3vmvqaeo1().s[3]++;
_export(exports, {
  WorkflowState: function () {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[1]++;
    cov_3vmvqaeo1().s[4]++;
    return WorkflowState;
  },
  useTryonWorkflow: function () {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[2]++;
    cov_3vmvqaeo1().s[5]++;
    return useTryonWorkflow;
  }
});
const _react =
/* istanbul ignore next */
(cov_3vmvqaeo1().s[6]++, require("react"));
const _businesslayer =
/* istanbul ignore next */
(cov_3vmvqaeo1().s[7]++, require("../business-layer"));
const _image =
/* istanbul ignore next */
(cov_3vmvqaeo1().s[8]++, require("../utils/image"));
const _errorToMessage =
/* istanbul ignore next */
(cov_3vmvqaeo1().s[9]++, require("../lib/errorToMessage"));
var WorkflowState =
/* istanbul ignore next */
(/*#__PURE__*/cov_3vmvqaeo1().s[10]++, function (WorkflowState) {
  /* istanbul ignore next */
  cov_3vmvqaeo1().f[3]++;
  cov_3vmvqaeo1().s[11]++;
  WorkflowState["IDLE"] = "idle";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[12]++;
  WorkflowState["UPLOADING"] = "uploading";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[13]++;
  WorkflowState["PROCESSING"] = "processing";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[14]++;
  WorkflowState["GENERATING"] = "generating";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[15]++;
  WorkflowState["COMPLETE"] = "complete";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[16]++;
  WorkflowState["ERROR"] = "error";
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[17]++;
  return WorkflowState;
}({}));
/**
 * Default configuration
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_3vmvqaeo1().s[18]++, {
  timeoutMs: 60000,
  compressionLimitKB: 2048,
  autoRetry: false,
  maxRetries: 3,
  debug: process.env.NODE_ENV === 'development',
  imageProcessing: {
    targetWidth: 1024,
    targetHeight: 1536,
    quality: 0.9
  }
});
function useTryonWorkflow(config =
/* istanbul ignore next */
(cov_3vmvqaeo1().b[0][0]++, {}), showToast) {
  /* istanbul ignore next */
  cov_3vmvqaeo1().f[4]++;
  const finalConfig =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[19]++, {
    ...DEFAULT_CONFIG,
    ...config
  });
  // Business layer hooks
  const tryonMutation =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[20]++, (0, _businesslayer.useTryonMutation)());
  const {
    processBasic
  } =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[21]++, (0, _businesslayer.useImageProcessing)());
  // Abort controller for cancellation
  const abortControllerRef =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[22]++, (0, _react.useRef)(null));
  // Core state
  const [state, setState] =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[23]++, (0, _react.useState)({
    workflowState: "idle",
    isCapturing: false,
    showPolaroid: false,
    generatedImage: null,
    hasError: false,
    userImageFile: null,
    apparelImageFile: null,
    leftCardImage: null,
    rightCardImage: null,
    progress: 0,
    error: null,
    retryCount: 0,
    lastOperationTime: null
  }));
  // Debug logging
  const log =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[24]++, (0, _react.useCallback)((...args) => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[5]++;
    cov_3vmvqaeo1().s[25]++;
    if (finalConfig.debug) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[1][0]++;
      cov_3vmvqaeo1().s[26]++;
      console.log('[useTryonWorkflow]', ...args);
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[1][1]++;
    }
  }, [finalConfig.debug]));
  // Error handler
  const handleError =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[27]++, (0, _react.useCallback)((error, type =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().b[2][0]++, 'unknown')) => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[6]++;
    let workflowError;
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[28]++;
    if (error instanceof _image.CompressionFailedError) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[3][0]++;
      cov_3vmvqaeo1().s[29]++;
      workflowError = {
        type: 'compression',
        message: 'Image is too large even after compression. Please upload a smaller file.',
        originalError: error,
        retryable: false
      };
    } else {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[3][1]++;
      cov_3vmvqaeo1().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_3vmvqaeo1().b[5][0]++, error instanceof Error) && (
      /* istanbul ignore next */
      (cov_3vmvqaeo1().b[5][1]++, error.name === 'AbortError') ||
      /* istanbul ignore next */
      (cov_3vmvqaeo1().b[5][2]++, error.message.includes('AbortError')))) {
        /* istanbul ignore next */
        cov_3vmvqaeo1().b[4][0]++;
        cov_3vmvqaeo1().s[31]++;
        workflowError = {
          type: 'timeout',
          message: `Request timed out after ${finalConfig.timeoutMs}ms`,
          originalError: error,
          retryable: true
        };
      } else {
        /* istanbul ignore next */
        cov_3vmvqaeo1().b[4][1]++;
        cov_3vmvqaeo1().s[32]++;
        if (
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[7][0]++, error instanceof Error) &&
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[7][1]++, error.message.includes('API request failed:'))) {
          /* istanbul ignore next */
          cov_3vmvqaeo1().b[6][0]++;
          const statusMatch =
          /* istanbul ignore next */
          (cov_3vmvqaeo1().s[33]++, error.message.match(/API request failed: (\d+)/));
          const status =
          /* istanbul ignore next */
          (cov_3vmvqaeo1().s[34]++, statusMatch ?
          /* istanbul ignore next */
          (cov_3vmvqaeo1().b[8][0]++, parseInt(statusMatch[1])) :
          /* istanbul ignore next */
          (cov_3vmvqaeo1().b[8][1]++, undefined));
          /* istanbul ignore next */
          cov_3vmvqaeo1().s[35]++;
          workflowError = {
            type: 'generation',
            message: (0, _errorToMessage.errorToMessage)(status),
            originalError: error,
            retryable: status ?
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[9][0]++, status >= 500) :
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[9][1]++, true)
          };
        } else {
          /* istanbul ignore next */
          cov_3vmvqaeo1().b[6][1]++;
          cov_3vmvqaeo1().s[36]++;
          workflowError = {
            type,
            message: error instanceof Error ?
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[10][0]++, error.message) :
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[10][1]++, String(error)),
            originalError: error instanceof Error ?
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[11][0]++, error) :
            /* istanbul ignore next */
            (cov_3vmvqaeo1().b[11][1]++, undefined),
            retryable: type !== 'validation'
          };
        }
      }
    }
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[37]++;
    log('Error occurred:', workflowError);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[38]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[7]++;
      cov_3vmvqaeo1().s[39]++;
      return {
        ...prev,
        workflowState: "error",
        hasError: true,
        isCapturing: false,
        error: workflowError,
        progress: 0
      };
    });
    // Show toast notification
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[40]++;
    if (showToast) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[12][0]++;
      cov_3vmvqaeo1().s[41]++;
      showToast(workflowError.message, 'error');
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[12][1]++;
    }
    cov_3vmvqaeo1().s[42]++;
    return workflowError;
  }, [finalConfig.timeoutMs, log, showToast]));
  // Update progress
  const updateProgress =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[43]++, (0, _react.useCallback)(progress => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[8]++;
    cov_3vmvqaeo1().s[44]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[9]++;
      cov_3vmvqaeo1().s[45]++;
      return {
        ...prev,
        progress
      };
    });
  }, []));
  // Validation helper
  const validateFiles =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[46]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[10]++;
    const errors =
    /* istanbul ignore next */
    (cov_3vmvqaeo1().s[47]++, []);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[14][0]++, !state.userImageFile) &&
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[14][1]++, !state.leftCardImage)) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[13][0]++;
      cov_3vmvqaeo1().s[49]++;
      errors.push('Please upload model photo');
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[13][1]++;
    }
    cov_3vmvqaeo1().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[16][0]++, !state.apparelImageFile) &&
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[16][1]++, !state.rightCardImage)) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[15][0]++;
      cov_3vmvqaeo1().s[51]++;
      errors.push('Please upload apparel photo');
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[15][1]++;
    }
    cov_3vmvqaeo1().s[52]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }, [state.userImageFile, state.apparelImageFile, state.leftCardImage, state.rightCardImage]));
  // Check if generation can start
  const canGenerate =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[53]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[11]++;
    const {
      isValid
    } =
    /* istanbul ignore next */
    (cov_3vmvqaeo1().s[54]++, validateFiles());
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[55]++;
    return /* istanbul ignore next */(cov_3vmvqaeo1().b[17][0]++, isValid) &&
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[17][1]++, state.workflowState !== "generating");
  }, [validateFiles, state.workflowState]));
  // Utility function to resize and create file from URL
  const createFileFromImageUrl =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[56]++, (0, _react.useCallback)(async (imageUrl, filename) => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[12]++;
    cov_3vmvqaeo1().s[57]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[58]++, await fetch(imageUrl));
      const blob =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[59]++, await response.blob());
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[60]++;
      return new File([blob], filename, {
        type: 'image/jpeg'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[61]++;
      log('Failed to create file from URL:', error);
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[62]++;
      throw new Error('Failed to create file from image URL');
    }
  }, [log]));
  // Resize image utility
  const resizeImage =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[63]++, (0, _react.useCallback)(async imageUrl => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[13]++;
    const {
      targetWidth,
      targetHeight,
      quality
    } =
    /* istanbul ignore next */
    (cov_3vmvqaeo1().s[64]++, finalConfig.imageProcessing);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[65]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[14]++;
      const img =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[66]++, new Image());
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[67]++;
      img.crossOrigin = "anonymous";
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[68]++;
      img.onload = () => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[15]++;
        const canvas =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[69]++, document.createElement('canvas'));
        const ctx =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[70]++, canvas.getContext('2d'));
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[71]++;
        if (!ctx) {
          /* istanbul ignore next */
          cov_3vmvqaeo1().b[18][0]++;
          cov_3vmvqaeo1().s[72]++;
          reject(new Error('Could not get canvas context'));
          /* istanbul ignore next */
          cov_3vmvqaeo1().s[73]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_3vmvqaeo1().b[18][1]++;
        }
        cov_3vmvqaeo1().s[74]++;
        canvas.width =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[19][0]++, targetWidth) ||
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[19][1]++, 1024);
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[75]++;
        canvas.height =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[20][0]++, targetHeight) ||
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[20][1]++, 1536);
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[76]++;
        ctx.drawImage(img, 0, 0,
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[21][0]++, targetWidth) ||
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[21][1]++, 1024),
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[22][0]++, targetHeight) ||
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[22][1]++, 1536));
        const resizedImageUrl =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[77]++, canvas.toDataURL('image/jpeg', quality));
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[78]++;
        resolve(resizedImageUrl);
      };
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[79]++;
      img.onerror = () => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[16]++;
        cov_3vmvqaeo1().s[80]++;
        return reject(new Error('Failed to load image for resizing'));
      };
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[81]++;
      img.src = imageUrl;
    });
  }, [finalConfig.imageProcessing]));
  // File upload handlers
  const handleUserFileUpload =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[82]++, (0, _react.useCallback)(file => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[17]++;
    cov_3vmvqaeo1().s[83]++;
    log('User file uploaded:', file.name, file.size);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[84]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[18]++;
      cov_3vmvqaeo1().s[85]++;
      return {
        ...prev,
        userImageFile: file
      };
    });
  }, [log]));
  const handleApparelFileUpload =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[86]++, (0, _react.useCallback)(file => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[19]++;
    cov_3vmvqaeo1().s[87]++;
    log('Apparel file uploaded:', file.name, file.size);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[88]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[20]++;
      cov_3vmvqaeo1().s[89]++;
      return {
        ...prev,
        apparelImageFile: file
      };
    });
  }, [log]));
  const handleLeftCardImageUpload =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[90]++, (0, _react.useCallback)(async imageUrl => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[21]++;
    cov_3vmvqaeo1().s[91]++;
    try {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[92]++;
      log('Left card image upload started');
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[93]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[22]++;
        cov_3vmvqaeo1().s[94]++;
        return {
          ...prev,
          workflowState: "processing"
        };
      });
      const resizedImageUrl =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[95]++, await resizeImage(imageUrl));
      const file =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[96]++, await createFileFromImageUrl(imageUrl, 'user-image.jpg'));
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[97]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[23]++;
        cov_3vmvqaeo1().s[98]++;
        return {
          ...prev,
          leftCardImage: resizedImageUrl,
          userImageFile: file,
          workflowState: "idle"
        };
      });
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[99]++;
      log('Left card image processed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[100]++;
      handleError(error, 'processing');
      // Fallback to original image
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[101]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[24]++;
        cov_3vmvqaeo1().s[102]++;
        return {
          ...prev,
          leftCardImage: imageUrl,
          workflowState: "idle"
        };
      });
    }
  }, [log, resizeImage, createFileFromImageUrl, handleError]));
  const handleRightCardImageUpload =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[103]++, (0, _react.useCallback)(async imageUrl => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[25]++;
    cov_3vmvqaeo1().s[104]++;
    try {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[105]++;
      log('Right card image upload started');
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[106]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[26]++;
        cov_3vmvqaeo1().s[107]++;
        return {
          ...prev,
          workflowState: "processing"
        };
      });
      const resizedImageUrl =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[108]++, await resizeImage(imageUrl));
      const file =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[109]++, await createFileFromImageUrl(imageUrl, 'apparel-image.jpg'));
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[110]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[27]++;
        cov_3vmvqaeo1().s[111]++;
        return {
          ...prev,
          rightCardImage: resizedImageUrl,
          apparelImageFile: file,
          workflowState: "idle"
        };
      });
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[112]++;
      log('Right card image processed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[113]++;
      handleError(error, 'processing');
      // Fallback to original image
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[114]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[28]++;
        cov_3vmvqaeo1().s[115]++;
        return {
          ...prev,
          rightCardImage: imageUrl,
          workflowState: "idle"
        };
      });
    }
  }, [log, resizeImage, createFileFromImageUrl, handleError]));
  // Main generation function
  const startGeneration =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[116]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[29]++;
    cov_3vmvqaeo1().s[117]++;
    try {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[118]++;
      log('Starting generation workflow');
      // Validate files
      const validation =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[119]++, validateFiles());
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[120]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_3vmvqaeo1().b[23][0]++;
        const message =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[121]++, validation.errors.length === 2 ?
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[24][0]++, 'Please upload model photo and apparel photo before generating your fit.') :
        /* istanbul ignore next */
        (cov_3vmvqaeo1().b[24][1]++, validation.errors[0]));
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[122]++;
        if (showToast) {
          /* istanbul ignore next */
          cov_3vmvqaeo1().b[25][0]++;
          cov_3vmvqaeo1().s[123]++;
          showToast(message, 'warning');
        } else
        /* istanbul ignore next */
        {
          cov_3vmvqaeo1().b[25][1]++;
        }
        cov_3vmvqaeo1().s[124]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_3vmvqaeo1().b[23][1]++;
      }
      // Set initial state
      cov_3vmvqaeo1().s[125]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[30]++;
        cov_3vmvqaeo1().s[126]++;
        return {
          ...prev,
          workflowState: "generating",
          isCapturing: true,
          showPolaroid: true,
          hasError: false,
          error: null,
          progress: 0,
          lastOperationTime: Date.now()
        };
      });
      // Create abort controller for timeout
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[127]++;
      abortControllerRef.current = new AbortController();
      const timeoutId =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[128]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[31]++;
        cov_3vmvqaeo1().s[129]++;
        return abortControllerRef.current?.abort();
      }, finalConfig.timeoutMs));
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[130]++;
      try {
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[131]++;
        updateProgress(10);
        // Convert and compress images
        const [modelB64, apparelB64] =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[132]++, await Promise.all([(0, _image.fileToBase64)(state.userImageFile).then(b64 => {
          /* istanbul ignore next */
          cov_3vmvqaeo1().f[32]++;
          cov_3vmvqaeo1().s[133]++;
          return (0, _image.compressBase64)(b64, finalConfig.compressionLimitKB);
        }), (0, _image.fileToBase64)(state.apparelImageFile).then(b64 => {
          /* istanbul ignore next */
          cov_3vmvqaeo1().f[33]++;
          cov_3vmvqaeo1().s[134]++;
          return (0, _image.compressBase64)(b64, finalConfig.compressionLimitKB);
        })]));
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[135]++;
        log('Images converted to base64 successfully');
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[136]++;
        updateProgress(30);
        // Make API request
        const response =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[137]++, await fetch('/api/tryon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            modelImage: modelB64,
            apparelImages: [apparelB64]
          }),
          signal: abortControllerRef.current.signal
        }));
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[138]++;
        clearTimeout(timeoutId);
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[139]++;
        updateProgress(80);
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[140]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_3vmvqaeo1().b[26][0]++;
          const errorText =
          /* istanbul ignore next */
          (cov_3vmvqaeo1().s[141]++, await response.text());
          /* istanbul ignore next */
          cov_3vmvqaeo1().s[142]++;
          throw new Error(`API request failed: ${response.status} - ${errorText}`);
        } else
        /* istanbul ignore next */
        {
          cov_3vmvqaeo1().b[26][1]++;
        }
        const {
          img_generated
        } =
        /* istanbul ignore next */
        (cov_3vmvqaeo1().s[143]++, await response.json());
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[144]++;
        log('Generation completed successfully');
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[145]++;
        updateProgress(100);
        // Update state with success
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[146]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_3vmvqaeo1().f[34]++;
          cov_3vmvqaeo1().s[147]++;
          return {
            ...prev,
            workflowState: "complete",
            isCapturing: false,
            generatedImage: img_generated,
            progress: 100,
            retryCount: 0
          };
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[148]++;
        clearTimeout(timeoutId);
        /* istanbul ignore next */
        cov_3vmvqaeo1().s[149]++;
        handleError(error, 'generation');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[150]++;
      handleError(error, 'unknown');
    }
  }, [log, validateFiles, showToast, state.userImageFile, state.apparelImageFile, finalConfig.timeoutMs, finalConfig.compressionLimitKB, updateProgress, handleError]));
  // Retry generation
  const retryGeneration =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[151]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[35]++;
    cov_3vmvqaeo1().s[152]++;
    log('Retrying generation');
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[153]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[36]++;
      cov_3vmvqaeo1().s[154]++;
      return {
        ...prev,
        retryCount: prev.retryCount + 1,
        hasError: false,
        error: null,
        generatedImage: null
      };
    });
    // Small delay before retry
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[155]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[37]++;
      cov_3vmvqaeo1().s[156]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[38]++;
        cov_3vmvqaeo1().s[157]++;
        return {
          ...prev,
          showPolaroid: false
        };
      });
    }, 100);
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[158]++;
    await startGeneration();
  }, [log, startGeneration]));
  // Cancel generation
  const cancelGeneration =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[159]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[39]++;
    cov_3vmvqaeo1().s[160]++;
    log('Cancelling generation');
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[161]++;
    if (abortControllerRef.current) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[27][0]++;
      cov_3vmvqaeo1().s[162]++;
      abortControllerRef.current.abort();
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[27][1]++;
    }
    cov_3vmvqaeo1().s[163]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[40]++;
      cov_3vmvqaeo1().s[164]++;
      return {
        ...prev,
        workflowState: "idle",
        isCapturing: false,
        progress: 0
      };
    });
  }, [log]));
  // Reset workflow
  const resetWorkflow =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[165]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[41]++;
    cov_3vmvqaeo1().s[166]++;
    log('Resetting workflow');
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[167]++;
    if (abortControllerRef.current) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[28][0]++;
      cov_3vmvqaeo1().s[168]++;
      abortControllerRef.current.abort();
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[28][1]++;
    }
    cov_3vmvqaeo1().s[169]++;
    setState({
      workflowState: "idle",
      isCapturing: false,
      showPolaroid: false,
      generatedImage: null,
      hasError: false,
      userImageFile: null,
      apparelImageFile: null,
      leftCardImage: null,
      rightCardImage: null,
      progress: 0,
      error: null,
      retryCount: 0,
      lastOperationTime: null
    });
  }, [log]));
  // Close polaroid
  const closePolaroid =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[170]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[42]++;
    cov_3vmvqaeo1().s[171]++;
    log('Closing polaroid');
    /* istanbul ignore next */
    cov_3vmvqaeo1().s[172]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[43]++;
      cov_3vmvqaeo1().s[173]++;
      return {
        ...prev,
        showPolaroid: false
      };
    });
  }, [log]));
  // Clear error
  const clearError =
  /* istanbul ignore next */
  (cov_3vmvqaeo1().s[174]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[44]++;
    cov_3vmvqaeo1().s[175]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[45]++;
      cov_3vmvqaeo1().s[176]++;
      return {
        ...prev,
        hasError: false,
        error: null,
        workflowState: "idle"
      };
    });
  }, []));
  // Auto-retry logic
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[177]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[46]++;
    cov_3vmvqaeo1().s[178]++;
    if (
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[30][0]++, finalConfig.autoRetry) &&
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[30][1]++, state.error?.retryable) &&
    /* istanbul ignore next */
    (cov_3vmvqaeo1().b[30][2]++, state.retryCount < finalConfig.maxRetries)) {
      /* istanbul ignore next */
      cov_3vmvqaeo1().b[29][0]++;
      const delay =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[179]++, Math.min(1000 * Math.pow(2, state.retryCount), 10000)); // Exponential backoff
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[180]++;
      log(`Auto-retrying in ${delay}ms (attempt ${state.retryCount + 1}/${finalConfig.maxRetries})`);
      const timeoutId =
      /* istanbul ignore next */
      (cov_3vmvqaeo1().s[181]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[47]++;
        cov_3vmvqaeo1().s[182]++;
        retryGeneration();
      }, delay));
      /* istanbul ignore next */
      cov_3vmvqaeo1().s[183]++;
      return () => {
        /* istanbul ignore next */
        cov_3vmvqaeo1().f[48]++;
        cov_3vmvqaeo1().s[184]++;
        return clearTimeout(timeoutId);
      };
    } else
    /* istanbul ignore next */
    {
      cov_3vmvqaeo1().b[29][1]++;
    }
  }, [state.error, state.retryCount, finalConfig.autoRetry, finalConfig.maxRetries, retryGeneration, log]);
  // Cleanup on unmount
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[185]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_3vmvqaeo1().f[49]++;
    cov_3vmvqaeo1().s[186]++;
    return () => {
      /* istanbul ignore next */
      cov_3vmvqaeo1().f[50]++;
      cov_3vmvqaeo1().s[187]++;
      if (abortControllerRef.current) {
        /* istanbul ignore next */
        cov_3vmvqaeo1().b[31][0]++;
        cov_3vmvqaeo1().s[188]++;
        abortControllerRef.current.abort();
      } else
      /* istanbul ignore next */
      {
        cov_3vmvqaeo1().b[31][1]++;
      }
    };
  }, []);
  /* istanbul ignore next */
  cov_3vmvqaeo1().s[189]++;
  return {
    // State
    ...state,
    // Actions
    handleUserFileUpload,
    handleApparelFileUpload,
    handleLeftCardImageUpload,
    handleRightCardImageUpload,
    startGeneration,
    retryGeneration,
    cancelGeneration,
    resetWorkflow,
    closePolaroid,
    clearError,
    validateFiles,
    canGenerate
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,