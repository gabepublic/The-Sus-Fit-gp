{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/lib/env-module.spec.ts"],"sourcesContent":["/**\n * This test file specifically tests the module import behavior of env.ts\n * to ensure 100% branch coverage of the env export\n */\n\ndescribe('env module import', () => {\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    // Reset process.env before each test\n    process.env = { ...originalEnv };\n    // Clear module cache to ensure fresh imports\n    jest.resetModules();\n  });\n\n  afterAll(() => {\n    // Restore original process.env after all tests\n    process.env = originalEnv;\n  });\n\n  it('should call validateEnv when NODE_ENV is production', async () => {\n    // Arrange\n    (process.env as any).NODE_ENV = 'production';\n    process.env.ANTHROPIC_API_KEY = 'prod-key';\n    process.env.PINECONE_API_KEY = 'prod-pinecone';\n    process.env.PINECONE_ENVIRONMENT = 'prod-env';\n    process.env.PINECONE_INDEX_NAME = 'prod-index';\n    process.env.LANGCHAIN_API_KEY = 'prod-langchain';\n    process.env.LANGCHAIN_TRACING_V2 = 'prod-tracing';\n\n    // Act - Import the module fresh\n    const { env } = await import('../../src/lib/env');\n\n    // Assert - Only check the values we explicitly set\n    expect(env.ANTHROPIC_API_KEY).toBe('prod-key');\n    expect(env.PINECONE_API_KEY).toBe('prod-pinecone');\n    expect(env.PINECONE_ENVIRONMENT).toBe('prod-env');\n    expect(env.PINECONE_INDEX_NAME).toBe('prod-index');\n    expect(env.NODE_ENV).toBe('production');\n    // Optional fields should exist but may have values from the test environment\n    expect(env).toHaveProperty('LANGCHAIN_API_KEY');\n    expect(env).toHaveProperty('LANGCHAIN_TRACING_V2');\n    expect(env).toHaveProperty('NEXT_PUBLIC_APP_URL');\n  });\n\n  it('should call validateEnv when NODE_ENV is development', async () => {\n    // Arrange\n    (process.env as any).NODE_ENV = 'development';\n    process.env.ANTHROPIC_API_KEY = 'dev-key';\n    process.env.PINECONE_API_KEY = 'dev-pinecone';\n    process.env.PINECONE_ENVIRONMENT = 'dev-env';\n    process.env.PINECONE_INDEX_NAME = 'dev-index';\n    process.env.LANGCHAIN_API_KEY = 'dev-langchain';\n    process.env.LANGCHAIN_TRACING_V2 = 'dev-tracing';\n\n    // Act - Import the module fresh\n    const { env } = await import('../../src/lib/env');\n\n    // Assert - Only check the values we explicitly set\n    expect(env.ANTHROPIC_API_KEY).toBe('dev-key');\n    expect(env.PINECONE_API_KEY).toBe('dev-pinecone');\n    expect(env.PINECONE_ENVIRONMENT).toBe('dev-env');\n    expect(env.PINECONE_INDEX_NAME).toBe('dev-index');\n    expect(env.NODE_ENV).toBe('development');\n    // Optional fields should exist but may have values from the test environment\n    expect(env).toHaveProperty('LANGCHAIN_API_KEY');\n    expect(env).toHaveProperty('LANGCHAIN_TRACING_V2');\n    expect(env).toHaveProperty('NEXT_PUBLIC_APP_URL');\n  });\n\n  it('should call validateEnv when NODE_ENV is undefined', async () => {\n    // Arrange\n    delete (process.env as any).NODE_ENV;\n    process.env.ANTHROPIC_API_KEY = 'undefined-key';\n    process.env.PINECONE_API_KEY = 'undefined-pinecone';\n    process.env.PINECONE_ENVIRONMENT = 'undefined-env';\n    process.env.PINECONE_INDEX_NAME = 'undefined-index';\n    process.env.LANGCHAIN_API_KEY = 'undefined-langchain';\n    process.env.LANGCHAIN_TRACING_V2 = 'undefined-tracing';\n\n    // Act - Import the module fresh\n    const { env } = await import('../../src/lib/env');\n\n    // Assert - Only check the values we explicitly set\n    expect(env.ANTHROPIC_API_KEY).toBe('undefined-key');\n    expect(env.PINECONE_API_KEY).toBe('undefined-pinecone');\n    expect(env.PINECONE_ENVIRONMENT).toBe('undefined-env');\n    expect(env.PINECONE_INDEX_NAME).toBe('undefined-index');\n    expect(env.NODE_ENV).toBeUndefined();\n    // Optional fields should exist but may have values from the test environment\n    expect(env).toHaveProperty('LANGCHAIN_API_KEY');\n    expect(env).toHaveProperty('LANGCHAIN_TRACING_V2');\n    expect(env).toHaveProperty('NEXT_PUBLIC_APP_URL');\n  });\n\n  it('should return empty object when NODE_ENV is test', async () => {\n    // Arrange\n    (process.env as any).NODE_ENV = 'test';\n\n    // Act - Import the module fresh\n    const { env } = await import('../../src/lib/env');\n\n    // Assert\n    expect(env).toEqual({});\n  });\n\n  it('should throw error when validateEnv fails during import', async () => {\n    // Arrange - Missing required environment variables\n    (process.env as any).NODE_ENV = 'production';\n    delete process.env.ANTHROPIC_API_KEY;\n    delete process.env.PINECONE_API_KEY;\n    delete process.env.PINECONE_ENVIRONMENT;\n    delete process.env.PINECONE_INDEX_NAME;\n\n    // Act & Assert - Import should throw\n    await expect(import('../../src/lib/env')).rejects.toThrow('Invalid environment variables');\n  });\n}); "],"names":["describe","originalEnv","process","env","beforeEach","jest","resetModules","afterAll","it","NODE_ENV","ANTHROPIC_API_KEY","PINECONE_API_KEY","PINECONE_ENVIRONMENT","PINECONE_INDEX_NAME","LANGCHAIN_API_KEY","LANGCHAIN_TRACING_V2","expect","toBe","toHaveProperty","toBeUndefined","toEqual","rejects","toThrow"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEDA,SAAS,qBAAqB;IAC5B,MAAMC,cAAcC,QAAQC,GAAG;IAE/BC,WAAW;QACT,qCAAqC;QACrCF,QAAQC,GAAG,GAAG;YAAE,GAAGF,WAAW;QAAC;QAC/B,6CAA6C;QAC7CI,KAAKC,YAAY;IACnB;IAEAC,SAAS;QACP,+CAA+C;QAC/CL,QAAQC,GAAG,GAAGF;IAChB;IAEAO,GAAG,uDAAuD;QACxD,UAAU;QACTN,QAAQC,GAAG,CAASM,QAAQ,GAAG;QAChCP,QAAQC,GAAG,CAACO,iBAAiB,GAAG;QAChCR,QAAQC,GAAG,CAACQ,gBAAgB,GAAG;QAC/BT,QAAQC,GAAG,CAACS,oBAAoB,GAAG;QACnCV,QAAQC,GAAG,CAACU,mBAAmB,GAAG;QAClCX,QAAQC,GAAG,CAACW,iBAAiB,GAAG;QAChCZ,QAAQC,GAAG,CAACY,oBAAoB,GAAG;QAEnC,gCAAgC;QAChC,MAAM,EAAEZ,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE7B,mDAAmD;QACnDa,OAAOb,IAAIO,iBAAiB,EAAEO,IAAI,CAAC;QACnCD,OAAOb,IAAIQ,gBAAgB,EAAEM,IAAI,CAAC;QAClCD,OAAOb,IAAIS,oBAAoB,EAAEK,IAAI,CAAC;QACtCD,OAAOb,IAAIU,mBAAmB,EAAEI,IAAI,CAAC;QACrCD,OAAOb,IAAIM,QAAQ,EAAEQ,IAAI,CAAC;QAC1B,6EAA6E;QAC7ED,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;IAC7B;IAEAV,GAAG,wDAAwD;QACzD,UAAU;QACTN,QAAQC,GAAG,CAASM,QAAQ,GAAG;QAChCP,QAAQC,GAAG,CAACO,iBAAiB,GAAG;QAChCR,QAAQC,GAAG,CAACQ,gBAAgB,GAAG;QAC/BT,QAAQC,GAAG,CAACS,oBAAoB,GAAG;QACnCV,QAAQC,GAAG,CAACU,mBAAmB,GAAG;QAClCX,QAAQC,GAAG,CAACW,iBAAiB,GAAG;QAChCZ,QAAQC,GAAG,CAACY,oBAAoB,GAAG;QAEnC,gCAAgC;QAChC,MAAM,EAAEZ,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE7B,mDAAmD;QACnDa,OAAOb,IAAIO,iBAAiB,EAAEO,IAAI,CAAC;QACnCD,OAAOb,IAAIQ,gBAAgB,EAAEM,IAAI,CAAC;QAClCD,OAAOb,IAAIS,oBAAoB,EAAEK,IAAI,CAAC;QACtCD,OAAOb,IAAIU,mBAAmB,EAAEI,IAAI,CAAC;QACrCD,OAAOb,IAAIM,QAAQ,EAAEQ,IAAI,CAAC;QAC1B,6EAA6E;QAC7ED,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;IAC7B;IAEAV,GAAG,sDAAsD;QACvD,UAAU;QACV,OAAO,AAACN,QAAQC,GAAG,CAASM,QAAQ;QACpCP,QAAQC,GAAG,CAACO,iBAAiB,GAAG;QAChCR,QAAQC,GAAG,CAACQ,gBAAgB,GAAG;QAC/BT,QAAQC,GAAG,CAACS,oBAAoB,GAAG;QACnCV,QAAQC,GAAG,CAACU,mBAAmB,GAAG;QAClCX,QAAQC,GAAG,CAACW,iBAAiB,GAAG;QAChCZ,QAAQC,GAAG,CAACY,oBAAoB,GAAG;QAEnC,gCAAgC;QAChC,MAAM,EAAEZ,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE7B,mDAAmD;QACnDa,OAAOb,IAAIO,iBAAiB,EAAEO,IAAI,CAAC;QACnCD,OAAOb,IAAIQ,gBAAgB,EAAEM,IAAI,CAAC;QAClCD,OAAOb,IAAIS,oBAAoB,EAAEK,IAAI,CAAC;QACtCD,OAAOb,IAAIU,mBAAmB,EAAEI,IAAI,CAAC;QACrCD,OAAOb,IAAIM,QAAQ,EAAEU,aAAa;QAClC,6EAA6E;QAC7EH,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;QAC3BF,OAAOb,KAAKe,cAAc,CAAC;IAC7B;IAEAV,GAAG,oDAAoD;QACrD,UAAU;QACTN,QAAQC,GAAG,CAASM,QAAQ,GAAG;QAEhC,gCAAgC;QAChC,MAAM,EAAEN,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE7B,SAAS;QACTa,OAAOb,KAAKiB,OAAO,CAAC,CAAC;IACvB;IAEAZ,GAAG,2DAA2D;QAC5D,mDAAmD;QAClDN,QAAQC,GAAG,CAASM,QAAQ,GAAG;QAChC,OAAOP,QAAQC,GAAG,CAACO,iBAAiB;QACpC,OAAOR,QAAQC,GAAG,CAACQ,gBAAgB;QACnC,OAAOT,QAAQC,GAAG,CAACS,oBAAoB;QACvC,OAAOV,QAAQC,GAAG,CAACU,mBAAmB;QAEtC,qCAAqC;QACrC,MAAMG,OAAO,mEAAA,QAAO,wBAAsBK,OAAO,CAACC,OAAO,CAAC;IAC5D;AACF"}