{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/components/page.test.tsx"],"sourcesContent":["import { fileToBase64, compressBase64, CompressionFailedError } from '@/utils/image'\n\n// Mock the utility functions\njest.mock('@/utils/image', () => ({\n  fileToBase64: jest.fn(),\n  compressBase64: jest.fn(),\n  CompressionFailedError: class CompressionFailedError extends Error {\n    constructor(message: string) {\n      super(message)\n      this.name = 'CompressionFailedError'\n    }\n  }\n}))\n\n// Mock fetch globally\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock console methods\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation()\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation()\n\n// Mock File constructor\nglobal.File = jest.fn().mockImplementation((content, name, options) => ({\n  name,\n  size: content.length,\n  type: options?.type || 'image/jpeg',\n  arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(content.length)),\n  stream: jest.fn(),\n  text: jest.fn().mockResolvedValue(''),\n  slice: jest.fn(),\n  lastModified: Date.now(),\n}))\n\n// Mock AbortController\nglobal.AbortController = jest.fn().mockImplementation(() => ({\n  signal: 'mock-signal',\n  abort: jest.fn(),\n}))\n\n// Mock setTimeout and clearTimeout\njest.useFakeTimers()\nconst mockSetTimeout = jest.spyOn(global, 'setTimeout')\nconst mockClearTimeout = jest.spyOn(global, 'clearTimeout')\n\ndescribe('handleCameraButtonClick Logic Tests', () => {\n  let mockUserFile: File\n  let mockApparelFile: File\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    \n    // Create mock files\n    mockUserFile = new File(['user-image-content'], 'user.jpg', { type: 'image/jpeg' })\n    mockApparelFile = new File(['apparel-image-content'], 'apparel.jpg', { type: 'image/jpeg' })\n    \n    // Reset mock implementations\n    ;(fileToBase64 as jest.Mock).mockResolvedValue('mock-base64-string')\n    ;(compressBase64 as jest.Mock).mockResolvedValue('compressed-base64-string')\n    mockFetch.mockClear()\n  })\n\n  afterEach(() => {\n    jest.clearAllTimers()\n  })\n\n  // Test the core logic function that would be extracted from handleCameraButtonClick\n  const processImagesAndCallAPI = async (userFile: File, apparelFile: File) => {\n    try {\n      // Process images concurrently\n      const [modelB64, apparelB64] = await Promise.all([\n        fileToBase64(userFile),\n        fileToBase64(apparelFile)\n      ])\n\n      // Compress both images\n      const [compressedModel, compressedApparel] = await Promise.all([\n        compressBase64(modelB64, 2048),\n        compressBase64(apparelB64, 2048)\n      ])\n\n      // Create AbortController for timeout\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), 30000)\n\n      try {\n        // Make API call\n        const response = await fetch('/api/tryon', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            modelImage: compressedModel,\n            apparelImages: [compressedApparel]\n          }),\n          signal: controller.signal\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          throw new Error(`API request failed: ${response.status} ${errorText}`)\n        }\n\n        const { img_generated } = await response.json()\n        console.log('Successfully received generated image from API')\n        \n        return { success: true, img_generated }\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    } catch (error) {\n      console.error('Error in processImagesAndCallAPI:', error)\n      throw error\n    }\n  }\n\n  describe('Success Path', () => {\n    it('should successfully process images and make API call', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'generated-image-base64' })\n      })\n\n      // Act\n      const result = await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(fileToBase64).toHaveBeenCalledWith(mockUserFile)\n      expect(fileToBase64).toHaveBeenCalledWith(mockApparelFile)\n      expect(compressBase64).toHaveBeenCalledWith('mock-base64-string', 2048)\n      expect(mockFetch).toHaveBeenCalledWith('/api/tryon', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          modelImage: 'compressed-base64-string',\n          apparelImages: ['compressed-base64-string']\n        }),\n        signal: 'mock-signal'\n      })\n      expect(mockConsoleLog).toHaveBeenCalledWith('Successfully received generated image from API')\n      expect(result).toEqual({ success: true, img_generated: 'generated-image-base64' })\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle compression failures', async () => {\n      // Arrange\n      ;(compressBase64 as jest.Mock).mockRejectedValueOnce(new CompressionFailedError('Compression failed'))\n\n      // Act & Assert\n      await expect(processImagesAndCallAPI(mockUserFile, mockApparelFile))\n        .rejects.toThrow('Compression failed')\n    })\n\n    it('should handle API request failures', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        text: jest.fn().mockResolvedValue('Bad request')\n      })\n\n      // Act & Assert\n      await expect(processImagesAndCallAPI(mockUserFile, mockApparelFile))\n        .rejects.toThrow('API request failed: 400 Bad request')\n    })\n\n    it('should handle timeout errors', async () => {\n      // Arrange\n      const abortError = new Error('Request aborted')\n      abortError.name = 'AbortError'\n      mockFetch.mockRejectedValueOnce(abortError)\n\n      // Act & Assert\n      await expect(processImagesAndCallAPI(mockUserFile, mockApparelFile))\n        .rejects.toThrow('Request aborted')\n    })\n  })\n\n  describe('Timeout Management', () => {\n    it('should create AbortController with 30-second timeout', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'test' })\n      })\n\n      // Act\n      await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(global.AbortController).toHaveBeenCalled()\n      expect(mockSetTimeout).toHaveBeenCalledWith(expect.any(Function), 30000)\n    })\n\n    it('should clear timeout on successful completion', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'test' })\n      })\n\n      // Act\n      await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(mockClearTimeout).toHaveBeenCalled()\n    })\n  })\n\n  describe('Image Processing', () => {\n    it('should process both images concurrently', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'test' })\n      })\n\n      // Act\n      await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(fileToBase64).toHaveBeenCalledWith(mockUserFile)\n      expect(fileToBase64).toHaveBeenCalledWith(mockApparelFile)\n      expect(compressBase64).toHaveBeenCalledWith('mock-base64-string', 2048)\n    })\n\n    it('should use correct compression limit', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'test' })\n      })\n\n      // Act\n      await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(compressBase64).toHaveBeenCalledWith('mock-base64-string', 2048)\n    })\n  })\n\n  describe('API Request Format', () => {\n    it('should send correct request body format', async () => {\n      // Arrange\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ img_generated: 'test' })\n      })\n\n      // Act\n      await processImagesAndCallAPI(mockUserFile, mockApparelFile)\n\n      // Assert\n      expect(mockFetch).toHaveBeenCalledWith('/api/tryon', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          modelImage: 'compressed-base64-string',\n          apparelImages: ['compressed-base64-string']\n        }),\n        signal: 'mock-signal'\n      })\n    })\n  })\n}) "],"names":["jest","mock","fileToBase64","fn","compressBase64","CompressionFailedError","Error","constructor","message","name","mockFetch","global","fetch","mockConsoleLog","spyOn","console","mockImplementation","mockConsoleError","File","content","options","size","length","type","arrayBuffer","mockResolvedValue","ArrayBuffer","stream","text","slice","lastModified","Date","now","AbortController","signal","abort","useFakeTimers","mockSetTimeout","mockClearTimeout","describe","mockUserFile","mockApparelFile","beforeEach","clearAllMocks","mockClear","afterEach","clearAllTimers","processImagesAndCallAPI","userFile","apparelFile","modelB64","apparelB64","Promise","all","compressedModel","compressedApparel","controller","timeoutId","setTimeout","response","method","headers","body","JSON","stringify","modelImage","apparelImages","ok","errorText","status","img_generated","json","log","success","clearTimeout","error","it","mockResolvedValueOnce","result","expect","toHaveBeenCalledWith","toEqual","mockRejectedValueOnce","rejects","toThrow","abortError","toHaveBeenCalled","any","Function"],"mappings":"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"}