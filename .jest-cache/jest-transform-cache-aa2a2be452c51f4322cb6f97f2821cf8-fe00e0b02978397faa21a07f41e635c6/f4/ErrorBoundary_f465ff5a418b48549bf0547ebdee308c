2da38598bb79da842605b53efcdec613
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ErrorBoundary", {
    enumerable: true,
    get: function() {
        return ErrorBoundary;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _errorHandling = require("../utils/errorHandling");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DefaultErrorFallback = ({ error, resetError })=>{
    // Use comprehensive error handling to format the error
    const { title, message, actions, canRetry } = (0, _errorHandling.formatErrorForDisplay)(error);
    const handleActionClick = (action)=>{
        switch(action.type){
            case 'retry':
                resetError();
                break;
            case 'check_connection':
                // Could open a help modal or redirect to network troubleshooting
                window.open('https://support.google.com/chrome/answer/95669', '_blank');
                break;
            case 'contact_support':
                // Could open support modal or redirect to support page
                console.log('Contact support requested');
                break;
            default:
                console.log(`Action not implemented: ${action.type}`);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex flex-col items-center justify-center min-h-[200px] p-6 bg-red-50 border border-red-200 rounded-lg",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "text-red-600 text-lg font-semibold mb-2",
                children: title
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "text-red-500 text-sm mb-4 text-center max-w-md",
                children: message
            }),
            error.code && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "text-red-400 text-xs mb-4",
                children: [
                    "Error Code: ",
                    error.code
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex flex-col gap-2 w-full max-w-sm",
                children: [
                    actions.map((action, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: ()=>handleActionClick(action),
                            className: "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm",
                            children: action.description
                        }, index)),
                    canRetry && !actions.some((a)=>a.type === 'retry') && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: resetError,
                        className: "px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors",
                        children: "Try Again"
                    })
                ]
            })
        ]
    });
};
class ErrorBoundary extends _react.default.Component {
    constructor(props){
        super(props), this.resetError = ()=>{
            this.setState({
                hasError: false,
                error: undefined
            });
        };
        this.state = {
            hasError: false
        };
    }
    static getDerivedStateFromError(error) {
        const businessError = {
            name: error.name,
            message: error.message,
            code: 'COMPONENT_ERROR',
            timestamp: new Date().toISOString(),
            ...'cause' in error && {
                details: {
                    cause: error.cause
                }
            }
        };
        return {
            hasError: true,
            error: businessError
        };
    }
    componentDidCatch(error, errorInfo) {
        const businessError = {
            name: error.name,
            message: error.message,
            code: 'COMPONENT_ERROR',
            timestamp: new Date().toISOString(),
            details: {
                componentStack: errorInfo.componentStack
            }
        };
        // Use comprehensive error logging system
        (0, _errorHandling.logAndClassifyError)(businessError, {
            errorBoundary: true,
            componentStack: errorInfo.componentStack,
            timestamp: new Date().toISOString()
        });
        this.props.onError?.(businessError, errorInfo);
        // Log to console in development for debugging
        if (process.env.NODE_ENV === 'development') {
            console.error('ErrorBoundary caught an error:', error, errorInfo);
        }
    }
    render() {
        if (this.state.hasError && this.state.error) {
            const FallbackComponent = this.props.fallback || DefaultErrorFallback;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(FallbackComponent, {
                error: this.state.error,
                resetError: this.resetError
            });
        }
        return this.props.children;
    }
}

//# sourceMappingURL=data:application/json;base64,