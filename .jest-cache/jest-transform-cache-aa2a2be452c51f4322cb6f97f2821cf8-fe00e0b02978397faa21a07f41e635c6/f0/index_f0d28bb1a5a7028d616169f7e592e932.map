{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/test-utils/index.ts"],"sourcesContent":["/**\n * Test Utilities Index\n * Central export point for all testing utilities\n */\n\n// React Query testing utilities\nexport {\n  createTestQueryClient,\n  renderWithProviders,\n  TestProviders,\n  HookTestUtils,\n  MutationTestUtils,\n  MockUtils,\n  TimeTestUtils,\n  type QueryTestConfig,\n  type TestProvidersProps,\n  type CustomRenderOptions,\n} from './react-query-test-utils';\n\n// Bridge layer testing utilities\nexport {\n  BridgeLayerTestUtils,\n  WorkflowTestUtils,\n  BridgePerformanceUtils,\n  renderBridgeHook,\n  type BridgeLayerTestConfig,\n} from './bridge-layer-test-utils';\n\n// API mocking utilities\nexport {\n  server,\n  handlers,\n  errorHandlers,\n  performanceHandlers,\n  MockAPIUtils,\n  openAIMocks,\n  DEFAULT_MOCK_RESPONSES,\n  API_ENDPOINTS,\n  type MockTryonResponse,\n  type MockErrorResponse,\n} from './api-mocks';\n\n/**\n * Convenience re-exports with shorter names\n */\nexport {\n  renderWithProviders as render,\n  createTestQueryClient as createQueryClient,\n  TestProviders as Providers,\n} from './react-query-test-utils';\n\nexport {\n  renderBridgeHook as renderHook,\n  BridgeLayerTestUtils as TestUtils,\n} from './bridge-layer-test-utils';\n\nexport {\n  MockAPIUtils as MockAPI,\n  server as mockServer,\n} from './api-mocks';\n\n/**\n * Complete test setup function\n */\nexport function setupTestEnvironment(options: {\n  enableApiMocks?: boolean;\n  enableQueryCache?: boolean;\n  enableConsoleSuppress?: boolean;\n} = {}) {\n  const {\n    enableApiMocks = true,\n    enableQueryCache = false,\n    enableConsoleSuppress = true,\n  } = options;\n\n  // Setup API mocks\n  if (enableApiMocks) {\n    try {\n      const { MockAPIUtils } = require('./api-mocks');\n      MockAPIUtils.setupServer();\n    } catch (e) {\n      // MockAPIUtils not available\n    }\n  }\n\n  // Suppress console logs in tests\n  if (enableConsoleSuppress) {\n    const originalConsole = { ...console };\n    \n    beforeEach(() => {\n      console.log = jest.fn();\n      console.info = jest.fn();\n      console.warn = jest.fn();\n      // Keep console.error for debugging\n    });\n    \n    afterEach(() => {\n      Object.assign(console, originalConsole);\n    });\n  }\n\n  // Global test cleanup\n  afterEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n    \n    // Reset API mocks\n    if (enableApiMocks) {\n      try {\n        const { MockAPIUtils } = require('./api-mocks');\n        MockAPIUtils.reset();\n      } catch (e) {\n        // MockAPIUtils not available\n      }\n    }\n  });\n}\n\n/**\n * Export a default configuration for common testing scenarios\n */\nexport const testConfigs = {\n  // Basic unit test configuration\n  unit: {\n    queryTestConfig: {\n      disableRetries: true,\n      disableCache: true,\n    },\n    bridgeConfig: {\n      mockToast: true,\n      mockFileAPIs: true,\n      mockFetch: false, // Use real fetch with MSW\n    },\n  },\n\n  // Integration test configuration\n  integration: {\n    queryTestConfig: {\n      disableRetries: false,\n      disableCache: false,\n    },\n    bridgeConfig: {\n      mockToast: true,\n      mockFileAPIs: true,\n      mockFetch: false, // Use MSW for API calls\n    },\n  },\n\n  // Performance test configuration\n  performance: {\n    queryTestConfig: {\n      disableRetries: true,\n      disableCache: false, // Enable cache for realistic performance\n    },\n    bridgeConfig: {\n      mockToast: false, // Don't mock for realistic performance\n      mockFileAPIs: false,\n      mockFetch: false,\n    },\n  },\n\n  // End-to-end test configuration\n  e2e: {\n    queryTestConfig: {\n      disableRetries: false,\n      disableCache: false,\n    },\n    bridgeConfig: {\n      mockToast: false,\n      mockFileAPIs: false,\n      mockFetch: false,\n    },\n  },\n} as const;\n\n/**\n * Quick setup functions for common scenarios\n */\nexport const quickSetup = {\n  /**\n   * Setup for testing business layer hooks\n   */\n  businessLayer: () => {\n    setupTestEnvironment({ enableApiMocks: true });\n    const { HookTestUtils } = require('./react-query-test-utils');\n    return new HookTestUtils(testConfigs.unit.queryTestConfig);\n  },\n\n  /**\n   * Setup for testing bridge layer hooks\n   */\n  bridgeLayer: () => {\n    setupTestEnvironment({ enableApiMocks: true });\n    const { BridgeLayerTestUtils } = require('./bridge-layer-test-utils');\n    return new BridgeLayerTestUtils(testConfigs.integration.bridgeConfig);\n  },\n\n  /**\n   * Setup for testing mutations\n   */\n  mutations: () => {\n    setupTestEnvironment({ enableApiMocks: true });\n    const { MutationTestUtils } = require('./react-query-test-utils');\n    return new MutationTestUtils(testConfigs.unit.queryTestConfig);\n  },\n\n  /**\n   * Setup for performance testing\n   */\n  performance: () => {\n    setupTestEnvironment({ enableApiMocks: true, enableConsoleSuppress: false });\n    const { BridgePerformanceUtils } = require('./bridge-layer-test-utils');\n    return new BridgePerformanceUtils();\n  },\n};\n\n// Note: Default export removed to avoid circular reference issues\n// Use named exports instead: import { createTestQueryClient, renderBridgeHook, etc. }"],"names":["API_ENDPOINTS","BridgeLayerTestUtils","BridgePerformanceUtils","DEFAULT_MOCK_RESPONSES","HookTestUtils","MockAPI","MockAPIUtils","MockUtils","MutationTestUtils","Providers","TestProviders","TestUtils","TimeTestUtils","WorkflowTestUtils","createQueryClient","createTestQueryClient","errorHandlers","handlers","mockServer","server","openAIMocks","performanceHandlers","quickSetup","render","renderWithProviders","renderBridgeHook","renderHook","setupTestEnvironment","testConfigs","options","enableApiMocks","enableQueryCache","enableConsoleSuppress","require","setupServer","e","originalConsole","console","beforeEach","log","jest","fn","info","warn","afterEach","Object","assign","clearAllMocks","reset","unit","queryTestConfig","disableRetries","disableCache","bridgeConfig","mockToast","mockFileAPIs","mockFetch","integration","performance","e2e","businessLayer","bridgeLayer","mutations"],"mappings":"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"}