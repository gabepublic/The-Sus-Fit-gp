b8edfc7d33bca5018a42ee688522077a
/**
 * Test Utilities Index
 * Central export point for all testing utilities
 */ // React Query testing utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    API_ENDPOINTS: function() {
        return _apimocks.API_ENDPOINTS;
    },
    BridgeLayerTestUtils: function() {
        return _bridgelayertestutils.BridgeLayerTestUtils;
    },
    BridgePerformanceUtils: function() {
        return _bridgelayertestutils.BridgePerformanceUtils;
    },
    DEFAULT_MOCK_RESPONSES: function() {
        return _apimocks.DEFAULT_MOCK_RESPONSES;
    },
    HookTestUtils: function() {
        return _reactquerytestutils.HookTestUtils;
    },
    MockAPI: function() {
        return _apimocks.MockAPIUtils;
    },
    MockAPIUtils: function() {
        return _apimocks.MockAPIUtils;
    },
    MockUtils: function() {
        return _reactquerytestutils.MockUtils;
    },
    MutationTestUtils: function() {
        return _reactquerytestutils.MutationTestUtils;
    },
    Providers: function() {
        return _reactquerytestutils.TestProviders;
    },
    TestProviders: function() {
        return _reactquerytestutils.TestProviders;
    },
    TestUtils: function() {
        return _bridgelayertestutils.BridgeLayerTestUtils;
    },
    TimeTestUtils: function() {
        return _reactquerytestutils.TimeTestUtils;
    },
    WorkflowTestUtils: function() {
        return _bridgelayertestutils.WorkflowTestUtils;
    },
    createQueryClient: function() {
        return _reactquerytestutils.createTestQueryClient;
    },
    createTestQueryClient: function() {
        return _reactquerytestutils.createTestQueryClient;
    },
    errorHandlers: function() {
        return _apimocks.errorHandlers;
    },
    handlers: function() {
        return _apimocks.handlers;
    },
    mockServer: function() {
        return _apimocks.server;
    },
    openAIMocks: function() {
        return _apimocks.openAIMocks;
    },
    performanceHandlers: function() {
        return _apimocks.performanceHandlers;
    },
    quickSetup: function() {
        return quickSetup;
    },
    render: function() {
        return _reactquerytestutils.renderWithProviders;
    },
    renderBridgeHook: function() {
        return _bridgelayertestutils.renderBridgeHook;
    },
    renderHook: function() {
        return _bridgelayertestutils.renderBridgeHook;
    },
    renderWithProviders: function() {
        return _reactquerytestutils.renderWithProviders;
    },
    server: function() {
        return _apimocks.server;
    },
    setupTestEnvironment: function() {
        return setupTestEnvironment;
    },
    testConfigs: function() {
        return testConfigs;
    }
});
const _reactquerytestutils = require("./react-query-test-utils");
const _bridgelayertestutils = require("./bridge-layer-test-utils");
const _apimocks = require("./api-mocks");
function setupTestEnvironment(options = {}) {
    const { enableApiMocks = true, enableQueryCache = false, enableConsoleSuppress = true } = options;
    // Setup API mocks
    if (enableApiMocks) {
        try {
            const { MockAPIUtils } = require('./api-mocks');
            MockAPIUtils.setupServer();
        } catch (e) {
        // MockAPIUtils not available
        }
    }
    // Suppress console logs in tests
    if (enableConsoleSuppress) {
        const originalConsole = {
            ...console
        };
        beforeEach(()=>{
            console.log = jest.fn();
            console.info = jest.fn();
            console.warn = jest.fn();
        // Keep console.error for debugging
        });
        afterEach(()=>{
            Object.assign(console, originalConsole);
        });
    }
    // Global test cleanup
    afterEach(()=>{
        // Clear all mocks
        jest.clearAllMocks();
        // Reset API mocks
        if (enableApiMocks) {
            try {
                const { MockAPIUtils } = require('./api-mocks');
                MockAPIUtils.reset();
            } catch (e) {
            // MockAPIUtils not available
            }
        }
    });
}
const testConfigs = {
    // Basic unit test configuration
    unit: {
        queryTestConfig: {
            disableRetries: true,
            disableCache: true
        },
        bridgeConfig: {
            mockToast: true,
            mockFileAPIs: true,
            mockFetch: false
        }
    },
    // Integration test configuration
    integration: {
        queryTestConfig: {
            disableRetries: false,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: true,
            mockFileAPIs: true,
            mockFetch: false
        }
    },
    // Performance test configuration
    performance: {
        queryTestConfig: {
            disableRetries: true,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: false,
            mockFileAPIs: false,
            mockFetch: false
        }
    },
    // End-to-end test configuration
    e2e: {
        queryTestConfig: {
            disableRetries: false,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: false,
            mockFileAPIs: false,
            mockFetch: false
        }
    }
};
const quickSetup = {
    /**
   * Setup for testing business layer hooks
   */ businessLayer: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        const { HookTestUtils } = require('./react-query-test-utils');
        return new HookTestUtils(testConfigs.unit.queryTestConfig);
    },
    /**
   * Setup for testing bridge layer hooks
   */ bridgeLayer: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        const { BridgeLayerTestUtils } = require('./bridge-layer-test-utils');
        return new BridgeLayerTestUtils(testConfigs.integration.bridgeConfig);
    },
    /**
   * Setup for testing mutations
   */ mutations: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        const { MutationTestUtils } = require('./react-query-test-utils');
        return new MutationTestUtils(testConfigs.unit.queryTestConfig);
    },
    /**
   * Setup for performance testing
   */ performance: ()=>{
        setupTestEnvironment({
            enableApiMocks: true,
            enableConsoleSuppress: false
        });
        const { BridgePerformanceUtils } = require('./bridge-layer-test-utils');
        return new BridgePerformanceUtils();
    }
}; // Note: Default export removed to avoid circular reference issues
 // Use named exports instead: import { createTestQueryClient, renderBridgeHook, etc. }

//# sourceMappingURL=data:application/json;base64,