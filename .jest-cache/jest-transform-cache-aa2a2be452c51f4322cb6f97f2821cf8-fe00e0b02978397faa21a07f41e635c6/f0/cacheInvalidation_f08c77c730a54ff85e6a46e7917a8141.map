{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/cacheInvalidation.ts"],"sourcesContent":["// Advanced Cache Invalidation Strategies\n// Comprehensive cache management for try-on mutations and related queries\n\nimport { QueryClient } from '@tanstack/react-query';\nimport type { TryonMutationVariables, TryonMutationResponse, TryonMutationContext } from '../types/tryon.types';\n\n/**\n * Configuration for cache invalidation strategies\n */\nexport interface CacheInvalidationConfig {\n  /** Whether to invalidate history-related queries */\n  invalidateHistory?: boolean;\n  /** Whether to invalidate user-specific data */\n  invalidateUserData?: boolean;\n  /** Whether to invalidate statistics and aggregations */\n  invalidateStats?: boolean;\n  /** Whether to invalidate tag-based queries */\n  invalidateTags?: boolean;\n  /** Whether to preload related queries after invalidation */\n  preloadRelated?: boolean;\n  /** Custom query keys to invalidate */\n  customQueryKeys?: string[][];\n  /** Context for user-specific invalidation */\n  userContext?: {\n    userId?: string;\n    tags?: string[];\n  };\n}\n\n/**\n * Default cache invalidation configuration\n */\nconst DEFAULT_CACHE_CONFIG: Required<CacheInvalidationConfig> = {\n  invalidateHistory: true,\n  invalidateUserData: true,\n  invalidateStats: true,\n  invalidateTags: true,\n  preloadRelated: true,\n  customQueryKeys: [],\n  userContext: {}\n};\n\n/**\n * Advanced cache invalidation manager\n */\nexport class CacheInvalidationManager {\n  private queryClient: QueryClient;\n\n  constructor(queryClient: QueryClient) {\n    this.queryClient = queryClient;\n  }\n\n  /**\n   * Invalidate caches after successful try-on mutation\n   */\n  async invalidateAfterSuccess(\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: CacheInvalidationConfig = {}\n  ): Promise<void> {\n    const mergedConfig = { ...DEFAULT_CACHE_CONFIG, ...config };\n    const invalidationPromises: Promise<void>[] = [];\n\n    // 1. Invalidate history queries\n    if (mergedConfig.invalidateHistory) {\n      invalidationPromises.push(this.invalidateHistoryQueries());\n    }\n\n    // 2. Invalidate user-specific data\n    if (mergedConfig.invalidateUserData && mergedConfig.userContext.userId) {\n      invalidationPromises.push(this.invalidateUserQueries(mergedConfig.userContext.userId));\n    }\n\n    // 3. Invalidate statistics and aggregations\n    if (mergedConfig.invalidateStats) {\n      invalidationPromises.push(this.invalidateStatsQueries());\n    }\n\n    // 4. Invalidate tag-based queries\n    if (mergedConfig.invalidateTags && mergedConfig.userContext.tags?.length) {\n      invalidationPromises.push(this.invalidateTagQueries(mergedConfig.userContext.tags));\n    }\n\n    // 5. Invalidate custom query keys\n    if (mergedConfig.customQueryKeys.length > 0) {\n      invalidationPromises.push(this.invalidateCustomQueries(mergedConfig.customQueryKeys));\n    }\n\n    // Execute all invalidations in parallel\n    await Promise.all(invalidationPromises);\n\n    // 6. Preload related queries if enabled\n    if (mergedConfig.preloadRelated) {\n      await this.preloadRelatedQueries(mergedConfig.userContext);\n    }\n  }\n\n  /**\n   * Selective cache invalidation after error (lighter touch)\n   */\n  async invalidateAfterError(\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: Partial<CacheInvalidationConfig> = {}\n  ): Promise<void> {\n    const lightConfig = {\n      invalidateHistory: false,\n      invalidateUserData: false,\n      invalidateStats: false,\n      invalidateTags: false,\n      preloadRelated: false,\n      ...config\n    };\n\n    // Only invalidate specific queries that might be affected by the error\n    if (lightConfig.invalidateHistory) {\n      await this.invalidateHistoryQueries();\n    }\n  }\n\n  /**\n   * Invalidate history-related queries\n   */\n  private async invalidateHistoryQueries(): Promise<void> {\n    const historyInvalidations = [\n      // Main history entries\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-history'],\n        exact: false \n      }),\n      \n      // History metadata\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-metadata'],\n        exact: false \n      }),\n      \n      // Recent activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['recent-activity'],\n        exact: false \n      }),\n      \n      // History search results\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-search'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(historyInvalidations);\n  }\n\n  /**\n   * Invalidate user-specific queries\n   */\n  private async invalidateUserQueries(userId: string): Promise<void> {\n    const userInvalidations = [\n      // User profile data\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-data', userId],\n        exact: false \n      }),\n      \n      // User preferences\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-preferences', userId],\n        exact: false \n      }),\n      \n      // User activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-activity', userId],\n        exact: false \n      }),\n      \n      // User statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-stats', userId],\n        exact: false \n      })\n    ];\n\n    await Promise.all(userInvalidations);\n  }\n\n  /**\n   * Invalidate statistics and aggregation queries\n   */\n  private async invalidateStatsQueries(): Promise<void> {\n    const statsInvalidations = [\n      // General try-on statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-stats'],\n        exact: false \n      }),\n      \n      // Usage analytics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['usage-analytics'],\n        exact: false \n      }),\n      \n      // Performance metrics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['performance-metrics'],\n        exact: false \n      }),\n      \n      // Popular items/combinations\n      this.queryClient.invalidateQueries({ \n        queryKey: ['popular-items'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(statsInvalidations);\n  }\n\n  /**\n   * Invalidate tag-based queries\n   */\n  private async invalidateTagQueries(tags: string[]): Promise<void> {\n    const tagInvalidations = tags.map(tag => \n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-by-tag', tag],\n        exact: false \n      })\n    );\n\n    // Also invalidate general tag queries\n    tagInvalidations.push(\n      this.queryClient.invalidateQueries({ \n        queryKey: ['available-tags'],\n        exact: false \n      })\n    );\n\n    await Promise.all(tagInvalidations);\n  }\n\n  /**\n   * Invalidate custom query keys\n   */\n  private async invalidateCustomQueries(customQueryKeys: string[][]): Promise<void> {\n    const customInvalidations = customQueryKeys.map(queryKey => \n      this.queryClient.invalidateQueries({ \n        queryKey,\n        exact: false \n      })\n    );\n\n    await Promise.all(customInvalidations);\n  }\n\n  /**\n   * Preload related queries that are likely to be accessed next\n   */\n  private async preloadRelatedQueries(\n    userContext: { userId?: string; tags?: string[] } = {}\n  ): Promise<void> {\n    const preloadPromises: Promise<unknown>[] = [];\n\n    // Preload history entries (most likely to be viewed)\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'entries'],\n        staleTime: 30000, // Fresh for 30 seconds\n        gcTime: 5 * 60 * 1000 // Keep in cache for 5 minutes\n      })\n    );\n\n    // Preload history stats\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'stats'],\n        staleTime: 60000, // Fresh for 1 minute\n        gcTime: 10 * 60 * 1000 // Keep in cache for 10 minutes\n      })\n    );\n\n    // Preload user data if userId available\n    if (userContext.userId) {\n      preloadPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-data', userContext.userId],\n          staleTime: 60000,\n          gcTime: 10 * 60 * 1000\n        })\n      );\n    }\n\n    // Preload popular items\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['popular-items'],\n        staleTime: 5 * 60 * 1000, // Fresh for 5 minutes\n        gcTime: 15 * 60 * 1000 // Keep in cache for 15 minutes\n      })\n    );\n\n    await Promise.allSettled(preloadPromises);\n  }\n\n  /**\n   * Smart cache warming based on usage patterns\n   */\n  async warmCache(\n    options: {\n      userId?: string;\n      recentTags?: string[];\n      popularItems?: unknown[];\n    } = {}\n  ): Promise<void> {\n    const warmupPromises: Promise<unknown>[] = [];\n\n    // Warm up frequently accessed data structures\n    if (options.popularItems?.length) {\n      options.popularItems.forEach((item, index) => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['warmup-cache', 'popular', index],\n            queryFn: () => Promise.resolve(item),\n            staleTime: 10 * 60 * 1000, // Fresh for 10 minutes\n            gcTime: 30 * 60 * 1000 // Keep in cache for 30 minutes\n          })\n        );\n      });\n    }\n\n    // Warm up user-specific frequently accessed queries\n    if (options.userId) {\n      warmupPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-favorites', options.userId],\n          staleTime: 5 * 60 * 1000,\n          gcTime: 20 * 60 * 1000\n        })\n      );\n    }\n\n    // Warm up recent tag queries\n    if (options.recentTags?.length) {\n      options.recentTags.forEach(tag => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['recent-by-tag', tag],\n            staleTime: 2 * 60 * 1000, // Fresh for 2 minutes\n            gcTime: 10 * 60 * 1000\n          })\n        );\n      });\n    }\n\n    await Promise.allSettled(warmupPromises);\n  }\n\n  /**\n   * Cleanup stale cache entries\n   */\n  async cleanupStaleCache(): Promise<void> {\n    // Remove queries that haven't been accessed in a while\n    this.queryClient.removeQueries({\n      predicate: (query) => {\n        const lastAccessed = query.state.dataUpdatedAt;\n        const oneHourAgo = Date.now() - 60 * 60 * 1000;\n        return lastAccessed < oneHourAgo;\n      }\n    });\n\n    // Cleanup specific temporary cache entries\n    this.queryClient.removeQueries({\n      queryKey: ['warmup-cache'],\n      exact: false\n    });\n\n    this.queryClient.removeQueries({\n      queryKey: ['temp'],\n      exact: false\n    });\n  }\n}\n\n/**\n * Default cache invalidation manager instance\n */\nexport let defaultCacheManager: CacheInvalidationManager | null = null;\n\n/**\n * Initialize the default cache invalidation manager\n */\nexport function initializeCacheInvalidation(queryClient: QueryClient): CacheInvalidationManager {\n  defaultCacheManager = new CacheInvalidationManager(queryClient);\n  return defaultCacheManager;\n}\n\n/**\n * Get the default cache invalidation manager\n */\nexport function getCacheInvalidationManager(): CacheInvalidationManager {\n  if (!defaultCacheManager) {\n    throw new Error('CacheInvalidationManager not initialized. Call initializeCacheInvalidation first.');\n  }\n  return defaultCacheManager;\n}\n\n/**\n * Utility function for post-mutation cache invalidation\n */\nexport async function invalidateCacheAfterMutation(\n  queryClient: QueryClient,\n  data: TryonMutationResponse,\n  variables: TryonMutationVariables,\n  context: TryonMutationContext,\n  config?: CacheInvalidationConfig\n): Promise<void> {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n  await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n}\n\n/**\n * Hook for creating cache-aware mutation callbacks\n */\nexport function createCacheAwareMutationCallbacks(\n  queryClient: QueryClient,\n  config: CacheInvalidationConfig = {}\n) {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n\n  return {\n    onSuccess: async (\n      data: TryonMutationResponse,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext\n    ) => {\n      await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n    },\n\n    onError: async (\n      error: unknown,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext | undefined\n    ) => {\n      if (context) {\n        await cacheManager.invalidateAfterError(error, variables, context, {\n          invalidateHistory: false, // Don't invalidate on error by default\n          invalidateUserData: false,\n          ...config\n        });\n      }\n    }\n  };\n}"],"names":["CacheInvalidationManager","createCacheAwareMutationCallbacks","defaultCacheManager","getCacheInvalidationManager","initializeCacheInvalidation","invalidateCacheAfterMutation","DEFAULT_CACHE_CONFIG","invalidateHistory","invalidateUserData","invalidateStats","invalidateTags","preloadRelated","customQueryKeys","userContext","constructor","queryClient","invalidateAfterSuccess","data","variables","context","config","mergedConfig","invalidationPromises","push","invalidateHistoryQueries","userId","invalidateUserQueries","invalidateStatsQueries","tags","length","invalidateTagQueries","invalidateCustomQueries","Promise","all","preloadRelatedQueries","invalidateAfterError","error","lightConfig","historyInvalidations","invalidateQueries","queryKey","exact","userInvalidations","statsInvalidations","tagInvalidations","map","tag","customInvalidations","preloadPromises","prefetchQuery","staleTime","gcTime","allSettled","warmCache","options","warmupPromises","popularItems","forEach","item","index","queryFn","resolve","recentTags","cleanupStaleCache","removeQueries","predicate","query","lastAccessed","state","dataUpdatedAt","oneHourAgo","Date","now","Error","cacheManager","onSuccess","onError"],"mappings":"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"}