{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/generateTryOn.spec.ts"],"sourcesContent":["/**\n * Unit tests for generateTryOn wrapper function\n * \n * Tests the OpenAI service wrapper to ensure it validates I/O,\n * returns expected data, and properly propagates errors.\n */\n\nimport { ZodError } from 'zod';\n\n// Mock getEnv first\njest.mock('../src/lib/getEnv', () => ({\n  getEnv: jest.fn(() => ({\n    key: 'test-api-key',\n    model: 'gpt-image-1'\n  }))\n}));\n\n// Mock OpenAI\njest.mock('openai', () => {\n  const mockImagesEdit = jest.fn();\n  return jest.fn().mockImplementation(() => ({\n    images: {\n      edit: mockImagesEdit\n    }\n  }));\n});\n\n// Import after mocks are set up\nimport { generateTryOn } from '../src/lib/openaiClient';\n\ndescribe('generateTryOn', () => {\n  const validBase64Image = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';\n  \n  const mockOpenAIResponse = {\n    data: [\n      {\n        b64_json: 'ZmFrZUJhc2U2NA=='\n      }\n    ]\n  };\n\n  // Get the mock function from the mocked module\n  const getMockImagesEdit = () => {\n    const OpenAI = require('openai');\n    const mockInstance = new OpenAI();\n    return mockInstance.images.edit;\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Happy Path', () => {\n    it('should successfully generate try-on image with valid inputs', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue(mockOpenAIResponse);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act\n      const result = await generateTryOn(params);\n\n      // Assert\n      expect(result).toBe('ZmFrZUJhc2U2NA==');\n      expect(mockImagesEdit).toHaveBeenCalledTimes(1);\n      expect(mockImagesEdit).toHaveBeenCalledWith({\n        model: 'gpt-image-1',\n        image: expect.arrayContaining([\n          expect.any(File),\n          expect.any(File)\n        ]),\n        prompt: 'Change the garment of the model in the first image with the garment from the second image.',\n        n: 1,\n        size: '1024x1024',\n        quality: 'low'\n      });\n      \n      // Verify File objects have correct names\n      const callArgs = mockImagesEdit.mock.calls[0][0];\n      expect(callArgs.image[0].name).toBe('model.png');\n      expect(callArgs.image[1].name).toBe('apparel.png');\n    });\n\n    it('should use the first apparel image when multiple are provided', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue(mockOpenAIResponse);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image, validBase64Image, validBase64Image]\n      };\n\n      // Act\n      const result = await generateTryOn(params);\n\n      // Assert\n      expect(result).toBe('ZmFrZUJhc2U2NA==');\n      expect(mockImagesEdit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          image: expect.arrayContaining([\n            expect.any(File),\n            expect.any(File)\n          ])\n        })\n      );\n      \n      // Verify only first apparel image is used\n      const callArgs = mockImagesEdit.mock.calls[0][0];\n      expect(callArgs.image).toHaveLength(2);\n      expect(callArgs.image[0].name).toBe('model.png');\n      expect(callArgs.image[1].name).toBe('apparel.png');\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should throw ZodError for invalid base64 model image', async () => {\n      // Arrange\n      const params = {\n        modelImage: 'invalid-base64-data',\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect((error as any).cause).toBeInstanceOf(ZodError);\n        const mockImagesEdit = getMockImagesEdit();\n        expect(mockImagesEdit).not.toHaveBeenCalled();\n      }\n    });\n\n    it('should throw ZodError for invalid base64 apparel image', async () => {\n      // Arrange\n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: ['invalid-base64-data']\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect((error as any).cause).toBeInstanceOf(ZodError);\n        const mockImagesEdit = getMockImagesEdit();\n        expect(mockImagesEdit).not.toHaveBeenCalled();\n      }\n    });\n\n    it('should throw ZodError for empty apparel images array', async () => {\n      // Arrange\n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: []\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect((error as any).cause).toBeInstanceOf(ZodError);\n        const mockImagesEdit = getMockImagesEdit();\n        expect(mockImagesEdit).not.toHaveBeenCalled();\n      }\n    });\n\n    it('should throw ZodError for missing apparel images', async () => {\n      // Arrange\n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: undefined as any\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect((error as any).cause).toBeInstanceOf(ZodError);\n        const mockImagesEdit = getMockImagesEdit();\n        expect(mockImagesEdit).not.toHaveBeenCalled();\n      }\n    });\n  });\n\n  describe('OpenAI API Error Handling', () => {\n    it('should propagate OpenAI API errors with custom context', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      const apiError = new Error('OpenAI API error');\n      mockImagesEdit.mockRejectedValue(apiError);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: OpenAI API error');\n        expect((error as any).cause).toBe(apiError);\n      }\n    });\n\n    it('should handle OpenAI API errors with non-Error objects', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      const apiError = 'String error';\n      mockImagesEdit.mockRejectedValue(apiError);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: Unknown error occurred');\n        expect((error as any).cause).toBe(apiError);\n      }\n    });\n\n    it('should handle OpenAI API timeout errors', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      const timeoutError = new Error('Request timeout');\n      timeoutError.name = 'AbortError';\n      mockImagesEdit.mockRejectedValue(timeoutError);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: Request timeout');\n        expect((error as any).cause).toBe(timeoutError);\n      }\n    });\n  });\n\n  describe('Response Validation', () => {\n    it('should throw error when OpenAI returns no data', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue({ data: [] });\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: No response data received from OpenAI API');\n      }\n    });\n\n    it('should throw error when OpenAI returns undefined data', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue({ data: undefined });\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: No response data received from OpenAI API');\n      }\n    });\n\n    it('should throw error when OpenAI returns invalid base64 in response', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue({\n        data: [{ b64_json: 'invalid-base64' }]\n      });\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed');\n        expect((error as any).cause).toBeInstanceOf(ZodError);\n      }\n    });\n\n    it('should throw error when OpenAI returns no b64_json in response', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      mockImagesEdit.mockResolvedValue({\n        data: [{}]\n      });\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: No image data received from OpenAI API');\n      }\n    });\n  });\n\n  describe('Timeout and Promise Handling', () => {\n    it('should not swallow timeout errors', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      const timeoutError = new Error('Request timeout');\n      mockImagesEdit.mockRejectedValue(timeoutError);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('generateTryOn failed: Request timeout');\n        expect((error as any).cause).toBe(timeoutError);\n      }\n    });\n  });\n\n  describe('Error Context Preservation', () => {\n    it('should preserve original error as cause', async () => {\n      // Arrange\n      const mockImagesEdit = getMockImagesEdit();\n      const originalError = new Error('Original error');\n      mockImagesEdit.mockRejectedValue(originalError);\n      \n      const params = {\n        modelImage: validBase64Image,\n        apparelImages: [validBase64Image]\n      };\n\n      // Act & Assert\n      try {\n        await generateTryOn(params);\n        fail('Expected function to throw an error');\n      } catch (error) {\n        expect((error as any).cause).toBe(originalError);\n      }\n    });\n  });\n}); "],"names":["jest","mock","getEnv","fn","key","model","mockImagesEdit","mockImplementation","images","edit","describe","validBase64Image","mockOpenAIResponse","data","b64_json","getMockImagesEdit","OpenAI","require","mockInstance","beforeEach","clearAllMocks","it","mockResolvedValue","params","modelImage","apparelImages","result","generateTryOn","expect","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","image","arrayContaining","any","File","prompt","n","size","quality","callArgs","calls","name","objectContaining","toHaveLength","fail","error","cause","toBeInstanceOf","ZodError","not","toHaveBeenCalled","undefined","apiError","Error","mockRejectedValue","message","toContain","timeoutError","originalError"],"mappings":"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"}