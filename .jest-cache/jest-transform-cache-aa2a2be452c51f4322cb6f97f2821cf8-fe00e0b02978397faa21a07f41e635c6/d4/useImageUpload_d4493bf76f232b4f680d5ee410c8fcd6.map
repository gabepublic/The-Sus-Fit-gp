{"version":3,"names":["cov_1phs4ui9iw","actualCoverage","s","UploadState","f","useDropzoneUpload","useImageUpload","useSingleImageUpload","DEFAULT_CONFIG","maxSizeBytes","allowedTypes","generateThumbnails","thumbnailSizes","enableDragDrop","autoProcess","validation","minWidth","minHeight","maxWidth","maxHeight","aspectRatio","undefined","aspectRatioTolerance","config","b","onUpload","onError","finalConfig","uploadState","setUploadState","_react","useState","uploadedFiles","setUploadedFiles","currentFile","setCurrentFile","progress","setProgress","error","setError","dragDropState","setDragDropState","isDragActive","isDragAccept","isDragReject","draggedFiles","fileInputRef","useRef","uploadIdCounter","data","validationResult","_businesslayer","useImageValidation","file","metadata","useImageMetadata","thumbnail","useImageThumbnail","generateUploadId","useCallback","Date","now","current","updateProgress","stage","percentage","message","handleError","type","uploadError","Error","String","originalError","validateFile","errors","warnings","includes","push","join","size","toFixed","imageMetadata","Promise","resolve","reject","img","Image","onload","dimensions","width","naturalWidth","height","naturalHeight","format","onerror","src","URL","createObjectURL","targetRatio","tolerance","Math","abs","isValid","length","thumbnails","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","revokeObjectURL","console","warn","processFile","uploadId","preview","processedResult","processImageForTryon","uploadedFile","uploadTime","uploadFile","prev","uploadFiles","files","results","result","name","removeFile","updated","filter","removedFile","find","Object","values","forEach","url","startsWith","clearFiles","openFilePicker","click","handleFileInputChange","event","Array","from","target","value","handleDragEnter","preventDefault","stopPropagation","dataTransfer","hasValidFiles","some","handleDragLeave","handleDragOver","handleDrop","useEffect","fileInputProps","ref","accept","multiple","onChange","style","display","dragDropProps","onDragEnter","onDragLeave","onDragOver","onDrop","upload","uploadSingleFile"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useImageUpload.ts"],"sourcesContent":["'use client';\n\n// Image Upload Hooks\n// Specialized hooks for handling file upload operations with validation and preview management\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  useImageValidation,\n  useImageMetadata,\n  useImageThumbnail,\n  processImageForTryon,\n  type ImageProcessingResult\n} from '../business-layer';\nimport { fileToBase64 } from '../utils/image';\n\n/**\n * Image metadata interface\n */\ninterface ImageMetadata {\n  dimensions: { width: number; height: number };\n  format: string;\n  size: number;\n}\n\n/**\n * Upload state enum\n */\nexport enum UploadState {\n  IDLE = 'idle',\n  VALIDATING = 'validating',\n  PROCESSING = 'processing',\n  COMPLETE = 'complete',\n  ERROR = 'error'\n}\n\n/**\n * File validation result\n */\nexport interface FileValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  metadata?: ImageMetadata;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  stage: 'validation' | 'processing' | 'thumbnail' | 'complete';\n  percentage: number;\n  message: string;\n}\n\n/**\n * Upload configuration\n */\nexport interface UploadConfig {\n  /** Maximum file size in bytes */\n  maxSizeBytes?: number;\n  /** Allowed file types */\n  allowedTypes?: string[];\n  /** Auto-generate thumbnails */\n  generateThumbnails?: boolean;\n  /** Thumbnail sizes to generate */\n  thumbnailSizes?: number[];\n  /** Enable drag and drop */\n  enableDragDrop?: boolean;\n  /** Auto-process after upload */\n  autoProcess?: boolean;\n  /** Validation options */\n  validation?: {\n    minWidth?: number;\n    minHeight?: number;\n    maxWidth?: number;\n    maxHeight?: number;\n    aspectRatio?: number;\n    aspectRatioTolerance?: number;\n  };\n}\n\n/**\n * Uploaded file information\n */\nexport interface UploadedFile {\n  file: File;\n  preview: string;\n  thumbnails: Record<number, string>;\n  metadata?: ImageMetadata;\n  processedResult?: ImageProcessingResult;\n  uploadId: string;\n  uploadTime: number;\n}\n\n/**\n * Upload error\n */\nexport interface UploadError {\n  type: 'validation' | 'processing' | 'network' | 'unknown';\n  message: string;\n  code?: string;\n  originalError?: Error;\n}\n\n/**\n * Drag and drop state\n */\nexport interface DragDropState {\n  isDragActive: boolean;\n  isDragAccept: boolean;\n  isDragReject: boolean;\n  draggedFiles: File[];\n}\n\n/**\n * Default upload configuration\n */\nconst DEFAULT_CONFIG: Required<UploadConfig> = {\n  maxSizeBytes: 10 * 1024 * 1024, // 10MB\n  allowedTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\n  generateThumbnails: true,\n  thumbnailSizes: [150, 300, 600],\n  enableDragDrop: true,\n  autoProcess: false,\n  validation: {\n    minWidth: 256,\n    minHeight: 256,\n    maxWidth: 4096,\n    maxHeight: 4096,\n    aspectRatio: undefined,\n    aspectRatioTolerance: 0.1\n  }\n};\n\n/**\n * Main image upload hook\n */\nexport function useImageUpload(\n  config: UploadConfig = {},\n  onUpload?: (file: UploadedFile) => void,\n  onError?: (error: UploadError) => void\n) {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // State\n  const [uploadState, setUploadState] = useState<UploadState>(UploadState.IDLE);\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [currentFile, setCurrentFile] = useState<UploadedFile | null>(null);\n  const [progress, setProgress] = useState<UploadProgress | null>(null);\n  const [error, setError] = useState<UploadError | null>(null);\n  const [dragDropState, setDragDropState] = useState<DragDropState>({\n    isDragActive: false,\n    isDragAccept: false,\n    isDragReject: false,\n    draggedFiles: []\n  });\n\n  // Refs\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const uploadIdCounter = useRef(0);\n\n  // Business layer hooks\n  const { data: validationResult } = useImageValidation(currentFile?.file || null, false);\n  const { data: metadata } = useImageMetadata(currentFile?.file || null, false);\n  const { data: thumbnail } = useImageThumbnail(currentFile?.file || null, 150, false);\n\n  // Generate unique upload ID\n  const generateUploadId = useCallback(() => {\n    return `upload_${Date.now()}_${++uploadIdCounter.current}`;\n  }, []);\n\n  // Update progress\n  const updateProgress = useCallback((stage: UploadProgress['stage'], percentage: number, message: string) => {\n    setProgress({ stage, percentage, message });\n  }, []);\n\n  // Handle errors\n  const handleError = useCallback((error: unknown, type: UploadError['type'] = 'unknown') => {\n    const uploadError: UploadError = {\n      type,\n      message: error instanceof Error ? error.message : String(error),\n      originalError: error instanceof Error ? error : undefined\n    };\n\n    setError(uploadError);\n    setUploadState(UploadState.ERROR);\n    onError?.(uploadError);\n  }, [onError]);\n\n  // Validate file\n  const validateFile = useCallback(async (file: File): Promise<FileValidationResult> => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // File type validation\n    if (!finalConfig.allowedTypes.includes(file.type)) {\n      errors.push(`File type ${file.type} is not supported. Allowed types: ${finalConfig.allowedTypes.join(', ')}`);\n    }\n\n    // File size validation\n    if (file.size > finalConfig.maxSizeBytes) {\n      errors.push(`File size ${(file.size / 1024 / 1024).toFixed(2)}MB exceeds limit of ${(finalConfig.maxSizeBytes / 1024 / 1024).toFixed(2)}MB`);\n    }\n\n    // Image dimension validation (requires metadata)\n    try {\n      const imageMetadata = await new Promise<ImageMetadata>((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n          resolve({\n            dimensions: { width: img.naturalWidth, height: img.naturalHeight },\n            format: file.type,\n            size: file.size\n          });\n        };\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n      });\n\n      const { width, height } = imageMetadata.dimensions;\n      const { validation } = finalConfig;\n\n      if ((validation.minWidth && width < validation.minWidth) || (validation.minHeight && height < validation.minHeight)) {\n        errors.push(`Image dimensions ${width}x${height} are too small. Minimum: ${validation.minWidth || 0}x${validation.minHeight || 0}`);\n      }\n\n      if ((validation.maxWidth && width > validation.maxWidth) || (validation.maxHeight && height > validation.maxHeight)) {\n        errors.push(`Image dimensions ${width}x${height} are too large. Maximum: ${validation.maxWidth || 'unlimited'}x${validation.maxHeight || 'unlimited'}`);\n      }\n\n      if (validation.aspectRatio) {\n        const aspectRatio = width / height;\n        const targetRatio = validation.aspectRatio;\n        const tolerance = validation.aspectRatioTolerance || 0.1;\n        \n        if (Math.abs(aspectRatio - targetRatio) > tolerance) {\n          warnings.push(`Image aspect ratio ${aspectRatio.toFixed(2)} differs from recommended ${targetRatio.toFixed(2)}`);\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        metadata: imageMetadata\n      };\n    } catch (error) {\n      errors.push('Failed to validate image dimensions');\n      return { isValid: false, errors, warnings };\n    }\n  }, [finalConfig]);\n\n  // Generate thumbnails\n  const generateThumbnails = useCallback(async (file: File): Promise<Record<number, string>> => {\n    const thumbnails: Record<number, string> = {};\n\n    if (!finalConfig.generateThumbnails) {\n      return thumbnails;\n    }\n\n    try {\n      for (const size of finalConfig.thumbnailSizes) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) continue;\n\n        const img = new Image();\n        await new Promise((resolve, reject) => {\n          img.onload = resolve;\n          img.onerror = reject;\n          img.src = URL.createObjectURL(file);\n        });\n\n        // Calculate dimensions maintaining aspect ratio\n        const aspectRatio = img.width / img.height;\n        let width = size;\n        let height = size;\n\n        if (aspectRatio > 1) {\n          height = size / aspectRatio;\n        } else {\n          width = size * aspectRatio;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(img, 0, 0, width, height);\n\n        thumbnails[size] = canvas.toDataURL('image/jpeg', 0.8);\n        URL.revokeObjectURL(img.src);\n      }\n    } catch (error) {\n      console.warn('Failed to generate thumbnails:', error);\n    }\n\n    return thumbnails;\n  }, [finalConfig.generateThumbnails, finalConfig.thumbnailSizes]);\n\n  // Process uploaded file\n  const processFile = useCallback(async (file: File): Promise<UploadedFile> => {\n    const uploadId = generateUploadId();\n    \n    setUploadState(UploadState.VALIDATING);\n    updateProgress('validation', 10, 'Validating file...');\n\n    // Validate file\n    const validation = await validateFile(file);\n    if (!validation.isValid) {\n      throw new Error(validation.errors.join(', '));\n    }\n\n    updateProgress('processing', 30, 'Processing image...');\n\n    // Generate preview\n    const preview = URL.createObjectURL(file);\n\n    updateProgress('thumbnail', 60, 'Generating thumbnails...');\n\n    // Generate thumbnails\n    const thumbnails = await generateThumbnails(file);\n\n    updateProgress('complete', 80, 'Finalizing...');\n\n    // Auto-process if enabled\n    let processedResult: ImageProcessingResult | undefined;\n    if (finalConfig.autoProcess) {\n      try {\n        processedResult = await processImageForTryon(file);\n      } catch (error) {\n        console.warn('Auto-processing failed:', error);\n      }\n    }\n\n    const uploadedFile: UploadedFile = {\n      file,\n      preview,\n      thumbnails,\n      metadata: validation.metadata,\n      processedResult,\n      uploadId,\n      uploadTime: Date.now()\n    };\n\n    updateProgress('complete', 100, 'Upload complete');\n    setUploadState(UploadState.COMPLETE);\n\n    return uploadedFile;\n  }, [generateUploadId, updateProgress, validateFile, generateThumbnails, finalConfig.autoProcess]);\n\n  // Handle file upload\n  const uploadFile = useCallback(async (file: File) => {\n    try {\n      setError(null);\n      const uploadedFile = await processFile(file);\n      \n      setUploadedFiles(prev => [...prev, uploadedFile]);\n      setCurrentFile(uploadedFile);\n      onUpload?.(uploadedFile);\n      \n      return uploadedFile;\n    } catch (error) {\n      handleError(error, 'processing');\n      throw error;\n    }\n  }, [processFile, onUpload, handleError]);\n\n  // Handle multiple file uploads\n  const uploadFiles = useCallback(async (files: File[]) => {\n    const results: UploadedFile[] = [];\n    \n    for (const file of files) {\n      try {\n        const result = await uploadFile(file);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to upload file:', file.name, error);\n      }\n    }\n    \n    return results;\n  }, [uploadFile]);\n\n  // Remove uploaded file\n  const removeFile = useCallback((uploadId: string) => {\n    setUploadedFiles(prev => {\n      const updated = prev.filter(f => f.uploadId !== uploadId);\n      const removedFile = prev.find(f => f.uploadId === uploadId);\n      \n      if (removedFile) {\n        URL.revokeObjectURL(removedFile.preview);\n        Object.values(removedFile.thumbnails).forEach(url => {\n          if (url.startsWith('blob:')) {\n            URL.revokeObjectURL(url);\n          }\n        });\n      }\n      \n      return updated;\n    });\n    \n    if (currentFile?.uploadId === uploadId) {\n      setCurrentFile(null);\n    }\n  }, [currentFile]);\n\n  // Clear all files\n  const clearFiles = useCallback(() => {\n    uploadedFiles.forEach(file => {\n      URL.revokeObjectURL(file.preview);\n      Object.values(file.thumbnails).forEach(url => {\n        if (url.startsWith('blob:')) {\n          URL.revokeObjectURL(url);\n        }\n      });\n    });\n    \n    setUploadedFiles([]);\n    setCurrentFile(null);\n    setError(null);\n    setUploadState(UploadState.IDLE);\n    setProgress(null);\n  }, [uploadedFiles]);\n\n  // Trigger file picker\n  const openFilePicker = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  // Handle file input change\n  const handleFileInputChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length > 0) {\n      uploadFiles(files);\n    }\n    // Reset input to allow same file selection\n    event.target.value = '';\n  }, [uploadFiles]);\n\n  // Drag and drop handlers\n  const handleDragEnter = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const files = Array.from(event.dataTransfer.files);\n    const hasValidFiles = files.some(file => finalConfig.allowedTypes.includes(file.type));\n    \n    setDragDropState({\n      isDragActive: true,\n      isDragAccept: hasValidFiles,\n      isDragReject: !hasValidFiles,\n      draggedFiles: files\n    });\n  }, [finalConfig.allowedTypes]);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    setDragDropState({\n      isDragActive: false,\n      isDragAccept: false,\n      isDragReject: false,\n      draggedFiles: []\n    });\n  }, []);\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const files = Array.from(event.dataTransfer.files).filter(file => \n      finalConfig.allowedTypes.includes(file.type)\n    );\n    \n    setDragDropState({\n      isDragActive: false,\n      isDragAccept: false,\n      isDragReject: false,\n      draggedFiles: []\n    });\n    \n    if (files.length > 0) {\n      uploadFiles(files);\n    }\n  }, [finalConfig.allowedTypes, uploadFiles]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => {\n        URL.revokeObjectURL(file.preview);\n        Object.values(file.thumbnails).forEach(url => {\n          if (url.startsWith('blob:')) {\n            URL.revokeObjectURL(url);\n          }\n        });\n      });\n    };\n  }, []);\n\n  return {\n    // State\n    uploadState,\n    uploadedFiles,\n    currentFile,\n    progress,\n    error,\n    dragDropState,\n    \n    // Actions\n    uploadFile,\n    uploadFiles,\n    removeFile,\n    clearFiles,\n    openFilePicker,\n    \n    // File input props\n    fileInputProps: {\n      ref: fileInputRef,\n      type: 'file',\n      accept: finalConfig.allowedTypes.join(','),\n      multiple: true,\n      onChange: handleFileInputChange,\n      style: { display: 'none' }\n    },\n    \n    // Drag and drop props (only if enabled)\n    ...(finalConfig.enableDragDrop ? {\n      dragDropProps: {\n        onDragEnter: handleDragEnter,\n        onDragLeave: handleDragLeave,\n        onDragOver: handleDragOver,\n        onDrop: handleDrop\n      }\n    } : {}),\n    \n    // Utils\n    validateFile,\n    generateThumbnails\n  };\n}\n\n/**\n * Simplified hook for single file upload\n */\nexport function useSingleImageUpload(\n  config: UploadConfig = {},\n  onUpload?: (file: UploadedFile) => void,\n  onError?: (error: UploadError) => void\n) {\n  const upload = useImageUpload(config, onUpload, onError);\n  \n  const uploadSingleFile = useCallback(async (file: File) => {\n    upload.clearFiles(); // Clear previous files\n    return upload.uploadFile(file);\n  }, [upload]);\n  \n  return {\n    ...upload,\n    uploadFile: uploadSingleFile,\n    file: upload.currentFile\n  };\n}\n\n/**\n * Hook for drag and drop only upload\n */\nexport function useDropzoneUpload(\n  config: UploadConfig = {},\n  onUpload?: (files: UploadedFile[]) => void,\n  onError?: (error: UploadError) => void\n) {\n  const upload = useImageUpload(\n    { ...config, enableDragDrop: true },\n    undefined,\n    onError\n  );\n  \n  // Handle batch upload completion\n  useEffect(() => {\n    if (upload.uploadedFiles.length > 0 && upload.uploadState === UploadState.COMPLETE) {\n      onUpload?.(upload.uploadedFiles);\n    }\n  }, [upload.uploadedFiles, upload.uploadState, onUpload]);\n  \n  return {\n    dragDropState: upload.dragDropState,\n    dragDropProps: upload.dragDropProps,\n    uploadedFiles: upload.uploadedFiles,\n    progress: upload.progress,\n    error: upload.error,\n    clearFiles: upload.clearFiles,\n    removeFile: upload.removeFile\n  };\n}"],"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","ignoreList":[]}