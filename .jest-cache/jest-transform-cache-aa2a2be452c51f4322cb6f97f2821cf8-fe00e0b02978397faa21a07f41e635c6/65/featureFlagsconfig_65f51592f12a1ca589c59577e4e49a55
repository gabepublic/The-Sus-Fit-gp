f102077510ab842188417184a4919b34
// Feature Flag Configuration System
// Environment-based configuration loading with validation and caching
"use strict";

/* istanbul ignore next */
function cov_p4t0xtvmz() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/featureFlags.config.ts";
  var hash = "1f84274e90cdd3bb31906fbfb90c155d0cc4acf2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/featureFlags.config.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 32
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 34
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 35
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 38
        }
      },
      "12": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "13": {
        start: {
          line: 41,
          column: 18
        },
        end: {
          line: 41,
          column: 22
        }
      },
      "14": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 42,
          column: 23
        }
      },
      "15": {
        start: {
          line: 43,
          column: 18
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "16": {
        start: {
          line: 45,
          column: 35
        },
        end: {
          line: 78,
          column: 1
        }
      },
      "17": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 131,
          column: 1
        }
      },
      "18": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "19": {
        start: {
          line: 110,
          column: 43
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "20": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 77
        }
      },
      "21": {
        start: {
          line: 111,
          column: 54
        },
        end: {
          line: 111,
          column: 76
        }
      },
      "22": {
        start: {
          line: 112,
          column: 33
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "23": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 119,
          column: 81
        }
      },
      "24": {
        start: {
          line: 119,
          column: 55
        },
        end: {
          line: 119,
          column: 80
        }
      },
      "25": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 98
        }
      },
      "26": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 144,
          column: 1
        }
      },
      "27": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "28": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 50
        }
      },
      "29": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 138,
          column: 42
        }
      },
      "30": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 50
        }
      },
      "31": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 25
        }
      },
      "32": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 201,
          column: 1
        }
      },
      "33": {
        start: {
          line: 147,
          column: 18
        },
        end: {
          line: 147,
          column: 53
        }
      },
      "34": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "35": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "36": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "37": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "38": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "39": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "40": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "41": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "42": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "43": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "44": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "45": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 178,
          column: 14
        }
      },
      "46": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "47": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 10
        }
      },
      "48": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "49": {
        start: {
          line: 190,
          column: 23
        },
        end: {
          line: 190,
          column: 51
        }
      },
      "50": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "51": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "52": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 200,
          column: 6
        }
      },
      "53": {
        start: {
          line: 202,
          column: 29
        },
        end: {
          line: 226,
          column: 1
        }
      },
      "54": {
        start: {
          line: 203,
          column: 21
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "55": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "56": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "57": {
        start: {
          line: 206,
          column: 28
        },
        end: {
          line: 206,
          column: 74
        }
      },
      "58": {
        start: {
          line: 208,
          column: 32
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "59": {
        start: {
          line: 213,
          column: 32
        },
        end: {
          line: 213,
          column: 86
        }
      },
      "60": {
        start: {
          line: 213,
          column: 54
        },
        end: {
          line: 213,
          column: 85
        }
      },
      "61": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 214,
          column: 54
        }
      },
      "62": {
        start: {
          line: 215,
          column: 32
        },
        end: {
          line: 215,
          column: 66
        }
      },
      "63": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 217,
          column: 70
        }
      },
      "64": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "65": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 48
        }
      },
      "66": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 89
        }
      },
      "67": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 225,
          column: 20
        }
      },
      "68": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 241,
          column: 1
        }
      },
      "69": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 40
        }
      },
      "70": {
        start: {
          line: 229,
          column: 22
        },
        end: {
          line: 229,
          column: 58
        }
      },
      "71": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 36
        }
      },
      "72": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "73": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 23
        }
      },
      "74": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 33
        }
      },
      "75": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 261,
          column: 1
        }
      },
      "76": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 78
        }
      },
      "77": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 260,
          column: 7
        }
      },
      "78": {
        start: {
          line: 246,
          column: 28
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "79": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 60
        }
      },
      "80": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "81": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 51
        }
      },
      "82": {
        start: {
          line: 255,
          column: 24
        },
        end: {
          line: 255,
          column: 44
        }
      },
      "83": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "84": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 47
        }
      },
      "85": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 27
        }
      },
      "86": {
        start: {
          line: 262,
          column: 30
        },
        end: {
          line: 303,
          column: 1
        }
      },
      "87": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "88": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "89": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 27
        }
      },
      "90": {
        start: {
          line: 269,
          column: 21
        },
        end: {
          line: 269,
          column: 43
        }
      },
      "91": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 270,
          column: 47
        }
      },
      "92": {
        start: {
          line: 272,
          column: 27
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "93": {
        start: {
          line: 278,
          column: 26
        },
        end: {
          line: 278,
          column: 84
        }
      },
      "94": {
        start: {
          line: 280,
          column: 25
        },
        end: {
          line: 280,
          column: 63
        }
      },
      "95": {
        start: {
          line: 280,
          column: 56
        },
        end: {
          line: 280,
          column: 61
        }
      },
      "96": {
        start: {
          line: 281,
          column: 33
        },
        end: {
          line: 281,
          column: 78
        }
      },
      "97": {
        start: {
          line: 282,
          column: 4
        },
        end: {
          line: 298,
          column: 7
        }
      },
      "98": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "99": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 285,
          column: 37
        }
      },
      "100": {
        start: {
          line: 286,
          column: 29
        },
        end: {
          line: 286,
          column: 75
        }
      },
      "101": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "102": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 300,
          column: 32
        }
      },
      "103": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 301,
          column: 26
        }
      },
      "104": {
        start: {
          line: 302,
          column: 4
        },
        end: {
          line: 302,
          column: 25
        }
      },
      "105": {
        start: {
          line: 304,
          column: 25
        },
        end: {
          line: 307,
          column: 1
        }
      },
      "106": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 23
        }
      },
      "107": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "108": {
        start: {
          line: 308,
          column: 31
        },
        end: {
          line: 320,
          column: 1
        }
      },
      "109": {
        start: {
          line: 309,
          column: 19
        },
        end: {
          line: 309,
          column: 21
        }
      },
      "110": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 315,
          column: 7
        }
      },
      "111": {
        start: {
          line: 311,
          column: 27
        },
        end: {
          line: 311,
          column: 77
        }
      },
      "112": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "113": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 42
        }
      },
      "114": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 319,
          column: 6
        }
      },
      "115": {
        start: {
          line: 321,
          column: 24
        },
        end: {
          line: 336,
          column: 1
        }
      },
      "116": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 335,
          column: 5
        }
      },
      "117": {
        start: {
          line: 324,
          column: 32
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "118": {
        start: {
          line: 325,
          column: 31
        },
        end: {
          line: 325,
          column: 58
        }
      },
      "119": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 331,
          column: 16
        }
      },
      "120": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 44
        }
      },
      "121": {
        start: {
          line: 337,
          column: 27
        },
        end: {
          line: 348,
          column: 1
        }
      },
      "122": {
        start: {
          line: 338,
          column: 24
        },
        end: {
          line: 338,
          column: 47
        }
      },
      "123": {
        start: {
          line: 339,
          column: 21
        },
        end: {
          line: 339,
          column: 43
        }
      },
      "124": {
        start: {
          line: 340,
          column: 25
        },
        end: {
          line: 340,
          column: 52
        }
      },
      "125": {
        start: {
          line: 341,
          column: 23
        },
        end: {
          line: 341,
          column: 59
        }
      },
      "126": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 347,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 14,
            column: 23
          }
        },
        loc: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 17,
            column: 25
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 22
          }
        },
        loc: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 28
          }
        },
        loc: {
          start: {
            line: 23,
            column: 38
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 26,
            column: 27
          }
        },
        loc: {
          start: {
            line: 26,
            column: 37
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 29,
            column: 28
          }
        },
        loc: {
          start: {
            line: 29,
            column: 38
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 32,
            column: 25
          },
          end: {
            line: 32,
            column: 26
          }
        },
        loc: {
          start: {
            line: 32,
            column: 36
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 35,
            column: 29
          }
        },
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 26
          }
        },
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 109
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 111,
            column: 49
          },
          end: {
            line: 111,
            column: 50
          }
        },
        loc: {
          start: {
            line: 111,
            column: 54
          },
          end: {
            line: 111,
            column: 76
          }
        },
        line: 111
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 119,
            column: 50
          },
          end: {
            line: 119,
            column: 51
          }
        },
        loc: {
          start: {
            line: 119,
            column: 55
          },
          end: {
            line: 119,
            column: 80
          }
        },
        line: 119
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 133,
            column: 31
          }
        },
        loc: {
          start: {
            line: 133,
            column: 45
          },
          end: {
            line: 144,
            column: 1
          }
        },
        line: 133
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 146,
            column: 26
          },
          end: {
            line: 146,
            column: 27
          }
        },
        loc: {
          start: {
            line: 146,
            column: 52
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 146
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 202,
            column: 29
          },
          end: {
            line: 202,
            column: 30
          }
        },
        loc: {
          start: {
            line: 202,
            column: 33
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 202
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 204,
            column: 40
          },
          end: {
            line: 204,
            column: 41
          }
        },
        loc: {
          start: {
            line: 204,
            column: 56
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 204
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 213,
            column: 49
          },
          end: {
            line: 213,
            column: 50
          }
        },
        loc: {
          start: {
            line: 213,
            column: 54
          },
          end: {
            line: 213,
            column: 85
          }
        },
        line: 213
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 227,
            column: 30
          },
          end: {
            line: 227,
            column: 31
          }
        },
        loc: {
          start: {
            line: 227,
            column: 34
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 227
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 242,
            column: 28
          },
          end: {
            line: 242,
            column: 29
          }
        },
        loc: {
          start: {
            line: 242,
            column: 74
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 242
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 244,
            column: 30
          },
          end: {
            line: 244,
            column: 31
          }
        },
        loc: {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 244
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 262,
            column: 30
          },
          end: {
            line: 262,
            column: 31
          }
        },
        loc: {
          start: {
            line: 262,
            column: 70
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 262
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 280,
            column: 51
          },
          end: {
            line: 280,
            column: 52
          }
        },
        loc: {
          start: {
            line: 280,
            column: 56
          },
          end: {
            line: 280,
            column: 61
          }
        },
        line: 280
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 282,
            column: 49
          },
          end: {
            line: 282,
            column: 50
          }
        },
        loc: {
          start: {
            line: 282,
            column: 65
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 282
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 304,
            column: 25
          },
          end: {
            line: 304,
            column: 26
          }
        },
        loc: {
          start: {
            line: 304,
            column: 29
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 304
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 308,
            column: 31
          },
          end: {
            line: 308,
            column: 32
          }
        },
        loc: {
          start: {
            line: 308,
            column: 42
          },
          end: {
            line: 320,
            column: 1
          }
        },
        line: 308
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 310,
            column: 20
          },
          end: {
            line: 310,
            column: 21
          }
        },
        loc: {
          start: {
            line: 310,
            column: 30
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 310
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 321,
            column: 24
          },
          end: {
            line: 321,
            column: 25
          }
        },
        loc: {
          start: {
            line: 321,
            column: 28
          },
          end: {
            line: 336,
            column: 1
          }
        },
        line: 321
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 324,
            column: 32
          },
          end: {
            line: 324,
            column: 33
          }
        },
        loc: {
          start: {
            line: 324,
            column: 36
          },
          end: {
            line: 332,
            column: 9
          }
        },
        line: 324
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 337,
            column: 27
          },
          end: {
            line: 337,
            column: 28
          }
        },
        loc: {
          start: {
            line: 337,
            column: 31
          },
          end: {
            line: 348,
            column: 1
          }
        },
        line: 337
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 69
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 69
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "1": {
        loc: {
          start: {
            line: 120,
            column: 19
          },
          end: {
            line: 120,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 19
          },
          end: {
            line: 120,
            column: 46
          }
        }, {
          start: {
            line: 120,
            column: 50
          },
          end: {
            line: 120,
            column: 97
          }
        }],
        line: 120
      },
      "2": {
        loc: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 136,
            column: 50
          }
        }, {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 50
          }
        }, {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 140,
            column: 22
          }
        }, {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 142,
            column: 25
          }
        }],
        line: 134
      },
      "3": {
        loc: {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 139,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 37
          },
          end: {
            line: 139,
            column: 38
          }
        }, {
          start: {
            line: 139,
            column: 41
          },
          end: {
            line: 139,
            column: 49
          }
        }],
        line: 139
      },
      "4": {
        loc: {
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 28
          }
        }, {
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 53
          }
        }],
        line: 147
      },
      "5": {
        loc: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 150,
            column: 6
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 150,
            column: 6
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "6": {
        loc: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "7": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 22
          }
        }, {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 152,
            column: 46
          }
        }, {
          start: {
            line: 152,
            column: 50
          },
          end: {
            line: 152,
            column: 64
          }
        }, {
          start: {
            line: 152,
            column: 68
          },
          end: {
            line: 152,
            column: 80
          }
        }],
        line: 152
      },
      "8": {
        loc: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "9": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "10": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 35
          }
        }, {
          start: {
            line: 160,
            column: 39
          },
          end: {
            line: 160,
            column: 56
          }
        }],
        line: 160
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 35
          }
        }, {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 166,
            column: 56
          }
        }],
        line: 166
      },
      "13": {
        loc: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 174,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 174,
            column: 25
          }
        }, {
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 55
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 27
          }
        }, {
          start: {
            line: 182,
            column: 31
          },
          end: {
            line: 182,
            column: 67
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "20": {
        loc: {
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 194,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 52
          },
          end: {
            line: 194,
            column: 58
          }
        }, {
          start: {
            line: 194,
            column: 61
          },
          end: {
            line: 194,
            column: 80
          }
        }],
        line: 194
      },
      "21": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "22": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 43
          }
        }, {
          start: {
            line: 205,
            column: 47
          },
          end: {
            line: 205,
            column: 66
          }
        }],
        line: 205
      },
      "23": {
        loc: {
          start: {
            line: 214,
            column: 25
          },
          end: {
            line: 214,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 25
          },
          end: {
            line: 214,
            column: 42
          }
        }, {
          start: {
            line: 214,
            column: 46
          },
          end: {
            line: 214,
            column: 54
          }
        }],
        line: 214
      },
      "24": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: 220,
            column: 19
          },
          end: {
            line: 222,
            column: 13
          }
        }],
        line: 218
      },
      "25": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 25
          }
        }, {
          start: {
            line: 231,
            column: 29
          },
          end: {
            line: 231,
            column: 36
          }
        }],
        line: 231
      },
      "26": {
        loc: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 233,
            column: 27
          }
        }, {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 234,
            column: 23
          }
        }, {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 235,
            column: 26
          }
        }, {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 237,
            column: 23
          }
        }, {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 239,
            column: 33
          }
        }],
        line: 232
      },
      "27": {
        loc: {
          start: {
            line: 242,
            column: 58
          },
          end: {
            line: 242,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 242,
            column: 69
          },
          end: {
            line: 242,
            column: 71
          }
        }],
        line: 242
      },
      "28": {
        loc: {
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 243,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 243,
            column: 72
          }
        }, {
          start: {
            line: 243,
            column: 76
          },
          end: {
            line: 243,
            column: 78
          }
        }],
        line: 243
      },
      "29": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "30": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "31": {
        loc: {
          start: {
            line: 262,
            column: 31
          },
          end: {
            line: 262,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 262,
            column: 46
          },
          end: {
            line: 262,
            column: 51
          }
        }],
        line: 262
      },
      "32": {
        loc: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "33": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 265,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 265,
            column: 21
          }
        }, {
          start: {
            line: 265,
            column: 25
          },
          end: {
            line: 265,
            column: 36
          }
        }, {
          start: {
            line: 265,
            column: 40
          },
          end: {
            line: 265,
            column: 73
          }
        }],
        line: 265
      },
      "34": {
        loc: {
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 276,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 272,
            column: 41
          }
        }, {
          start: {
            line: 272,
            column: 45
          },
          end: {
            line: 276,
            column: 5
          }
        }],
        line: 272
      },
      "35": {
        loc: {
          start: {
            line: 281,
            column: 33
          },
          end: {
            line: 281,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 33
          },
          end: {
            line: 281,
            column: 72
          }
        }, {
          start: {
            line: 281,
            column: 76
          },
          end: {
            line: 281,
            column: 78
          }
        }],
        line: 281
      },
      "36": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "37": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 34
          }
        }, {
          start: {
            line: 283,
            column: 38
          },
          end: {
            line: 283,
            column: 57
          }
        }],
        line: 283
      },
      "38": {
        loc: {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 286,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 56
          },
          end: {
            line: 286,
            column: 60
          }
        }, {
          start: {
            line: 286,
            column: 63
          },
          end: {
            line: 286,
            column: 75
          }
        }],
        line: 286
      },
      "39": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "40": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 312,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 312,
            column: 31
          }
        }, {
          start: {
            line: 312,
            column: 35
          },
          end: {
            line: 312,
            column: 51
          }
        }],
        line: 312
      },
      "41": {
        loc: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "42": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 322,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 322,
            column: 46
          }
        }, {
          start: {
            line: 322,
            column: 50
          },
          end: {
            line: 322,
            column: 79
          }
        }],
        line: 322
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0],
      "27": [0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/featureFlags.config.ts"],
      sourcesContent: ["// Feature Flag Configuration System\n// Environment-based configuration loading with validation and caching\n\nimport type {\n  FeatureFlagConfig,\n  FeatureFlagValue,\n  Environment,\n  FeatureFlagValidation,\n  FeatureFlagCategory,\n} from '../types/featureFlag.types';\nimport {\n  DEFAULT_TRYON_FLAGS,\n  DEFAULT_IMAGE_PROCESSING_FLAGS,\n  DEFAULT_UI_FLAGS,\n} from '../types/featureFlag.types';\n\n// Configuration cache to avoid repeated environment reads\nlet configCache: FeatureFlagConfig[] | null = null;\nlet lastCacheUpdate = 0;\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n// Environment-specific flag configurations\nconst ENVIRONMENT_SPECIFIC_FLAGS: Record<Environment, Partial<Record<string, FeatureFlagValue>>> = {\n  development: {\n    enableDarkMode: true,\n    showAdvancedControls: true,\n    enableDevTools: true,\n    enableVerboseLogging: true,\n    showDebugInfo: true,\n  },\n  staging: {\n    enableDarkMode: false,\n    showAdvancedControls: true,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableABTesting: true,\n  },\n  production: {\n    enableDarkMode: false,\n    showAdvancedControls: false,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableErrorReporting: true,\n    enableMetrics: true,\n  },\n  test: {\n    enableDarkMode: false,\n    showAdvancedControls: false,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableAnimations: false,\n  },\n};\n\n// Validation rules for different flag types\nconst VALIDATION_RULES: Record<string, FeatureFlagValidation> = {\n  maxConcurrentRequests: {\n    required: true,\n    min: 1,\n    max: 10,\n  },\n  maxFileSize: {\n    required: true,\n    min: 1024, // 1KB minimum\n    max: 50 * 1024 * 1024, // 50MB maximum\n  },\n  compressionQuality: {\n    required: true,\n    min: 1,\n    max: 100,\n  },\n  tryonTimeout: {\n    required: true,\n    min: 5000, // 5 seconds minimum\n    max: 120000, // 2 minutes maximum\n  },\n  cacheTimeoutMs: {\n    required: true,\n    min: 1000, // 1 second minimum\n    max: 24 * 60 * 60 * 1000, // 24 hours maximum\n  },\n  supportedFormats: {\n    required: true,\n    pattern: /^[a-zA-Z,]+$/,\n    customValidator: (value: FeatureFlagValue) => {\n      if (typeof value !== 'string') return 'Must be a string';\n      const formats = value.split(',').map(f => f.trim().toLowerCase());\n      const validFormats = ['jpeg', 'jpg', 'png', 'webp', 'gif'];\n      const invalidFormats = formats.filter(f => !validFormats.includes(f));\n      return invalidFormats.length === 0 || `Invalid formats: ${invalidFormats.join(', ')}`;\n    },\n  },\n  experimentVariant: {\n    allowedValues: ['control', 'variant-a', 'variant-b', 'variant-c'],\n  },\n};\n\n// Parse environment variable value based on type\nconst parseEnvironmentValue = (\n  value: string,\n  type: 'boolean' | 'string' | 'number'\n): FeatureFlagValue => {\n  switch (type) {\n    case 'boolean':\n      return value.toLowerCase() === 'true';\n    case 'number':\n      const numValue = Number(value);\n      return isNaN(numValue) ? 0 : numValue;\n    case 'string':\n    default:\n      return value;\n  }\n};\n\n// Validate flag value against validation rules\nconst validateFlagValue = (\n  key: string,\n  value: FeatureFlagValue,\n  validation?: FeatureFlagValidation\n): { isValid: boolean; error?: string } => {\n  const rules = validation || VALIDATION_RULES[key];\n  if (!rules) return { isValid: true };\n\n  // Required check\n  if (rules.required && (value === undefined || value === null || value === '')) {\n    return { isValid: false, error: `${key} is required` };\n  }\n\n  // Type-specific validations\n  if (typeof value === 'number') {\n    if (rules.min !== undefined && value < rules.min) {\n      return { isValid: false, error: `${key} must be at least ${rules.min}` };\n    }\n    if (rules.max !== undefined && value > rules.max) {\n      return { isValid: false, error: `${key} must be at most ${rules.max}` };\n    }\n  }\n\n  if (typeof value === 'string') {\n    if (rules.pattern && !rules.pattern.test(value)) {\n      return { isValid: false, error: `${key} format is invalid` };\n    }\n  }\n\n  // Allowed values check\n  if (rules.allowedValues && !rules.allowedValues.includes(value)) {\n    return { \n      isValid: false, \n      error: `${key} must be one of: ${rules.allowedValues.join(', ')}` \n    };\n  }\n\n  // Custom validator\n  if (rules.customValidator) {\n    const result = rules.customValidator(value);\n    if (result !== true) {\n      return { isValid: false, error: typeof result === 'string' ? result : `${key} is invalid` };\n    }\n  }\n\n  return { isValid: true };\n};\n\n// Load feature flags from environment variables\nexport const loadEnvironmentFlags = (): Record<string, FeatureFlagValue> => {\n  const envFlags: Record<string, FeatureFlagValue> = {};\n\n  Object.entries(process.env).forEach(([key, value]) => {\n    if (key.startsWith('FEATURE_FLAG_') && value !== undefined) {\n      const flagKey = key.replace('FEATURE_FLAG_', '').toLowerCase();\n      \n      // Try to determine type from existing default flags\n      const allDefaults = [...DEFAULT_TRYON_FLAGS, ...DEFAULT_IMAGE_PROCESSING_FLAGS, ...DEFAULT_UI_FLAGS];\n      const defaultFlag = allDefaults.find(f => f.key.toLowerCase() === flagKey);\n      const type = defaultFlag?.type || 'string';\n      \n      const parsedValue = parseEnvironmentValue(value, type);\n      \n      // Validate the value\n      const validation = validateFlagValue(flagKey, parsedValue);\n      if (validation.isValid) {\n        envFlags[flagKey] = parsedValue;\n      } else {\n        console.warn(`Invalid environment flag ${flagKey}: ${validation.error}`);\n      }\n    }\n  });\n\n  return envFlags;\n};\n\n// Get current environment\nexport const getCurrentEnvironment = (): Environment => {\n  const nodeEnv = process.env.NODE_ENV;\n  const customEnv = process.env.FEATURE_FLAG_ENVIRONMENT;\n  \n  // Use custom environment if specified, otherwise fall back to NODE_ENV\n  const env = customEnv || nodeEnv;\n  \n  switch (env) {\n    case 'development':\n    case 'staging':\n    case 'production':\n    case 'test':\n      return env;\n    default:\n      return 'development';\n  }\n};\n\n// Merge configurations with priority order: environment variables > environment-specific > defaults\nexport const mergeConfigurations = (\n  defaultConfigs: FeatureFlagConfig[],\n  environment: Environment,\n  envFlags: Record<string, FeatureFlagValue> = {}\n): FeatureFlagConfig[] => {\n  const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};\n  \n  return defaultConfigs.map(config => {\n    // Start with default config\n    const finalConfig = { ...config };\n    \n    // Apply environment-specific overrides\n    const envOverride = environmentOverrides[config.key];\n    if (envOverride !== undefined) {\n      finalConfig.defaultValue = envOverride;\n    }\n    \n    // Apply environment variable overrides (highest priority)\n    const envFlag = envFlags[config.key];\n    if (envFlag !== undefined) {\n      finalConfig.defaultValue = envFlag;\n    }\n    \n    return finalConfig;\n  });\n};\n\n// Main configuration loading function with caching\nexport const loadFeatureFlagConfig = (\n  forceRefresh = false,\n  customDefaults?: FeatureFlagConfig[]\n): FeatureFlagConfig[] => {\n  const now = Date.now();\n  \n  // Return cached config if still valid and not forcing refresh\n  if (!forceRefresh && configCache && (now - lastCacheUpdate) < CACHE_TTL) {\n    return configCache;\n  }\n  \n  // Load environment flags\n  const envFlags = loadEnvironmentFlags();\n  const environment = getCurrentEnvironment();\n  \n  // Use custom defaults or standard defaults\n  const defaultConfigs = customDefaults || [\n    ...DEFAULT_TRYON_FLAGS,\n    ...DEFAULT_IMAGE_PROCESSING_FLAGS,\n    ...DEFAULT_UI_FLAGS,\n  ];\n  \n  // Merge all configurations\n  const mergedConfigs = mergeConfigurations(defaultConfigs, environment, envFlags);\n  \n  // Add environment-specific flags that don't exist in defaults\n  const existingKeys = new Set(mergedConfigs.map(c => c.key));\n  const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};\n  \n  Object.entries(environmentOverrides).forEach(([key, value]) => {\n    if (!existingKeys.has(key) && value !== undefined) {\n      // Infer type from value\n      const type = typeof value as 'boolean' | 'string' | 'number';\n      const category: FeatureFlagCategory = key.startsWith('enable') ? 'ui' : 'experiment';\n      \n      mergedConfigs.push({\n        key,\n        description: `Environment-specific flag for ${environment}`,\n        category,\n        defaultValue: value,\n        type,\n        environment: [environment],\n      });\n    }\n  });\n  \n  // Update cache\n  configCache = mergedConfigs;\n  lastCacheUpdate = now;\n  \n  return mergedConfigs;\n};\n\n// Clear configuration cache (useful for testing or hot reloading)\nexport const clearConfigCache = (): void => {\n  configCache = null;\n  lastCacheUpdate = 0;\n};\n\n// Validate all configurations\nexport const validateConfigurations = (configs: FeatureFlagConfig[]): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n  \n  configs.forEach(config => {\n    const validation = validateFlagValue(config.key, config.defaultValue);\n    if (!validation.isValid && validation.error) {\n      errors.push(validation.error);\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// Hot reload support for development\nexport const enableHotReload = (): void => {\n  if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {\n    // Listen for environment changes (this would be extended based on your hot reload setup)\n    const checkForUpdates = () => {\n      const newConfigs = loadFeatureFlagConfig(true);\n      // Trigger re-render of components using feature flags\n      window.dispatchEvent(new CustomEvent('featureFlags:updated', { \n        detail: { configs: newConfigs } \n      }));\n    };\n    \n    // Check for updates every 30 seconds in development\n    setInterval(checkForUpdates, 30000);\n  }\n};\n\n// Export utility functions for configuration debugging\nexport const debugConfiguration = (): {\n  environment: Environment;\n  envFlags: Record<string, FeatureFlagValue>;\n  finalConfigs: FeatureFlagConfig[];\n  validation: { isValid: boolean; errors: string[] };\n} => {\n  const environment = getCurrentEnvironment();\n  const envFlags = loadEnvironmentFlags();\n  const finalConfigs = loadFeatureFlagConfig(true);\n  const validation = validateConfigurations(finalConfigs);\n  \n  return {\n    environment,\n    envFlags,\n    finalConfigs,\n    validation,\n  };\n};"],
      names: ["clearConfigCache", "debugConfiguration", "enableHotReload", "getCurrentEnvironment", "loadEnvironmentFlags", "loadFeatureFlagConfig", "mergeConfigurations", "validateConfigurations", "configCache", "lastCacheUpdate", "CACHE_TTL", "ENVIRONMENT_SPECIFIC_FLAGS", "development", "enableDarkMode", "showAdvancedControls", "enableDevTools", "enableVerboseLogging", "showDebugInfo", "staging", "enableABTesting", "production", "enableErrorReporting", "enableMetrics", "test", "enableAnimations", "VALIDATION_RULES", "maxConcurrentRequests", "required", "min", "max", "maxFileSize", "compressionQuality", "tryonTimeout", "cacheTimeoutMs", "supportedFormats", "pattern", "customValidator", "value", "formats", "split", "map", "f", "trim", "toLowerCase", "validFormats", "invalidFormats", "filter", "includes", "length", "join", "experimentVariant", "allowedValues", "parseEnvironmentValue", "type", "numValue", "Number", "isNaN", "validateFlagValue", "key", "validation", "rules", "isValid", "undefined", "error", "result", "envFlags", "Object", "entries", "process", "env", "forEach", "startsWith", "flagKey", "replace", "allDefaults", "DEFAULT_TRYON_FLAGS", "DEFAULT_IMAGE_PROCESSING_FLAGS", "DEFAULT_UI_FLAGS", "defaultFlag", "find", "parsedValue", "console", "warn", "nodeEnv", "NODE_ENV", "customEnv", "FEATURE_FLAG_ENVIRONMENT", "defaultConfigs", "environment", "environmentOverrides", "config", "finalConfig", "envOverride", "defaultValue", "envFlag", "forceRefresh", "customDefaults", "now", "Date", "mergedConfigs", "existingKeys", "Set", "c", "has", "category", "push", "description", "configs", "errors", "window", "checkForUpdates", "newConfigs", "dispatchEvent", "CustomEvent", "detail", "setInterval", "finalConfigs"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1f84274e90cdd3bb31906fbfb90c155d0cc4acf2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_p4t0xtvmz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_p4t0xtvmz();
cov_p4t0xtvmz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[0]++;
  cov_p4t0xtvmz().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_p4t0xtvmz().s[3]++;
_export(exports, {
  clearConfigCache: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[1]++;
    cov_p4t0xtvmz().s[4]++;
    return clearConfigCache;
  },
  debugConfiguration: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[2]++;
    cov_p4t0xtvmz().s[5]++;
    return debugConfiguration;
  },
  enableHotReload: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[3]++;
    cov_p4t0xtvmz().s[6]++;
    return enableHotReload;
  },
  getCurrentEnvironment: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[4]++;
    cov_p4t0xtvmz().s[7]++;
    return getCurrentEnvironment;
  },
  loadEnvironmentFlags: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[5]++;
    cov_p4t0xtvmz().s[8]++;
    return loadEnvironmentFlags;
  },
  loadFeatureFlagConfig: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[6]++;
    cov_p4t0xtvmz().s[9]++;
    return loadFeatureFlagConfig;
  },
  mergeConfigurations: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[7]++;
    cov_p4t0xtvmz().s[10]++;
    return mergeConfigurations;
  },
  validateConfigurations: function () {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[8]++;
    cov_p4t0xtvmz().s[11]++;
    return validateConfigurations;
  }
});
const _featureFlagtypes =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[12]++, require("../types/featureFlag.types"));
// Configuration cache to avoid repeated environment reads
let configCache =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[13]++, null);
let lastCacheUpdate =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[14]++, 0);
const CACHE_TTL =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[15]++, 5 * 60 * 1000); // 5 minutes
// Environment-specific flag configurations
const ENVIRONMENT_SPECIFIC_FLAGS =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[16]++, {
  development: {
    enableDarkMode: true,
    showAdvancedControls: true,
    enableDevTools: true,
    enableVerboseLogging: true,
    showDebugInfo: true
  },
  staging: {
    enableDarkMode: false,
    showAdvancedControls: true,
    enableDevTools: false,
    enableVerboseLogging: false,
    showDebugInfo: false,
    enableABTesting: true
  },
  production: {
    enableDarkMode: false,
    showAdvancedControls: false,
    enableDevTools: false,
    enableVerboseLogging: false,
    showDebugInfo: false,
    enableErrorReporting: true,
    enableMetrics: true
  },
  test: {
    enableDarkMode: false,
    showAdvancedControls: false,
    enableDevTools: false,
    enableVerboseLogging: false,
    showDebugInfo: false,
    enableAnimations: false
  }
});
// Validation rules for different flag types
const VALIDATION_RULES =
/* istanbul ignore next */
(cov_p4t0xtvmz().s[17]++, {
  maxConcurrentRequests: {
    required: true,
    min: 1,
    max: 10
  },
  maxFileSize: {
    required: true,
    min: 1024,
    max: 50 * 1024 * 1024
  },
  compressionQuality: {
    required: true,
    min: 1,
    max: 100
  },
  tryonTimeout: {
    required: true,
    min: 5000,
    max: 120000
  },
  cacheTimeoutMs: {
    required: true,
    min: 1000,
    max: 24 * 60 * 60 * 1000
  },
  supportedFormats: {
    required: true,
    pattern: /^[a-zA-Z,]+$/,
    customValidator: value => {
      /* istanbul ignore next */
      cov_p4t0xtvmz().f[9]++;
      cov_p4t0xtvmz().s[18]++;
      if (typeof value !== 'string') {
        /* istanbul ignore next */
        cov_p4t0xtvmz().b[0][0]++;
        cov_p4t0xtvmz().s[19]++;
        return 'Must be a string';
      } else
      /* istanbul ignore next */
      {
        cov_p4t0xtvmz().b[0][1]++;
      }
      const formats =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[20]++, value.split(',').map(f => {
        /* istanbul ignore next */
        cov_p4t0xtvmz().f[10]++;
        cov_p4t0xtvmz().s[21]++;
        return f.trim().toLowerCase();
      }));
      const validFormats =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[22]++, ['jpeg', 'jpg', 'png', 'webp', 'gif']);
      const invalidFormats =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[23]++, formats.filter(f => {
        /* istanbul ignore next */
        cov_p4t0xtvmz().f[11]++;
        cov_p4t0xtvmz().s[24]++;
        return !validFormats.includes(f);
      }));
      /* istanbul ignore next */
      cov_p4t0xtvmz().s[25]++;
      return /* istanbul ignore next */(cov_p4t0xtvmz().b[1][0]++, invalidFormats.length === 0) ||
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[1][1]++, `Invalid formats: ${invalidFormats.join(', ')}`);
    }
  },
  experimentVariant: {
    allowedValues: ['control', 'variant-a', 'variant-b', 'variant-c']
  }
});
// Parse environment variable value based on type
/* istanbul ignore next */
cov_p4t0xtvmz().s[26]++;
const parseEnvironmentValue = (value, type) => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[12]++;
  cov_p4t0xtvmz().s[27]++;
  switch (type) {
    case 'boolean':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[2][0]++;
      cov_p4t0xtvmz().s[28]++;
      return value.toLowerCase() === 'true';
    case 'number':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[2][1]++;
      const numValue =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[29]++, Number(value));
      /* istanbul ignore next */
      cov_p4t0xtvmz().s[30]++;
      return isNaN(numValue) ?
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[3][0]++, 0) :
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[3][1]++, numValue);
    case 'string':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[2][2]++;
    default:
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[2][3]++;
      cov_p4t0xtvmz().s[31]++;
      return value;
  }
};
// Validate flag value against validation rules
/* istanbul ignore next */
cov_p4t0xtvmz().s[32]++;
const validateFlagValue = (key, value, validation) => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[13]++;
  const rules =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[33]++,
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[4][0]++, validation) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[4][1]++, VALIDATION_RULES[key]));
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[34]++;
  if (!rules) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[5][0]++;
    cov_p4t0xtvmz().s[35]++;
    return {
      isValid: true
    };
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[5][1]++;
  }
  // Required check
  cov_p4t0xtvmz().s[36]++;
  if (
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[7][0]++, rules.required) && (
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[7][1]++, value === undefined) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[7][2]++, value === null) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[7][3]++, value === ''))) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[6][0]++;
    cov_p4t0xtvmz().s[37]++;
    return {
      isValid: false,
      error: `${key} is required`
    };
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[6][1]++;
  }
  // Type-specific validations
  cov_p4t0xtvmz().s[38]++;
  if (typeof value === 'number') {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[8][0]++;
    cov_p4t0xtvmz().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[10][0]++, rules.min !== undefined) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[10][1]++, value < rules.min)) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[9][0]++;
      cov_p4t0xtvmz().s[40]++;
      return {
        isValid: false,
        error: `${key} must be at least ${rules.min}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[9][1]++;
    }
    cov_p4t0xtvmz().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[12][0]++, rules.max !== undefined) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[12][1]++, value > rules.max)) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[11][0]++;
      cov_p4t0xtvmz().s[42]++;
      return {
        isValid: false,
        error: `${key} must be at most ${rules.max}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[11][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[8][1]++;
  }
  cov_p4t0xtvmz().s[43]++;
  if (typeof value === 'string') {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[13][0]++;
    cov_p4t0xtvmz().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[15][0]++, rules.pattern) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[15][1]++, !rules.pattern.test(value))) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[14][0]++;
      cov_p4t0xtvmz().s[45]++;
      return {
        isValid: false,
        error: `${key} format is invalid`
      };
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[14][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[13][1]++;
  }
  // Allowed values check
  cov_p4t0xtvmz().s[46]++;
  if (
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[17][0]++, rules.allowedValues) &&
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[17][1]++, !rules.allowedValues.includes(value))) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[16][0]++;
    cov_p4t0xtvmz().s[47]++;
    return {
      isValid: false,
      error: `${key} must be one of: ${rules.allowedValues.join(', ')}`
    };
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[16][1]++;
  }
  // Custom validator
  cov_p4t0xtvmz().s[48]++;
  if (rules.customValidator) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[18][0]++;
    const result =
    /* istanbul ignore next */
    (cov_p4t0xtvmz().s[49]++, rules.customValidator(value));
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[50]++;
    if (result !== true) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[19][0]++;
      cov_p4t0xtvmz().s[51]++;
      return {
        isValid: false,
        error: typeof result === 'string' ?
        /* istanbul ignore next */
        (cov_p4t0xtvmz().b[20][0]++, result) :
        /* istanbul ignore next */
        (cov_p4t0xtvmz().b[20][1]++, `${key} is invalid`)
      };
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[19][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[18][1]++;
  }
  cov_p4t0xtvmz().s[52]++;
  return {
    isValid: true
  };
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[53]++;
const loadEnvironmentFlags = () => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[14]++;
  const envFlags =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[54]++, {});
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[55]++;
  Object.entries(process.env).forEach(([key, value]) => {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[15]++;
    cov_p4t0xtvmz().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[22][0]++, key.startsWith('FEATURE_FLAG_')) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[22][1]++, value !== undefined)) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[21][0]++;
      const flagKey =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[57]++, key.replace('FEATURE_FLAG_', '').toLowerCase());
      // Try to determine type from existing default flags
      const allDefaults =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[58]++, [..._featureFlagtypes.DEFAULT_TRYON_FLAGS, ..._featureFlagtypes.DEFAULT_IMAGE_PROCESSING_FLAGS, ..._featureFlagtypes.DEFAULT_UI_FLAGS]);
      const defaultFlag =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[59]++, allDefaults.find(f => {
        /* istanbul ignore next */
        cov_p4t0xtvmz().f[16]++;
        cov_p4t0xtvmz().s[60]++;
        return f.key.toLowerCase() === flagKey;
      }));
      const type =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[61]++,
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[23][0]++, defaultFlag?.type) ||
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[23][1]++, 'string'));
      const parsedValue =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[62]++, parseEnvironmentValue(value, type));
      // Validate the value
      const validation =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[63]++, validateFlagValue(flagKey, parsedValue));
      /* istanbul ignore next */
      cov_p4t0xtvmz().s[64]++;
      if (validation.isValid) {
        /* istanbul ignore next */
        cov_p4t0xtvmz().b[24][0]++;
        cov_p4t0xtvmz().s[65]++;
        envFlags[flagKey] = parsedValue;
      } else {
        /* istanbul ignore next */
        cov_p4t0xtvmz().b[24][1]++;
        cov_p4t0xtvmz().s[66]++;
        console.warn(`Invalid environment flag ${flagKey}: ${validation.error}`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[21][1]++;
    }
  });
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[67]++;
  return envFlags;
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[68]++;
const getCurrentEnvironment = () => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[17]++;
  const nodeEnv =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[69]++, process.env.NODE_ENV);
  const customEnv =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[70]++, process.env.FEATURE_FLAG_ENVIRONMENT);
  // Use custom environment if specified, otherwise fall back to NODE_ENV
  const env =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[71]++,
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[25][0]++, customEnv) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[25][1]++, nodeEnv));
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[72]++;
  switch (env) {
    case 'development':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[26][0]++;
    case 'staging':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[26][1]++;
    case 'production':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[26][2]++;
    case 'test':
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[26][3]++;
      cov_p4t0xtvmz().s[73]++;
      return env;
    default:
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[26][4]++;
      cov_p4t0xtvmz().s[74]++;
      return 'development';
  }
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[75]++;
const mergeConfigurations = (defaultConfigs, environment, envFlags =
/* istanbul ignore next */
(cov_p4t0xtvmz().b[27][0]++, {})) => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[18]++;
  const environmentOverrides =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[76]++,
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[28][0]++, ENVIRONMENT_SPECIFIC_FLAGS[environment]) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[28][1]++, {}));
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[77]++;
  return defaultConfigs.map(config => {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[19]++;
    // Start with default config
    const finalConfig =
    /* istanbul ignore next */
    (cov_p4t0xtvmz().s[78]++, {
      ...config
    });
    // Apply environment-specific overrides
    const envOverride =
    /* istanbul ignore next */
    (cov_p4t0xtvmz().s[79]++, environmentOverrides[config.key]);
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[80]++;
    if (envOverride !== undefined) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[29][0]++;
      cov_p4t0xtvmz().s[81]++;
      finalConfig.defaultValue = envOverride;
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[29][1]++;
    }
    // Apply environment variable overrides (highest priority)
    const envFlag =
    /* istanbul ignore next */
    (cov_p4t0xtvmz().s[82]++, envFlags[config.key]);
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[83]++;
    if (envFlag !== undefined) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[30][0]++;
      cov_p4t0xtvmz().s[84]++;
      finalConfig.defaultValue = envFlag;
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[30][1]++;
    }
    cov_p4t0xtvmz().s[85]++;
    return finalConfig;
  });
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[86]++;
const loadFeatureFlagConfig = (forceRefresh =
/* istanbul ignore next */
(cov_p4t0xtvmz().b[31][0]++, false), customDefaults) => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[20]++;
  const now =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[87]++, Date.now());
  // Return cached config if still valid and not forcing refresh
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[88]++;
  if (
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[33][0]++, !forceRefresh) &&
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[33][1]++, configCache) &&
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[33][2]++, now - lastCacheUpdate < CACHE_TTL)) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[32][0]++;
    cov_p4t0xtvmz().s[89]++;
    return configCache;
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[32][1]++;
  }
  // Load environment flags
  const envFlags =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[90]++, loadEnvironmentFlags());
  const environment =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[91]++, getCurrentEnvironment());
  // Use custom defaults or standard defaults
  const defaultConfigs =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[92]++,
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[34][0]++, customDefaults) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[34][1]++, [..._featureFlagtypes.DEFAULT_TRYON_FLAGS, ..._featureFlagtypes.DEFAULT_IMAGE_PROCESSING_FLAGS, ..._featureFlagtypes.DEFAULT_UI_FLAGS]));
  // Merge all configurations
  const mergedConfigs =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[93]++, mergeConfigurations(defaultConfigs, environment, envFlags));
  // Add environment-specific flags that don't exist in defaults
  const existingKeys =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[94]++, new Set(mergedConfigs.map(c => {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[21]++;
    cov_p4t0xtvmz().s[95]++;
    return c.key;
  })));
  const environmentOverrides =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[96]++,
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[35][0]++, ENVIRONMENT_SPECIFIC_FLAGS[environment]) ||
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[35][1]++, {}));
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[97]++;
  Object.entries(environmentOverrides).forEach(([key, value]) => {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[22]++;
    cov_p4t0xtvmz().s[98]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[37][0]++, !existingKeys.has(key)) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[37][1]++, value !== undefined)) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[36][0]++;
      // Infer type from value
      const type =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[99]++, typeof value);
      const category =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[100]++, key.startsWith('enable') ?
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[38][0]++, 'ui') :
      /* istanbul ignore next */
      (cov_p4t0xtvmz().b[38][1]++, 'experiment'));
      /* istanbul ignore next */
      cov_p4t0xtvmz().s[101]++;
      mergedConfigs.push({
        key,
        description: `Environment-specific flag for ${environment}`,
        category,
        defaultValue: value,
        type,
        environment: [environment]
      });
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[36][1]++;
    }
  });
  // Update cache
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[102]++;
  configCache = mergedConfigs;
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[103]++;
  lastCacheUpdate = now;
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[104]++;
  return mergedConfigs;
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[105]++;
const clearConfigCache = () => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[23]++;
  cov_p4t0xtvmz().s[106]++;
  configCache = null;
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[107]++;
  lastCacheUpdate = 0;
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[108]++;
const validateConfigurations = configs => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[24]++;
  const errors =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[109]++, []);
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[110]++;
  configs.forEach(config => {
    /* istanbul ignore next */
    cov_p4t0xtvmz().f[25]++;
    const validation =
    /* istanbul ignore next */
    (cov_p4t0xtvmz().s[111]++, validateFlagValue(config.key, config.defaultValue));
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[112]++;
    if (
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[40][0]++, !validation.isValid) &&
    /* istanbul ignore next */
    (cov_p4t0xtvmz().b[40][1]++, validation.error)) {
      /* istanbul ignore next */
      cov_p4t0xtvmz().b[39][0]++;
      cov_p4t0xtvmz().s[113]++;
      errors.push(validation.error);
    } else
    /* istanbul ignore next */
    {
      cov_p4t0xtvmz().b[39][1]++;
    }
  });
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[114]++;
  return {
    isValid: errors.length === 0,
    errors
  };
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[115]++;
const enableHotReload = () => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[26]++;
  cov_p4t0xtvmz().s[116]++;
  if (
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[42][0]++, process.env.NODE_ENV === 'development') &&
  /* istanbul ignore next */
  (cov_p4t0xtvmz().b[42][1]++, typeof window !== 'undefined')) {
    /* istanbul ignore next */
    cov_p4t0xtvmz().b[41][0]++;
    cov_p4t0xtvmz().s[117]++;
    // Listen for environment changes (this would be extended based on your hot reload setup)
    const checkForUpdates = () => {
      /* istanbul ignore next */
      cov_p4t0xtvmz().f[27]++;
      const newConfigs =
      /* istanbul ignore next */
      (cov_p4t0xtvmz().s[118]++, loadFeatureFlagConfig(true));
      // Trigger re-render of components using feature flags
      /* istanbul ignore next */
      cov_p4t0xtvmz().s[119]++;
      window.dispatchEvent(new CustomEvent('featureFlags:updated', {
        detail: {
          configs: newConfigs
        }
      }));
    };
    // Check for updates every 30 seconds in development
    /* istanbul ignore next */
    cov_p4t0xtvmz().s[120]++;
    setInterval(checkForUpdates, 30000);
  } else
  /* istanbul ignore next */
  {
    cov_p4t0xtvmz().b[41][1]++;
  }
};
/* istanbul ignore next */
cov_p4t0xtvmz().s[121]++;
const debugConfiguration = () => {
  /* istanbul ignore next */
  cov_p4t0xtvmz().f[28]++;
  const environment =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[122]++, getCurrentEnvironment());
  const envFlags =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[123]++, loadEnvironmentFlags());
  const finalConfigs =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[124]++, loadFeatureFlagConfig(true));
  const validation =
  /* istanbul ignore next */
  (cov_p4t0xtvmz().s[125]++, validateConfigurations(finalConfigs));
  /* istanbul ignore next */
  cov_p4t0xtvmz().s[126]++;
  return {
    environment,
    envFlags,
    finalConfigs,
    validation
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,