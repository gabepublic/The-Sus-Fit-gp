{"version":3,"names":["cov_2mhscs3zvt","actualCoverage","s","useStickerInteraction","f","useStickerLibrary","useStickerManagement","canvasWidth","canvasHeight","canvasId","handlers","canvas","_CanvasProvider","useManagedCanvas","managerRef","_react","useRef","_stickerPlacement","createStickerManager","stickers","setStickers","useState","selectedStickerId","setSelectedStickerId","interactionState","setInteractionState","isInteracting","mode","startX","startY","currentX","currentY","targetStickerId","refreshStickers","useCallback","current","getAllStickers","addSticker","config","id","onStickerSelect","removeSticker","success","b","updateSticker","updates","selectSticker","moveSticker","x","y","moveStickerTo","onStickerMove","collisions","checkCollisions","hasCollision","onStickerCollision","scaleSticker","scale","onStickerScale","rotateSticker","rotation","onStickerRotate","flipSticker","flipX","flipY","duplicateSticker","sticker","getSticker","duplicateConfig","transform","newId","error","console","bringToFront","sendToBack","excludeId","renderAll","renderAllStickers","clearAll","clearAllStickers","exportStickers","importStickers","stickerConfigs","importedIds","setGridConfig","getGridConfig","useEffect","manager","onStickerUpdate","setIsInteracting","interactionRef","getCanvasCoordinates","clientX","clientY","rect","getBoundingClientRect","left","top","startInteraction","stickerId","getStickerAtPosition","locked","initialTransform","updateInteraction","state","deltaX","deltaY","centerX","centerY","initialDistance","Math","sqrt","pow","currentDistance","scaleFactor","newScale","max","min","centerRotX","centerRotY","initialAngle","atan2","currentAngle","rotationDelta","newRotation","endInteraction","library","setLibrary","Map","favorites","setFavorites","Set","categories","Array","from","keys","getStickersInCategory","category","get","addStickerToLibrary","prev","newLibrary","categoryStickers","set","removeStickerFromLibrary","forEach","filter","searchStickers","query","results","lowerQuery","toLowerCase","metadata","name","includes","tags","some","tag","push","getFavoriteStickers","favoriteStickers","has","addToFavorites","add","removeFromFavorites","newFavorites","delete"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useStickerManagement.ts"],"sourcesContent":["'use client';\n\n// Sticker Management React Hooks\n// React hooks for managing stickers on canvas with interaction support\n\nimport { useCallback, useRef, useState, useEffect } from 'react';\nimport { useManagedCanvas, type ManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  StickerManager,\n  createStickerManager,\n  type Sticker,\n  type StickerConfig,\n  type StickerTransform,\n  type GridSnapConfig,\n  type CollisionResult,\n  StickerAnchor,\n  DEFAULT_STICKER_CONFIG\n} from '../utils/stickerPlacement';\n\n/**\n * Sticker interaction event handlers\n */\nexport interface StickerInteractionHandlers {\n  onStickerSelect?: (stickerId: string | null) => void;\n  onStickerMove?: (stickerId: string, x: number, y: number) => void;\n  onStickerScale?: (stickerId: string, scale: number) => void;\n  onStickerRotate?: (stickerId: string, rotation: number) => void;\n  onStickerCollision?: (result: CollisionResult) => void;\n}\n\n/**\n * Mouse/touch interaction state\n */\ninterface InteractionState {\n  isInteracting: boolean;\n  mode: 'none' | 'drag' | 'scale' | 'rotate';\n  startX: number;\n  startY: number;\n  currentX: number;\n  currentY: number;\n  targetStickerId: string | null;\n  initialTransform?: StickerTransform;\n}\n\n/**\n * Hook for managing stickers on canvas\n */\nexport function useStickerManagement(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  handlers?: StickerInteractionHandlers\n): {\n  canvas: ManagedCanvas;\n  manager: StickerManager;\n  stickers: Sticker[];\n  selectedStickerId: string | null;\n  isInteracting: boolean;\n  addSticker: (config: Omit<StickerConfig, 'id'>) => Promise<string>;\n  removeSticker: (id: string) => boolean;\n  updateSticker: (id: string, updates: Partial<StickerConfig>) => boolean;\n  selectSticker: (id: string | null) => void;\n  moveSticker: (id: string, x: number, y: number) => boolean;\n  scaleSticker: (id: string, scale: number) => boolean;\n  rotateSticker: (id: string, rotation: number) => boolean;\n  flipSticker: (id: string, flipX?: boolean, flipY?: boolean) => boolean;\n  duplicateSticker: (id: string) => Promise<string | null>;\n  bringToFront: (id: string) => boolean;\n  sendToBack: (id: string) => boolean;\n  checkCollisions: (excludeId?: string) => CollisionResult;\n  renderAll: () => void;\n  clearAll: () => void;\n  exportStickers: () => StickerConfig[];\n  importStickers: (stickers: StickerConfig[]) => Promise<string[]>;\n  setGridConfig: (config: Partial<GridSnapConfig>) => void;\n  getGridConfig: () => GridSnapConfig;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const managerRef = useRef<StickerManager>(createStickerManager(canvas));\n  const [stickers, setStickers] = useState<Sticker[]>([]);\n  const [selectedStickerId, setSelectedStickerId] = useState<string | null>(null);\n  const [interactionState, setInteractionState] = useState<InteractionState>({\n    isInteracting: false,\n    mode: 'none',\n    startX: 0,\n    startY: 0,\n    currentX: 0,\n    currentY: 0,\n    targetStickerId: null\n  });\n\n  const refreshStickers = useCallback(() => {\n    setStickers(managerRef.current.getAllStickers());\n  }, []);\n\n  const addSticker = useCallback(async (config: Omit<StickerConfig, 'id'>): Promise<string> => {\n    const id = await managerRef.current.addSticker(config);\n    refreshStickers();\n    handlers?.onStickerSelect?.(id);\n    return id;\n  }, [refreshStickers, handlers]);\n\n  const removeSticker = useCallback((id: string): boolean => {\n    const success = managerRef.current.removeSticker(id);\n    if (success) {\n      refreshStickers();\n      if (selectedStickerId === id) {\n        setSelectedStickerId(null);\n        handlers?.onStickerSelect?.(null);\n      }\n    }\n    return success;\n  }, [refreshStickers, selectedStickerId, handlers]);\n\n  const updateSticker = useCallback((id: string, updates: Partial<StickerConfig>): boolean => {\n    const success = managerRef.current.updateSticker(id, updates);\n    if (success) {\n      refreshStickers();\n    }\n    return success;\n  }, [refreshStickers]);\n\n  const selectSticker = useCallback((id: string | null) => {\n    managerRef.current.selectSticker(id);\n    setSelectedStickerId(id);\n    refreshStickers();\n    handlers?.onStickerSelect?.(id);\n  }, [refreshStickers, handlers]);\n\n  const moveSticker = useCallback((id: string, x: number, y: number): boolean => {\n    const success = managerRef.current.moveStickerTo(id, x, y);\n    if (success) {\n      refreshStickers();\n      handlers?.onStickerMove?.(id, x, y);\n      \n      // Check for collisions\n      const collisions = managerRef.current.checkCollisions(id);\n      if (collisions.hasCollision) {\n        handlers?.onStickerCollision?.(collisions);\n      }\n    }\n    return success;\n  }, [refreshStickers, handlers]);\n\n  const scaleSticker = useCallback((id: string, scale: number): boolean => {\n    const success = managerRef.current.scaleSticker(id, scale);\n    if (success) {\n      refreshStickers();\n      handlers?.onStickerScale?.(id, scale);\n    }\n    return success;\n  }, [refreshStickers, handlers]);\n\n  const rotateSticker = useCallback((id: string, rotation: number): boolean => {\n    const success = managerRef.current.rotateSticker(id, rotation);\n    if (success) {\n      refreshStickers();\n      handlers?.onStickerRotate?.(id, rotation);\n    }\n    return success;\n  }, [refreshStickers, handlers]);\n\n  const flipSticker = useCallback((id: string, flipX?: boolean, flipY?: boolean): boolean => {\n    const success = managerRef.current.flipSticker(id, flipX, flipY);\n    if (success) {\n      refreshStickers();\n    }\n    return success;\n  }, [refreshStickers]);\n\n  const duplicateSticker = useCallback(async (id: string): Promise<string | null> => {\n    const sticker = managerRef.current.getSticker(id);\n    if (!sticker) return null;\n\n    // Create duplicate with offset position\n    const duplicateConfig = {\n      ...sticker,\n      transform: {\n        ...sticker.transform,\n        x: sticker.transform.x + 20,\n        y: sticker.transform.y + 20\n      }\n    };\n\n    try {\n      const newId = await addSticker(duplicateConfig);\n      selectSticker(newId);\n      return newId;\n    } catch (error) {\n      console.error('Failed to duplicate sticker:', error);\n      return null;\n    }\n  }, [addSticker, selectSticker]);\n\n  const bringToFront = useCallback((id: string): boolean => {\n    const success = managerRef.current.bringToFront(id);\n    if (success) {\n      refreshStickers();\n    }\n    return success;\n  }, [refreshStickers]);\n\n  const sendToBack = useCallback((id: string): boolean => {\n    const success = managerRef.current.sendToBack(id);\n    if (success) {\n      refreshStickers();\n    }\n    return success;\n  }, [refreshStickers]);\n\n  const checkCollisions = useCallback((excludeId?: string): CollisionResult => {\n    return managerRef.current.checkCollisions(excludeId);\n  }, []);\n\n  const renderAll = useCallback(() => {\n    managerRef.current.renderAllStickers();\n  }, []);\n\n  const clearAll = useCallback(() => {\n    managerRef.current.clearAllStickers();\n    setStickers([]);\n    setSelectedStickerId(null);\n    handlers?.onStickerSelect?.(null);\n  }, [handlers]);\n\n  const exportStickers = useCallback((): StickerConfig[] => {\n    return managerRef.current.exportStickers();\n  }, []);\n\n  const importStickers = useCallback(async (stickerConfigs: StickerConfig[]): Promise<string[]> => {\n    const importedIds = await managerRef.current.importStickers(stickerConfigs);\n    refreshStickers();\n    return importedIds;\n  }, [refreshStickers]);\n\n  const setGridConfig = useCallback((config: Partial<GridSnapConfig>) => {\n    managerRef.current.setGridConfig(config);\n  }, []);\n\n  const getGridConfig = useCallback((): GridSnapConfig => {\n    return managerRef.current.getGridConfig();\n  }, []);\n\n  // Auto-render when stickers change\n  useEffect(() => {\n    renderAll();\n  }, [stickers, renderAll]);\n\n  return {\n    canvas,\n    manager: managerRef.current,\n    stickers,\n    selectedStickerId,\n    isInteracting: interactionState.isInteracting,\n    addSticker,\n    removeSticker,\n    updateSticker,\n    selectSticker,\n    moveSticker,\n    scaleSticker,\n    rotateSticker,\n    flipSticker,\n    duplicateSticker,\n    bringToFront,\n    sendToBack,\n    checkCollisions,\n    renderAll,\n    clearAll,\n    exportStickers,\n    importStickers,\n    setGridConfig,\n    getGridConfig\n  };\n}\n\n/**\n * Hook for handling mouse/touch interactions with stickers\n */\nexport function useStickerInteraction(\n  canvas: HTMLCanvasElement,\n  manager: StickerManager,\n  onStickerSelect?: (id: string | null) => void,\n  onStickerUpdate?: () => void\n): {\n  isInteracting: boolean;\n  startInteraction: (x: number, y: number, mode?: 'drag' | 'scale' | 'rotate') => void;\n  updateInteraction: (x: number, y: number) => void;\n  endInteraction: () => void;\n} {\n  const [isInteracting, setIsInteracting] = useState(false);\n  const interactionRef = useRef<InteractionState>({\n    isInteracting: false,\n    mode: 'none',\n    startX: 0,\n    startY: 0,\n    currentX: 0,\n    currentY: 0,\n    targetStickerId: null\n  });\n\n  const getCanvasCoordinates = useCallback((clientX: number, clientY: number) => {\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  }, [canvas]);\n\n  const startInteraction = useCallback((clientX: number, clientY: number, mode: 'drag' | 'scale' | 'rotate' = 'drag') => {\n    const { x, y } = getCanvasCoordinates(clientX, clientY);\n    const stickerId = manager.getStickerAtPosition(x, y);\n    \n    if (stickerId) {\n      const sticker = manager.getSticker(stickerId);\n      if (sticker && !sticker.locked) {\n        manager.selectSticker(stickerId);\n        onStickerSelect?.(stickerId);\n        \n        interactionRef.current = {\n          isInteracting: true,\n          mode,\n          startX: x,\n          startY: y,\n          currentX: x,\n          currentY: y,\n          targetStickerId: stickerId,\n          initialTransform: { ...sticker.transform }\n        };\n        \n        setIsInteracting(true);\n      }\n    } else {\n      // Clicked on empty area, deselect\n      manager.selectSticker(null);\n      onStickerSelect?.(null);\n    }\n  }, [canvas, manager, onStickerSelect, getCanvasCoordinates]);\n\n  const updateInteraction = useCallback((clientX: number, clientY: number) => {\n    if (!interactionRef.current.isInteracting || !interactionRef.current.targetStickerId) return;\n    \n    const { x, y } = getCanvasCoordinates(clientX, clientY);\n    const state = interactionRef.current;\n    const sticker = state.targetStickerId ? manager.getSticker(state.targetStickerId) : null;\n    \n    if (!sticker || !state.initialTransform) return;\n    \n    state.currentX = x;\n    state.currentY = y;\n    \n    const deltaX = x - state.startX;\n    const deltaY = y - state.startY;\n    \n    switch (state.mode) {\n      case 'drag':\n        if (state.targetStickerId) {\n          manager.moveStickerTo(\n            state.targetStickerId,\n            state.initialTransform.x + deltaX,\n            state.initialTransform.y + deltaY\n          );\n        }\n        break;\n        \n      case 'scale':\n        // Calculate scale based on distance from center\n        const centerX = state.initialTransform.x;\n        const centerY = state.initialTransform.y;\n        const initialDistance = Math.sqrt(\n          Math.pow(state.startX - centerX, 2) + Math.pow(state.startY - centerY, 2)\n        );\n        const currentDistance = Math.sqrt(\n          Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)\n        );\n        const scaleFactor = initialDistance > 0 ? currentDistance / initialDistance : 1;\n        const newScale = state.initialTransform.scale * scaleFactor;\n        \n        if (state.targetStickerId) {\n          manager.scaleSticker(state.targetStickerId, Math.max(0.1, Math.min(5, newScale)));\n        }\n        break;\n        \n      case 'rotate':\n        // Calculate rotation based on angle from center\n        const centerRotX = state.initialTransform.x;\n        const centerRotY = state.initialTransform.y;\n        const initialAngle = Math.atan2(state.startY - centerRotY, state.startX - centerRotX);\n        const currentAngle = Math.atan2(y - centerRotY, x - centerRotX);\n        const rotationDelta = currentAngle - initialAngle;\n        const newRotation = state.initialTransform.rotation + rotationDelta;\n        \n        if (state.targetStickerId) {\n          manager.rotateSticker(state.targetStickerId, newRotation);\n        }\n        break;\n    }\n    \n    onStickerUpdate?.();\n  }, [canvas, manager, onStickerUpdate, getCanvasCoordinates]);\n\n  const endInteraction = useCallback(() => {\n    interactionRef.current = {\n      isInteracting: false,\n      mode: 'none',\n      startX: 0,\n      startY: 0,\n      currentX: 0,\n      currentY: 0,\n      targetStickerId: null\n    };\n    setIsInteracting(false);\n  }, []);\n\n  return {\n    isInteracting,\n    startInteraction,\n    updateInteraction,\n    endInteraction\n  };\n}\n\n/**\n * Hook for sticker library management\n */\nexport function useStickerLibrary(): {\n  categories: string[];\n  getStickersInCategory: (category: string) => StickerConfig[];\n  addStickerToLibrary: (sticker: StickerConfig, category: string) => void;\n  removeStickerFromLibrary: (stickerId: string) => void;\n  searchStickers: (query: string) => StickerConfig[];\n  getFavoriteStickers: () => StickerConfig[];\n  addToFavorites: (stickerId: string) => void;\n  removeFromFavorites: (stickerId: string) => void;\n} {\n  const [library, setLibrary] = useState<Map<string, StickerConfig[]>>(new Map());\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n\n  const categories = Array.from(library.keys());\n\n  const getStickersInCategory = useCallback((category: string): StickerConfig[] => {\n    return library.get(category) || [];\n  }, [library]);\n\n  const addStickerToLibrary = useCallback((sticker: StickerConfig, category: string) => {\n    setLibrary(prev => {\n      const newLibrary = new Map(prev);\n      const categoryStickers = newLibrary.get(category) || [];\n      newLibrary.set(category, [...categoryStickers, sticker]);\n      return newLibrary;\n    });\n  }, []);\n\n  const removeStickerFromLibrary = useCallback((stickerId: string) => {\n    setLibrary(prev => {\n      const newLibrary = new Map();\n      prev.forEach((stickers, category) => {\n        newLibrary.set(category, stickers.filter(s => s.id !== stickerId));\n      });\n      return newLibrary;\n    });\n  }, []);\n\n  const searchStickers = useCallback((query: string): StickerConfig[] => {\n    const results: StickerConfig[] = [];\n    const lowerQuery = query.toLowerCase();\n    \n    library.forEach(stickers => {\n      stickers.forEach(sticker => {\n        if (sticker.metadata?.name?.toLowerCase().includes(lowerQuery) ||\n            sticker.metadata?.tags?.some(tag => tag.toLowerCase().includes(lowerQuery))) {\n          results.push(sticker);\n        }\n      });\n    });\n    \n    return results;\n  }, [library]);\n\n  const getFavoriteStickers = useCallback((): StickerConfig[] => {\n    const favoriteStickers: StickerConfig[] = [];\n    \n    library.forEach(stickers => {\n      stickers.forEach(sticker => {\n        if (favorites.has(sticker.id)) {\n          favoriteStickers.push(sticker);\n        }\n      });\n    });\n    \n    return favoriteStickers;\n  }, [library, favorites]);\n\n  const addToFavorites = useCallback((stickerId: string) => {\n    setFavorites(prev => new Set(prev).add(stickerId));\n  }, []);\n\n  const removeFromFavorites = useCallback((stickerId: string) => {\n    setFavorites(prev => {\n      const newFavorites = new Set(prev);\n      newFavorites.delete(stickerId);\n      return newFavorites;\n    });\n  }, []);\n\n  return {\n    categories,\n    getStickersInCategory,\n    addStickerToLibrary,\n    removeStickerFromLibrary,\n    searchStickers,\n    getFavoriteStickers,\n    addToFavorites,\n    removeFromFavorites\n  };\n}"],"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","ignoreList":[]}