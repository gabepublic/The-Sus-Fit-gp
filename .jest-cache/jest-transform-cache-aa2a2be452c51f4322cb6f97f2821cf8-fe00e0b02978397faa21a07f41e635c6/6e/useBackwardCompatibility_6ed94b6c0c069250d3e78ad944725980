691a6d01f181cc692a392ed85cc41cae
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useEnhancedPageState: function() {
        return useEnhancedPageState;
    },
    useLegacyPageInterface: function() {
        return useLegacyPageInterface;
    },
    usePageComponentState: function() {
        return usePageComponentState;
    }
});
const _react = require("react");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _index = require("./index");
/**
 * Default migration options
 */ const DEFAULT_MIGRATION_OPTIONS = {
    enableNewFeatures: true,
    showDeprecationWarnings: process.env.NODE_ENV === 'development',
    onStateChange: ()=>{},
    enhancedErrorHandling: true,
    enableProgressTracking: true
};
function useLegacyPageInterface(options = {}) {
    const finalOptions = {
        ...DEFAULT_MIGRATION_OPTIONS,
        ...options
    };
    const { showToast } = (0, _index.useToast)();
    const deprecationWarnings = (0, _react.useRef)([]);
    // Use the new workflow internally
    const workflow = (0, _useTryonWorkflow.useTryonWorkflow)({
        timeoutMs: 60000,
        compressionLimitKB: 2048,
        debug: process.env.NODE_ENV === 'development'
    }, showToast);
    // Track deprecation warnings
    const addDeprecationWarning = (0, _react.useCallback)((method, suggestion)=>{
        if (finalOptions.showDeprecationWarnings) {
            const warning = `DEPRECATED: ${method} - ${suggestion}`;
            if (!deprecationWarnings.current.includes(warning)) {
                deprecationWarnings.current.push(warning);
                console.warn(warning);
            }
        }
    }, [
        finalOptions.showDeprecationWarnings
    ]);
    // Map new state to legacy state format (exact field mapping)
    const legacyState = {
        isCapturing: workflow.isCapturing,
        leftCardImage: workflow.leftCardImage,
        rightCardImage: workflow.rightCardImage,
        showPolaroid: workflow.showPolaroid,
        userImageFile: workflow.userImageFile,
        apparelImageFile: workflow.apparelImageFile,
        generatedImage: workflow.generatedImage,
        hasError: workflow.hasError
    };
    // Notify about state changes for migration assistance
    (0, _react.useEffect)(()=>{
        if (finalOptions.onStateChange) {
            finalOptions.onStateChange(workflow, legacyState);
        }
    }, [
        workflow,
        legacyState,
        finalOptions
    ]);
    // Legacy handlers that map to new workflow methods
    const legacyHandlers = {
        handleUserFileUpload: (0, _react.useCallback)((file)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleUserFileUpload', 'Consider using useBridgeLayer().actions.uploadUserImage for enhanced validation and progress tracking');
            }
            workflow.handleUserFileUpload(file);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleApparelFileUpload: (0, _react.useCallback)((file)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleApparelFileUpload', 'Consider using useBridgeLayer().actions.uploadApparelImage for enhanced validation and progress tracking');
            }
            workflow.handleApparelFileUpload(file);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleLeftCardImageUpload: (0, _react.useCallback)(async (imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleLeftCardImageUpload', 'Consider using useBridgeLayer().actions.uploadUserImage with File objects for better type safety');
            }
            await workflow.handleLeftCardImageUpload(imageUrl);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleRightCardImageUpload: (0, _react.useCallback)(async (imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleRightCardImageUpload', 'Consider using useBridgeLayer().actions.uploadApparelImage with File objects for better type safety');
            }
            await workflow.handleRightCardImageUpload(imageUrl);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleCameraButtonClick: (0, _react.useCallback)(async ()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleCameraButtonClick', 'Consider using useBridgeLayer().actions.generate for enhanced error handling and progress tracking');
            }
            await workflow.startGeneration();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleGenerationStart: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleGenerationStart', 'This callback is now handled automatically by the workflow. Consider using onGenerationStart in BridgeLayerConfig');
            }
            console.log('Generation started (legacy handler)');
        }, [
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleGenerationComplete: (0, _react.useCallback)((imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleGenerationComplete', 'This callback is now handled automatically by the workflow. Consider using onGenerationComplete in BridgeLayerConfig');
            }
            console.log('Generation complete (legacy handler):', imageUrl);
        }, [
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleClosePolaroid: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleClosePolaroid', 'Consider using useBridgeLayer().actions.hideResult for consistent naming');
            }
            workflow.closePolaroid();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleRetryGeneration: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleRetryGeneration', 'Consider using useBridgeLayer().actions.retry for enhanced retry logic');
            }
            workflow.retryGeneration();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ])
    };
    // Migration helper
    const migrateToNewInterface = (0, _react.useCallback)(()=>{
        return {
            // Import suggestion
            import: 'import { useBridgeLayer } from "@/hooks/useBridgeLayer"',
            // New hook usage
            hookUsage: `
const { state, actions } = useBridgeLayer({
  workflow: { timeoutMs: 60000, compressionLimitKB: 2048 },
  ui: { showDetailedProgress: true },
  callbacks: {
    onGenerationStart: () => console.log('Generation started'),
    onGenerationComplete: (imageUrl) => console.log('Generation complete:', imageUrl)
  }
});`,
            // State mapping
            stateMapping: {
                'isCapturing': 'state.isLoading',
                'leftCardImage': 'state.userImagePreview',
                'rightCardImage': 'state.apparelImagePreview',
                'showPolaroid': 'state.showResult',
                'userImageFile': 'advanced.workflow.userImageFile',
                'apparelImageFile': 'advanced.workflow.apparelImageFile',
                'generatedImage': 'state.resultImage',
                'hasError': '!!state.errorMessage'
            },
            // Action mapping
            actionMapping: {
                'handleUserFileUpload': 'actions.uploadUserImage',
                'handleApparelFileUpload': 'actions.uploadApparelImage',
                'handleCameraButtonClick': 'actions.generate',
                'handleClosePolaroid': 'actions.hideResult',
                'handleRetryGeneration': 'actions.retry'
            },
            // Enhanced features available
            enhancedFeatures: [
                'Built-in validation with user-friendly error messages',
                'Progress tracking with detailed status updates',
                'Automatic retry logic with exponential backoff',
                'Thumbnail generation and preview management',
                'Drag and drop support',
                'Image processing and optimization',
                'Download and share functionality',
                'Type-safe interfaces throughout'
            ]
        };
    }, []);
    return {
        // Legacy state (exact match)
        ...legacyState,
        // Legacy handlers (exact match)
        ...legacyHandlers,
        // Migration assistance
        migration: {
            isUsingNewArchitecture: true,
            newWorkflowState: workflow.workflowState,
            deprecationWarnings: deprecationWarnings.current,
            migrateToNewInterface
        }
    };
}
function usePageComponentState() {
    const compatibility = useLegacyPageInterface();
    // Return only the exact state and handlers that page.tsx expects
    return {
        isCapturing: compatibility.isCapturing,
        leftCardImage: compatibility.leftCardImage,
        rightCardImage: compatibility.rightCardImage,
        showPolaroid: compatibility.showPolaroid,
        userImageFile: compatibility.userImageFile,
        apparelImageFile: compatibility.apparelImageFile,
        generatedImage: compatibility.generatedImage,
        hasError: compatibility.hasError,
        handleUserFileUpload: compatibility.handleUserFileUpload,
        handleApparelFileUpload: compatibility.handleApparelFileUpload,
        handleLeftCardImageUpload: compatibility.handleLeftCardImageUpload,
        handleRightCardImageUpload: compatibility.handleRightCardImageUpload,
        handleCameraButtonClick: compatibility.handleCameraButtonClick,
        handleGenerationStart: compatibility.handleGenerationStart,
        handleGenerationComplete: compatibility.handleGenerationComplete,
        handleClosePolaroid: compatibility.handleClosePolaroid,
        handleRetryGeneration: compatibility.handleRetryGeneration
    };
}
function useEnhancedPageState(migrationOptions = {}) {
    const compatibility = useLegacyPageInterface(migrationOptions);
    return {
        // All legacy functionality
        ...compatibility,
        // Additional enhanced features
        enhanced: {
            progress: compatibility.migration.newWorkflowState === _useTryonWorkflow.WorkflowState.GENERATING ? compatibility.progress || 0 : 0,
            canGenerate: !compatibility.isCapturing && !!compatibility.userImageFile && !!compatibility.apparelImageFile,
            canRetry: compatibility.hasError,
            validationErrors: [],
            // New enhanced actions
            reset: ()=>compatibility.resetWorkflow?.(),
            clearError: ()=>compatibility.clearError?.(),
            // Migration helper
            getMigrationGuide: compatibility.migration.migrateToNewInterface
        }
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2hvb2tzL3VzZUJhY2t3YXJkQ29tcGF0aWJpbGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbi8vIEJhY2t3YXJkIENvbXBhdGliaWxpdHkgTGF5ZXJcbi8vIE1haW50YWlucyBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgcGFnZSBjb21wb25lbnQgc3RhdGUgc3RydWN0dXJlIHdoaWxlIHByb3ZpZGluZyBtaWdyYXRpb24gcGF0aFxuXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUcnlvbldvcmtmbG93LCBXb3JrZmxvd1N0YXRlIH0gZnJvbSAnLi91c2VUcnlvbldvcmtmbG93JztcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnLi9pbmRleCc7XG5cbi8qKlxuICogTGVnYWN5IHBhZ2UgY29tcG9uZW50IHN0YXRlIGludGVyZmFjZSAoZXhhY3QgbWF0Y2ggZnJvbSBwYWdlLnRzeClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZWdhY3lQYWdlU3RhdGUge1xuICBpc0NhcHR1cmluZzogYm9vbGVhbjtcbiAgbGVmdENhcmRJbWFnZTogc3RyaW5nIHwgbnVsbDtcbiAgcmlnaHRDYXJkSW1hZ2U6IHN0cmluZyB8IG51bGw7XG4gIHNob3dQb2xhcm9pZDogYm9vbGVhbjtcbiAgdXNlckltYWdlRmlsZTogRmlsZSB8IG51bGw7XG4gIGFwcGFyZWxJbWFnZUZpbGU6IEZpbGUgfCBudWxsO1xuICBnZW5lcmF0ZWRJbWFnZTogc3RyaW5nIHwgbnVsbDtcbiAgaGFzRXJyb3I6IGJvb2xlYW47XG59XG5cbi8qKlxuICogTGVnYWN5IHBhZ2UgY29tcG9uZW50IGhhbmRsZXJzIGludGVyZmFjZSAoZXhhY3QgbWF0Y2ggZnJvbSBwYWdlLnRzeClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZWdhY3lQYWdlSGFuZGxlcnMge1xuICBoYW5kbGVVc2VyRmlsZVVwbG9hZDogKGZpbGU6IEZpbGUpID0+IHZvaWQ7XG4gIGhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkOiAoZmlsZTogRmlsZSkgPT4gdm9pZDtcbiAgaGFuZGxlTGVmdENhcmRJbWFnZVVwbG9hZDogKGltYWdlVXJsOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gIGhhbmRsZVJpZ2h0Q2FyZEltYWdlVXBsb2FkOiAoaW1hZ2VVcmw6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgaGFuZGxlQ2FtZXJhQnV0dG9uQ2xpY2s6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGhhbmRsZUdlbmVyYXRpb25TdGFydDogKCkgPT4gdm9pZDtcbiAgaGFuZGxlR2VuZXJhdGlvbkNvbXBsZXRlOiAoaW1hZ2VVcmw6IHN0cmluZykgPT4gdm9pZDtcbiAgaGFuZGxlQ2xvc2VQb2xhcm9pZDogKCkgPT4gdm9pZDtcbiAgaGFuZGxlUmV0cnlHZW5lcmF0aW9uOiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIE1pZ3JhdGlvbiBvcHRpb25zIGZvciBncmFkdWFsIHRyYW5zaXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWdyYXRpb25PcHRpb25zIHtcbiAgLyoqIEVuYWJsZSBuZXcgZmVhdHVyZXMgd2hpbGUgbWFpbnRhaW5pbmcgbGVnYWN5IGludGVyZmFjZSAqL1xuICBlbmFibGVOZXdGZWF0dXJlcz86IGJvb2xlYW47XG4gIC8qKiBTaG93IGRlcHJlY2F0aW9uIHdhcm5pbmdzIGluIGRldmVsb3BtZW50ICovXG4gIHNob3dEZXByZWNhdGlvbldhcm5pbmdzPzogYm9vbGVhbjtcbiAgLyoqIEN1c3RvbSBtaWdyYXRpb24gY2FsbGJhY2tzICovXG4gIG9uU3RhdGVDaGFuZ2U/OiAobmV3U3RhdGU6IGFueSwgbGVnYWN5U3RhdGU6IExlZ2FjeVBhZ2VTdGF0ZSkgPT4gdm9pZDtcbiAgLyoqIEVuYWJsZSBlbmhhbmNlZCBlcnJvciBoYW5kbGluZyAqL1xuICBlbmhhbmNlZEVycm9ySGFuZGxpbmc/OiBib29sZWFuO1xuICAvKiogRW5hYmxlIHByb2dyZXNzIHRyYWNraW5nICovXG4gIGVuYWJsZVByb2dyZXNzVHJhY2tpbmc/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERlZmF1bHQgbWlncmF0aW9uIG9wdGlvbnNcbiAqL1xuY29uc3QgREVGQVVMVF9NSUdSQVRJT05fT1BUSU9OUzogUmVxdWlyZWQ8TWlncmF0aW9uT3B0aW9ucz4gPSB7XG4gIGVuYWJsZU5ld0ZlYXR1cmVzOiB0cnVlLFxuICBzaG93RGVwcmVjYXRpb25XYXJuaW5nczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcsXG4gIG9uU3RhdGVDaGFuZ2U6ICgpID0+IHt9LFxuICBlbmhhbmNlZEVycm9ySGFuZGxpbmc6IHRydWUsXG4gIGVuYWJsZVByb2dyZXNzVHJhY2tpbmc6IHRydWVcbn07XG5cbi8qKlxuICogQmFja3dhcmQgY29tcGF0aWJpbGl0eSBob29rIHRoYXQgcHJvdmlkZXMgZXhhY3QgbGVnYWN5IGludGVyZmFjZVxuICogd2hpbGUgaW50ZXJuYWxseSB1c2luZyB0aGUgbmV3IGJyaWRnZSBsYXllciBhcmNoaXRlY3R1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxlZ2FjeVBhZ2VJbnRlcmZhY2UoXG4gIG9wdGlvbnM6IE1pZ3JhdGlvbk9wdGlvbnMgPSB7fVxuKTogTGVnYWN5UGFnZVN0YXRlICYgTGVnYWN5UGFnZUhhbmRsZXJzICYge1xuICAvLyBBZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIGZvciBtaWdyYXRpb25cbiAgbWlncmF0aW9uOiB7XG4gICAgaXNVc2luZ05ld0FyY2hpdGVjdHVyZTogYm9vbGVhbjtcbiAgICBuZXdXb3JrZmxvd1N0YXRlOiBXb3JrZmxvd1N0YXRlO1xuICAgIGRlcHJlY2F0aW9uV2FybmluZ3M6IHN0cmluZ1tdO1xuICAgIG1pZ3JhdGVUb05ld0ludGVyZmFjZTogKCkgPT4gYW55O1xuICB9O1xufSB7XG4gIGNvbnN0IGZpbmFsT3B0aW9ucyA9IHsgLi4uREVGQVVMVF9NSUdSQVRJT05fT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICBjb25zdCB7IHNob3dUb2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgY29uc3QgZGVwcmVjYXRpb25XYXJuaW5ncyA9IHVzZVJlZjxzdHJpbmdbXT4oW10pO1xuXG4gIC8vIFVzZSB0aGUgbmV3IHdvcmtmbG93IGludGVybmFsbHlcbiAgY29uc3Qgd29ya2Zsb3cgPSB1c2VUcnlvbldvcmtmbG93KFxuICAgIHtcbiAgICAgIHRpbWVvdXRNczogNjAwMDAsXG4gICAgICBjb21wcmVzc2lvbkxpbWl0S0I6IDIwNDgsXG4gICAgICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbiAgICB9LFxuICAgIHNob3dUb2FzdFxuICApO1xuXG4gIC8vIFRyYWNrIGRlcHJlY2F0aW9uIHdhcm5pbmdzXG4gIGNvbnN0IGFkZERlcHJlY2F0aW9uV2FybmluZyA9IHVzZUNhbGxiYWNrKChtZXRob2Q6IHN0cmluZywgc3VnZ2VzdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGZpbmFsT3B0aW9ucy5zaG93RGVwcmVjYXRpb25XYXJuaW5ncykge1xuICAgICAgY29uc3Qgd2FybmluZyA9IGBERVBSRUNBVEVEOiAke21ldGhvZH0gLSAke3N1Z2dlc3Rpb259YDtcbiAgICAgIGlmICghZGVwcmVjYXRpb25XYXJuaW5ncy5jdXJyZW50LmluY2x1ZGVzKHdhcm5pbmcpKSB7XG4gICAgICAgIGRlcHJlY2F0aW9uV2FybmluZ3MuY3VycmVudC5wdXNoKHdhcm5pbmcpO1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzXSk7XG5cbiAgLy8gTWFwIG5ldyBzdGF0ZSB0byBsZWdhY3kgc3RhdGUgZm9ybWF0IChleGFjdCBmaWVsZCBtYXBwaW5nKVxuICBjb25zdCBsZWdhY3lTdGF0ZTogTGVnYWN5UGFnZVN0YXRlID0ge1xuICAgIGlzQ2FwdHVyaW5nOiB3b3JrZmxvdy5pc0NhcHR1cmluZyxcbiAgICBsZWZ0Q2FyZEltYWdlOiB3b3JrZmxvdy5sZWZ0Q2FyZEltYWdlLFxuICAgIHJpZ2h0Q2FyZEltYWdlOiB3b3JrZmxvdy5yaWdodENhcmRJbWFnZSxcbiAgICBzaG93UG9sYXJvaWQ6IHdvcmtmbG93LnNob3dQb2xhcm9pZCxcbiAgICB1c2VySW1hZ2VGaWxlOiB3b3JrZmxvdy51c2VySW1hZ2VGaWxlLFxuICAgIGFwcGFyZWxJbWFnZUZpbGU6IHdvcmtmbG93LmFwcGFyZWxJbWFnZUZpbGUsXG4gICAgZ2VuZXJhdGVkSW1hZ2U6IHdvcmtmbG93LmdlbmVyYXRlZEltYWdlLFxuICAgIGhhc0Vycm9yOiB3b3JrZmxvdy5oYXNFcnJvclxuICB9O1xuXG4gIC8vIE5vdGlmeSBhYm91dCBzdGF0ZSBjaGFuZ2VzIGZvciBtaWdyYXRpb24gYXNzaXN0YW5jZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmaW5hbE9wdGlvbnMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgZmluYWxPcHRpb25zLm9uU3RhdGVDaGFuZ2Uod29ya2Zsb3csIGxlZ2FjeVN0YXRlKTtcbiAgICB9XG4gIH0sIFt3b3JrZmxvdywgbGVnYWN5U3RhdGUsIGZpbmFsT3B0aW9uc10pO1xuXG4gIC8vIExlZ2FjeSBoYW5kbGVycyB0aGF0IG1hcCB0byBuZXcgd29ya2Zsb3cgbWV0aG9kc1xuICBjb25zdCBsZWdhY3lIYW5kbGVyczogTGVnYWN5UGFnZUhhbmRsZXJzID0ge1xuICAgIGhhbmRsZVVzZXJGaWxlVXBsb2FkOiB1c2VDYWxsYmFjaygoZmlsZTogRmlsZSkgPT4ge1xuICAgICAgaWYgKGZpbmFsT3B0aW9ucy5zaG93RGVwcmVjYXRpb25XYXJuaW5ncykge1xuICAgICAgICBhZGREZXByZWNhdGlvbldhcm5pbmcoXG4gICAgICAgICAgJ2hhbmRsZVVzZXJGaWxlVXBsb2FkJywgXG4gICAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIHVzZUJyaWRnZUxheWVyKCkuYWN0aW9ucy51cGxvYWRVc2VySW1hZ2UgZm9yIGVuaGFuY2VkIHZhbGlkYXRpb24gYW5kIHByb2dyZXNzIHRyYWNraW5nJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgd29ya2Zsb3cuaGFuZGxlVXNlckZpbGVVcGxvYWQoZmlsZSk7XG4gICAgfSwgW3dvcmtmbG93LCBhZGREZXByZWNhdGlvbldhcm5pbmcsIGZpbmFsT3B0aW9ucy5zaG93RGVwcmVjYXRpb25XYXJuaW5nc10pLFxuXG4gICAgaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQ6IHVzZUNhbGxiYWNrKChmaWxlOiBGaWxlKSA9PiB7XG4gICAgICBpZiAoZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzKSB7XG4gICAgICAgIGFkZERlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgICAgICAnaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQnLCBcbiAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgdXNlQnJpZGdlTGF5ZXIoKS5hY3Rpb25zLnVwbG9hZEFwcGFyZWxJbWFnZSBmb3IgZW5oYW5jZWQgdmFsaWRhdGlvbiBhbmQgcHJvZ3Jlc3MgdHJhY2tpbmcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB3b3JrZmxvdy5oYW5kbGVBcHBhcmVsRmlsZVVwbG9hZChmaWxlKTtcbiAgICB9LCBbd29ya2Zsb3csIGFkZERlcHJlY2F0aW9uV2FybmluZywgZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzXSksXG5cbiAgICBoYW5kbGVMZWZ0Q2FyZEltYWdlVXBsb2FkOiB1c2VDYWxsYmFjayhhc3luYyAoaW1hZ2VVcmw6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGZpbmFsT3B0aW9ucy5zaG93RGVwcmVjYXRpb25XYXJuaW5ncykge1xuICAgICAgICBhZGREZXByZWNhdGlvbldhcm5pbmcoXG4gICAgICAgICAgJ2hhbmRsZUxlZnRDYXJkSW1hZ2VVcGxvYWQnLCBcbiAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgdXNlQnJpZGdlTGF5ZXIoKS5hY3Rpb25zLnVwbG9hZFVzZXJJbWFnZSB3aXRoIEZpbGUgb2JqZWN0cyBmb3IgYmV0dGVyIHR5cGUgc2FmZXR5J1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXdhaXQgd29ya2Zsb3cuaGFuZGxlTGVmdENhcmRJbWFnZVVwbG9hZChpbWFnZVVybCk7XG4gICAgfSwgW3dvcmtmbG93LCBhZGREZXByZWNhdGlvbldhcm5pbmcsIGZpbmFsT3B0aW9ucy5zaG93RGVwcmVjYXRpb25XYXJuaW5nc10pLFxuXG4gICAgaGFuZGxlUmlnaHRDYXJkSW1hZ2VVcGxvYWQ6IHVzZUNhbGxiYWNrKGFzeW5jIChpbWFnZVVybDogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzKSB7XG4gICAgICAgIGFkZERlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgICAgICAnaGFuZGxlUmlnaHRDYXJkSW1hZ2VVcGxvYWQnLCBcbiAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgdXNlQnJpZGdlTGF5ZXIoKS5hY3Rpb25zLnVwbG9hZEFwcGFyZWxJbWFnZSB3aXRoIEZpbGUgb2JqZWN0cyBmb3IgYmV0dGVyIHR5cGUgc2FmZXR5J1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXdhaXQgd29ya2Zsb3cuaGFuZGxlUmlnaHRDYXJkSW1hZ2VVcGxvYWQoaW1hZ2VVcmwpO1xuICAgIH0sIFt3b3JrZmxvdywgYWRkRGVwcmVjYXRpb25XYXJuaW5nLCBmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3NdKSxcblxuICAgIGhhbmRsZUNhbWVyYUJ1dHRvbkNsaWNrOiB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzKSB7XG4gICAgICAgIGFkZERlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgICAgICAnaGFuZGxlQ2FtZXJhQnV0dG9uQ2xpY2snLCBcbiAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgdXNlQnJpZGdlTGF5ZXIoKS5hY3Rpb25zLmdlbmVyYXRlIGZvciBlbmhhbmNlZCBlcnJvciBoYW5kbGluZyBhbmQgcHJvZ3Jlc3MgdHJhY2tpbmcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBhd2FpdCB3b3JrZmxvdy5zdGFydEdlbmVyYXRpb24oKTtcbiAgICB9LCBbd29ya2Zsb3csIGFkZERlcHJlY2F0aW9uV2FybmluZywgZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzXSksXG5cbiAgICBoYW5kbGVHZW5lcmF0aW9uU3RhcnQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmIChmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3MpIHtcbiAgICAgICAgYWRkRGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICAgICdoYW5kbGVHZW5lcmF0aW9uU3RhcnQnLCBcbiAgICAgICAgICAnVGhpcyBjYWxsYmFjayBpcyBub3cgaGFuZGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSB3b3JrZmxvdy4gQ29uc2lkZXIgdXNpbmcgb25HZW5lcmF0aW9uU3RhcnQgaW4gQnJpZGdlTGF5ZXJDb25maWcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnR2VuZXJhdGlvbiBzdGFydGVkIChsZWdhY3kgaGFuZGxlciknKTtcbiAgICB9LCBbYWRkRGVwcmVjYXRpb25XYXJuaW5nLCBmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3NdKSxcblxuICAgIGhhbmRsZUdlbmVyYXRpb25Db21wbGV0ZTogdXNlQ2FsbGJhY2soKGltYWdlVXJsOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3MpIHtcbiAgICAgICAgYWRkRGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICAgICdoYW5kbGVHZW5lcmF0aW9uQ29tcGxldGUnLCBcbiAgICAgICAgICAnVGhpcyBjYWxsYmFjayBpcyBub3cgaGFuZGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSB3b3JrZmxvdy4gQ29uc2lkZXIgdXNpbmcgb25HZW5lcmF0aW9uQ29tcGxldGUgaW4gQnJpZGdlTGF5ZXJDb25maWcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnR2VuZXJhdGlvbiBjb21wbGV0ZSAobGVnYWN5IGhhbmRsZXIpOicsIGltYWdlVXJsKTtcbiAgICB9LCBbYWRkRGVwcmVjYXRpb25XYXJuaW5nLCBmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3NdKSxcblxuICAgIGhhbmRsZUNsb3NlUG9sYXJvaWQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmIChmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3MpIHtcbiAgICAgICAgYWRkRGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICAgICdoYW5kbGVDbG9zZVBvbGFyb2lkJywgXG4gICAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIHVzZUJyaWRnZUxheWVyKCkuYWN0aW9ucy5oaWRlUmVzdWx0IGZvciBjb25zaXN0ZW50IG5hbWluZydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHdvcmtmbG93LmNsb3NlUG9sYXJvaWQoKTtcbiAgICB9LCBbd29ya2Zsb3csIGFkZERlcHJlY2F0aW9uV2FybmluZywgZmluYWxPcHRpb25zLnNob3dEZXByZWNhdGlvbldhcm5pbmdzXSksXG5cbiAgICBoYW5kbGVSZXRyeUdlbmVyYXRpb246IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmIChmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3MpIHtcbiAgICAgICAgYWRkRGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICAgICdoYW5kbGVSZXRyeUdlbmVyYXRpb24nLCBcbiAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgdXNlQnJpZGdlTGF5ZXIoKS5hY3Rpb25zLnJldHJ5IGZvciBlbmhhbmNlZCByZXRyeSBsb2dpYydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHdvcmtmbG93LnJldHJ5R2VuZXJhdGlvbigpO1xuICAgIH0sIFt3b3JrZmxvdywgYWRkRGVwcmVjYXRpb25XYXJuaW5nLCBmaW5hbE9wdGlvbnMuc2hvd0RlcHJlY2F0aW9uV2FybmluZ3NdKVxuICB9O1xuXG4gIC8vIE1pZ3JhdGlvbiBoZWxwZXJcbiAgY29uc3QgbWlncmF0ZVRvTmV3SW50ZXJmYWNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBJbXBvcnQgc3VnZ2VzdGlvblxuICAgICAgaW1wb3J0OiAnaW1wb3J0IHsgdXNlQnJpZGdlTGF5ZXIgfSBmcm9tIFwiQC9ob29rcy91c2VCcmlkZ2VMYXllclwiJyxcbiAgICAgIFxuICAgICAgLy8gTmV3IGhvb2sgdXNhZ2VcbiAgICAgIGhvb2tVc2FnZTogYFxuY29uc3QgeyBzdGF0ZSwgYWN0aW9ucyB9ID0gdXNlQnJpZGdlTGF5ZXIoe1xuICB3b3JrZmxvdzogeyB0aW1lb3V0TXM6IDYwMDAwLCBjb21wcmVzc2lvbkxpbWl0S0I6IDIwNDggfSxcbiAgdWk6IHsgc2hvd0RldGFpbGVkUHJvZ3Jlc3M6IHRydWUgfSxcbiAgY2FsbGJhY2tzOiB7XG4gICAgb25HZW5lcmF0aW9uU3RhcnQ6ICgpID0+IGNvbnNvbGUubG9nKCdHZW5lcmF0aW9uIHN0YXJ0ZWQnKSxcbiAgICBvbkdlbmVyYXRpb25Db21wbGV0ZTogKGltYWdlVXJsKSA9PiBjb25zb2xlLmxvZygnR2VuZXJhdGlvbiBjb21wbGV0ZTonLCBpbWFnZVVybClcbiAgfVxufSk7YCxcbiAgICAgIFxuICAgICAgLy8gU3RhdGUgbWFwcGluZ1xuICAgICAgc3RhdGVNYXBwaW5nOiB7XG4gICAgICAgICdpc0NhcHR1cmluZyc6ICdzdGF0ZS5pc0xvYWRpbmcnLFxuICAgICAgICAnbGVmdENhcmRJbWFnZSc6ICdzdGF0ZS51c2VySW1hZ2VQcmV2aWV3JyxcbiAgICAgICAgJ3JpZ2h0Q2FyZEltYWdlJzogJ3N0YXRlLmFwcGFyZWxJbWFnZVByZXZpZXcnLCBcbiAgICAgICAgJ3Nob3dQb2xhcm9pZCc6ICdzdGF0ZS5zaG93UmVzdWx0JyxcbiAgICAgICAgJ3VzZXJJbWFnZUZpbGUnOiAnYWR2YW5jZWQud29ya2Zsb3cudXNlckltYWdlRmlsZScsXG4gICAgICAgICdhcHBhcmVsSW1hZ2VGaWxlJzogJ2FkdmFuY2VkLndvcmtmbG93LmFwcGFyZWxJbWFnZUZpbGUnLFxuICAgICAgICAnZ2VuZXJhdGVkSW1hZ2UnOiAnc3RhdGUucmVzdWx0SW1hZ2UnLFxuICAgICAgICAnaGFzRXJyb3InOiAnISFzdGF0ZS5lcnJvck1lc3NhZ2UnXG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBBY3Rpb24gbWFwcGluZ1xuICAgICAgYWN0aW9uTWFwcGluZzoge1xuICAgICAgICAnaGFuZGxlVXNlckZpbGVVcGxvYWQnOiAnYWN0aW9ucy51cGxvYWRVc2VySW1hZ2UnLFxuICAgICAgICAnaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQnOiAnYWN0aW9ucy51cGxvYWRBcHBhcmVsSW1hZ2UnLFxuICAgICAgICAnaGFuZGxlQ2FtZXJhQnV0dG9uQ2xpY2snOiAnYWN0aW9ucy5nZW5lcmF0ZScsXG4gICAgICAgICdoYW5kbGVDbG9zZVBvbGFyb2lkJzogJ2FjdGlvbnMuaGlkZVJlc3VsdCcsXG4gICAgICAgICdoYW5kbGVSZXRyeUdlbmVyYXRpb24nOiAnYWN0aW9ucy5yZXRyeSdcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIC8vIEVuaGFuY2VkIGZlYXR1cmVzIGF2YWlsYWJsZVxuICAgICAgZW5oYW5jZWRGZWF0dXJlczogW1xuICAgICAgICAnQnVpbHQtaW4gdmFsaWRhdGlvbiB3aXRoIHVzZXItZnJpZW5kbHkgZXJyb3IgbWVzc2FnZXMnLFxuICAgICAgICAnUHJvZ3Jlc3MgdHJhY2tpbmcgd2l0aCBkZXRhaWxlZCBzdGF0dXMgdXBkYXRlcycsXG4gICAgICAgICdBdXRvbWF0aWMgcmV0cnkgbG9naWMgd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmJyxcbiAgICAgICAgJ1RodW1ibmFpbCBnZW5lcmF0aW9uIGFuZCBwcmV2aWV3IG1hbmFnZW1lbnQnLFxuICAgICAgICAnRHJhZyBhbmQgZHJvcCBzdXBwb3J0JyxcbiAgICAgICAgJ0ltYWdlIHByb2Nlc3NpbmcgYW5kIG9wdGltaXphdGlvbicsXG4gICAgICAgICdEb3dubG9hZCBhbmQgc2hhcmUgZnVuY3Rpb25hbGl0eScsXG4gICAgICAgICdUeXBlLXNhZmUgaW50ZXJmYWNlcyB0aHJvdWdob3V0J1xuICAgICAgXVxuICAgIH07XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIC8vIExlZ2FjeSBzdGF0ZSAoZXhhY3QgbWF0Y2gpXG4gICAgLi4ubGVnYWN5U3RhdGUsXG4gICAgXG4gICAgLy8gTGVnYWN5IGhhbmRsZXJzIChleGFjdCBtYXRjaClcbiAgICAuLi5sZWdhY3lIYW5kbGVycyxcbiAgICBcbiAgICAvLyBNaWdyYXRpb24gYXNzaXN0YW5jZVxuICAgIG1pZ3JhdGlvbjoge1xuICAgICAgaXNVc2luZ05ld0FyY2hpdGVjdHVyZTogdHJ1ZSxcbiAgICAgIG5ld1dvcmtmbG93U3RhdGU6IHdvcmtmbG93LndvcmtmbG93U3RhdGUsXG4gICAgICBkZXByZWNhdGlvbldhcm5pbmdzOiBkZXByZWNhdGlvbldhcm5pbmdzLmN1cnJlbnQsXG4gICAgICBtaWdyYXRlVG9OZXdJbnRlcmZhY2VcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRGlyZWN0IHJlcGxhY2VtZW50IGhvb2sgZm9yIGV4aXN0aW5nIHBhZ2UudHN4XG4gKiBEcm9wLWluIHJlcGxhY2VtZW50IHRoYXQgcmVxdWlyZXMgbm8gY29kZSBjaGFuZ2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQYWdlQ29tcG9uZW50U3RhdGUoKSB7XG4gIGNvbnN0IGNvbXBhdGliaWxpdHkgPSB1c2VMZWdhY3lQYWdlSW50ZXJmYWNlKCk7XG4gIFxuICAvLyBSZXR1cm4gb25seSB0aGUgZXhhY3Qgc3RhdGUgYW5kIGhhbmRsZXJzIHRoYXQgcGFnZS50c3ggZXhwZWN0c1xuICByZXR1cm4ge1xuICAgIGlzQ2FwdHVyaW5nOiBjb21wYXRpYmlsaXR5LmlzQ2FwdHVyaW5nLFxuICAgIGxlZnRDYXJkSW1hZ2U6IGNvbXBhdGliaWxpdHkubGVmdENhcmRJbWFnZSxcbiAgICByaWdodENhcmRJbWFnZTogY29tcGF0aWJpbGl0eS5yaWdodENhcmRJbWFnZSxcbiAgICBzaG93UG9sYXJvaWQ6IGNvbXBhdGliaWxpdHkuc2hvd1BvbGFyb2lkLFxuICAgIHVzZXJJbWFnZUZpbGU6IGNvbXBhdGliaWxpdHkudXNlckltYWdlRmlsZSxcbiAgICBhcHBhcmVsSW1hZ2VGaWxlOiBjb21wYXRpYmlsaXR5LmFwcGFyZWxJbWFnZUZpbGUsXG4gICAgZ2VuZXJhdGVkSW1hZ2U6IGNvbXBhdGliaWxpdHkuZ2VuZXJhdGVkSW1hZ2UsXG4gICAgaGFzRXJyb3I6IGNvbXBhdGliaWxpdHkuaGFzRXJyb3IsXG4gICAgXG4gICAgaGFuZGxlVXNlckZpbGVVcGxvYWQ6IGNvbXBhdGliaWxpdHkuaGFuZGxlVXNlckZpbGVVcGxvYWQsXG4gICAgaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQ6IGNvbXBhdGliaWxpdHkuaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQsXG4gICAgaGFuZGxlTGVmdENhcmRJbWFnZVVwbG9hZDogY29tcGF0aWJpbGl0eS5oYW5kbGVMZWZ0Q2FyZEltYWdlVXBsb2FkLFxuICAgIGhhbmRsZVJpZ2h0Q2FyZEltYWdlVXBsb2FkOiBjb21wYXRpYmlsaXR5LmhhbmRsZVJpZ2h0Q2FyZEltYWdlVXBsb2FkLFxuICAgIGhhbmRsZUNhbWVyYUJ1dHRvbkNsaWNrOiBjb21wYXRpYmlsaXR5LmhhbmRsZUNhbWVyYUJ1dHRvbkNsaWNrLFxuICAgIGhhbmRsZUdlbmVyYXRpb25TdGFydDogY29tcGF0aWJpbGl0eS5oYW5kbGVHZW5lcmF0aW9uU3RhcnQsXG4gICAgaGFuZGxlR2VuZXJhdGlvbkNvbXBsZXRlOiBjb21wYXRpYmlsaXR5LmhhbmRsZUdlbmVyYXRpb25Db21wbGV0ZSxcbiAgICBoYW5kbGVDbG9zZVBvbGFyb2lkOiBjb21wYXRpYmlsaXR5LmhhbmRsZUNsb3NlUG9sYXJvaWQsXG4gICAgaGFuZGxlUmV0cnlHZW5lcmF0aW9uOiBjb21wYXRpYmlsaXR5LmhhbmRsZVJldHJ5R2VuZXJhdGlvblxuICB9O1xufVxuXG4vKipcbiAqIEVuaGFuY2VkIGhvb2sgdGhhdCBhZGRzIG5ldyBmZWF0dXJlcyB3aGlsZSBtYWludGFpbmluZyBjb21wYXRpYmlsaXR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFbmhhbmNlZFBhZ2VTdGF0ZShtaWdyYXRpb25PcHRpb25zOiBNaWdyYXRpb25PcHRpb25zID0ge30pIHtcbiAgY29uc3QgY29tcGF0aWJpbGl0eSA9IHVzZUxlZ2FjeVBhZ2VJbnRlcmZhY2UobWlncmF0aW9uT3B0aW9ucyk7XG4gIFxuICByZXR1cm4ge1xuICAgIC8vIEFsbCBsZWdhY3kgZnVuY3Rpb25hbGl0eVxuICAgIC4uLmNvbXBhdGliaWxpdHksXG4gICAgXG4gICAgLy8gQWRkaXRpb25hbCBlbmhhbmNlZCBmZWF0dXJlc1xuICAgIGVuaGFuY2VkOiB7XG4gICAgICBwcm9ncmVzczogY29tcGF0aWJpbGl0eS5taWdyYXRpb24ubmV3V29ya2Zsb3dTdGF0ZSA9PT0gV29ya2Zsb3dTdGF0ZS5HRU5FUkFUSU5HID8gXG4gICAgICAgIChjb21wYXRpYmlsaXR5IGFzIGFueSkucHJvZ3Jlc3MgfHwgMCA6IDAsXG4gICAgICBcbiAgICAgIGNhbkdlbmVyYXRlOiAhY29tcGF0aWJpbGl0eS5pc0NhcHR1cmluZyAmJiBcbiAgICAgICAgICAgICAgICAgICAhIWNvbXBhdGliaWxpdHkudXNlckltYWdlRmlsZSAmJiBcbiAgICAgICAgICAgICAgICAgICAhIWNvbXBhdGliaWxpdHkuYXBwYXJlbEltYWdlRmlsZSxcbiAgICAgIFxuICAgICAgY2FuUmV0cnk6IGNvbXBhdGliaWxpdHkuaGFzRXJyb3IsXG4gICAgICBcbiAgICAgIHZhbGlkYXRpb25FcnJvcnM6IFtdIGFzIHN0cmluZ1tdLCAvLyBDb3VsZCBiZSBleHBhbmRlZCB0byBzaG93IHZhbGlkYXRpb24gZGV0YWlsc1xuICAgICAgXG4gICAgICAvLyBOZXcgZW5oYW5jZWQgYWN0aW9uc1xuICAgICAgcmVzZXQ6ICgpID0+IChjb21wYXRpYmlsaXR5IGFzIGFueSkucmVzZXRXb3JrZmxvdz8uKCksXG4gICAgICBjbGVhckVycm9yOiAoKSA9PiAoY29tcGF0aWJpbGl0eSBhcyBhbnkpLmNsZWFyRXJyb3I/LigpLFxuICAgICAgXG4gICAgICAvLyBNaWdyYXRpb24gaGVscGVyXG4gICAgICBnZXRNaWdyYXRpb25HdWlkZTogY29tcGF0aWJpbGl0eS5taWdyYXRpb24ubWlncmF0ZVRvTmV3SW50ZXJmYWNlXG4gICAgfVxuICB9O1xufSJdLCJuYW1lcyI6WyJ1c2VFbmhhbmNlZFBhZ2VTdGF0ZSIsInVzZUxlZ2FjeVBhZ2VJbnRlcmZhY2UiLCJ1c2VQYWdlQ29tcG9uZW50U3RhdGUiLCJERUZBVUxUX01JR1JBVElPTl9PUFRJT05TIiwiZW5hYmxlTmV3RmVhdHVyZXMiLCJzaG93RGVwcmVjYXRpb25XYXJuaW5ncyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIm9uU3RhdGVDaGFuZ2UiLCJlbmhhbmNlZEVycm9ySGFuZGxpbmciLCJlbmFibGVQcm9ncmVzc1RyYWNraW5nIiwib3B0aW9ucyIsImZpbmFsT3B0aW9ucyIsInNob3dUb2FzdCIsInVzZVRvYXN0IiwiZGVwcmVjYXRpb25XYXJuaW5ncyIsInVzZVJlZiIsIndvcmtmbG93IiwidXNlVHJ5b25Xb3JrZmxvdyIsInRpbWVvdXRNcyIsImNvbXByZXNzaW9uTGltaXRLQiIsImRlYnVnIiwiYWRkRGVwcmVjYXRpb25XYXJuaW5nIiwidXNlQ2FsbGJhY2siLCJtZXRob2QiLCJzdWdnZXN0aW9uIiwid2FybmluZyIsImN1cnJlbnQiLCJpbmNsdWRlcyIsInB1c2giLCJjb25zb2xlIiwid2FybiIsImxlZ2FjeVN0YXRlIiwiaXNDYXB0dXJpbmciLCJsZWZ0Q2FyZEltYWdlIiwicmlnaHRDYXJkSW1hZ2UiLCJzaG93UG9sYXJvaWQiLCJ1c2VySW1hZ2VGaWxlIiwiYXBwYXJlbEltYWdlRmlsZSIsImdlbmVyYXRlZEltYWdlIiwiaGFzRXJyb3IiLCJ1c2VFZmZlY3QiLCJsZWdhY3lIYW5kbGVycyIsImhhbmRsZVVzZXJGaWxlVXBsb2FkIiwiZmlsZSIsImhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkIiwiaGFuZGxlTGVmdENhcmRJbWFnZVVwbG9hZCIsImltYWdlVXJsIiwiaGFuZGxlUmlnaHRDYXJkSW1hZ2VVcGxvYWQiLCJoYW5kbGVDYW1lcmFCdXR0b25DbGljayIsInN0YXJ0R2VuZXJhdGlvbiIsImhhbmRsZUdlbmVyYXRpb25TdGFydCIsImxvZyIsImhhbmRsZUdlbmVyYXRpb25Db21wbGV0ZSIsImhhbmRsZUNsb3NlUG9sYXJvaWQiLCJjbG9zZVBvbGFyb2lkIiwiaGFuZGxlUmV0cnlHZW5lcmF0aW9uIiwicmV0cnlHZW5lcmF0aW9uIiwibWlncmF0ZVRvTmV3SW50ZXJmYWNlIiwiaW1wb3J0IiwiaG9va1VzYWdlIiwic3RhdGVNYXBwaW5nIiwiYWN0aW9uTWFwcGluZyIsImVuaGFuY2VkRmVhdHVyZXMiLCJtaWdyYXRpb24iLCJpc1VzaW5nTmV3QXJjaGl0ZWN0dXJlIiwibmV3V29ya2Zsb3dTdGF0ZSIsIndvcmtmbG93U3RhdGUiLCJjb21wYXRpYmlsaXR5IiwibWlncmF0aW9uT3B0aW9ucyIsImVuaGFuY2VkIiwicHJvZ3Jlc3MiLCJXb3JrZmxvd1N0YXRlIiwiR0VORVJBVElORyIsImNhbkdlbmVyYXRlIiwiY2FuUmV0cnkiLCJ2YWxpZGF0aW9uRXJyb3JzIiwicmVzZXQiLCJyZXNldFdvcmtmbG93IiwiY2xlYXJFcnJvciIsImdl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