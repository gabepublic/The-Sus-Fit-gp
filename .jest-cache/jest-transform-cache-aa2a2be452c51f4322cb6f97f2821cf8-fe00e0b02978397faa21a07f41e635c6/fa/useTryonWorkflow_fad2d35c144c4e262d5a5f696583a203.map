{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useTryonWorkflow.ts"],"sourcesContent":["'use client';\n\n// Try-on Workflow Coordination Hook\n// Bridge layer hook that coordinates the complete try-on generation process\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  useTryonMutation,\n  useImageProcessing,\n  processImageForTryon,\n  resizeImageTo1024x1536,\n  type TryonMutationVariables,\n  type TryonMutationResponse\n} from '../business-layer';\nimport { fileToBase64, compressBase64, CompressionFailedError } from '../utils/image';\nimport { errorToMessage } from '../lib/errorToMessage';\n\n/**\n * Workflow state enum for better type safety\n */\nexport enum WorkflowState {\n  IDLE = 'idle',\n  UPLOADING = 'uploading',\n  PROCESSING = 'processing',\n  GENERATING = 'generating',\n  COMPLETE = 'complete',\n  ERROR = 'error'\n}\n\n/**\n * Error types that can occur during workflow\n */\nexport type WorkflowError = {\n  type: 'validation' | 'upload' | 'processing' | 'generation' | 'timeout' | 'compression' | 'unknown';\n  message: string;\n  originalError?: Error;\n  retryable: boolean;\n};\n\n/**\n * Workflow configuration options\n */\nexport interface WorkflowConfig {\n  /** Timeout for generation in milliseconds */\n  timeoutMs?: number;\n  /** Base64 compression limit in KB */\n  compressionLimitKB?: number;\n  /** Auto-retry failed operations */\n  autoRetry?: boolean;\n  /** Number of retry attempts */\n  maxRetries?: number;\n  /** Enable debug logging */\n  debug?: boolean;\n  /** Image processing options */\n  imageProcessing?: {\n    targetWidth?: number;\n    targetHeight?: number;\n    quality?: number;\n  };\n}\n\n/**\n * Workflow state interface (backward compatible with existing page state)\n */\nexport interface TryonWorkflowState {\n  // Core workflow state\n  workflowState: WorkflowState;\n  \n  // Backward compatible state (maintains existing page.tsx structure)\n  isCapturing: boolean;\n  showPolaroid: boolean;\n  generatedImage: string | null;\n  hasError: boolean;\n  \n  // File management\n  userImageFile: File | null;\n  apparelImageFile: File | null;\n  leftCardImage: string | null;\n  rightCardImage: string | null;\n  \n  // Progress and error tracking\n  progress: number;\n  error: WorkflowError | null;\n  \n  // Operation tracking\n  retryCount: number;\n  lastOperationTime: number | null;\n}\n\n/**\n * Workflow actions interface\n */\nexport interface TryonWorkflowActions {\n  // File upload handlers (backward compatible)\n  handleUserFileUpload: (file: File) => void;\n  handleApparelFileUpload: (file: File) => void;\n  handleLeftCardImageUpload: (imageUrl: string) => Promise<void>;\n  handleRightCardImageUpload: (imageUrl: string) => Promise<void>;\n  \n  // Main workflow actions\n  startGeneration: () => Promise<void>;\n  retryGeneration: () => Promise<void>;\n  cancelGeneration: () => void;\n  \n  // State management\n  resetWorkflow: () => void;\n  closePolaroid: () => void;\n  clearError: () => void;\n  \n  // Validation\n  validateFiles: () => { isValid: boolean; errors: string[] };\n  canGenerate: () => boolean;\n}\n\n/**\n * Toast notification function type\n */\ntype ToastFunction = (message: string, type?: 'success' | 'error' | 'warning' | 'info') => void;\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<WorkflowConfig> = {\n  timeoutMs: 60000, // 60 seconds\n  compressionLimitKB: 2048, // 2MB\n  autoRetry: false,\n  maxRetries: 3,\n  debug: process.env.NODE_ENV === 'development',\n  imageProcessing: {\n    targetWidth: 1024,\n    targetHeight: 1536,\n    quality: 0.9\n  }\n};\n\n/**\n * Main try-on workflow hook\n */\nexport function useTryonWorkflow(\n  config: WorkflowConfig = {},\n  showToast?: ToastFunction\n): TryonWorkflowState & TryonWorkflowActions {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // Business layer hooks\n  const tryonMutation = useTryonMutation();\n  const { processBasic } = useImageProcessing();\n  \n  // Abort controller for cancellation\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Core state\n  const [state, setState] = useState<TryonWorkflowState>({\n    workflowState: WorkflowState.IDLE,\n    isCapturing: false,\n    showPolaroid: false,\n    generatedImage: null,\n    hasError: false,\n    userImageFile: null,\n    apparelImageFile: null,\n    leftCardImage: null,\n    rightCardImage: null,\n    progress: 0,\n    error: null,\n    retryCount: 0,\n    lastOperationTime: null\n  });\n\n  // Debug logging\n  const log = useCallback((...args: any[]) => {\n    if (finalConfig.debug) {\n      console.log('[useTryonWorkflow]', ...args);\n    }\n  }, [finalConfig.debug]);\n\n  // Error handler\n  const handleError = useCallback((error: unknown, type: WorkflowError['type'] = 'unknown'): WorkflowError => {\n    let workflowError: WorkflowError;\n    \n    if (error instanceof CompressionFailedError) {\n      workflowError = {\n        type: 'compression',\n        message: 'Image is too large even after compression. Please upload a smaller file.',\n        originalError: error,\n        retryable: false\n      };\n    } else if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('AbortError'))) {\n      workflowError = {\n        type: 'timeout',\n        message: `Request timed out after ${finalConfig.timeoutMs}ms`,\n        originalError: error,\n        retryable: true\n      };\n    } else if (error instanceof Error && error.message.includes('API request failed:')) {\n      const statusMatch = error.message.match(/API request failed: (\\d+)/);\n      const status = statusMatch ? parseInt(statusMatch[1]) : undefined;\n      workflowError = {\n        type: 'generation',\n        message: errorToMessage(status),\n        originalError: error,\n        retryable: status ? status >= 500 : true\n      };\n    } else {\n      workflowError = {\n        type,\n        message: error instanceof Error ? error.message : String(error),\n        originalError: error instanceof Error ? error : undefined,\n        retryable: type !== 'validation'\n      };\n    }\n\n    log('Error occurred:', workflowError);\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.ERROR,\n      hasError: true,\n      isCapturing: false,\n      error: workflowError,\n      progress: 0\n    }));\n\n    // Show toast notification\n    if (showToast) {\n      showToast(workflowError.message, 'error');\n    }\n\n    return workflowError;\n  }, [finalConfig.timeoutMs, log, showToast]);\n\n  // Update progress\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n  }, []);\n\n  // Validation helper\n  const validateFiles = useCallback((): { isValid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n    \n    if (!state.userImageFile && !state.leftCardImage) {\n      errors.push('Please upload model photo');\n    }\n    \n    if (!state.apparelImageFile && !state.rightCardImage) {\n      errors.push('Please upload apparel photo');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }, [state.userImageFile, state.apparelImageFile, state.leftCardImage, state.rightCardImage]);\n\n  // Check if generation can start\n  const canGenerate = useCallback((): boolean => {\n    const { isValid } = validateFiles();\n    return isValid && state.workflowState !== WorkflowState.GENERATING;\n  }, [validateFiles, state.workflowState]);\n\n  // Utility function to resize and create file from URL\n  const createFileFromImageUrl = useCallback(async (imageUrl: string, filename: string): Promise<File> => {\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      return new File([blob], filename, { type: 'image/jpeg' });\n    } catch (error) {\n      log('Failed to create file from URL:', error);\n      throw new Error('Failed to create file from image URL');\n    }\n  }, [log]);\n\n  // Resize image utility\n  const resizeImage = useCallback(async (imageUrl: string): Promise<string> => {\n    const { targetWidth, targetHeight, quality } = finalConfig.imageProcessing;\n    \n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      \n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n        \n        const resizedImageUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(resizedImageUrl);\n      };\n      \n      img.onerror = () => reject(new Error('Failed to load image for resizing'));\n      img.src = imageUrl;\n    });\n  }, [finalConfig.imageProcessing]);\n\n  // File upload handlers\n  const handleUserFileUpload = useCallback((file: File) => {\n    log('User file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, userImageFile: file }));\n  }, [log]);\n\n  const handleApparelFileUpload = useCallback((file: File) => {\n    log('Apparel file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, apparelImageFile: file }));\n  }, [log]);\n\n  const handleLeftCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Left card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'user-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        leftCardImage: resizedImageUrl,\n        userImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Left card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        leftCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  const handleRightCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Right card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'apparel-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        rightCardImage: resizedImageUrl,\n        apparelImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Right card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        rightCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  // Main generation function\n  const startGeneration = useCallback(async () => {\n    try {\n      log('Starting generation workflow');\n      \n      // Validate files\n      const validation = validateFiles();\n      if (!validation.isValid) {\n        const message = validation.errors.length === 2 \n          ? 'Please upload model photo and apparel photo before generating your fit.'\n          : validation.errors[0];\n        \n        if (showToast) {\n          showToast(message, 'warning');\n        }\n        return;\n      }\n\n      // Set initial state\n      setState(prev => ({\n        ...prev,\n        workflowState: WorkflowState.GENERATING,\n        isCapturing: true,\n        showPolaroid: true,\n        hasError: false,\n        error: null,\n        progress: 0,\n        lastOperationTime: Date.now()\n      }));\n\n      // Create abort controller for timeout\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(\n        () => abortControllerRef.current?.abort(), \n        finalConfig.timeoutMs\n      );\n\n      try {\n        updateProgress(10);\n\n        // Convert and compress images\n        const [modelB64, apparelB64] = await Promise.all([\n          fileToBase64(state.userImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB)),\n          fileToBase64(state.apparelImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB))\n        ]);\n\n        log('Images converted to base64 successfully');\n        updateProgress(30);\n\n        // Make API request\n        const response = await fetch('/api/tryon', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            modelImage: modelB64, \n            apparelImages: [apparelB64] \n          }),\n          signal: abortControllerRef.current.signal\n        });\n\n        clearTimeout(timeoutId);\n        updateProgress(80);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API request failed: ${response.status} - ${errorText}`);\n        }\n\n        const { img_generated } = await response.json();\n        log('Generation completed successfully');\n        \n        updateProgress(100);\n\n        // Update state with success\n        setState(prev => ({\n          ...prev,\n          workflowState: WorkflowState.COMPLETE,\n          isCapturing: false,\n          generatedImage: img_generated,\n          progress: 100,\n          retryCount: 0\n        }));\n\n      } catch (error) {\n        clearTimeout(timeoutId);\n        handleError(error, 'generation');\n      }\n\n    } catch (error) {\n      handleError(error, 'unknown');\n    }\n  }, [\n    log, \n    validateFiles, \n    showToast, \n    state.userImageFile, \n    state.apparelImageFile, \n    finalConfig.timeoutMs, \n    finalConfig.compressionLimitKB, \n    updateProgress, \n    handleError\n  ]);\n\n  // Retry generation\n  const retryGeneration = useCallback(async () => {\n    log('Retrying generation');\n    setState(prev => ({ \n      ...prev, \n      retryCount: prev.retryCount + 1,\n      hasError: false,\n      error: null,\n      generatedImage: null\n    }));\n    \n    // Small delay before retry\n    setTimeout(() => {\n      setState(prev => ({ ...prev, showPolaroid: false }));\n    }, 100);\n    \n    await startGeneration();\n  }, [log, startGeneration]);\n\n  // Cancel generation\n  const cancelGeneration = useCallback(() => {\n    log('Cancelling generation');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      progress: 0\n    }));\n  }, [log]);\n\n  // Reset workflow\n  const resetWorkflow = useCallback(() => {\n    log('Resetting workflow');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState({\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      showPolaroid: false,\n      generatedImage: null,\n      hasError: false,\n      userImageFile: null,\n      apparelImageFile: null,\n      leftCardImage: null,\n      rightCardImage: null,\n      progress: 0,\n      error: null,\n      retryCount: 0,\n      lastOperationTime: null\n    });\n  }, [log]);\n\n  // Close polaroid\n  const closePolaroid = useCallback(() => {\n    log('Closing polaroid');\n    setState(prev => ({ ...prev, showPolaroid: false }));\n  }, [log]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ \n      ...prev, \n      hasError: false, \n      error: null,\n      workflowState: WorkflowState.IDLE\n    }));\n  }, []);\n\n  // Auto-retry logic\n  useEffect(() => {\n    if (\n      finalConfig.autoRetry && \n      state.error?.retryable && \n      state.retryCount < finalConfig.maxRetries\n    ) {\n      const delay = Math.min(1000 * Math.pow(2, state.retryCount), 10000); // Exponential backoff\n      log(`Auto-retrying in ${delay}ms (attempt ${state.retryCount + 1}/${finalConfig.maxRetries})`);\n      \n      const timeoutId = setTimeout(() => {\n        retryGeneration();\n      }, delay);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [state.error, state.retryCount, finalConfig.autoRetry, finalConfig.maxRetries, retryGeneration, log]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    handleUserFileUpload,\n    handleApparelFileUpload,\n    handleLeftCardImageUpload,\n    handleRightCardImageUpload,\n    startGeneration,\n    retryGeneration,\n    cancelGeneration,\n    resetWorkflow,\n    closePolaroid,\n    clearError,\n    validateFiles,\n    canGenerate\n  };\n}"],"names":["WorkflowState","useTryonWorkflow","DEFAULT_CONFIG","timeoutMs","compressionLimitKB","autoRetry","maxRetries","debug","process","env","NODE_ENV","imageProcessing","targetWidth","targetHeight","quality","config","showToast","finalConfig","tryonMutation","useTryonMutation","processBasic","useImageProcessing","abortControllerRef","useRef","state","setState","useState","workflowState","isCapturing","showPolaroid","generatedImage","hasError","userImageFile","apparelImageFile","leftCardImage","rightCardImage","progress","error","retryCount","lastOperationTime","log","useCallback","args","console","handleError","type","workflowError","CompressionFailedError","message","originalError","retryable","Error","name","includes","statusMatch","match","status","parseInt","undefined","errorToMessage","String","prev","updateProgress","validateFiles","errors","push","isValid","length","canGenerate","createFileFromImageUrl","imageUrl","filename","response","fetch","blob","File","resizeImage","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","resizedImageUrl","toDataURL","onerror","src","handleUserFileUpload","file","size","handleApparelFileUpload","handleLeftCardImageUpload","handleRightCardImageUpload","startGeneration","validation","Date","now","current","AbortController","timeoutId","setTimeout","abort","modelB64","apparelB64","all","fileToBase64","then","b64","compressBase64","method","headers","body","JSON","stringify","modelImage","apparelImages","signal","clearTimeout","ok","errorText","text","img_generated","json","retryGeneration","cancelGeneration","resetWorkflow","closePolaroid","clearError","useEffect","delay","Math","min","pow"],"mappings":"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"}