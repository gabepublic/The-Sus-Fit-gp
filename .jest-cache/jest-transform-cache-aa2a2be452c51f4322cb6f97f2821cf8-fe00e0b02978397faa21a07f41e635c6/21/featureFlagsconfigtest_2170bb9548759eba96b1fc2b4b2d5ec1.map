{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/business-layer/config/featureFlags.config.test.ts"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport {\n  loadEnvironmentFlags,\n  getCurrentEnvironment,\n  mergeConfigurations,\n  loadFeatureFlagConfig,\n  clearConfigCache,\n  validateConfigurations,\n  debugConfiguration,\n} from '../../../src/business-layer/config/featureFlags.config';\nimport type { FeatureFlagConfig, Environment } from '../../../src/business-layer/types/featureFlag.types';\n\n// Mock process.env\nconst originalEnv = process.env;\n\ndescribe('Feature Flag Configuration', () => {\n  beforeEach(() => {\n    // Reset environment and cache before each test\n    jest.resetModules();\n    clearConfigCache();\n    process.env = { ...originalEnv };\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n    clearConfigCache();\n  });\n\n  describe('loadEnvironmentFlags', () => {\n    it('should parse boolean environment variables correctly', () => {\n      process.env.FEATURE_FLAG_ENABLETRYON = 'true';\n      process.env.FEATURE_FLAG_ENABLECOMPRESSION = 'false';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.enabletryon).toBe(true);\n      expect(flags.enablecompression).toBe(false);\n    });\n\n    it('should parse number environment variables correctly', () => {\n      process.env.FEATURE_FLAG_MAXFILESIZE = '1024';\n      process.env.FEATURE_FLAG_MAXCONCURRENTREQUESTS = '5';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.maxfilesize).toBe(1024);\n      expect(flags.maxconcurrentrequests).toBe(5);\n    });\n\n    it('should parse string environment variables correctly', () => {\n      process.env.FEATURE_FLAG_SUPPORTEDFORMATS = 'jpeg,png,webp';\n      process.env.FEATURE_FLAG_CUSTOMSTRING = 'test-value';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.supportedformats).toBe('jpeg,png,webp');\n      expect(flags.customstring).toBe('test-value');\n    });\n\n    it('should ignore non-feature flag environment variables', () => {\n      process.env.NOT_A_FLAG = 'ignored';\n      process.env.FEATURE_FLAG_ENABLETRYON = 'true';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.not_a_flag).toBeUndefined();\n      expect(flags.enabletryon).toBe(true);\n    });\n\n    it('should handle invalid values gracefully', () => {\n      process.env.FEATURE_FLAG_MAXFILESIZE = 'not_a_number';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.maxfilesize).toBe(0); // Falls back to 0 for invalid numbers\n    });\n\n    it('should convert keys to lowercase', () => {\n      process.env.FEATURE_FLAG_ENABLETRYON = 'true';\n\n      const flags = loadEnvironmentFlags();\n\n      expect(flags.enabletryon).toBe(true);\n      expect(flags.ENABLETRYON).toBeUndefined();\n    });\n  });\n\n  describe('getCurrentEnvironment', () => {\n    it('should return NODE_ENV when no custom environment is set', () => {\n      process.env.NODE_ENV = 'production';\n      delete process.env.FEATURE_FLAG_ENVIRONMENT;\n\n      const env = getCurrentEnvironment();\n\n      expect(env).toBe('production');\n    });\n\n    it('should return custom environment when FEATURE_FLAG_ENVIRONMENT is set', () => {\n      process.env.NODE_ENV = 'development';\n      process.env.FEATURE_FLAG_ENVIRONMENT = 'staging';\n\n      const env = getCurrentEnvironment();\n\n      expect(env).toBe('staging');\n    });\n\n    it('should default to development for unknown environments', () => {\n      process.env.NODE_ENV = 'unknown';\n\n      const env = getCurrentEnvironment();\n\n      expect(env).toBe('development');\n    });\n\n    it('should handle valid environment values', () => {\n      const validEnvs: Environment[] = ['development', 'staging', 'production', 'test'];\n\n      validEnvs.forEach(envValue => {\n        process.env.NODE_ENV = envValue;\n        expect(getCurrentEnvironment()).toBe(envValue);\n      });\n    });\n  });\n\n  describe('mergeConfigurations', () => {\n    const mockDefaultConfigs: FeatureFlagConfig[] = [\n      {\n        key: 'enableFeature',\n        description: 'Enable the feature',\n        category: 'ui',\n        defaultValue: false,\n        type: 'boolean',\n      },\n      {\n        key: 'maxSize',\n        description: 'Maximum size',\n        category: 'performance',\n        defaultValue: 1000,\n        type: 'number',\n      },\n    ];\n\n    it('should apply environment-specific overrides', () => {\n      const merged = mergeConfigurations(mockDefaultConfigs, 'development');\n\n      const enableFeature = merged.find(c => c.key === 'enableFeature');\n      expect(enableFeature?.defaultValue).toBe(false); // No override for this in development\n    });\n\n    it('should apply environment variable overrides with highest priority', () => {\n      const envFlags = { enableFeature: true, maxSize: 2000 };\n      const merged = mergeConfigurations(mockDefaultConfigs, 'production', envFlags);\n\n      const enableFeature = merged.find(c => c.key === 'enableFeature');\n      const maxSize = merged.find(c => c.key === 'maxSize');\n\n      expect(enableFeature?.defaultValue).toBe(true);\n      expect(maxSize?.defaultValue).toBe(2000);\n    });\n\n    it('should preserve original config when no overrides exist', () => {\n      const merged = mergeConfigurations(mockDefaultConfigs, 'production');\n\n      expect(merged).toHaveLength(2);\n      expect(merged[0].key).toBe('enableFeature');\n      expect(merged[0].defaultValue).toBe(false);\n      expect(merged[1].key).toBe('maxSize');\n      expect(merged[1].defaultValue).toBe(1000);\n    });\n\n    it('should handle empty configurations', () => {\n      const merged = mergeConfigurations([], 'development');\n\n      expect(merged).toEqual([]);\n    });\n  });\n\n  describe('loadFeatureFlagConfig', () => {\n    it('should load and merge configurations correctly', () => {\n      process.env.FEATURE_FLAG_ENABLETRYON = 'false';\n      \n      const configs = loadFeatureFlagConfig();\n\n      expect(configs).toBeDefined();\n      expect(configs.length).toBeGreaterThan(0);\n      \n      const tryonFlag = configs.find(c => c.key === 'enableTryon');\n      expect(tryonFlag?.defaultValue).toBe(false); // Overridden by env var\n    });\n\n    it('should use cache on subsequent calls', () => {\n      const firstCall = loadFeatureFlagConfig();\n      const secondCall = loadFeatureFlagConfig();\n\n      expect(firstCall).toBe(secondCall); // Same reference due to caching\n    });\n\n    it('should force refresh when requested', () => {\n      const firstCall = loadFeatureFlagConfig();\n      const secondCall = loadFeatureFlagConfig(true); // Force refresh\n\n      expect(firstCall).not.toBe(secondCall); // Different references\n      expect(firstCall).toEqual(secondCall); // But same content\n    });\n\n    it('should accept custom default configurations', () => {\n      const customDefaults: FeatureFlagConfig[] = [\n        {\n          key: 'customFlag',\n          description: 'Custom flag',\n          category: 'experiment',\n          defaultValue: 'test',\n          type: 'string',\n        },\n      ];\n\n      const configs = loadFeatureFlagConfig(false, customDefaults);\n\n      expect(configs.find(c => c.key === 'customFlag')).toBeDefined();\n    });\n  });\n\n  describe('validateConfigurations', () => {\n    it('should validate correct configurations', () => {\n      const validConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'maxConcurrentRequests',\n          description: 'Max requests',\n          category: 'performance',\n          defaultValue: 5,\n          type: 'number',\n        },\n      ];\n\n      const validation = validateConfigurations(validConfigs);\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    it('should catch validation errors', () => {\n      const invalidConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'maxConcurrentRequests',\n          description: 'Max requests',\n          category: 'performance',\n          defaultValue: 15, // Exceeds max of 10\n          type: 'number',\n        },\n      ];\n\n      const validation = validateConfigurations(invalidConfigs);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors.length).toBeGreaterThan(0);\n    });\n\n    it('should validate string patterns', () => {\n      const configs: FeatureFlagConfig[] = [\n        {\n          key: 'supportedFormats',\n          description: 'Supported formats',\n          category: 'image-processing',\n          defaultValue: 'invalid@format',\n          type: 'string',\n        },\n      ];\n\n      const validation = validateConfigurations(configs);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors.some(e => e.includes('supportedFormats'))).toBe(true);\n    });\n  });\n\n  describe('debugConfiguration', () => {\n    it('should return complete debug information', () => {\n      process.env.FEATURE_FLAG_ENABLETRYON = 'true';\n      process.env.NODE_ENV = 'development';\n\n      const debug = debugConfiguration();\n\n      expect(debug.environment).toBe('development');\n      expect(debug.envFlags).toBeDefined();\n      expect(debug.finalConfigs).toBeDefined();\n      expect(debug.validation).toBeDefined();\n      expect(debug.envFlags.enabletryon).toBe(true);\n    });\n\n    it('should include validation results', () => {\n      const debug = debugConfiguration();\n\n      expect(debug.validation).toHaveProperty('isValid');\n      expect(debug.validation).toHaveProperty('errors');\n      expect(Array.isArray(debug.validation.errors)).toBe(true);\n    });\n  });\n\n  describe('clearConfigCache', () => {\n    it('should clear the configuration cache', () => {\n      // Load config to populate cache\n      const firstLoad = loadFeatureFlagConfig();\n      \n      // Clear cache\n      clearConfigCache();\n      \n      // Load again - should create new instance\n      const secondLoad = loadFeatureFlagConfig();\n\n      expect(firstLoad).not.toBe(secondLoad); // Different references after cache clear\n    });\n  });\n\n  describe('Environment-specific behavior', () => {\n    it('should apply development-specific flags', () => {\n      process.env.NODE_ENV = 'development';\n      \n      const configs = loadFeatureFlagConfig();\n      \n      // Development should have specific flags enabled\n      const devFlags = configs.filter(c => \n        c.environment && c.environment.includes('development')\n      );\n      \n      expect(devFlags.length).toBeGreaterThan(0);\n    });\n\n    it('should apply production-specific flags', () => {\n      process.env.NODE_ENV = 'production';\n      \n      const configs = loadFeatureFlagConfig();\n      \n      // Should not include development-only flags\n      const prodConfigs = configs.filter(c => \n        !c.environment || c.environment.includes('production')\n      );\n      \n      expect(prodConfigs.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle missing environment variables gracefully', () => {\n      // Clear all feature flag env vars\n      Object.keys(process.env).forEach(key => {\n        if (key.startsWith('FEATURE_FLAG_')) {\n          delete process.env[key];\n        }\n      });\n\n      expect(() => loadEnvironmentFlags()).not.toThrow();\n      expect(() => loadFeatureFlagConfig()).not.toThrow();\n    });\n\n    it('should handle malformed environment values', () => {\n      process.env.FEATURE_FLAG_MALFORMED = ''; // Empty string\n      process.env.FEATURE_FLAG_NULL = 'null';\n      process.env.FEATURE_FLAG_UNDEFINED = 'undefined';\n\n      expect(() => loadEnvironmentFlags()).not.toThrow();\n      \n      const flags = loadEnvironmentFlags();\n      expect(flags.malformed).toBe('');\n      expect(flags.null).toBe('null');\n      expect(flags.undefined).toBe('undefined');\n    });\n  });\n});"],"names":["originalEnv","process","env","describe","beforeEach","jest","resetModules","clearConfigCache","afterEach","it","FEATURE_FLAG_ENABLETRYON","FEATURE_FLAG_ENABLECOMPRESSION","flags","loadEnvironmentFlags","expect","enabletryon","toBe","enablecompression","FEATURE_FLAG_MAXFILESIZE","FEATURE_FLAG_MAXCONCURRENTREQUESTS","maxfilesize","maxconcurrentrequests","FEATURE_FLAG_SUPPORTEDFORMATS","FEATURE_FLAG_CUSTOMSTRING","supportedformats","customstring","NOT_A_FLAG","not_a_flag","toBeUndefined","ENABLETRYON","NODE_ENV","FEATURE_FLAG_ENVIRONMENT","getCurrentEnvironment","validEnvs","forEach","envValue","mockDefaultConfigs","key","description","category","defaultValue","type","merged","mergeConfigurations","enableFeature","find","c","envFlags","maxSize","toHaveLength","toEqual","configs","loadFeatureFlagConfig","toBeDefined","length","toBeGreaterThan","tryonFlag","firstCall","secondCall","not","customDefaults","validConfigs","validation","validateConfigurations","isValid","errors","invalidConfigs","some","e","includes","debug","debugConfiguration","environment","finalConfigs","toHaveProperty","Array","isArray","firstLoad","secondLoad","devFlags","filter","prodConfigs","Object","keys","startsWith","toThrow","FEATURE_FLAG_MALFORMED","FEATURE_FLAG_NULL","FEATURE_FLAG_UNDEFINED","malformed","null","undefined"],"mappings":"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"}