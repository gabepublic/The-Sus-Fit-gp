ddc5f929fb7d380983a07c8afc004046
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useEnhancedPageState: function() {
        return useEnhancedPageState;
    },
    useLegacyPageInterface: function() {
        return useLegacyPageInterface;
    },
    usePageComponentState: function() {
        return usePageComponentState;
    }
});
const _react = require("react");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _index = require("./index");
/**
 * Default migration options
 */ const DEFAULT_MIGRATION_OPTIONS = {
    enableNewFeatures: true,
    showDeprecationWarnings: process.env.NODE_ENV === 'development',
    onStateChange: ()=>{},
    enhancedErrorHandling: true,
    enableProgressTracking: true
};
function useLegacyPageInterface(options = {}) {
    const finalOptions = {
        ...DEFAULT_MIGRATION_OPTIONS,
        ...options
    };
    const { showToast } = (0, _index.useToast)();
    const deprecationWarnings = (0, _react.useRef)([]);
    // Use the new workflow internally
    const workflow = (0, _useTryonWorkflow.useTryonWorkflow)({
        timeoutMs: 60000,
        compressionLimitKB: 2048,
        debug: process.env.NODE_ENV === 'development'
    }, showToast);
    // Track deprecation warnings
    const addDeprecationWarning = (0, _react.useCallback)((method, suggestion)=>{
        if (finalOptions.showDeprecationWarnings) {
            const warning = `DEPRECATED: ${method} - ${suggestion}`;
            if (!deprecationWarnings.current.includes(warning)) {
                deprecationWarnings.current.push(warning);
                console.warn(warning);
            }
        }
    }, [
        finalOptions.showDeprecationWarnings
    ]);
    // Map new state to legacy state format (exact field mapping)
    const legacyState = {
        isCapturing: workflow.isCapturing,
        leftCardImage: workflow.leftCardImage,
        rightCardImage: workflow.rightCardImage,
        showPolaroid: workflow.showPolaroid,
        userImageFile: workflow.userImageFile,
        apparelImageFile: workflow.apparelImageFile,
        generatedImage: workflow.generatedImage,
        hasError: workflow.hasError
    };
    // Notify about state changes for migration assistance
    (0, _react.useEffect)(()=>{
        if (finalOptions.onStateChange) {
            finalOptions.onStateChange(workflow, legacyState);
        }
    }, [
        workflow,
        legacyState,
        finalOptions
    ]);
    // Legacy handlers that map to new workflow methods
    const legacyHandlers = {
        handleUserFileUpload: (0, _react.useCallback)((file)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleUserFileUpload', 'Consider using useBridgeLayer().actions.uploadUserImage for enhanced validation and progress tracking');
            }
            workflow.handleUserFileUpload(file);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleApparelFileUpload: (0, _react.useCallback)((file)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleApparelFileUpload', 'Consider using useBridgeLayer().actions.uploadApparelImage for enhanced validation and progress tracking');
            }
            workflow.handleApparelFileUpload(file);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleLeftCardImageUpload: (0, _react.useCallback)(async (imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleLeftCardImageUpload', 'Consider using useBridgeLayer().actions.uploadUserImage with File objects for better type safety');
            }
            await workflow.handleLeftCardImageUpload(imageUrl);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleRightCardImageUpload: (0, _react.useCallback)(async (imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleRightCardImageUpload', 'Consider using useBridgeLayer().actions.uploadApparelImage with File objects for better type safety');
            }
            await workflow.handleRightCardImageUpload(imageUrl);
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleCameraButtonClick: (0, _react.useCallback)(async ()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleCameraButtonClick', 'Consider using useBridgeLayer().actions.generate for enhanced error handling and progress tracking');
            }
            await workflow.startGeneration();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleGenerationStart: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleGenerationStart', 'This callback is now handled automatically by the workflow. Consider using onGenerationStart in BridgeLayerConfig');
            }
            console.log('Generation started (legacy handler)');
        }, [
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleGenerationComplete: (0, _react.useCallback)((imageUrl)=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleGenerationComplete', 'This callback is now handled automatically by the workflow. Consider using onGenerationComplete in BridgeLayerConfig');
            }
            console.log('Generation complete (legacy handler):', imageUrl);
        }, [
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleClosePolaroid: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleClosePolaroid', 'Consider using useBridgeLayer().actions.hideResult for consistent naming');
            }
            workflow.closePolaroid();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ]),
        handleRetryGeneration: (0, _react.useCallback)(()=>{
            if (finalOptions.showDeprecationWarnings) {
                addDeprecationWarning('handleRetryGeneration', 'Consider using useBridgeLayer().actions.retry for enhanced retry logic');
            }
            workflow.retryGeneration();
        }, [
            workflow,
            addDeprecationWarning,
            finalOptions.showDeprecationWarnings
        ])
    };
    // Migration helper
    const migrateToNewInterface = (0, _react.useCallback)(()=>{
        return {
            // Import suggestion
            import: 'import { useBridgeLayer } from "@/hooks/useBridgeLayer"',
            // New hook usage
            hookUsage: `
const { state, actions } = useBridgeLayer({
  workflow: { timeoutMs: 60000, compressionLimitKB: 2048 },
  ui: { showDetailedProgress: true },
  callbacks: {
    onGenerationStart: () => console.log('Generation started'),
    onGenerationComplete: (imageUrl) => console.log('Generation complete:', imageUrl)
  }
});`,
            // State mapping
            stateMapping: {
                'isCapturing': 'state.isLoading',
                'leftCardImage': 'state.userImagePreview',
                'rightCardImage': 'state.apparelImagePreview',
                'showPolaroid': 'state.showResult',
                'userImageFile': 'advanced.workflow.userImageFile',
                'apparelImageFile': 'advanced.workflow.apparelImageFile',
                'generatedImage': 'state.resultImage',
                'hasError': '!!state.errorMessage'
            },
            // Action mapping
            actionMapping: {
                'handleUserFileUpload': 'actions.uploadUserImage',
                'handleApparelFileUpload': 'actions.uploadApparelImage',
                'handleCameraButtonClick': 'actions.generate',
                'handleClosePolaroid': 'actions.hideResult',
                'handleRetryGeneration': 'actions.retry'
            },
            // Enhanced features available
            enhancedFeatures: [
                'Built-in validation with user-friendly error messages',
                'Progress tracking with detailed status updates',
                'Automatic retry logic with exponential backoff',
                'Thumbnail generation and preview management',
                'Drag and drop support',
                'Image processing and optimization',
                'Download and share functionality',
                'Type-safe interfaces throughout'
            ]
        };
    }, []);
    return {
        // Legacy state (exact match)
        ...legacyState,
        // Legacy handlers (exact match)
        ...legacyHandlers,
        // Migration assistance
        migration: {
            isUsingNewArchitecture: true,
            newWorkflowState: workflow.workflowState,
            deprecationWarnings: deprecationWarnings.current,
            migrateToNewInterface
        }
    };
}
function usePageComponentState() {
    const compatibility = useLegacyPageInterface();
    // Return only the exact state and handlers that page.tsx expects
    return {
        isCapturing: compatibility.isCapturing,
        leftCardImage: compatibility.leftCardImage,
        rightCardImage: compatibility.rightCardImage,
        showPolaroid: compatibility.showPolaroid,
        userImageFile: compatibility.userImageFile,
        apparelImageFile: compatibility.apparelImageFile,
        generatedImage: compatibility.generatedImage,
        hasError: compatibility.hasError,
        handleUserFileUpload: compatibility.handleUserFileUpload,
        handleApparelFileUpload: compatibility.handleApparelFileUpload,
        handleLeftCardImageUpload: compatibility.handleLeftCardImageUpload,
        handleRightCardImageUpload: compatibility.handleRightCardImageUpload,
        handleCameraButtonClick: compatibility.handleCameraButtonClick,
        handleGenerationStart: compatibility.handleGenerationStart,
        handleGenerationComplete: compatibility.handleGenerationComplete,
        handleClosePolaroid: compatibility.handleClosePolaroid,
        handleRetryGeneration: compatibility.handleRetryGeneration
    };
}
function useEnhancedPageState(migrationOptions = {}) {
    const compatibility = useLegacyPageInterface(migrationOptions);
    return {
        // All legacy functionality
        ...compatibility,
        // Additional enhanced features
        enhanced: {
            progress: compatibility.migration.newWorkflowState === WorkflowState.GENERATING ? compatibility.progress || 0 : 0,
            canGenerate: !compatibility.isCapturing && !!compatibility.userImageFile && !!compatibility.apparelImageFile,
            canRetry: compatibility.hasError,
            validationErrors: [],
            // New enhanced actions
            reset: ()=>compatibility.resetWorkflow?.(),
            clearError: ()=>compatibility.clearError?.(),
            // Migration helper
            getMigrationGuide: compatibility.migration.migrateToNewInterface
        }
    };
}

//# sourceMappingURL=data:application/json;base64,