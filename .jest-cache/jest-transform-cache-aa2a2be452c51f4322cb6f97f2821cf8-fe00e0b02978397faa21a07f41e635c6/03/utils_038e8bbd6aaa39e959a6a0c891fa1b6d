5218738f4554b6749d60b521bbc98395
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    render: function() {
        return customRender;
    },
    screen: function() {
        return _react1.screen;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("@tanstack/react-query");
const _ToastProvider = require("../components/ToastProvider");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Create a custom render function that includes providers if needed
const customRender = (ui, options)=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                gcTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
    const AllTheProviders = ({ children })=>{
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ToastProvider.ToastProvider, {
                children: children
            })
        });
    };
    return (0, _react1.render)(ui, {
        wrapper: AllTheProviders,
        ...options
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL3Rlc3QvdXRpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciwgUmVuZGVyT3B0aW9ucywgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5J1xuaW1wb3J0IHsgVG9hc3RQcm92aWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Ub2FzdFByb3ZpZGVyJ1xuXG4vLyBDcmVhdGUgYSBjdXN0b20gcmVuZGVyIGZ1bmN0aW9uIHRoYXQgaW5jbHVkZXMgcHJvdmlkZXJzIGlmIG5lZWRlZFxuY29uc3QgY3VzdG9tUmVuZGVyID0gKFxuICB1aTogUmVhY3QuUmVhY3RFbGVtZW50LFxuICBvcHRpb25zPzogT21pdDxSZW5kZXJPcHRpb25zLCAnd3JhcHBlcic+XG4pID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICBxdWVyaWVzOiB7XG4gICAgICAgIHJldHJ5OiBmYWxzZSxcbiAgICAgICAgZ2NUaW1lOiAwLFxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uczoge1xuICAgICAgICByZXRyeTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgQWxsVGhlUHJvdmlkZXJzID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICAgIDxUb2FzdFByb3ZpZGVyPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9Ub2FzdFByb3ZpZGVyPlxuICAgICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiByZW5kZXIodWksIHsgd3JhcHBlcjogQWxsVGhlUHJvdmlkZXJzLCAuLi5vcHRpb25zIH0pXG59XG5cbi8vIFJlLWV4cG9ydCBldmVyeXRoaW5nIGZyb20gUmVhY3QgVGVzdGluZyBMaWJyYXJ5XG5leHBvcnQgKiBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuXG4vLyBPdmVycmlkZSByZW5kZXIgbWV0aG9kXG5leHBvcnQgeyBjdXN0b21SZW5kZXIgYXMgcmVuZGVyIH07XG5leHBvcnQgeyBzY3JlZW4gfTtcblxuXG4iXSwibmFtZXMiOlsicmVuZGVyIiwiY3VzdG9tUmVuZGVyIiwic2NyZWVuIiwidWkiLCJvcHRpb25zIiwicXVlcnlDbGllbnQiLCJRdWVyeUNsaWVudCIsImRlZmF1bHRPcHRpb25zIiwicXVlcmllcyIsInJldHJ5IiwiZ2NUaW1lIiwibXV0YXRpb25zIiwiQWxsVGhlUHJvdmlkZXJzIiwiY2hpbGRyZW4iLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2xpZW50IiwiVG9hc3RQcm92aWRlciIsIndyYXBwZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBdUN5QkEsTUFBTTtlQUF0QkM7O0lBQ0FDLE1BQU07ZUFBTkEsY0FBTTs7Ozs4REF4Q0c7cUNBQzRCOzRCQUNHOytCQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU5QixvRUFBb0U7QUFDcEUsTUFBTUQsZUFBZSxDQUNuQkUsSUFDQUM7SUFFQSxNQUFNQyxjQUFjLElBQUlDLHVCQUFXLENBQUM7UUFDbENDLGdCQUFnQjtZQUNkQyxTQUFTO2dCQUNQQyxPQUFPO2dCQUNQQyxRQUFRO1lBQ1Y7WUFDQUMsV0FBVztnQkFDVEYsT0FBTztZQUNUO1FBQ0Y7SUFDRjtJQUVBLE1BQU1HLGtCQUFrQixDQUFDLEVBQUVDLFFBQVEsRUFBaUM7UUFDbEUscUJBQ0UscUJBQUNDLCtCQUFtQjtZQUFDQyxRQUFRVjtzQkFDM0IsY0FBQSxxQkFBQ1csNEJBQWE7MEJBQ1hIOzs7SUFJVDtJQUVBLE9BQU9iLElBQUFBLGNBQU0sRUFBQ0csSUFBSTtRQUFFYyxTQUFTTDtRQUFpQixHQUFHUixPQUFPO0lBQUM7QUFDM0QifQ==