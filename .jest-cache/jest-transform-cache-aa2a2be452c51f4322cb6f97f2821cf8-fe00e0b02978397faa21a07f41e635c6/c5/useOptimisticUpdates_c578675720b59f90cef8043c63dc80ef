78618b5f21da407dee32e80eb973db4e
// Optimistic Updates Hooks
// React hooks for managing optimistic UI updates and progress indicators
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useMultipleTryonProgress: function() {
        return useMultipleTryonProgress;
    },
    useOptimisticCacheInvalidation: function() {
        return useOptimisticCacheInvalidation;
    },
    useOptimisticUpdates: function() {
        return useOptimisticUpdates;
    },
    useProgressVisualization: function() {
        return useProgressVisualization;
    },
    useTryonProgress: function() {
        return useTryonProgress;
    },
    useTryonResult: function() {
        return useTryonResult;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _optimisticUpdates = require("../utils/optimisticUpdates");
function useOptimisticUpdates(config = {}) {
    const queryClient = (0, _reactquery.useQueryClient)();
    const optimisticManager = config.optimisticManager || (0, _optimisticUpdates.getOptimisticUpdatesManager)();
    const activeUpdatesRef = (0, _react.useRef)(new Set());
    const isOptimisticEnabled = config.enabled !== false;
    // Get active optimistic updates
    const activeUpdates = (0, _react.useMemo)(()=>{
        return optimisticManager.getActiveOptimisticUpdates();
    }, [
        optimisticManager
    ]);
    const startOptimistic = (0, _react.useCallback)((optimisticConfig)=>{
        if (!isOptimisticEnabled || !config.mutationVariables) {
            return '';
        }
        const context = optimisticManager.startOptimisticUpdate(config.mutationVariables, optimisticConfig);
        activeUpdatesRef.current.add(context.optimisticId);
        return context.optimisticId;
    }, [
        isOptimisticEnabled,
        config.mutationVariables,
        optimisticManager
    ]);
    const completeOptimistic = (0, _react.useCallback)((optimisticId, result, mutationContext)=>{
        if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {
            return;
        }
        optimisticManager.completeOptimisticUpdate(optimisticId, result, mutationContext);
        activeUpdatesRef.current.delete(optimisticId);
    }, [
        optimisticManager
    ]);
    const rollbackOptimistic = (0, _react.useCallback)((optimisticId, error)=>{
        if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {
            return;
        }
        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
        activeUpdatesRef.current.delete(optimisticId);
    }, [
        optimisticManager
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            // Rollback any remaining optimistic updates
            activeUpdatesRef.current.forEach((optimisticId)=>{
                optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
            });
            activeUpdatesRef.current.clear();
        };
    }, [
        optimisticManager
    ]);
    return {
        startOptimistic,
        completeOptimistic,
        rollbackOptimistic,
        isOptimisticEnabled,
        activeUpdates
    };
}
function useTryonProgress(optimisticId) {
    const progressQuery = (0, _reactquery.useQuery)({
        queryKey: [
            'tryon-progress',
            optimisticId
        ],
        enabled: Boolean(optimisticId),
        refetchInterval: (data)=>{
            // Stop refetching once completed or errored
            const progressData = data;
            return progressData?.status === 'processing' ? 500 : false;
        },
        staleTime: 0,
        gcTime: 5000 // Keep in cache briefly after completion
    });
    return {
        progress: progressQuery.data,
        isLoading: progressQuery.isLoading,
        error: progressQuery.error
    };
}
function useMultipleTryonProgress(optimisticIds) {
    const queries = optimisticIds.map((id)=>(0, _reactquery.useQuery)({
            queryKey: [
                'tryon-progress',
                id
            ],
            enabled: Boolean(id),
            refetchInterval: 500,
            staleTime: 0
        }));
    const progressMap = (0, _react.useMemo)(()=>{
        const map = {};
        optimisticIds.forEach((id, index)=>{
            const data = queries[index]?.data;
            if (data) {
                map[id] = data;
            }
        });
        return map;
    }, [
        optimisticIds,
        queries
    ]);
    const anyInProgress = (0, _react.useMemo)(()=>{
        return Object.values(progressMap).some((progress)=>progress.status === 'processing');
    }, [
        progressMap
    ]);
    const allCompleted = (0, _react.useMemo)(()=>{
        return optimisticIds.length > 0 && Object.keys(progressMap).length === optimisticIds.length && Object.values(progressMap).every((progress)=>progress.status !== 'processing');
    }, [
        optimisticIds,
        progressMap
    ]);
    return {
        progressMap,
        anyInProgress,
        allCompleted
    };
}
function useTryonResult(optimisticId) {
    const resultQuery = (0, _reactquery.useQuery)({
        queryKey: [
            'tryon-result',
            optimisticId
        ],
        enabled: Boolean(optimisticId),
        staleTime: Infinity,
        gcTime: 60000 // Keep results for 1 minute
    });
    const data = resultQuery.data;
    return {
        result: data?.result,
        isLoading: resultQuery.isLoading,
        isCompleted: data?.status === 'completed',
        error: resultQuery.error,
        processingTime: data?.processingTime
    };
}
function useProgressVisualization(optimisticId, config = {}) {
    const { progress } = useTryonProgress(optimisticId);
    const progressPercentage = progress?.progress || 0;
    const stageMessage = (0, _react.useMemo)(()=>{
        if (!config.enableStageMessages || !progress) return '';
        switch(progress.stage){
            case 'image-processing':
                return 'Processing images...';
            case 'ai-generation':
                return 'Generating your try-on...';
            case 'post-processing':
                return 'Adding final touches...';
            case 'finalizing':
                return 'Almost done...';
            case 'completed':
                return 'Complete!';
            case 'error':
                return 'Something went wrong';
            default:
                return 'Processing...';
        }
    }, [
        config.enableStageMessages,
        progress
    ]);
    const timeRemaining = (0, _react.useMemo)(()=>{
        if (!config.enableTimeEstimates || !progress?.estimatedTimeRemaining) return '';
        const seconds = Math.ceil(progress.estimatedTimeRemaining / 1000);
        if (seconds <= 0) return '';
        if (seconds < 60) return `${seconds}s remaining`;
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}m ${remainingSeconds}s remaining`;
    }, [
        config.enableTimeEstimates,
        progress
    ]);
    const progressColor = (0, _react.useMemo)(()=>{
        if (!progress) return '#e5e7eb';
        switch(progress.status){
            case 'processing':
                return '#3b82f6'; // Blue for processing
            case 'completed':
                return '#10b981'; // Green for completed
            case 'error':
                return '#ef4444'; // Red for error
            default:
                return '#e5e7eb'; // Gray for idle
        }
    }, [
        progress
    ]);
    const isAnimating = (0, _react.useMemo)(()=>{
        return config.enableAnimation !== false && progress?.status === 'processing';
    }, [
        config.enableAnimation,
        progress
    ]);
    return {
        progress,
        progressPercentage,
        stageMessage,
        timeRemaining,
        progressColor,
        isAnimating
    };
}
function useOptimisticCacheInvalidation() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const invalidateRelatedQueries = (0, _react.useCallback)(async (context)=>{
        // Invalidate history queries
        await queryClient.invalidateQueries({
            queryKey: [
                'tryon-history'
            ],
            exact: false
        });
        // Invalidate user-specific queries if userId provided
        if (context?.userId) {
            await queryClient.invalidateQueries({
                queryKey: [
                    'user-data',
                    context.userId
                ],
                exact: false
            });
        }
        // Invalidate tag-specific queries if tags provided
        if (context?.tags?.length) {
            for (const tag of context.tags){
                await queryClient.invalidateQueries({
                    queryKey: [
                        'tryon-by-tag',
                        tag
                    ],
                    exact: false
                });
            }
        }
        // Invalidate stats and aggregations
        await queryClient.invalidateQueries({
            queryKey: [
                'tryon-stats'
            ],
            exact: false
        });
    }, [
        queryClient
    ]);
    const preloadRelatedQueries = (0, _react.useCallback)(async (context)=>{
        // Preload frequently accessed queries
        const preloadPromises = [];
        // Preload history
        preloadPromises.push(queryClient.prefetchQuery({
            queryKey: [
                'tryon-history',
                'entries'
            ],
            staleTime: 30000
        }));
        // Preload stats
        preloadPromises.push(queryClient.prefetchQuery({
            queryKey: [
                'tryon-history',
                'stats'
            ],
            staleTime: 60000
        }));
        if (context?.userId) {
            preloadPromises.push(queryClient.prefetchQuery({
                queryKey: [
                    'user-data',
                    context.userId
                ],
                staleTime: 60000
            }));
        }
        await Promise.all(preloadPromises);
    }, [
        queryClient
    ]);
    const warmupCache = (0, _react.useCallback)(async (prefetchData)=>{
        // Warm up the cache with commonly used data
        if (prefetchData?.length) {
            prefetchData.forEach((data, index)=>{
                queryClient.setQueryData([
                    'warmup-cache',
                    index
                ], data);
            });
        }
        // Prefetch critical queries that are likely to be needed
        await preloadRelatedQueries();
    }, [
        queryClient,
        preloadRelatedQueries
    ]);
    return {
        invalidateRelatedQueries,
        preloadRelatedQueries,
        warmupCache
    };
}

//# sourceMappingURL=data:application/json;base64,