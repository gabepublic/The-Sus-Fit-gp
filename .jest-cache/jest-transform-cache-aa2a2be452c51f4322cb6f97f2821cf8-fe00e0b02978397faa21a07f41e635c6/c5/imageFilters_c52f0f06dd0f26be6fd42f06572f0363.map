{"version":3,"names":["DEFAULT_FILTER_PARAMETERS","cov_1q1qip72zw","f","s","FilterPresetLibrary","FilterType","ImageFilterEngine","createFilterPresetLibrary","createImageFilterEngine","amount","name","type","value","min","max","step","description","angle","gamma","stops","radius","distance","threshold","options","size","method","levels","strength","warmth","vignette","temperature","tint","shadows","midtones","highlights","inputBlack","inputWhite","points","intensity","constructor","managedCanvas","originalImageData","currentImageData","canvas","ctx","context","setOriginalImage","imageData","ImageData","Uint8ClampedArray","data","width","height","applyBrightness","brightnessFactor","i","length","Math","applyContrast","contrastFactor","applySaturation","saturationFactor","r","g","b","gray","applyHueShift","hueShift","PI","delta","h","v","c","x","abs","m","rNew","gNew","bNew","round","applyBlur","newData","kernelSize","floor","half","y","a","count","ky","kx","nx","ny","idx","applySharpen","kernel","sum","kernelIdx","applySepia","sepiaR","sepiaG","sepiaB","applyGrayscale","applyInvert","applyVignette","centerX","centerY","maxRadius","sqrt","vignetteRadius","vignetteStrength","vignetteFactor","applyFilter","filterConfig","sourceImageData","startTime","performance","now","success","error","processingTime","processedData","enabled","processedImageData","result","params","parameters","console","warn","opacity","originalData","filteredData","Error","message","applyFilterChain","filters","currentData","enabledFilters","filter","resetToOriginal","getCurrentImageData","renderToCanvas","putImageData","presets","Map","initializeDefaultPresets","addPreset","id","category","tags","createFilterConfig","Date","charAt","toUpperCase","slice","blendMode","_canvasUtils","BlendMode","Normal","preset","set","getPreset","get","getAllPresets","Array","from","values","getPresetsByCategory","searchPresets","query","lowerQuery","toLowerCase","includes","some","tag","removePreset","delete"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageFilters.ts"],"sourcesContent":["// Image Filter System for Canvas\n// Comprehensive image filtering with real-time preview and filter composition\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\nimport { BlendMode } from './canvasUtils';\n\n/**\n * Filter types available in the system\n */\nexport enum FilterType {\n  // Basic filters\n  Brightness = 'brightness',\n  Contrast = 'contrast',\n  Saturation = 'saturation',\n  Hue = 'hue',\n  Gamma = 'gamma',\n  Exposure = 'exposure',\n  \n  // Blur and sharpening\n  Blur = 'blur',\n  GaussianBlur = 'gaussianBlur',\n  MotionBlur = 'motionBlur',\n  Sharpen = 'sharpen',\n  UnsharpMask = 'unsharpMask',\n  \n  // Noise and texture\n  Noise = 'noise',\n  Grain = 'grain',\n  \n  // Color effects\n  Sepia = 'sepia',\n  Grayscale = 'grayscale',\n  Invert = 'invert',\n  Posterize = 'posterize',\n  Solarize = 'solarize',\n  \n  // Artistic filters\n  Emboss = 'emboss',\n  EdgeDetection = 'edgeDetection',\n  Vintage = 'vintage',\n  Vignette = 'vignette',\n  \n  // Color correction\n  WhiteBalance = 'whiteBalance',\n  ColorBalance = 'colorBalance',\n  Levels = 'levels',\n  Curves = 'curves',\n  \n  // Special effects\n  Pixelate = 'pixelate',\n  Halftone = 'halftone',\n  CrossHatch = 'crossHatch',\n  OilPainting = 'oilPainting'\n}\n\n/**\n * Filter parameter configuration\n */\nexport interface FilterParameter {\n  name: string;\n  type: 'number' | 'range' | 'boolean' | 'color' | 'select';\n  value: any;\n  min?: number;\n  max?: number;\n  step?: number;\n  options?: string[];\n  description?: string;\n}\n\n/**\n * Filter configuration\n */\nexport interface FilterConfig {\n  id: string;\n  type: FilterType;\n  name: string;\n  description: string;\n  parameters: Record<string, FilterParameter>;\n  enabled: boolean;\n  opacity: number;\n  blendMode: BlendMode;\n}\n\n/**\n * Filter preset configuration\n */\nexport interface FilterPreset {\n  id: string;\n  name: string;\n  description: string;\n  thumbnail?: string;\n  filters: FilterConfig[];\n  category: string;\n  tags: string[];\n}\n\n/**\n * Filter application result\n */\nexport interface FilterResult {\n  success: boolean;\n  processedImageData?: ImageData;\n  error?: string;\n  processingTime: number;\n}\n\n/**\n * Filter preview configuration\n */\nexport interface FilterPreviewConfig {\n  enabled: boolean;\n  updateInterval: number;\n  maxPreviewSize: { width: number; height: number };\n  quality: number;\n}\n\n/**\n * Default filter parameters for each filter type\n */\nexport const DEFAULT_FILTER_PARAMETERS: Record<FilterType, Record<string, FilterParameter>> = {\n  [FilterType.Brightness]: {\n    amount: { name: 'Brightness', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust image brightness' }\n  },\n  [FilterType.Contrast]: {\n    amount: { name: 'Contrast', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust image contrast' }\n  },\n  [FilterType.Saturation]: {\n    amount: { name: 'Saturation', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust color saturation' }\n  },\n  [FilterType.Hue]: {\n    angle: { name: 'Hue Shift', type: 'range', value: 0, min: -180, max: 180, step: 1, description: 'Shift hue in degrees' }\n  },\n  [FilterType.Gamma]: {\n    gamma: { name: 'Gamma', type: 'range', value: 1, min: 0.1, max: 3, step: 0.1, description: 'Gamma correction' }\n  },\n  [FilterType.Exposure]: {\n    stops: { name: 'Exposure', type: 'range', value: 0, min: -3, max: 3, step: 0.1, description: 'Exposure in stops' }\n  },\n  [FilterType.Blur]: {\n    radius: { name: 'Radius', type: 'range', value: 5, min: 0, max: 50, step: 1, description: 'Blur radius in pixels' }\n  },\n  [FilterType.GaussianBlur]: {\n    radius: { name: 'Radius', type: 'range', value: 5, min: 0, max: 50, step: 1, description: 'Gaussian blur radius' }\n  },\n  [FilterType.MotionBlur]: {\n    distance: { name: 'Distance', type: 'range', value: 10, min: 0, max: 100, step: 1, description: 'Motion blur distance' },\n    angle: { name: 'Angle', type: 'range', value: 0, min: 0, max: 360, step: 1, description: 'Motion blur angle' }\n  },\n  [FilterType.Sharpen]: {\n    amount: { name: 'Amount', type: 'range', value: 50, min: 0, max: 200, step: 1, description: 'Sharpening amount' }\n  },\n  [FilterType.UnsharpMask]: {\n    amount: { name: 'Amount', type: 'range', value: 100, min: 0, max: 500, step: 1, description: 'Unsharp mask amount' },\n    radius: { name: 'Radius', type: 'range', value: 1, min: 0.1, max: 10, step: 0.1, description: 'Unsharp mask radius' },\n    threshold: { name: 'Threshold', type: 'range', value: 3, min: 0, max: 255, step: 1, description: 'Unsharp mask threshold' }\n  },\n  [FilterType.Noise]: {\n    amount: { name: 'Amount', type: 'range', value: 25, min: 0, max: 100, step: 1, description: 'Noise amount' },\n    type: { name: 'Type', type: 'select', value: 'uniform', options: ['uniform', 'gaussian'], description: 'Noise type' }\n  },\n  [FilterType.Grain]: {\n    amount: { name: 'Amount', type: 'range', value: 25, min: 0, max: 100, step: 1, description: 'Grain amount' },\n    size: { name: 'Size', type: 'range', value: 1, min: 0.5, max: 5, step: 0.1, description: 'Grain size' }\n  },\n  [FilterType.Sepia]: {\n    amount: { name: 'Amount', type: 'range', value: 100, min: 0, max: 100, step: 1, description: 'Sepia effect amount' }\n  },\n  [FilterType.Grayscale]: {\n    method: { name: 'Method', type: 'select', value: 'luminance', options: ['average', 'luminance', 'desaturation'], description: 'Grayscale conversion method' }\n  },\n  [FilterType.Invert]: {},\n  [FilterType.Posterize]: {\n    levels: { name: 'Levels', type: 'range', value: 8, min: 2, max: 64, step: 1, description: 'Number of color levels' }\n  },\n  [FilterType.Solarize]: {\n    threshold: { name: 'Threshold', type: 'range', value: 128, min: 0, max: 255, step: 1, description: 'Solarization threshold' }\n  },\n  [FilterType.Emboss]: {\n    strength: { name: 'Strength', type: 'range', value: 1, min: 0.1, max: 5, step: 0.1, description: 'Emboss strength' }\n  },\n  [FilterType.EdgeDetection]: {\n    threshold: { name: 'Threshold', type: 'range', value: 50, min: 0, max: 255, step: 1, description: 'Edge detection threshold' }\n  },\n  [FilterType.Vintage]: {\n    warmth: { name: 'Warmth', type: 'range', value: 20, min: 0, max: 100, step: 1, description: 'Vintage warmth' },\n    vignette: { name: 'Vignette', type: 'range', value: 30, min: 0, max: 100, step: 1, description: 'Vignette strength' }\n  },\n  [FilterType.Vignette]: {\n    strength: { name: 'Strength', type: 'range', value: 50, min: 0, max: 100, step: 1, description: 'Vignette strength' },\n    size: { name: 'Size', type: 'range', value: 50, min: 10, max: 90, step: 1, description: 'Vignette size' }\n  },\n  [FilterType.WhiteBalance]: {\n    temperature: { name: 'Temperature', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Color temperature' },\n    tint: { name: 'Tint', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Green/Magenta tint' }\n  },\n  [FilterType.ColorBalance]: {\n    shadows: { name: 'Shadows', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Shadow color balance' },\n    midtones: { name: 'Midtones', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Midtone color balance' },\n    highlights: { name: 'Highlights', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Highlight color balance' }\n  },\n  [FilterType.Levels]: {\n    inputBlack: { name: 'Input Black', type: 'range', value: 0, min: 0, max: 255, step: 1, description: 'Input black point' },\n    inputWhite: { name: 'Input White', type: 'range', value: 255, min: 0, max: 255, step: 1, description: 'Input white point' },\n    gamma: { name: 'Gamma', type: 'range', value: 1, min: 0.1, max: 3, step: 0.1, description: 'Gamma correction' }\n  },\n  [FilterType.Curves]: {\n    points: { name: 'Curve Points', type: 'number', value: '0,0;255,255', description: 'Curve control points' }\n  },\n  [FilterType.Pixelate]: {\n    size: { name: 'Pixel Size', type: 'range', value: 8, min: 2, max: 32, step: 1, description: 'Pixel block size' }\n  },\n  [FilterType.Halftone]: {\n    size: { name: 'Dot Size', type: 'range', value: 4, min: 1, max: 20, step: 1, description: 'Halftone dot size' },\n    angle: { name: 'Angle', type: 'range', value: 45, min: 0, max: 90, step: 1, description: 'Halftone angle' }\n  },\n  [FilterType.CrossHatch]: {\n    strength: { name: 'Strength', type: 'range', value: 50, min: 0, max: 100, step: 1, description: 'Cross-hatch strength' }\n  },\n  [FilterType.OilPainting]: {\n    radius: { name: 'Radius', type: 'range', value: 4, min: 1, max: 20, step: 1, description: 'Oil painting radius' },\n    intensity: { name: 'Intensity', type: 'range', value: 55, min: 1, max: 255, step: 1, description: 'Oil painting intensity' }\n  }\n};\n\n/**\n * Image filter engine class\n */\nexport class ImageFilterEngine {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private originalImageData: ImageData | null = null;\n  private currentImageData: ImageData | null = null;\n\n  constructor(managedCanvas: ManagedCanvas) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n  }\n\n  /**\n   * Set original image data for filtering\n   */\n  setOriginalImage(imageData: ImageData): void {\n    this.originalImageData = new ImageData(\n      new Uint8ClampedArray(imageData.data),\n      imageData.width,\n      imageData.height\n    );\n    this.currentImageData = new ImageData(\n      new Uint8ClampedArray(imageData.data),\n      imageData.width,\n      imageData.height\n    );\n  }\n\n  /**\n   * Apply brightness filter\n   */\n  private applyBrightness(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const brightnessFactor = amount / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, data[i] + brightnessFactor * 255));     // R\n      data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + brightnessFactor * 255)); // G\n      data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + brightnessFactor * 255)); // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply contrast filter\n   */\n  private applyContrast(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const contrastFactor = (amount + 100) / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, ((data[i] - 128) * contrastFactor) + 128));     // R\n      data[i + 1] = Math.max(0, Math.min(255, ((data[i + 1] - 128) * contrastFactor) + 128)); // G\n      data[i + 2] = Math.max(0, Math.min(255, ((data[i + 2] - 128) * contrastFactor) + 128)); // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply saturation filter\n   */\n  private applySaturation(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const saturationFactor = (amount + 100) / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      // Calculate grayscale value\n      const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n      \n      // Apply saturation\n      data[i] = Math.max(0, Math.min(255, gray + saturationFactor * (r - gray)));\n      data[i + 1] = Math.max(0, Math.min(255, gray + saturationFactor * (g - gray)));\n      data[i + 2] = Math.max(0, Math.min(255, gray + saturationFactor * (b - gray)));\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply hue shift filter\n   */\n  private applyHueShift(imageData: ImageData, angle: number): ImageData {\n    const data = imageData.data;\n    const hueShift = (angle * Math.PI) / 180;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i] / 255;\n      const g = data[i + 1] / 255;\n      const b = data[i + 2] / 255;\n      \n      // Convert RGB to HSV\n      const max = Math.max(r, g, b);\n      const min = Math.min(r, g, b);\n      const delta = max - min;\n      \n      let h = 0;\n      if (delta !== 0) {\n        if (max === r) h = ((g - b) / delta) % 6;\n        else if (max === g) h = (b - r) / delta + 2;\n        else h = (r - g) / delta + 4;\n      }\n      h = (h * 60 + hueShift * 180 / Math.PI) % 360;\n      if (h < 0) h += 360;\n      \n      const s = max === 0 ? 0 : delta / max;\n      const v = max;\n      \n      // Convert HSV back to RGB\n      const c = v * s;\n      const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n      const m = v - c;\n      \n      let rNew = 0, gNew = 0, bNew = 0;\n      if (h >= 0 && h < 60) { rNew = c; gNew = x; bNew = 0; }\n      else if (h >= 60 && h < 120) { rNew = x; gNew = c; bNew = 0; }\n      else if (h >= 120 && h < 180) { rNew = 0; gNew = c; bNew = x; }\n      else if (h >= 180 && h < 240) { rNew = 0; gNew = x; bNew = c; }\n      else if (h >= 240 && h < 300) { rNew = x; gNew = 0; bNew = c; }\n      else if (h >= 300 && h < 360) { rNew = c; gNew = 0; bNew = x; }\n      \n      data[i] = Math.round((rNew + m) * 255);\n      data[i + 1] = Math.round((gNew + m) * 255);\n      data[i + 2] = Math.round((bNew + m) * 255);\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply blur filter\n   */\n  private applyBlur(imageData: ImageData, radius: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const newData = new Uint8ClampedArray(data);\n    \n    const kernelSize = Math.floor(radius) * 2 + 1;\n    const half = Math.floor(kernelSize / 2);\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let r = 0, g = 0, b = 0, a = 0;\n        let count = 0;\n        \n        for (let ky = -half; ky <= half; ky++) {\n          for (let kx = -half; kx <= half; kx++) {\n            const nx = x + kx;\n            const ny = y + ky;\n            \n            if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n              const idx = (ny * width + nx) * 4;\n              r += data[idx];\n              g += data[idx + 1];\n              b += data[idx + 2];\n              a += data[idx + 3];\n              count++;\n            }\n          }\n        }\n        \n        const idx = (y * width + x) * 4;\n        newData[idx] = r / count;\n        newData[idx + 1] = g / count;\n        newData[idx + 2] = b / count;\n        newData[idx + 3] = a / count;\n      }\n    }\n    \n    return new ImageData(newData, width, height);\n  }\n\n  /**\n   * Apply sharpen filter\n   */\n  private applySharpen(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const newData = new Uint8ClampedArray(data);\n    \n    const kernel = [\n      0, -amount / 100, 0,\n      -amount / 100, 1 + 4 * amount / 100, -amount / 100,\n      0, -amount / 100, 0\n    ];\n    \n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        for (let c = 0; c < 3; c++) {\n          let sum = 0;\n          for (let ky = -1; ky <= 1; ky++) {\n            for (let kx = -1; kx <= 1; kx++) {\n              const idx = ((y + ky) * width + (x + kx)) * 4 + c;\n              const kernelIdx = (ky + 1) * 3 + (kx + 1);\n              sum += data[idx] * kernel[kernelIdx];\n            }\n          }\n          newData[(y * width + x) * 4 + c] = Math.max(0, Math.min(255, sum));\n        }\n      }\n    }\n    \n    return new ImageData(newData, width, height);\n  }\n\n  /**\n   * Apply sepia filter\n   */\n  private applySepia(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const intensity = amount / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      const sepiaR = (r * 0.393 + g * 0.769 + b * 0.189);\n      const sepiaG = (r * 0.349 + g * 0.686 + b * 0.168);\n      const sepiaB = (r * 0.272 + g * 0.534 + b * 0.131);\n      \n      data[i] = Math.min(255, r + intensity * (sepiaR - r));\n      data[i + 1] = Math.min(255, g + intensity * (sepiaG - g));\n      data[i + 2] = Math.min(255, b + intensity * (sepiaB - b));\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply grayscale filter\n   */\n  private applyGrayscale(imageData: ImageData, method: string): ImageData {\n    const data = imageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      let gray: number;\n      switch (method) {\n        case 'average':\n          gray = (r + g + b) / 3;\n          break;\n        case 'luminance':\n          gray = 0.299 * r + 0.587 * g + 0.114 * b;\n          break;\n        case 'desaturation':\n          gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n          break;\n        default:\n          gray = 0.299 * r + 0.587 * g + 0.114 * b;\n      }\n      \n      data[i] = gray;\n      data[i + 1] = gray;\n      data[i + 2] = gray;\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply invert filter\n   */\n  private applyInvert(imageData: ImageData): ImageData {\n    const data = imageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];         // R\n      data[i + 1] = 255 - data[i + 1]; // G\n      data[i + 2] = 255 - data[i + 2]; // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply vignette filter\n   */\n  private applyVignette(imageData: ImageData, strength: number, size: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxRadius = Math.sqrt(centerX * centerX + centerY * centerY);\n    const vignetteRadius = maxRadius * (size / 100);\n    const vignetteStrength = strength / 100;\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n        const vignetteFactor = Math.max(0, 1 - (distance / vignetteRadius) * vignetteStrength);\n        \n        const idx = (y * width + x) * 4;\n        data[idx] *= vignetteFactor;         // R\n        data[idx + 1] *= vignetteFactor;     // G\n        data[idx + 2] *= vignetteFactor;     // B\n      }\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply single filter to image data\n   */\n  applyFilter(filterConfig: FilterConfig, sourceImageData?: ImageData): FilterResult {\n    const startTime = performance.now();\n    \n    try {\n      const imageData = sourceImageData || this.currentImageData;\n      if (!imageData) {\n        return {\n          success: false,\n          error: 'No image data available',\n          processingTime: performance.now() - startTime\n        };\n      }\n\n      // Create a copy of the image data\n      const processedData = new ImageData(\n        new Uint8ClampedArray(imageData.data),\n        imageData.width,\n        imageData.height\n      );\n\n      if (!filterConfig.enabled) {\n        return {\n          success: true,\n          processedImageData: processedData,\n          processingTime: performance.now() - startTime\n        };\n      }\n\n      // Apply the specific filter based on type\n      let result: ImageData;\n      const params = filterConfig.parameters;\n\n      switch (filterConfig.type) {\n        case FilterType.Brightness:\n          result = this.applyBrightness(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Contrast:\n          result = this.applyContrast(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Saturation:\n          result = this.applySaturation(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Hue:\n          result = this.applyHueShift(processedData, params.angle?.value || 0);\n          break;\n        case FilterType.Blur:\n          result = this.applyBlur(processedData, params.radius?.value || 5);\n          break;\n        case FilterType.Sharpen:\n          result = this.applySharpen(processedData, params.amount?.value || 50);\n          break;\n        case FilterType.Sepia:\n          result = this.applySepia(processedData, params.amount?.value || 100);\n          break;\n        case FilterType.Grayscale:\n          result = this.applyGrayscale(processedData, params.method?.value || 'luminance');\n          break;\n        case FilterType.Invert:\n          result = this.applyInvert(processedData);\n          break;\n        case FilterType.Vignette:\n          result = this.applyVignette(processedData, params.strength?.value || 50, params.size?.value || 50);\n          break;\n        default:\n          result = processedData;\n          console.warn(`Filter type ${filterConfig.type} not implemented`);\n      }\n\n      // Apply opacity if less than 100%\n      if (filterConfig.opacity < 1 && sourceImageData) {\n        const originalData = sourceImageData.data;\n        const filteredData = result.data;\n        \n        for (let i = 0; i < originalData.length; i += 4) {\n          filteredData[i] = originalData[i] + filterConfig.opacity * (filteredData[i] - originalData[i]);\n          filteredData[i + 1] = originalData[i + 1] + filterConfig.opacity * (filteredData[i + 1] - originalData[i + 1]);\n          filteredData[i + 2] = originalData[i + 2] + filterConfig.opacity * (filteredData[i + 2] - originalData[i + 2]);\n        }\n      }\n\n      return {\n        success: true,\n        processedImageData: result,\n        processingTime: performance.now() - startTime\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime: performance.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Apply multiple filters in sequence\n   */\n  applyFilterChain(filters: FilterConfig[]): FilterResult {\n    const startTime = performance.now();\n    \n    if (!this.originalImageData) {\n      return {\n        success: false,\n        error: 'No original image data available',\n        processingTime: performance.now() - startTime\n      };\n    }\n\n    try {\n      let currentData = new ImageData(\n        new Uint8ClampedArray(this.originalImageData.data),\n        this.originalImageData.width,\n        this.originalImageData.height\n      );\n\n      // Sort filters by enabled status and apply only enabled filters\n      const enabledFilters = filters.filter(f => f.enabled);\n\n      for (const filter of enabledFilters) {\n        const result = this.applyFilter(filter, currentData);\n        if (!result.success || !result.processedImageData) {\n          return {\n            success: false,\n            error: `Failed to apply filter ${filter.name}: ${result.error}`,\n            processingTime: performance.now() - startTime\n          };\n        }\n        currentData = result.processedImageData;\n      }\n\n      this.currentImageData = currentData;\n\n      return {\n        success: true,\n        processedImageData: currentData,\n        processingTime: performance.now() - startTime\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime: performance.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Reset to original image\n   */\n  resetToOriginal(): void {\n    if (this.originalImageData) {\n      this.currentImageData = new ImageData(\n        new Uint8ClampedArray(this.originalImageData.data),\n        this.originalImageData.width,\n        this.originalImageData.height\n      );\n    }\n  }\n\n  /**\n   * Get current processed image data\n   */\n  getCurrentImageData(): ImageData | null {\n    return this.currentImageData;\n  }\n\n  /**\n   * Render current image data to canvas\n   */\n  renderToCanvas(): void {\n    if (this.currentImageData) {\n      this.ctx.putImageData(this.currentImageData, 0, 0);\n    }\n  }\n}\n\n/**\n * Filter preset library\n */\nexport class FilterPresetLibrary {\n  private presets: Map<string, FilterPreset> = new Map();\n\n  constructor() {\n    this.initializeDefaultPresets();\n  }\n\n  /**\n   * Initialize default filter presets\n   */\n  private initializeDefaultPresets(): void {\n    // Vintage preset\n    this.addPreset({\n      id: 'vintage',\n      name: 'Vintage',\n      description: 'Classic vintage film look',\n      category: 'Retro',\n      tags: ['vintage', 'retro', 'film'],\n      filters: [\n        this.createFilterConfig(FilterType.Sepia, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Sepia].amount, value: 30 } }),\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: -10 } }),\n        this.createFilterConfig(FilterType.Saturation, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Saturation].amount, value: -20 } }),\n        this.createFilterConfig(FilterType.Vignette, { \n          strength: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Vignette].strength, value: 40 },\n          size: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Vignette].size, value: 60 }\n        })\n      ]\n    });\n\n    // Black and White preset\n    this.addPreset({\n      id: 'blackwhite',\n      name: 'Black & White',\n      description: 'Classic black and white with enhanced contrast',\n      category: 'Classic',\n      tags: ['bw', 'monochrome', 'classic'],\n      filters: [\n        this.createFilterConfig(FilterType.Grayscale, { method: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Grayscale].method, value: 'luminance' } }),\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: 20 } })\n      ]\n    });\n\n    // Dramatic preset\n    this.addPreset({\n      id: 'dramatic',\n      name: 'Dramatic',\n      description: 'High contrast dramatic effect',\n      category: 'Artistic',\n      tags: ['dramatic', 'contrast', 'bold'],\n      filters: [\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: 40 } }),\n        this.createFilterConfig(FilterType.Saturation, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Saturation].amount, value: 20 } }),\n        this.createFilterConfig(FilterType.Sharpen, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Sharpen].amount, value: 30 } })\n      ]\n    });\n  }\n\n  /**\n   * Create filter configuration helper\n   */\n  private createFilterConfig(type: FilterType, params: Record<string, FilterParameter>): FilterConfig {\n    return {\n      id: `filter-${type}-${Date.now()}`,\n      type,\n      name: type.charAt(0).toUpperCase() + type.slice(1),\n      description: `${type} filter`,\n      parameters: { ...DEFAULT_FILTER_PARAMETERS[type], ...params },\n      enabled: true,\n      opacity: 1,\n      blendMode: BlendMode.Normal\n    };\n  }\n\n  /**\n   * Add preset to library\n   */\n  addPreset(preset: FilterPreset): void {\n    this.presets.set(preset.id, preset);\n  }\n\n  /**\n   * Get preset by ID\n   */\n  getPreset(id: string): FilterPreset | undefined {\n    return this.presets.get(id);\n  }\n\n  /**\n   * Get all presets\n   */\n  getAllPresets(): FilterPreset[] {\n    return Array.from(this.presets.values());\n  }\n\n  /**\n   * Get presets by category\n   */\n  getPresetsByCategory(category: string): FilterPreset[] {\n    return this.getAllPresets().filter(preset => preset.category === category);\n  }\n\n  /**\n   * Search presets by tags\n   */\n  searchPresets(query: string): FilterPreset[] {\n    const lowerQuery = query.toLowerCase();\n    return this.getAllPresets().filter(preset =>\n      preset.name.toLowerCase().includes(lowerQuery) ||\n      preset.description.toLowerCase().includes(lowerQuery) ||\n      preset.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  /**\n   * Remove preset\n   */\n  removePreset(id: string): boolean {\n    return this.presets.delete(id);\n  }\n}\n\n/**\n * Factory function to create image filter engine\n */\nexport function createImageFilterEngine(managedCanvas: ManagedCanvas): ImageFilterEngine {\n  return new ImageFilterEngine(managedCanvas);\n}\n\n/**\n * Factory function to create filter preset library\n */\nexport function createFilterPresetLibrary(): FilterPresetLibrary {\n  return new FilterPresetLibrary();\n}"],"mappingssHaA,yBAAyB,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAzBH,yBAAA;;EA0lBAI,mBAAmB,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAnBC,mBAAA;;EAxsBDC,UAAU,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAVE,UAAA;;EA0NCC,iBAAiB,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAjBG,iBAAA;;EAinBGC,yBAAyB,WAAAA,CAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAzBI,yBAAA;;EAPAC,uBAAuB,WAAAA,CAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvBK,uBAAA;;;;;mCAz0BU;AAKnB,IAAAH,UAAK;AAAA;AAAA,cAAAJ,cAAA,GAAAE,CAAA,kBAAAE,UAAA;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACV;;;;;;;;;;;;;;;;;EAQA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;EAOA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;EAIA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;EAOA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;;;;;;;EAMA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;;;;;;;EAMA;EAAA;EAAAF,cAAA,GAAAE,CAAA;;;;;;;;;;;;;SAvCUE,UAAA;;AA8GL,MAAML,yBAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAiF;EAC5F,gBAAyB;IACvBM,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAcC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAA0B;EAC9H;EACA,cAAuB;IACrBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAwB;EAC1H;EACA,gBAAyB;IACvBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAcC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAA0B;EAC9H;EACA,SAAkB;IAChBC,KAAA,EAAO;MAAEP,IAAA,EAAM;MAAaC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAuB;EACzH;EACA,WAAoB;IAClBE,KAAA,EAAO;MAAER,IAAA,EAAM;MAASC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAKC,GAAA,EAAK;MAAGC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAmB;EAChH;EACA,cAAuB;IACrBG,KAAA,EAAO;MAAET,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAGC,GAAA,EAAK;MAAGC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAoB;EACnH;EACA,UAAmB;IACjBI,MAAA,EAAQ;MAAEV,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAwB;EACpH;EACA,kBAA2B;IACzBI,MAAA,EAAQ;MAAEV,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAuB;EACnH;EACA,gBAAyB;IACvBK,QAAA,EAAU;MAAEX,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAuB;IACvHC,KAAA,EAAO;MAAEP,IAAA,EAAM;MAASC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;EAC/G;EACA,aAAsB;IACpBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;EAClH;EACA,iBAA0B;IACxBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAKC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAsB;IACnHI,MAAA,EAAQ;MAAEV,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAKC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAsB;IACpHM,SAAA,EAAW;MAAEZ,IAAA,EAAM;MAAaC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAyB;EAC5H;EACA,WAAoB;IAClBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAe;IAC3GL,IAAA,EAAM;MAAED,IAAA,EAAM;MAAQC,IAAA,EAAM;MAAUC,KAAA,EAAO;MAAWW,OAAA,EAAS,CAAC,WAAW,WAAW;MAAEP,WAAA,EAAa;IAAa;EACtH;EACA,WAAoB;IAClBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAe;IAC3GQ,IAAA,EAAM;MAAEd,IAAA,EAAM;MAAQC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAKC,GAAA,EAAK;MAAGC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAa;EACxG;EACA,WAAoB;IAClBP,MAAA,EAAQ;MAAEC,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAKC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAsB;EACrH;EACA,eAAwB;IACtBS,MAAA,EAAQ;MAAEf,IAAA,EAAM;MAAUC,IAAA,EAAM;MAAUC,KAAA,EAAO;MAAaW,OAAA,EAAS,CAAC,WAAW,aAAa,eAAe;MAAEP,WAAA,EAAa;IAA8B;EAC9J;EACA,YAAqB,CAAC;EACtB,eAAwB;IACtBU,MAAA,EAAQ;MAAEhB,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAyB;EACrH;EACA,cAAuB;IACrBM,SAAA,EAAW;MAAEZ,IAAA,EAAM;MAAaC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAKC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAyB;EAC9H;EACA,YAAqB;IACnBW,QAAA,EAAU;MAAEjB,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAKC,GAAA,EAAK;MAAGC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAkB;EACrH;EACA,mBAA4B;IAC1BM,SAAA,EAAW;MAAEZ,IAAA,EAAM;MAAaC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAA2B;EAC/H;EACA,aAAsB;IACpBY,MAAA,EAAQ;MAAElB,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAiB;IAC7Ga,QAAA,EAAU;MAAEnB,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;EACtH;EACA,cAAuB;IACrBW,QAAA,EAAU;MAAEjB,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;IACpHQ,IAAA,EAAM;MAAEd,IAAA,EAAM;MAAQC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAIC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAgB;EAC1G;EACA,kBAA2B;IACzBc,WAAA,EAAa;MAAEpB,IAAA,EAAM;MAAeC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;IAC5He,IAAA,EAAM;MAAErB,IAAA,EAAM;MAAQC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAqB;EACjH;EACA,kBAA2B;IACzBgB,OAAA,EAAS;MAAEtB,IAAA,EAAM;MAAWC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAuB;IACvHiB,QAAA,EAAU;MAAEvB,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAwB;IAC1HkB,UAAA,EAAY;MAAExB,IAAA,EAAM;MAAcC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK,CAAC;MAAKC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAA0B;EAClI;EACA,YAAqB;IACnBmB,UAAA,EAAY;MAAEzB,IAAA,EAAM;MAAeC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;IACxHoB,UAAA,EAAY;MAAE1B,IAAA,EAAM;MAAeC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAKC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;IAC1HE,KAAA,EAAO;MAAER,IAAA,EAAM;MAASC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAKC,GAAA,EAAK;MAAGC,IAAA,EAAM;MAAKC,WAAA,EAAa;IAAmB;EAChH;EACA,YAAqB;IACnBqB,MAAA,EAAQ;MAAE3B,IAAA,EAAM;MAAgBC,IAAA,EAAM;MAAUC,KAAA,EAAO;MAAeI,WAAA,EAAa;IAAuB;EAC5G;EACA,cAAuB;IACrBQ,IAAA,EAAM;MAAEd,IAAA,EAAM;MAAcC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAmB;EACjH;EACA,cAAuB;IACrBQ,IAAA,EAAM;MAAEd,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAoB;IAC9GC,KAAA,EAAO;MAAEP,IAAA,EAAM;MAASC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAiB;EAC5G;EACA,gBAAyB;IACvBW,QAAA,EAAU;MAAEjB,IAAA,EAAM;MAAYC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAuB;EACzH;EACA,iBAA0B;IACxBI,MAAA,EAAQ;MAAEV,IAAA,EAAM;MAAUC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAGC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAIC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAsB;IAChHsB,SAAA,EAAW;MAAE5B,IAAA,EAAM;MAAaC,IAAA,EAAM;MAASC,KAAA,EAAO;MAAIC,GAAA,EAAK;MAAGC,GAAA,EAAK;MAAKC,IAAA,EAAM;MAAGC,WAAA,EAAa;IAAyB;EAC7H;AACF;AAKO,MAAMV,iBAAA;EAMXiC,YAAYC,aAA4B,EAAE;IAAA;IAAAvC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAHlCsC,iBAAA,GAAsC;IAAA;IAAAxC,cAAA,GAAAE,CAAA;SACtCuC,gBAAA,GAAqC;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IAG3C,IAAI,CAACwC,MAAM,GAAGH,aAAA,CAAcG,MAAM;IAAA;IAAA1C,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACyC,GAAG,GAAGJ,aAAA,CAAcK,OAAO;EAClC;EAEA;;;EAGAC,iBAAiBC,SAAoB,EAAQ;IAAA;IAAA9C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3C,IAAI,CAACsC,iBAAiB,GAAG,IAAIO,SAAA,CAC3B,IAAIC,iBAAA,CAAkBF,SAAA,CAAUG,IAAI,GACpCH,SAAA,CAAUI,KAAK,EACfJ,SAAA,CAAUK,MAAM;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IAElB,IAAI,CAACuC,gBAAgB,GAAG,IAAIM,SAAA,CAC1B,IAAIC,iBAAA,CAAkBF,SAAA,CAAUG,IAAI,GACpCH,SAAA,CAAUI,KAAK,EACfJ,SAAA,CAAUK,MAAM;EAEpB;EAEA;;;EAGAC,eAAQA,CAAgBN,SAAoB,EAAEtC,MAAc,EAAa;IAAA;IAAAR,cAAA,GAAAC,CAAA;IACvE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMI,gBAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAmBM,MAAA,GAAS;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAElC,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACvC+C,IAAI,CAACK,CAAA,CAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKqC,IAAI,CAACK,CAAA,CAAE,GAAGD,gBAAA,GAAmB,OAAW;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAC5E+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKqC,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGD,gBAAA,GAAmB,OAAO;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAChF+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKqC,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGD,gBAAA,GAAmB,OAAO;IAClF;IAAA;IAAArD,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAW,aAAQA,CAAcX,SAAoB,EAAEtC,MAAc,EAAa;IAAA;IAAAR,cAAA,GAAAC,CAAA;IACrE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMS,cAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAiB,CAACM,MAAA,GAAS,GAAE,IAAK;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAExC,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACvC+C,IAAI,CAACK,CAAA,CAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAK,CAAEqC,IAAI,CAACK,CAAA,CAAE,GAAG,GAAE,IAAKI,cAAA,GAAkB,OAAW;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACpF+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAK,CAAEqC,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG,GAAE,IAAKI,cAAA,GAAkB,OAAO;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACxF+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAK,CAAEqC,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG,GAAE,IAAKI,cAAA,GAAkB,OAAO;IAC1F;IAAA;IAAA1D,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAa,eAAQA,CAAgBb,SAAoB,EAAEtC,MAAc,EAAa;IAAA;IAAAR,cAAA,GAAAC,CAAA;IACvE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMW,gBAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAmB,CAACM,MAAA,GAAS,GAAE,IAAK;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAE1C,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MACvC,MAAMO,CAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,CAAE;MACjB,MAAMQ,CAAA;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MACrB,MAAMS,CAAA;MAAA;MAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MAErB;MACA,MAAMU,IAAA;MAAA;MAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAO,QAAQ2D,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA;MAE7C;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MACA+C,IAAI,CAACK,CAAA,CAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKoD,IAAA,GAAOJ,gBAAA,IAAoBC,CAAA,GAAIG,IAAG;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACtE+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKoD,IAAA,GAAOJ,gBAAA,IAAoBE,CAAA,GAAIE,IAAG;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MAC1E+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKoD,IAAA,GAAOJ,gBAAA,IAAoBG,CAAA,GAAIC,IAAG;IAC5E;IAAA;IAAAhE,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAmB,aAAQA,CAAcnB,SAAoB,EAAE9B,KAAa,EAAa;IAAA;IAAAhB,cAAA,GAAAC,CAAA;IACpE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMiB,QAAA;IAAA;IAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAWc,KAAC,GAAQwC,IAAA,CAAKW,EAAE,GAAI;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IAErC,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MACvC,MAAMO,CAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,CAAE,GAAG;MACpB,MAAMQ,CAAA;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG;MACxB,MAAMS,CAAA;MAAA;MAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG;MAExB;MACA,MAAMzC,GAAA;MAAA;MAAA,CAAAb,cAAA,GAAAE,CAAA,QAAMsD,IAAA,CAAK3C,GAAG,CAACgD,CAAA,EAAGC,CAAA,EAAGC,CAAA;MAC3B,MAAMnD,GAAA;MAAA;MAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAMsD,IAAA,CAAK5C,GAAG,CAACiD,CAAA,EAAGC,CAAA,EAAGC,CAAA;MAC3B,MAAMK,KAAA;MAAA;MAAA,CAAApE,cAAA,GAAAE,CAAA,QAAQW,GAAA,GAAMD,GAAA;MAEpB,IAAIyD,CAAA;MAAA;MAAA,CAAArE,cAAA,GAAAE,CAAA,QAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACR,IAAIkE,KAAA,KAAU,GAAG;QAAA;QAAApE,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QACf,IAAIW,GAAA,KAAQgD,CAAA,EAAG;UAAA;UAAA7D,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UAAAmE,CAAA,GAAI,CAAEP,CAAA,GAAIC,CAAA,IAAKK,KAAA,GAAS;QAAA,OAClC;UAAA;UAAApE,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UAAA,IAAIW,GAAA,KAAQiD,CAAA,EAAG;YAAA;YAAA9D,cAAA,GAAA+D,CAAA;YAAA/D,cAAA,GAAAE,CAAA;YAAAmE,CAAA,GAAI,CAACN,CAAA,GAAIF,CAAA,IAAKO,KAAA,GAAQ;UAAA,OACrC;YAAA;YAAApE,cAAA,GAAA+D,CAAA;YAAA/D,cAAA,GAAAE,CAAA;YAAAmE,CAAA,GAAI,CAACR,CAAA,GAAIC,CAAA,IAAKM,KAAA,GAAQ;UAAA;QAAA;MAC7B;MAAA;MAAA;QAAApE,cAAA,GAAA+D,CAAA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MACAmE,CAAA,GAAI,CAACA,CAAA,GAAI,KAAKH,QAAA,GAAW,MAAMV,IAAA,CAAKW,EAAE,IAAI;MAAA;MAAAnE,cAAA,GAAAE,CAAA;MAC1C,IAAImE,CAAA,GAAI,GAAG;QAAA;QAAArE,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QAAAmE,CAAA,IAAK;MAAA;MAAA;MAAA;QAAArE,cAAA,GAAA+D,CAAA;MAAA;MAEhB,MAAM7D,CAAA;MAAA;MAAA,CAAAF,cAAA,GAAAE,CAAA,QAAIW,GAAA,KAAQ;MAAA;MAAA,CAAAb,cAAA,GAAA+D,CAAA,UAAI;MAAA;MAAA,CAAA/D,cAAA,GAAA+D,CAAA,UAAIK,KAAA,GAAQvD,GAAA;MAClC,MAAMyD,CAAA;MAAA;MAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAIW,GAAA;MAEV;MACA,MAAM0D,CAAA;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA,SAAIoE,CAAA,GAAIpE,CAAA;MACd,MAAMsE,CAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA,SAAIqE,CAAA,IAAK,IAAIf,IAAA,CAAKiB,GAAG,CAACJ,CAAE,GAAI,KAAM,IAAK,EAAC;MAC9C,MAAMK,CAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAE,CAAA,SAAIoE,CAAA,GAAIC,CAAA;MAEd,IAAII,IAAA;QAAA;QAAA,CAAA3E,cAAA,GAAAE,CAAA,SAAO;QAAG0E,IAAA;QAAA;QAAA,CAAA5E,cAAA,GAAAE,CAAA,SAAO;QAAG2E,IAAA;QAAA;QAAA,CAAA7E,cAAA,GAAAE,CAAA,SAAO;MAAA;MAAAF,cAAA,GAAAE,CAAA;MAC/B;MAAI;MAAA,CAAAF,cAAA,GAAA+D,CAAA,UAAAM,CAAA,IAAK;MAAA;MAAA,CAAArE,cAAA,GAAA+D,CAAA,UAAKM,CAAA,GAAI,KAAI;QAAA;QAAArE,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QAAEyE,IAAA,GAAOJ,CAAA;QAAA;QAAAvE,cAAA,GAAAE,CAAA;QAAG0E,IAAA,GAAOJ,CAAA;QAAA;QAAAxE,cAAA,GAAAE,CAAA;QAAG2E,IAAA,GAAO;MAAG,OACjD;QAAA;QAAA7E,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QAAA;QAAI;QAAA,CAAAF,cAAA,GAAA+D,CAAA,UAAAM,CAAA,IAAK;QAAA;QAAA,CAAArE,cAAA,GAAA+D,CAAA,UAAMM,CAAA,GAAI,MAAK;UAAA;UAAArE,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UAAEyE,IAAA,GAAOH,CAAA;UAAA;UAAAxE,cAAA,GAAAE,CAAA;UAAG0E,IAAA,GAAOL,CAAA;UAAA;UAAAvE,cAAA,GAAAE,CAAA;UAAG2E,IAAA,GAAO;QAAG,OACxD;UAAA;UAAA7E,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UAAA;UAAI;UAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAM,CAAA,IAAK;UAAA;UAAA,CAAArE,cAAA,GAAA+D,CAAA,WAAOM,CAAA,GAAI,MAAK;YAAA;YAAArE,cAAA,GAAA+D,CAAA;YAAA/D,cAAA,GAAAE,CAAA;YAAEyE,IAAA,GAAO;YAAA;YAAA3E,cAAA,GAAAE,CAAA;YAAG0E,IAAA,GAAOL,CAAA;YAAA;YAAAvE,cAAA,GAAAE,CAAA;YAAG2E,IAAA,GAAOL,CAAA;UAAG,OACzD;YAAA;YAAAxE,cAAA,GAAA+D,CAAA;YAAA/D,cAAA,GAAAE,CAAA;YAAA;YAAI;YAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAM,CAAA,IAAK;YAAA;YAAA,CAAArE,cAAA,GAAA+D,CAAA,WAAOM,CAAA,GAAI,MAAK;cAAA;cAAArE,cAAA,GAAA+D,CAAA;cAAA/D,cAAA,GAAAE,CAAA;cAAEyE,IAAA,GAAO;cAAA;cAAA3E,cAAA,GAAAE,CAAA;cAAG0E,IAAA,GAAOJ,CAAA;cAAA;cAAAxE,cAAA,GAAAE,CAAA;cAAG2E,IAAA,GAAON,CAAA;YAAG,OACzD;cAAA;cAAAvE,cAAA,GAAA+D,CAAA;cAAA/D,cAAA,GAAAE,CAAA;cAAA;cAAI;cAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAM,CAAA,IAAK;cAAA;cAAA,CAAArE,cAAA,GAAA+D,CAAA,WAAOM,CAAA,GAAI,MAAK;gBAAA;gBAAArE,cAAA,GAAA+D,CAAA;gBAAA/D,cAAA,GAAAE,CAAA;gBAAEyE,IAAA,GAAOH,CAAA;gBAAA;gBAAAxE,cAAA,GAAAE,CAAA;gBAAG0E,IAAA,GAAO;gBAAA;gBAAA5E,cAAA,GAAAE,CAAA;gBAAG2E,IAAA,GAAON,CAAA;cAAG,OACzD;gBAAA;gBAAAvE,cAAA,GAAA+D,CAAA;gBAAA/D,cAAA,GAAAE,CAAA;gBAAA;gBAAI;gBAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAM,CAAA,IAAK;gBAAA;gBAAA,CAAArE,cAAA,GAAA+D,CAAA,WAAOM,CAAA,GAAI,MAAK;kBAAA;kBAAArE,cAAA,GAAA+D,CAAA;kBAAA/D,cAAA,GAAAE,CAAA;kBAAEyE,IAAA,GAAOJ,CAAA;kBAAA;kBAAAvE,cAAA,GAAAE,CAAA;kBAAG0E,IAAA,GAAO;kBAAA;kBAAA5E,cAAA,GAAAE,CAAA;kBAAG2E,IAAA,GAAOL,CAAA;gBAAG;gBAAA;gBAAA;kBAAAxE,cAAA,GAAA+D,CAAA;gBAAA;cAAA;YAAA;UAAA;QAAA;MAAA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAE9D+C,IAAI,CAACK,CAAA,CAAE,GAAGE,IAAA,CAAKsB,KAAK,CAAC,CAACH,IAAA,GAAOD,CAAA,IAAK;MAAA;MAAA1E,cAAA,GAAAE,CAAA;MAClC+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAKsB,KAAK,CAAC,CAACF,IAAA,GAAOF,CAAA,IAAK;MAAA;MAAA1E,cAAA,GAAAE,CAAA;MACtC+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAKsB,KAAK,CAAC,CAACD,IAAA,GAAOH,CAAA,IAAK;IACxC;IAAA;IAAA1E,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAiC,SAAQA,CAAUjC,SAAoB,EAAE3B,MAAc,EAAa;IAAA;IAAAnB,cAAA,GAAAC,CAAA;IACjE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMC,KAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAQ4C,SAAA,CAAUI,KAAK;IAC7B,MAAMC,MAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,SAAS4C,SAAA,CAAUK,MAAM;IAC/B,MAAM6B,OAAA;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,SAAU,IAAI8C,iBAAA,CAAkBC,IAAA;IAEtC,MAAMgC,UAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,SAAasD,IAAA,CAAK0B,KAAK,CAAC/D,MAAA,IAAU,IAAI;IAC5C,MAAMgE,IAAA;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,SAAOsD,IAAA,CAAK0B,KAAK,CAACD,UAAA,GAAa;IAAA;IAAAjF,cAAA,GAAAE,CAAA;IAErC,KAAK,IAAIkF,CAAA;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,SAAI,IAAGkF,CAAA,GAAIjC,MAAA,EAAQiC,CAAA,IAAK;MAAA;MAAApF,cAAA,GAAAE,CAAA;MAC/B,KAAK,IAAIsE,CAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA,SAAI,IAAGsE,CAAA,GAAItB,KAAA,EAAOsB,CAAA,IAAK;QAC9B,IAAIX,CAAA;UAAA;UAAA,CAAA7D,cAAA,GAAAE,CAAA,SAAI;UAAG4D,CAAA;UAAA;UAAA,CAAA9D,cAAA,GAAAE,CAAA,SAAI;UAAG6D,CAAA;UAAA;UAAA,CAAA/D,cAAA,GAAAE,CAAA,SAAI;UAAGmF,CAAA;UAAA;UAAA,CAAArF,cAAA,GAAAE,CAAA,SAAI;QAC7B,IAAIoF,KAAA;QAAA;QAAA,CAAAtF,cAAA,GAAAE,CAAA,SAAQ;QAAA;QAAAF,cAAA,GAAAE,CAAA;QAEZ,KAAK,IAAIqF,EAAA;QAAA;QAAA,CAAAvF,cAAA,GAAAE,CAAA,SAAK,CAACiF,IAAA,GAAMI,EAAA,IAAMJ,IAAA,EAAMI,EAAA,IAAM;UAAA;UAAAvF,cAAA,GAAAE,CAAA;UACrC,KAAK,IAAIsF,EAAA;UAAA;UAAA,CAAAxF,cAAA,GAAAE,CAAA,SAAK,CAACiF,IAAA,GAAMK,EAAA,IAAML,IAAA,EAAMK,EAAA,IAAM;YACrC,MAAMC,EAAA;YAAA;YAAA,CAAAzF,cAAA,GAAAE,CAAA,SAAKsE,CAAA,GAAIgB,EAAA;YACf,MAAME,EAAA;YAAA;YAAA,CAAA1F,cAAA,GAAAE,CAAA,SAAKkF,CAAA,GAAIG,EAAA;YAAA;YAAAvF,cAAA,GAAAE,CAAA;YAEf;YAAI;YAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAA0B,EAAA,IAAM;YAAA;YAAA,CAAAzF,cAAA,GAAA+D,CAAA,WAAK0B,EAAA,GAAKvC,KAAA;YAAA;YAAA,CAAAlD,cAAA,GAAA+D,CAAA,WAAS2B,EAAA,IAAM;YAAA;YAAA,CAAA1F,cAAA,GAAA+D,CAAA,WAAK2B,EAAA,GAAKvC,MAAA,GAAQ;cAAA;cAAAnD,cAAA,GAAA+D,CAAA;cACnD,MAAM4B,GAAA;cAAA;cAAA,CAAA3F,cAAA,GAAAE,CAAA,SAAM,CAACwF,EAAA,GAAKxC,KAAA,GAAQuC,EAAC,IAAK;cAAA;cAAAzF,cAAA,GAAAE,CAAA;cAChC2D,CAAA,IAAKZ,IAAI,CAAC0C,GAAA,CAAI;cAAA;cAAA3F,cAAA,GAAAE,CAAA;cACd4D,CAAA,IAAKb,IAAI,CAAC0C,GAAA,GAAM,EAAE;cAAA;cAAA3F,cAAA,GAAAE,CAAA;cAClB6D,CAAA,IAAKd,IAAI,CAAC0C,GAAA,GAAM,EAAE;cAAA;cAAA3F,cAAA,GAAAE,CAAA;cAClBmF,CAAA,IAAKpC,IAAI,CAAC0C,GAAA,GAAM,EAAE;cAAA;cAAA3F,cAAA,GAAAE,CAAA;cAClBoF,KAAA;YACF;YAAA;YAAA;cAAAtF,cAAA,GAAA+D,CAAA;YAAA;UACF;QACF;QAEA,MAAM4B,GAAA;QAAA;QAAA,CAAA3F,cAAA,GAAAE,CAAA,SAAM,CAACkF,CAAA,GAAIlC,KAAA,GAAQsB,CAAA,IAAK;QAAA;QAAAxE,cAAA,GAAAE,CAAA;QAC9B8E,OAAO,CAACW,GAAA,CAAI,GAAG9B,CAAA,GAAIyB,KAAA;QAAA;QAAAtF,cAAA,GAAAE,CAAA;QACnB8E,OAAO,CAACW,GAAA,GAAM,EAAE,GAAG7B,CAAA,GAAIwB,KAAA;QAAA;QAAAtF,cAAA,GAAAE,CAAA;QACvB8E,OAAO,CAACW,GAAA,GAAM,EAAE,GAAG5B,CAAA,GAAIuB,KAAA;QAAA;QAAAtF,cAAA,GAAAE,CAAA;QACvB8E,OAAO,CAACW,GAAA,GAAM,EAAE,GAAGN,CAAA,GAAIC,KAAA;MACzB;IACF;IAAA;IAAAtF,cAAA,GAAAE,CAAA;IAEA,OAAO,IAAI6C,SAAA,CAAUiC,OAAA,EAAS9B,KAAA,EAAOC,MAAA;EACvC;EAEA;;;EAGAyC,YAAQA,CAAa9C,SAAoB,EAAEtC,MAAc,EAAa;IAAA;IAAAR,cAAA,GAAAC,CAAA;IACpE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMC,KAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAQ4C,SAAA,CAAUI,KAAK;IAC7B,MAAMC,MAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,SAAS4C,SAAA,CAAUK,MAAM;IAC/B,MAAM6B,OAAA;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,SAAU,IAAI8C,iBAAA,CAAkBC,IAAA;IAEtC,MAAM4C,MAAA;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,SAAS,CACb,GAAG,CAACM,MAAA,GAAS,KAAK,GAClB,CAACA,MAAA,GAAS,KAAK,IAAI,IAAIA,MAAA,GAAS,KAAK,CAACA,MAAA,GAAS,KAC/C,GAAG,CAACA,MAAA,GAAS,KAAK,EACnB;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAED,KAAK,IAAIkF,CAAA;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,SAAI,IAAGkF,CAAA,GAAIjC,MAAA,GAAS,GAAGiC,CAAA,IAAK;MAAA;MAAApF,cAAA,GAAAE,CAAA;MACnC,KAAK,IAAIsE,CAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA,SAAI,IAAGsE,CAAA,GAAItB,KAAA,GAAQ,GAAGsB,CAAA,IAAK;QAAA;QAAAxE,cAAA,GAAAE,CAAA;QAClC,KAAK,IAAIqE,CAAA;QAAA;QAAA,CAAAvE,cAAA,GAAAE,CAAA,SAAI,IAAGqE,CAAA,GAAI,GAAGA,CAAA,IAAK;UAC1B,IAAIuB,GAAA;UAAA;UAAA,CAAA9F,cAAA,GAAAE,CAAA,SAAM;UAAA;UAAAF,cAAA,GAAAE,CAAA;UACV,KAAK,IAAIqF,EAAA;UAAA;UAAA,CAAAvF,cAAA,GAAAE,CAAA,SAAK,CAAC,IAAGqF,EAAA,IAAM,GAAGA,EAAA,IAAM;YAAA;YAAAvF,cAAA,GAAAE,CAAA;YAC/B,KAAK,IAAIsF,EAAA;YAAA;YAAA,CAAAxF,cAAA,GAAAE,CAAA,SAAK,CAAC,IAAGsF,EAAA,IAAM,GAAGA,EAAA,IAAM;cAC/B,MAAMG,GAAA;cAAA;cAAA,CAAA3F,cAAA,GAAAE,CAAA,SAAM,CAAC,CAACkF,CAAA,GAAIG,EAAC,IAAKrC,KAAA,IAASsB,CAAA,GAAIgB,EAAC,CAAC,IAAK,IAAIjB,CAAA;cAChD,MAAMwB,SAAA;cAAA;cAAA,CAAA/F,cAAA,GAAAE,CAAA,SAAY,CAACqF,EAAA,GAAK,KAAK,KAAKC,EAAA,GAAK;cAAA;cAAAxF,cAAA,GAAAE,CAAA;cACvC4F,GAAA,IAAO7C,IAAI,CAAC0C,GAAA,CAAI,GAAGE,MAAM,CAACE,SAAA,CAAU;YACtC;UACF;UAAA;UAAA/F,cAAA,GAAAE,CAAA;UACA8E,OAAO,CAAC,CAACI,CAAA,GAAIlC,KAAA,GAAQsB,CAAA,IAAK,IAAID,CAAA,CAAE,GAAGf,IAAA,CAAK3C,GAAG,CAAC,GAAG2C,IAAA,CAAK5C,GAAG,CAAC,KAAKkF,GAAA;QAC/D;MACF;IACF;IAAA;IAAA9F,cAAA,GAAAE,CAAA;IAEA,OAAO,IAAI6C,SAAA,CAAUiC,OAAA,EAAS9B,KAAA,EAAOC,MAAA;EACvC;EAEA;;;EAGA6C,UAAQA,CAAWlD,SAAoB,EAAEtC,MAAc,EAAa;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAClE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMZ,SAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,SAAYM,MAAA,GAAS;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAE3B,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,SAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MACvC,MAAMO,CAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,CAAE;MACjB,MAAMQ,CAAA;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MACrB,MAAMS,CAAA;MAAA;MAAA,CAAA/D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MAErB,MAAM2C,MAAA;MAAA;MAAA,CAAAjG,cAAA,GAAAE,CAAA,SAAU2D,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA,GAAI;MAC5C,MAAMmC,MAAA;MAAA;MAAA,CAAAlG,cAAA,GAAAE,CAAA,SAAU2D,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA,GAAI;MAC5C,MAAMoC,MAAA;MAAA;MAAA,CAAAnG,cAAA,GAAAE,CAAA,SAAU2D,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA,GAAI;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAE5C+C,IAAI,CAACK,CAAA,CAAE,GAAGE,IAAA,CAAK5C,GAAG,CAAC,KAAKiD,CAAA,GAAIxB,SAAA,IAAa4D,MAAA,GAASpC,CAAA;MAAA;MAAA7D,cAAA,GAAAE,CAAA;MAClD+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK5C,GAAG,CAAC,KAAKkD,CAAA,GAAIzB,SAAA,IAAa6D,MAAA,GAASpC,CAAA;MAAA;MAAA9D,cAAA,GAAAE,CAAA;MACtD+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGE,IAAA,CAAK5C,GAAG,CAAC,KAAKmD,CAAA,GAAI1B,SAAA,IAAa8D,MAAA,GAASpC,CAAA;IACxD;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAsD,cAAQA,CAAetD,SAAoB,EAAEtB,MAAc,EAAa;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IACtE,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IAE3B,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,SAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MACvC,MAAMO,CAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,CAAE;MACjB,MAAMQ,CAAA;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MACrB,MAAMS,CAAA;MAAA;MAAA,CAAA/D,cAAA,GAAAE,CAAA,SAAI+C,IAAI,CAACK,CAAA,GAAI,EAAE;MAErB,IAAIU,IAAA;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACJ,QAAQsB,MAAA;QACN,KAAK;UAAA;UAAAxB,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACH8D,IAAA,GAAO,CAACH,CAAA,GAAIC,CAAA,GAAIC,CAAA,IAAK;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACrB;QACF,KAAK;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACH8D,IAAA,GAAO,QAAQH,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACvC;QACF,KAAK;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACH8D,IAAA,GAAO,CAACR,IAAA,CAAK3C,GAAG,CAACgD,CAAA,EAAGC,CAAA,EAAGC,CAAA,IAAKP,IAAA,CAAK5C,GAAG,CAACiD,CAAA,EAAGC,CAAA,EAAGC,CAAA,CAAC,IAAK;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACjD;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACE8D,IAAA,GAAO,QAAQH,CAAA,GAAI,QAAQC,CAAA,GAAI,QAAQC,CAAA;MAC3C;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAEA+C,IAAI,CAACK,CAAA,CAAE,GAAGU,IAAA;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACV+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGU,IAAA;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACd+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAGU,IAAA;IAChB;IAAA;IAAAhE,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAuD,WAAQA,CAAYvD,SAAoB,EAAa;IAAA;IAAA9C,cAAA,GAAAC,CAAA;IACnD,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IAE3B,KAAK,IAAIoD,CAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,SAAI,IAAGoD,CAAA,GAAIL,IAAA,CAAKM,MAAM,EAAED,CAAA,IAAK,GAAG;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACvC+C,IAAI,CAACK,CAAA,CAAE,GAAG,MAAML,IAAI,CAACK,CAAA,CAAE,EAAU;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACjC+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG,MAAML,IAAI,CAACK,CAAA,GAAI,EAAE,EAAE;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACjC+C,IAAI,CAACK,CAAA,GAAI,EAAE,GAAG,MAAML,IAAI,CAACK,CAAA,GAAI,EAAE,EAAE;IACnC;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAwD,aAAQA,CAAcxD,SAAoB,EAAEpB,QAAgB,EAAEH,IAAY,EAAa;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IACrF,MAAMgD,IAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,SAAO4C,SAAA,CAAUG,IAAI;IAC3B,MAAMC,KAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAQ4C,SAAA,CAAUI,KAAK;IAC7B,MAAMC,MAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,SAAS4C,SAAA,CAAUK,MAAM;IAC/B,MAAMoD,OAAA;IAAA;IAAA,CAAAvG,cAAA,GAAAE,CAAA,SAAUgD,KAAA,GAAQ;IACxB,MAAMsD,OAAA;IAAA;IAAA,CAAAxG,cAAA,GAAAE,CAAA,SAAUiD,MAAA,GAAS;IACzB,MAAMsD,SAAA;IAAA;IAAA,CAAAzG,cAAA,GAAAE,CAAA,SAAYsD,IAAA,CAAKkD,IAAI,CAACH,OAAA,GAAUA,OAAA,GAAUC,OAAA,GAAUA,OAAA;IAC1D,MAAMG,cAAA;IAAA;IAAA,CAAA3G,cAAA,GAAAE,CAAA,SAAiBuG,SAAA,IAAalF,IAAA,GAAO,GAAE;IAC7C,MAAMqF,gBAAA;IAAA;IAAA,CAAA5G,cAAA,GAAAE,CAAA,SAAmBwB,QAAA,GAAW;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IAEpC,KAAK,IAAIkF,CAAA;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,SAAI,IAAGkF,CAAA,GAAIjC,MAAA,EAAQiC,CAAA,IAAK;MAAA;MAAApF,cAAA,GAAAE,CAAA;MAC/B,KAAK,IAAIsE,CAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA,SAAI,IAAGsE,CAAA,GAAItB,KAAA,EAAOsB,CAAA,IAAK;QAC9B,MAAMpD,QAAA;QAAA;QAAA,CAAApB,cAAA,GAAAE,CAAA,SAAWsD,IAAA,CAAKkD,IAAI,CAAC,CAAClC,CAAA,GAAI+B,OAAM,KAAM,IAAI,CAACnB,CAAA,GAAIoB,OAAM,KAAM;QACjE,MAAMK,cAAA;QAAA;QAAA,CAAA7G,cAAA,GAAAE,CAAA,SAAiBsD,IAAA,CAAK3C,GAAG,CAAC,GAAG,IAAIO,QAAC,GAAWuF,cAAA,GAAkBC,gBAAA;QAErE,MAAMjB,GAAA;QAAA;QAAA,CAAA3F,cAAA,GAAAE,CAAA,SAAM,CAACkF,CAAA,GAAIlC,KAAA,GAAQsB,CAAA,IAAK;QAAA;QAAAxE,cAAA,GAAAE,CAAA;QAC9B+C,IAAI,CAAC0C,GAAA,CAAI,IAAIkB,cAAA,EAAwB;QAAA;QAAA7G,cAAA,GAAAE,CAAA;QACrC+C,IAAI,CAAC0C,GAAA,GAAM,EAAE,IAAIkB,cAAA,EAAoB;QAAA;QAAA7G,cAAA,GAAAE,CAAA;QACrC+C,IAAI,CAAC0C,GAAA,GAAM,EAAE,IAAIkB,cAAA,EAAoB;MACvC;IACF;IAAA;IAAA7G,cAAA,GAAAE,CAAA;IAEA,OAAO4C,SAAA;EACT;EAEA;;;EAGAgE,YAAYC,YAA0B,EAAEC,eAA2B,EAAgB;IAAA;IAAAhH,cAAA,GAAAC,CAAA;IACjF,MAAMgH,SAAA;IAAA;IAAA,CAAAjH,cAAA,GAAAE,CAAA,SAAYgH,WAAA,CAAYC,GAAG;IAAA;IAAAnH,cAAA,GAAAE,CAAA;IAEjC,IAAI;MACF,MAAM4C,SAAA;MAAA;MAAA,CAAA9C,cAAA,GAAAE,CAAA;MAAY;MAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAiD,eAAA;MAAA;MAAA,CAAAhH,cAAA,GAAA+D,CAAA,WAAmB,IAAI,CAACtB,gBAAgB;MAAA;MAAAzC,cAAA,GAAAE,CAAA;MAC1D,IAAI,CAAC4C,SAAA,EAAW;QAAA;QAAA9C,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QACd,OAAO;UACLkH,OAAA,EAAS;UACTC,KAAA,EAAO;UACPC,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;QACtC;MACF;MAAA;MAAA;QAAAjH,cAAA,GAAA+D,CAAA;MAAA;MAEA;MACA,MAAMwD,aAAA;MAAA;MAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAgB,IAAI6C,SAAA,CACxB,IAAIC,iBAAA,CAAkBF,SAAA,CAAUG,IAAI,GACpCH,SAAA,CAAUI,KAAK,EACfJ,SAAA,CAAUK,MAAM;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MAGlB,IAAI,CAAC6G,YAAA,CAAaS,OAAO,EAAE;QAAA;QAAAxH,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QACzB,OAAO;UACLkH,OAAA,EAAS;UACTK,kBAAA,EAAoBF,aAAA;UACpBD,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;QACtC;MACF;MAAA;MAAA;QAAAjH,cAAA,GAAA+D,CAAA;MAAA;MAEA;MACA,IAAI2D,MAAA;MACJ,MAAMC,MAAA;MAAA;MAAA,CAAA3H,cAAA,GAAAE,CAAA,SAAS6G,YAAA,CAAaa,UAAU;MAAA;MAAA5H,cAAA,GAAAE,CAAA;MAEtC,QAAQ6G,YAAA,CAAarG,IAAI;QACvB;UAAA;UAAAV,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACtE,eAAe,CAACmE,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnH,MAAM,EAAEG,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACrE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACjE,aAAa,CAAC8D,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnH,MAAM,EAAEG,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACnE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAAC/D,eAAe,CAAC4D,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnH,MAAM,EAAEG,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACrE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACzD,aAAa,CAACsD,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAO3G,KAAK,EAAEL,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UAClE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAAC3C,SAAS,CAACwC,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOxG,MAAM,EAAER,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UAC/D;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAAC9B,YAAY,CAAC2B,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnH,MAAM,EAAEG,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UAClE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAAC1B,UAAU,CAACuB,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnH,MAAM,EAAEG,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UAChE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACtB,cAAc,CAACmB,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOnG,MAAM,EAAEb,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UACpE;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACrB,WAAW,CAACkB,aAAA;UAAA;UAAAvH,cAAA,GAAAE,CAAA;UAC1B;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAAS,IAAI,CAACpB,aAAa,CAACiB,aAAA;UAAe;UAAA,CAAAvH,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOjG,QAAQ,EAAEf,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAI;UAAA,CAAA/D,cAAA,GAAA+D,CAAA,WAAA4D,MAAA,CAAOpG,IAAI,EAAEZ,KAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+D,CAAA,WAAS;UAAA;UAAA/D,cAAA,GAAAE,CAAA;UAC/F;QACF;UAAA;UAAAF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACEwH,MAAA,GAASH,aAAA;UAAA;UAAAvH,cAAA,GAAAE,CAAA;UACT2H,OAAA,CAAQC,IAAI,CAAC,eAAef,YAAA,CAAarG,IAAI,kBAAkB;MACnE;MAEA;MAAA;MAAAV,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAAgD,YAAA,CAAagB,OAAO,GAAG;MAAA;MAAA,CAAA/H,cAAA,GAAA+D,CAAA,WAAKiD,eAAA,GAAiB;QAAA;QAAAhH,cAAA,GAAA+D,CAAA;QAC/C,MAAMiE,YAAA;QAAA;QAAA,CAAAhI,cAAA,GAAAE,CAAA,SAAe8G,eAAA,CAAgB/D,IAAI;QACzC,MAAMgF,YAAA;QAAA;QAAA,CAAAjI,cAAA,GAAAE,CAAA,SAAewH,MAAA,CAAOzE,IAAI;QAAA;QAAAjD,cAAA,GAAAE,CAAA;QAEhC,KAAK,IAAIoD,CAAA;QAAA;QAAA,CAAAtD,cAAA,GAAAE,CAAA,SAAI,IAAGoD,CAAA,GAAI0E,YAAA,CAAazE,MAAM,EAAED,CAAA,IAAK,GAAG;UAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC/C+H,YAAY,CAAC3E,CAAA,CAAE,GAAG0E,YAAY,CAAC1E,CAAA,CAAE,GAAGyD,YAAA,CAAagB,OAAO,IAAIE,YAAY,CAAC3E,CAAA,CAAE,GAAG0E,YAAY,CAAC1E,CAAA,CAAE,CAAD;UAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC5F+H,YAAY,CAAC3E,CAAA,GAAI,EAAE,GAAG0E,YAAY,CAAC1E,CAAA,GAAI,EAAE,GAAGyD,YAAA,CAAagB,OAAO,IAAIE,YAAY,CAAC3E,CAAA,GAAI,EAAE,GAAG0E,YAAY,CAAC1E,CAAA,GAAI,EAAE,CAAD;UAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC5G+H,YAAY,CAAC3E,CAAA,GAAI,EAAE,GAAG0E,YAAY,CAAC1E,CAAA,GAAI,EAAE,GAAGyD,YAAA,CAAagB,OAAO,IAAIE,YAAY,CAAC3E,CAAA,GAAI,EAAE,GAAG0E,YAAY,CAAC1E,CAAA,GAAI,EAAE,CAAD;QAC9G;MACF;MAAA;MAAA;QAAAtD,cAAA,GAAA+D,CAAA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAEA,OAAO;QACLkH,OAAA,EAAS;QACTK,kBAAA,EAAoBC,MAAA;QACpBJ,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;MACtC;IACF,EAAE,OAAOI,KAAA,EAAO;MAAA;MAAArH,cAAA,GAAAE,CAAA;MACd,OAAO;QACLkH,OAAA,EAAS;QACTC,KAAA,EAAOA,KAAA,YAAiBa,KAAA;QAAA;QAAA,CAAAlI,cAAA,GAAA+D,CAAA,WAAQsD,KAAA,CAAMc,OAAO;QAAA;QAAA,CAAAnI,cAAA,GAAA+D,CAAA,WAAG;QAChDuD,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;MACtC;IACF;EACF;EAEA;;;EAGAmB,iBAAiBC,OAAuB,EAAgB;IAAA;IAAArI,cAAA,GAAAC,CAAA;IACtD,MAAMgH,SAAA;IAAA;IAAA,CAAAjH,cAAA,GAAAE,CAAA,SAAYgH,WAAA,CAAYC,GAAG;IAAA;IAAAnH,cAAA,GAAAE,CAAA;IAEjC,IAAI,CAAC,IAAI,CAACsC,iBAAiB,EAAE;MAAA;MAAAxC,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MAC3B,OAAO;QACLkH,OAAA,EAAS;QACTC,KAAA,EAAO;QACPC,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;MACtC;IACF;IAAA;IAAA;MAAAjH,cAAA,GAAA+D,CAAA;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IAEA,IAAI;MACF,IAAIoI,WAAA;MAAA;MAAA,CAAAtI,cAAA,GAAAE,CAAA,SAAc,IAAI6C,SAAA,CACpB,IAAIC,iBAAA,CAAkB,IAAI,CAACR,iBAAiB,CAACS,IAAI,GACjD,IAAI,CAACT,iBAAiB,CAACU,KAAK,EAC5B,IAAI,CAACV,iBAAiB,CAACW,MAAM;MAG/B;MACA,MAAMoF,cAAA;MAAA;MAAA,CAAAvI,cAAA,GAAAE,CAAA,SAAiBmI,OAAA,CAAQG,MAAM,CAACvI,CAAA,IAAK;QAAA;QAAAD,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAD,CAAA,CAAEuH,OAAO;MAAP,CAAO;MAAA;MAAAxH,cAAA,GAAAE,CAAA;MAEpD,KAAK,MAAMsI,MAAA,IAAUD,cAAA,EAAgB;QACnC,MAAMb,MAAA;QAAA;QAAA,CAAA1H,cAAA,GAAAE,CAAA,SAAS,IAAI,CAAC4G,WAAW,CAAC0B,MAAA,EAAQF,WAAA;QAAA;QAAAtI,cAAA,GAAAE,CAAA;QACxC;QAAI;QAAA,CAAAF,cAAA,GAAA+D,CAAA,YAAC2D,MAAA,CAAON,OAAO;QAAA;QAAA,CAAApH,cAAA,GAAA+D,CAAA,WAAI,CAAC2D,MAAA,CAAOD,kBAAkB,GAAE;UAAA;UAAAzH,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACjD,OAAO;YACLkH,OAAA,EAAS;YACTC,KAAA,EAAO,0BAA0BmB,MAAA,CAAO/H,IAAI,KAAKiH,MAAA,CAAOL,KAAK,EAAE;YAC/DC,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;UACtC;QACF;QAAA;QAAA;UAAAjH,cAAA,GAAA+D,CAAA;QAAA;QAAA/D,cAAA,GAAAE,CAAA;QACAoI,WAAA,GAAcZ,MAAA,CAAOD,kBAAkB;MACzC;MAAA;MAAAzH,cAAA,GAAAE,CAAA;MAEA,IAAI,CAACuC,gBAAgB,GAAG6F,WAAA;MAAA;MAAAtI,cAAA,GAAAE,CAAA;MAExB,OAAO;QACLkH,OAAA,EAAS;QACTK,kBAAA,EAAoBa,WAAA;QACpBhB,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;MACtC;IACF,EAAE,OAAOI,KAAA,EAAO;MAAA;MAAArH,cAAA,GAAAE,CAAA;MACd,OAAO;QACLkH,OAAA,EAAS;QACTC,KAAA,EAAOA,KAAA,YAAiBa,KAAA;QAAA;QAAA,CAAAlI,cAAA,GAAA+D,CAAA,WAAQsD,KAAA,CAAMc,OAAO;QAAA;QAAA,CAAAnI,cAAA,GAAA+D,CAAA,WAAG;QAChDuD,cAAA,EAAgBJ,WAAA,CAAYC,GAAG,KAAKF;MACtC;IACF;EACF;EAEA;;;EAGAwB,gBAAA,EAAwB;IAAA;IAAAzI,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtB,IAAI,IAAI,CAACsC,iBAAiB,EAAE;MAAA;MAAAxC,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MAC1B,IAAI,CAACuC,gBAAgB,GAAG,IAAIM,SAAA,CAC1B,IAAIC,iBAAA,CAAkB,IAAI,CAACR,iBAAiB,CAACS,IAAI,GACjD,IAAI,CAACT,iBAAiB,CAACU,KAAK,EAC5B,IAAI,CAACV,iBAAiB,CAACW,MAAM;IAEjC;IAAA;IAAA;MAAAnD,cAAA,GAAA+D,CAAA;IAAA;EACF;EAEA;;;EAGA2E,oBAAA,EAAwC;IAAA;IAAA1I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtC,OAAO,IAAI,CAACuC,gBAAgB;EAC9B;EAEA;;;EAGAkG,eAAA,EAAuB;IAAA;IAAA3I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrB,IAAI,IAAI,CAACuC,gBAAgB,EAAE;MAAA;MAAAzC,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MACzB,IAAI,CAACyC,GAAG,CAACiG,YAAY,CAAC,IAAI,CAACnG,gBAAgB,EAAE,GAAG;IAClD;IAAA;IAAA;MAAAzC,cAAA,GAAA+D,CAAA;IAAA;EACF;AACF;AAKO,MAAM5D,mBAAA;EAGXmC,YAAA,EAAc;IAAA;IAAAtC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAFN2I,OAAA,GAAqC,IAAIC,GAAA;IAAA;IAAA9I,cAAA,GAAAE,CAAA;IAG/C,IAAI,CAAC6I,wBAAwB;EAC/B;EAEA;;;EAGAA,wBAAQA,CAAA,EAAiC;IAAA;IAAA/I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvC;IACA,IAAI,CAAC8I,SAAS,CAAC;MACbC,EAAA,EAAI;MACJxI,IAAA,EAAM;MACNM,WAAA,EAAa;MACbmI,QAAA,EAAU;MACVC,IAAA,EAAM,CAAC,WAAW,SAAS,OAAO;MAClCd,OAAA,EAAS,CACP,IAAI,CAACe,kBAAkB,UAAmB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,SAAkB,CAACS,MAAM;UAAEG,KAAA,EAAO;QAAG;MAAE,IACzH,IAAI,CAACyI,kBAAkB,aAAsB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,YAAqB,CAACS,MAAM;UAAEG,KAAA,EAAO,CAAC;QAAG;MAAE,IAChI,IAAI,CAACyI,kBAAkB,eAAwB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,cAAuB,CAACS,MAAM;UAAEG,KAAA,EAAO,CAAC;QAAG;MAAE,IACpI,IAAI,CAACyI,kBAAkB,aAAsB;QAC3C1H,QAAA,EAAU;UAAE,GAAG3B,yBAAyB,YAAqB,CAAC2B,QAAQ;UAAEf,KAAA,EAAO;QAAG;QAClFY,IAAA,EAAM;UAAE,GAAGxB,yBAAyB,YAAqB,CAACwB,IAAI;UAAEZ,KAAA,EAAO;QAAG;MAC5E;IAEJ;IAEA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC8I,SAAS,CAAC;MACbC,EAAA,EAAI;MACJxI,IAAA,EAAM;MACNM,WAAA,EAAa;MACbmI,QAAA,EAAU;MACVC,IAAA,EAAM,CAAC,MAAM,cAAc,UAAU;MACrCd,OAAA,EAAS,CACP,IAAI,CAACe,kBAAkB,cAAuB;QAAE5H,MAAA,EAAQ;UAAE,GAAGzB,yBAAyB,aAAsB,CAACyB,MAAM;UAAEb,KAAA,EAAO;QAAY;MAAE,IAC1I,IAAI,CAACyI,kBAAkB,aAAsB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,YAAqB,CAACS,MAAM;UAAEG,KAAA,EAAO;QAAG;MAAE;IAEnI;IAEA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC8I,SAAS,CAAC;MACbC,EAAA,EAAI;MACJxI,IAAA,EAAM;MACNM,WAAA,EAAa;MACbmI,QAAA,EAAU;MACVC,IAAA,EAAM,CAAC,YAAY,YAAY,OAAO;MACtCd,OAAA,EAAS,CACP,IAAI,CAACe,kBAAkB,aAAsB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,YAAqB,CAACS,MAAM;UAAEG,KAAA,EAAO;QAAG;MAAE,IAC/H,IAAI,CAACyI,kBAAkB,eAAwB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,cAAuB,CAACS,MAAM;UAAEG,KAAA,EAAO;QAAG;MAAE,IACnI,IAAI,CAACyI,kBAAkB,YAAqB;QAAE5I,MAAA,EAAQ;UAAE,GAAGT,yBAAyB,WAAoB,CAACS,MAAM;UAAEG,KAAA,EAAO;QAAG;MAAE;IAEjI;EACF;EAEA;;;EAGAyI,kBAAQA,CAAmB1I,IAAgB,EAAEiH,MAAuC,EAAgB;IAAA;IAAA3H,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClG,OAAO;MACL+I,EAAA,EAAI,UAAUvI,IAAA,IAAQ2I,IAAA,CAAKlC,GAAG,IAAI;MAClCzG,IAAA;MACAD,IAAA,EAAMC,IAAA,CAAK4I,MAAM,CAAC,GAAGC,WAAW,KAAK7I,IAAA,CAAK8I,KAAK,CAAC;MAChDzI,WAAA,EAAa,GAAGL,IAAA,SAAa;MAC7BkH,UAAA,EAAY;QAAE,GAAG7H,yBAAyB,CAACW,IAAA,CAAK;QAAE,GAAGiH;MAAO;MAC5DH,OAAA,EAAS;MACTO,OAAA,EAAS;MACT0B,SAAA,EAAWC,YAAA,CAAAC,SAAS,CAACC;IACvB;EACF;EAEA;;;EAGAZ,UAAUa,MAAoB,EAAQ;IAAA;IAAA7J,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpC,IAAI,CAAC2I,OAAO,CAACiB,GAAG,CAACD,MAAA,CAAOZ,EAAE,EAAEY,MAAA;EAC9B;EAEA;;;EAGAE,UAAUd,EAAU,EAA4B;IAAA;IAAAjJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9C,OAAO,IAAI,CAAC2I,OAAO,CAACmB,GAAG,CAACf,EAAA;EAC1B;EAEA;;;EAGAgB,cAAA,EAAgC;IAAA;IAAAjK,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9B,OAAOgK,KAAA,CAAMC,IAAI,CAAC,IAAI,CAACtB,OAAO,CAACuB,MAAM;EACvC;EAEA;;;EAGAC,qBAAqBnB,QAAgB,EAAkB;IAAA;IAAAlJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrD,OAAO,IAAI,CAAC+J,aAAa,GAAGzB,MAAM,CAACqB,MAAA,IAAU;MAAA;MAAA7J,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAA2J,MAAA,CAAOX,QAAQ,KAAKA,QAAA;IAAA;EACnE;EAEA;;;EAGAoB,cAAcC,KAAa,EAAkB;IAAA;IAAAvK,cAAA,GAAAC,CAAA;IAC3C,MAAMuK,UAAA;IAAA;IAAA,CAAAxK,cAAA,GAAAE,CAAA,SAAaqK,KAAA,CAAME,WAAW;IAAA;IAAAzK,cAAA,GAAAE,CAAA;IACpC,OAAO,IAAI,CAAC+J,aAAa,GAAGzB,MAAM,CAACqB,MAAA,IACjC;MAAA;MAAA7J,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAA+D,CAAA,WAAA8F,MAAA,CAAOpJ,IAAI,CAACgK,WAAW,GAAGC,QAAQ,CAACF,UAAA;MAAA;MAAA,CAAAxK,cAAA,GAAA+D,CAAA,WACnC8F,MAAA,CAAO9I,WAAW,CAAC0J,WAAW,GAAGC,QAAQ,CAACF,UAAA;MAAA;MAAA,CAAAxK,cAAA,GAAA+D,CAAA,WAC1C8F,MAAA,CAAOV,IAAI,CAACwB,IAAI,CAACC,GAAA,IAAO;QAAA;QAAA5K,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAA0K,GAAA,CAAIH,WAAW,GAAGC,QAAQ,CAACF,UAAA;MAAA;IAAA;EAEvD;EAEA;;;EAGAK,aAAa5B,EAAU,EAAW;IAAA;IAAAjJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAChC,OAAO,IAAI,CAAC2I,OAAO,CAACiC,MAAM,CAAC7B,EAAA;EAC7B;AACF;AAKO,SAAS1I,wBAAwBgC,aAA4B;EAAA;EAAAvC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAClE,OAAO,IAAIG,iBAAA,CAAkBkC,aAAA;AAC/B;AAKO,SAASjC,0BAAA;EAAA;EAAAN,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACd,OAAO,IAAIC,mBAAA;AACb","ignoreList":[]}