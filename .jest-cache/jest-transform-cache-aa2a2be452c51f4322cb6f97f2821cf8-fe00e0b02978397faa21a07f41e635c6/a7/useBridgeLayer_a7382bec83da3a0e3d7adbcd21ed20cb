6b867fd3c587e0bde0945e12dd42859c
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useBridgeLayer: function() {
        return useBridgeLayer;
    },
    useSimpleTryon: function() {
        return useSimpleTryon;
    },
    useTryonWithProgress: function() {
        return useTryonWithProgress;
    }
});
const _react = require("react");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _useImageUpload = require("./useImageUpload");
const _index = require("./index");
/**
 * Default bridge layer configuration
 */ const DEFAULT_BRIDGE_CONFIG = {
    workflow: {
        timeoutMs: 60000,
        compressionLimitKB: 2048,
        autoRetry: false,
        maxRetries: 3,
        debug: process.env.NODE_ENV === 'development'
    },
    upload: {
        maxSizeBytes: 10 * 1024 * 1024,
        allowedTypes: [
            'image/jpeg',
            'image/png',
            'image/webp'
        ],
        generateThumbnails: true,
        thumbnailSizes: [
            150,
            300
        ],
        enableDragDrop: true,
        autoProcess: false,
        validation: {
            minWidth: 256,
            minHeight: 256,
            maxWidth: 4096,
            maxHeight: 4096
        }
    },
    ui: {
        autoHideMessages: true,
        messageTimeoutMs: 5000,
        enableShare: true,
        enableDownload: true,
        showDetailedProgress: true
    },
    callbacks: {}
};
function useBridgeLayer(config = {}) {
    const finalConfig = {
        ...DEFAULT_BRIDGE_CONFIG,
        ...config
    };
    const { showToast } = (0, _index.useToast)();
    // Initialize underlying hooks
    const workflow = (0, _useTryonWorkflow.useTryonWorkflow)(finalConfig.workflow, showToast);
    const userUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleUserFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    const apparelUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleApparelFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    // Simplified state mapping
    const simplifiedState = {
        // Core UI state
        isLoading: workflow.isCapturing || userUpload.uploadState === 'processing' || apparelUpload.uploadState === 'processing',
        isReady: workflow.canGenerate(),
        showResult: workflow.showPolaroid,
        // User feedback
        resultImage: workflow.generatedImage,
        errorMessage: workflow.error?.message || null,
        successMessage: workflow.generatedImage ? 'Try-on generated successfully!' : null,
        // Upload state
        hasUserImage: !!workflow.userImageFile || !!userUpload.file,
        hasApparelImage: !!workflow.apparelImageFile || !!apparelUpload.file,
        userImagePreview: workflow.leftCardImage || userUpload.file?.preview || null,
        apparelImagePreview: workflow.rightCardImage || apparelUpload.file?.preview || null,
        // Progress
        progress: workflow.progress,
        progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),
        // Interaction state
        canGenerate: workflow.canGenerate(),
        canRetry: workflow.hasError && workflow.error?.retryable === true,
        canReset: workflow.workflowState !== 'idle' || !!userUpload.file || !!apparelUpload.file
    };
    // Simplified actions
    const simplifiedActions = {
        // File upload actions
        uploadUserImage: (0, _react.useCallback)(async (file)=>{
            try {
                await userUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('User image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload user image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            userUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        uploadApparelImage: (0, _react.useCallback)(async (file)=>{
            try {
                await apparelUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('Apparel image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload apparel image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            apparelUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        removeUserImage: (0, _react.useCallback)(()=>{
            userUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            userUpload,
            workflow
        ]),
        removeApparelImage: (0, _react.useCallback)(()=>{
            apparelUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            apparelUpload,
            workflow
        ]),
        // Generation actions
        generate: (0, _react.useCallback)(async ()=>{
            try {
                finalConfig.callbacks.onGenerationStart?.();
                await workflow.startGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to generate try-on';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        retry: (0, _react.useCallback)(async ()=>{
            try {
                await workflow.retryGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to retry generation';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        reset: (0, _react.useCallback)(()=>{
            workflow.resetWorkflow();
            userUpload.clearFiles();
            apparelUpload.clearFiles();
        }, [
            workflow,
            userUpload,
            apparelUpload
        ]),
        // UI actions
        hideResult: (0, _react.useCallback)(()=>{
            workflow.closePolaroid();
        }, [
            workflow
        ]),
        clearError: (0, _react.useCallback)(()=>{
            workflow.clearError();
        }, [
            workflow
        ]),
        downloadResult: (0, _react.useCallback)(()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableDownload) return;
            try {
                const link = document.createElement('a');
                link.href = workflow.generatedImage;
                link.download = `tryon-result-${Date.now()}.png`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showToast('Image downloaded successfully', 'success');
            } catch (error) {
                showToast('Failed to download image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableDownload,
            showToast
        ]),
        shareResult: (0, _react.useCallback)(async ()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableShare) return;
            try {
                if (navigator.share) {
                    // Use native share API if available
                    const response = await fetch(workflow.generatedImage);
                    const blob = await response.blob();
                    const file = new File([
                        blob
                    ], 'tryon-result.png', {
                        type: 'image/png'
                    });
                    await navigator.share({
                        title: 'My Try-On Result',
                        text: 'Check out my virtual try-on!',
                        files: [
                            file
                        ]
                    });
                } else {
                    // Fallback to copying URL
                    await navigator.clipboard.writeText(workflow.generatedImage);
                    showToast('Image URL copied to clipboard', 'success');
                }
            } catch (error) {
                showToast('Failed to share image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableShare,
            showToast
        ])
    };
    return {
        state: simplifiedState,
        actions: simplifiedActions,
        advanced: {
            workflow,
            uploads: {
                user: userUpload,
                apparel: apparelUpload
            }
        }
    };
}
/**
 * Helper function to generate user-friendly progress messages
 */ function getProgressMessage(workflowState, progress) {
    switch(workflowState){
        case 'idle':
            return 'Ready to generate';
        case 'uploading':
            return 'Uploading images...';
        case 'processing':
            return 'Processing images...';
        case 'generating':
            if (progress < 30) return 'Preparing images...';
            if (progress < 80) return 'Generating try-on...';
            return 'Finalizing result...';
        case 'complete':
            return 'Generation complete!';
        case 'error':
            return 'Generation failed';
        default:
            return `Processing... ${progress}%`;
    }
}
function useSimpleTryon(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        // Minimal state for simple components
        isLoading: state.isLoading,
        result: state.resultImage,
        error: state.errorMessage,
        canGenerate: state.canGenerate,
        // Essential actions
        uploadUserImage: actions.uploadUserImage,
        uploadApparelImage: actions.uploadApparelImage,
        generate: actions.generate,
        reset: actions.reset
    };
}
function useTryonWithProgress(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        ...state,
        ...actions,
        // Additional progress information
        uploadProgress: {
            user: state.hasUserImage ? 100 : 0,
            apparel: state.hasApparelImage ? 100 : 0
        },
        overallProgress: calculateOverallProgress(state)
    };
}
/**
 * Helper function to calculate overall progress
 */ function calculateOverallProgress(state) {
    let progress = 0;
    // Upload progress (40% of total)
    if (state.hasUserImage) progress += 20;
    if (state.hasApparelImage) progress += 20;
    // Generation progress (60% of total)
    if (state.isLoading || state.progress > 0) {
        progress += state.progress * 0.6;
    }
    if (state.resultImage) progress = 100;
    return Math.round(progress);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2hvb2tzL3VzZUJyaWRnZUxheWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuLy8gQnJpZGdlIExheWVyIENvbXBvbmVudCBJbnRlcmZhY2VzXG4vLyBDbGVhbiwgZGVjbGFyYXRpdmUgQVBJcyB0aGF0IGhpZGUgYnVzaW5lc3MgbG9naWMgY29tcGxleGl0eSBmcm9tIFJlYWN0IGNvbXBvbmVudHNcblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUcnlvbldvcmtmbG93LCB0eXBlIFdvcmtmbG93Q29uZmlnLCB0eXBlIFRyeW9uV29ya2Zsb3dTdGF0ZSwgdHlwZSBUcnlvbldvcmtmbG93QWN0aW9ucyB9IGZyb20gJy4vdXNlVHJ5b25Xb3JrZmxvdyc7XG5pbXBvcnQgeyB1c2VJbWFnZVVwbG9hZCwgdXNlU2luZ2xlSW1hZ2VVcGxvYWQsIHR5cGUgVXBsb2FkQ29uZmlnLCB0eXBlIFVwbG9hZGVkRmlsZSwgdHlwZSBVcGxvYWRFcnJvciB9IGZyb20gJy4vdXNlSW1hZ2VVcGxvYWQnO1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICcuL2luZGV4JztcblxuLyoqXG4gKiBTaW1wbGlmaWVkIGNvbXBvbmVudCBzdGF0ZSBpbnRlcmZhY2VcbiAqIEFic3RyYWN0cyBhd2F5IGNvbXBsZXggYnVzaW5lc3MgbG9naWMgYW5kIHByb3ZpZGVzIG9ubHkgd2hhdCBVSSBjb21wb25lbnRzIG5lZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaW1wbGlmaWVkVHJ5b25TdGF0ZSB7XG4gIC8vIENvcmUgVUkgc3RhdGVcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBpc1JlYWR5OiBib29sZWFuO1xuICBzaG93UmVzdWx0OiBib29sZWFuO1xuICBcbiAgLy8gVXNlciBmZWVkYmFja1xuICByZXN1bHRJbWFnZTogc3RyaW5nIHwgbnVsbDtcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xuICBzdWNjZXNzTWVzc2FnZTogc3RyaW5nIHwgbnVsbDtcbiAgXG4gIC8vIFVwbG9hZCBzdGF0ZVxuICBoYXNVc2VySW1hZ2U6IGJvb2xlYW47XG4gIGhhc0FwcGFyZWxJbWFnZTogYm9vbGVhbjtcbiAgdXNlckltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcbiAgYXBwYXJlbEltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcbiAgXG4gIC8vIFByb2dyZXNzXG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIHByb2dyZXNzTWVzc2FnZTogc3RyaW5nO1xuICBcbiAgLy8gSW50ZXJhY3Rpb24gc3RhdGVcbiAgY2FuR2VuZXJhdGU6IGJvb2xlYW47XG4gIGNhblJldHJ5OiBib29sZWFuO1xuICBjYW5SZXNldDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBTaW1wbGlmaWVkIGNvbXBvbmVudCBhY3Rpb25zIGludGVyZmFjZVxuICogUHJvdmlkZXMgY2xlYW4sIHNlbWFudGljIGFjdGlvbnMgZm9yIFVJIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaW1wbGlmaWVkVHJ5b25BY3Rpb25zIHtcbiAgLy8gRmlsZSB1cGxvYWQgYWN0aW9uc1xuICB1cGxvYWRVc2VySW1hZ2U6IChmaWxlOiBGaWxlKSA9PiBQcm9taXNlPHZvaWQ+O1xuICB1cGxvYWRBcHBhcmVsSW1hZ2U6IChmaWxlOiBGaWxlKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZW1vdmVVc2VySW1hZ2U6ICgpID0+IHZvaWQ7XG4gIHJlbW92ZUFwcGFyZWxJbWFnZTogKCkgPT4gdm9pZDtcbiAgXG4gIC8vIEdlbmVyYXRpb24gYWN0aW9uc1xuICBnZW5lcmF0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgcmV0cnk6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHJlc2V0OiAoKSA9PiB2b2lkO1xuICBcbiAgLy8gVUkgYWN0aW9uc1xuICBoaWRlUmVzdWx0OiAoKSA9PiB2b2lkO1xuICBjbGVhckVycm9yOiAoKSA9PiB2b2lkO1xuICBkb3dubG9hZFJlc3VsdDogKCkgPT4gdm9pZDtcbiAgc2hhcmVSZXN1bHQ6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHNpbXBsaWZpZWQgYnJpZGdlIGxheWVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJpZGdlTGF5ZXJDb25maWcge1xuICAvLyBXb3JrZmxvdyBjb25maWd1cmF0aW9uXG4gIHdvcmtmbG93PzogV29ya2Zsb3dDb25maWc7XG4gIFxuICAvLyBVcGxvYWQgY29uZmlndXJhdGlvblxuICB1cGxvYWQ/OiBVcGxvYWRDb25maWc7XG4gIFxuICAvLyBVSSBiZWhhdmlvclxuICB1aT86IHtcbiAgICBhdXRvSGlkZU1lc3NhZ2VzPzogYm9vbGVhbjtcbiAgICBtZXNzYWdlVGltZW91dE1zPzogbnVtYmVyO1xuICAgIGVuYWJsZVNoYXJlPzogYm9vbGVhbjtcbiAgICBlbmFibGVEb3dubG9hZD86IGJvb2xlYW47XG4gICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M/OiBib29sZWFuO1xuICB9O1xuICBcbiAgLy8gQ2FsbGJhY2tzXG4gIGNhbGxiYWNrcz86IHtcbiAgICBvbkdlbmVyYXRpb25TdGFydD86ICgpID0+IHZvaWQ7XG4gICAgb25HZW5lcmF0aW9uQ29tcGxldGU/OiAoaW1hZ2VVcmw6IHN0cmluZykgPT4gdm9pZDtcbiAgICBvbkVycm9yPzogKGVycm9yOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgb25TdWNjZXNzPzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZWZhdWx0IGJyaWRnZSBsYXllciBjb25maWd1cmF0aW9uXG4gKi9cbmNvbnN0IERFRkFVTFRfQlJJREdFX0NPTkZJRzogUmVxdWlyZWQ8QnJpZGdlTGF5ZXJDb25maWc+ID0ge1xuICB3b3JrZmxvdzoge1xuICAgIHRpbWVvdXRNczogNjAwMDAsXG4gICAgY29tcHJlc3Npb25MaW1pdEtCOiAyMDQ4LFxuICAgIGF1dG9SZXRyeTogZmFsc2UsXG4gICAgbWF4UmV0cmllczogMyxcbiAgICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbiAgfSxcbiAgdXBsb2FkOiB7XG4gICAgbWF4U2l6ZUJ5dGVzOiAxMCAqIDEwMjQgKiAxMDI0LFxuICAgIGFsbG93ZWRUeXBlczogWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZycsICdpbWFnZS93ZWJwJ10sXG4gICAgZ2VuZXJhdGVUaHVtYm5haWxzOiB0cnVlLFxuICAgIHRodW1ibmFpbFNpemVzOiBbMTUwLCAzMDBdLFxuICAgIGVuYWJsZURyYWdEcm9wOiB0cnVlLFxuICAgIGF1dG9Qcm9jZXNzOiBmYWxzZSxcbiAgICB2YWxpZGF0aW9uOiB7XG4gICAgICBtaW5XaWR0aDogMjU2LFxuICAgICAgbWluSGVpZ2h0OiAyNTYsXG4gICAgICBtYXhXaWR0aDogNDA5NixcbiAgICAgIG1heEhlaWdodDogNDA5NlxuICAgIH1cbiAgfSxcbiAgdWk6IHtcbiAgICBhdXRvSGlkZU1lc3NhZ2VzOiB0cnVlLFxuICAgIG1lc3NhZ2VUaW1lb3V0TXM6IDUwMDAsXG4gICAgZW5hYmxlU2hhcmU6IHRydWUsXG4gICAgZW5hYmxlRG93bmxvYWQ6IHRydWUsXG4gICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M6IHRydWVcbiAgfSxcbiAgY2FsbGJhY2tzOiB7fVxufTtcblxuLyoqXG4gKiBNYWluIGJyaWRnZSBsYXllciBob29rIHRoYXQgcHJvdmlkZXMgc2ltcGxpZmllZCBpbnRlcmZhY2UgZm9yIFVJIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJyaWRnZUxheWVyKGNvbmZpZzogQnJpZGdlTGF5ZXJDb25maWcgPSB7fSk6IHtcbiAgc3RhdGU6IFNpbXBsaWZpZWRUcnlvblN0YXRlO1xuICBhY3Rpb25zOiBTaW1wbGlmaWVkVHJ5b25BY3Rpb25zO1xuICBhZHZhbmNlZDoge1xuICAgIHdvcmtmbG93OiBUcnlvbldvcmtmbG93U3RhdGUgJiBUcnlvbldvcmtmbG93QWN0aW9ucztcbiAgICB1cGxvYWRzOiB7XG4gICAgICB1c2VyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTaW5nbGVJbWFnZVVwbG9hZD47XG4gICAgICBhcHBhcmVsOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTaW5nbGVJbWFnZVVwbG9hZD47XG4gICAgfTtcbiAgfTtcbn0ge1xuICBjb25zdCBmaW5hbENvbmZpZyA9IHsgLi4uREVGQVVMVF9CUklER0VfQ09ORklHLCAuLi5jb25maWcgfTtcbiAgY29uc3QgeyBzaG93VG9hc3QgfSA9IHVzZVRvYXN0KCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB1bmRlcmx5aW5nIGhvb2tzXG4gIGNvbnN0IHdvcmtmbG93ID0gdXNlVHJ5b25Xb3JrZmxvdyhcbiAgICBmaW5hbENvbmZpZy53b3JrZmxvdyxcbiAgICBzaG93VG9hc3RcbiAgKTtcblxuICBjb25zdCB1c2VyVXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoXG4gICAgZmluYWxDb25maWcudXBsb2FkLFxuICAgIChmaWxlOiBVcGxvYWRlZEZpbGUpID0+IHtcbiAgICAgIHdvcmtmbG93LmhhbmRsZVVzZXJGaWxlVXBsb2FkKGZpbGUuZmlsZSk7XG4gICAgfSxcbiAgICAoZXJyb3I6IFVwbG9hZEVycm9yKSA9PiB7XG4gICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2hvd1RvYXN0KGVycm9yLm1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBhcHBhcmVsVXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoXG4gICAgZmluYWxDb25maWcudXBsb2FkLFxuICAgIChmaWxlOiBVcGxvYWRlZEZpbGUpID0+IHtcbiAgICAgIHdvcmtmbG93LmhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkKGZpbGUuZmlsZSk7XG4gICAgfSxcbiAgICAoZXJyb3I6IFVwbG9hZEVycm9yKSA9PiB7XG4gICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2hvd1RvYXN0KGVycm9yLm1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH1cbiAgKTtcblxuICAvLyBTaW1wbGlmaWVkIHN0YXRlIG1hcHBpbmdcbiAgY29uc3Qgc2ltcGxpZmllZFN0YXRlOiBTaW1wbGlmaWVkVHJ5b25TdGF0ZSA9IHtcbiAgICAvLyBDb3JlIFVJIHN0YXRlXG4gICAgaXNMb2FkaW5nOiB3b3JrZmxvdy5pc0NhcHR1cmluZyB8fCBcbiAgICAgICAgICAgICAgIHVzZXJVcGxvYWQudXBsb2FkU3RhdGUgPT09ICdwcm9jZXNzaW5nJyB8fCBcbiAgICAgICAgICAgICAgIGFwcGFyZWxVcGxvYWQudXBsb2FkU3RhdGUgPT09ICdwcm9jZXNzaW5nJyxcbiAgICBpc1JlYWR5OiB3b3JrZmxvdy5jYW5HZW5lcmF0ZSgpLFxuICAgIHNob3dSZXN1bHQ6IHdvcmtmbG93LnNob3dQb2xhcm9pZCxcbiAgICBcbiAgICAvLyBVc2VyIGZlZWRiYWNrXG4gICAgcmVzdWx0SW1hZ2U6IHdvcmtmbG93LmdlbmVyYXRlZEltYWdlLFxuICAgIGVycm9yTWVzc2FnZTogd29ya2Zsb3cuZXJyb3I/Lm1lc3NhZ2UgfHwgbnVsbCxcbiAgICBzdWNjZXNzTWVzc2FnZTogd29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UgPyAnVHJ5LW9uIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkhJyA6IG51bGwsXG4gICAgXG4gICAgLy8gVXBsb2FkIHN0YXRlXG4gICAgaGFzVXNlckltYWdlOiAhIXdvcmtmbG93LnVzZXJJbWFnZUZpbGUgfHwgISF1c2VyVXBsb2FkLmZpbGUsXG4gICAgaGFzQXBwYXJlbEltYWdlOiAhIXdvcmtmbG93LmFwcGFyZWxJbWFnZUZpbGUgfHwgISFhcHBhcmVsVXBsb2FkLmZpbGUsXG4gICAgdXNlckltYWdlUHJldmlldzogd29ya2Zsb3cubGVmdENhcmRJbWFnZSB8fCB1c2VyVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcbiAgICBhcHBhcmVsSW1hZ2VQcmV2aWV3OiB3b3JrZmxvdy5yaWdodENhcmRJbWFnZSB8fCBhcHBhcmVsVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcbiAgICBcbiAgICAvLyBQcm9ncmVzc1xuICAgIHByb2dyZXNzOiB3b3JrZmxvdy5wcm9ncmVzcyxcbiAgICBwcm9ncmVzc01lc3NhZ2U6IGdldFByb2dyZXNzTWVzc2FnZSh3b3JrZmxvdy53b3JrZmxvd1N0YXRlLCB3b3JrZmxvdy5wcm9ncmVzcyksXG4gICAgXG4gICAgLy8gSW50ZXJhY3Rpb24gc3RhdGVcbiAgICBjYW5HZW5lcmF0ZTogd29ya2Zsb3cuY2FuR2VuZXJhdGUoKSxcbiAgICBjYW5SZXRyeTogd29ya2Zsb3cuaGFzRXJyb3IgJiYgd29ya2Zsb3cuZXJyb3I/LnJldHJ5YWJsZSA9PT0gdHJ1ZSxcbiAgICBjYW5SZXNldDogd29ya2Zsb3cud29ya2Zsb3dTdGF0ZSAhPT0gJ2lkbGUnIHx8ICEhdXNlclVwbG9hZC5maWxlIHx8ICEhYXBwYXJlbFVwbG9hZC5maWxlXG4gIH07XG5cbiAgLy8gU2ltcGxpZmllZCBhY3Rpb25zXG4gIGNvbnN0IHNpbXBsaWZpZWRBY3Rpb25zOiBTaW1wbGlmaWVkVHJ5b25BY3Rpb25zID0ge1xuICAgIC8vIEZpbGUgdXBsb2FkIGFjdGlvbnNcbiAgICB1cGxvYWRVc2VySW1hZ2U6IHVzZUNhbGxiYWNrKGFzeW5jIChmaWxlOiBGaWxlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB1c2VyVXBsb2FkLnVwbG9hZEZpbGUoZmlsZSk7XG4gICAgICAgIGlmIChmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcykge1xuICAgICAgICAgIHNob3dUb2FzdCgnVXNlciBpbWFnZSB1cGxvYWRlZCBzdWNjZXNzZnVsbHknLCAnc3VjY2VzcycpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHVwbG9hZCB1c2VyIGltYWdlJztcbiAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihtZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSwgW3VzZXJVcGxvYWQsIGZpbmFsQ29uZmlnLmNhbGxiYWNrcywgZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MsIHNob3dUb2FzdF0pLFxuXG4gICAgdXBsb2FkQXBwYXJlbEltYWdlOiB1c2VDYWxsYmFjayhhc3luYyAoZmlsZTogRmlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYXBwYXJlbFVwbG9hZC51cGxvYWRGaWxlKGZpbGUpO1xuICAgICAgICBpZiAoZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBzaG93VG9hc3QoJ0FwcGFyZWwgaW1hZ2UgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5JywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byB1cGxvYWQgYXBwYXJlbCBpbWFnZSc7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkVycm9yPy4obWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sIFthcHBhcmVsVXBsb2FkLCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHJlbW92ZVVzZXJJbWFnZTogdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdXNlclVwbG9hZC5jbGVhckZpbGVzKCk7XG4gICAgICB3b3JrZmxvdy5yZXNldFdvcmtmbG93KCk7XG4gICAgfSwgW3VzZXJVcGxvYWQsIHdvcmtmbG93XSksXG5cbiAgICByZW1vdmVBcHBhcmVsSW1hZ2U6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGFwcGFyZWxVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgICAgd29ya2Zsb3cucmVzZXRXb3JrZmxvdygpO1xuICAgIH0sIFthcHBhcmVsVXBsb2FkLCB3b3JrZmxvd10pLFxuXG4gICAgLy8gR2VuZXJhdGlvbiBhY3Rpb25zXG4gICAgZ2VuZXJhdGU6IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkdlbmVyYXRpb25TdGFydD8uKCk7XG4gICAgICAgIGF3YWl0IHdvcmtmbG93LnN0YXJ0R2VuZXJhdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHdvcmtmbG93LmdlbmVyYXRlZEltYWdlKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdUcnktb24gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSEnO1xuICAgICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkdlbmVyYXRpb25Db21wbGV0ZT8uKHdvcmtmbG93LmdlbmVyYXRlZEltYWdlKTtcbiAgICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25TdWNjZXNzPy4obWVzc2FnZSk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzKSB7XG4gICAgICAgICAgICBzaG93VG9hc3QobWVzc2FnZSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZ2VuZXJhdGUgdHJ5LW9uJztcbiAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihtZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSwgW3dvcmtmbG93LCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHJldHJ5OiB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB3b3JrZmxvdy5yZXRyeUdlbmVyYXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSkge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnVHJ5LW9uIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkhJztcbiAgICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25HZW5lcmF0aW9uQ29tcGxldGU/Lih3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSk7XG4gICAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uU3VjY2Vzcz8uKG1lc3NhZ2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcykge1xuICAgICAgICAgICAgc2hvd1RvYXN0KG1lc3NhZ2UsICdzdWNjZXNzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHJldHJ5IGdlbmVyYXRpb24nO1xuICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKG1lc3NhZ2UpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LCBbd29ya2Zsb3csIGZpbmFsQ29uZmlnLmNhbGxiYWNrcywgZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MsIHNob3dUb2FzdF0pLFxuXG4gICAgcmVzZXQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHdvcmtmbG93LnJlc2V0V29ya2Zsb3coKTtcbiAgICAgIHVzZXJVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgICAgYXBwYXJlbFVwbG9hZC5jbGVhckZpbGVzKCk7XG4gICAgfSwgW3dvcmtmbG93LCB1c2VyVXBsb2FkLCBhcHBhcmVsVXBsb2FkXSksXG5cbiAgICAvLyBVSSBhY3Rpb25zXG4gICAgaGlkZVJlc3VsdDogdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgd29ya2Zsb3cuY2xvc2VQb2xhcm9pZCgpO1xuICAgIH0sIFt3b3JrZmxvd10pLFxuXG4gICAgY2xlYXJFcnJvcjogdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgd29ya2Zsb3cuY2xlYXJFcnJvcigpO1xuICAgIH0sIFt3b3JrZmxvd10pLFxuXG4gICAgZG93bmxvYWRSZXN1bHQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmICghd29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UgfHwgIWZpbmFsQ29uZmlnLnVpLmVuYWJsZURvd25sb2FkKSByZXR1cm47XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGxpbmsuaHJlZiA9IHdvcmtmbG93LmdlbmVyYXRlZEltYWdlO1xuICAgICAgICBsaW5rLmRvd25sb2FkID0gYHRyeW9uLXJlc3VsdC0ke0RhdGUubm93KCl9LnBuZ2A7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgIGxpbmsuY2xpY2soKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICAgICAgXG4gICAgICAgIHNob3dUb2FzdCgnSW1hZ2UgZG93bmxvYWRlZCBzdWNjZXNzZnVsbHknLCAnc3VjY2VzcycpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2hvd1RvYXN0KCdGYWlsZWQgdG8gZG93bmxvYWQgaW1hZ2UnLCAnZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LCBbd29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UsIGZpbmFsQ29uZmlnLnVpLmVuYWJsZURvd25sb2FkLCBzaG93VG9hc3RdKSxcblxuICAgIHNoYXJlUmVzdWx0OiB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXdvcmtmbG93LmdlbmVyYXRlZEltYWdlIHx8ICFmaW5hbENvbmZpZy51aS5lbmFibGVTaGFyZSkgcmV0dXJuO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLnNoYXJlKSB7XG4gICAgICAgICAgLy8gVXNlIG5hdGl2ZSBzaGFyZSBBUEkgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSk7XG4gICAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoW2Jsb2JdLCAndHJ5b24tcmVzdWx0LnBuZycsIHsgdHlwZTogJ2ltYWdlL3BuZycgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLnNoYXJlKHtcbiAgICAgICAgICAgIHRpdGxlOiAnTXkgVHJ5LU9uIFJlc3VsdCcsXG4gICAgICAgICAgICB0ZXh0OiAnQ2hlY2sgb3V0IG15IHZpcnR1YWwgdHJ5LW9uIScsXG4gICAgICAgICAgICBmaWxlczogW2ZpbGVdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRmFsbGJhY2sgdG8gY29weWluZyBVUkxcbiAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSk7XG4gICAgICAgICAgc2hvd1RvYXN0KCdJbWFnZSBVUkwgY29waWVkIHRvIGNsaXBib2FyZCcsICdzdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNob3dUb2FzdCgnRmFpbGVkIHRvIHNoYXJlIGltYWdlJywgJ2Vycm9yJyk7XG4gICAgICB9XG4gICAgfSwgW3dvcmtmbG93LmdlbmVyYXRlZEltYWdlLCBmaW5hbENvbmZpZy51aS5lbmFibGVTaGFyZSwgc2hvd1RvYXN0XSlcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXRlOiBzaW1wbGlmaWVkU3RhdGUsXG4gICAgYWN0aW9uczogc2ltcGxpZmllZEFjdGlvbnMsXG4gICAgYWR2YW5jZWQ6IHtcbiAgICAgIHdvcmtmbG93LFxuICAgICAgdXBsb2Fkczoge1xuICAgICAgICB1c2VyOiB1c2VyVXBsb2FkLFxuICAgICAgICBhcHBhcmVsOiBhcHBhcmVsVXBsb2FkXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSB1c2VyLWZyaWVuZGx5IHByb2dyZXNzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uIGdldFByb2dyZXNzTWVzc2FnZSh3b3JrZmxvd1N0YXRlOiBzdHJpbmcsIHByb2dyZXNzOiBudW1iZXIpOiBzdHJpbmcge1xuICBzd2l0Y2ggKHdvcmtmbG93U3RhdGUpIHtcbiAgICBjYXNlICdpZGxlJzpcbiAgICAgIHJldHVybiAnUmVhZHkgdG8gZ2VuZXJhdGUnO1xuICAgIGNhc2UgJ3VwbG9hZGluZyc6XG4gICAgICByZXR1cm4gJ1VwbG9hZGluZyBpbWFnZXMuLi4nO1xuICAgIGNhc2UgJ3Byb2Nlc3NpbmcnOlxuICAgICAgcmV0dXJuICdQcm9jZXNzaW5nIGltYWdlcy4uLic7XG4gICAgY2FzZSAnZ2VuZXJhdGluZyc6XG4gICAgICBpZiAocHJvZ3Jlc3MgPCAzMCkgcmV0dXJuICdQcmVwYXJpbmcgaW1hZ2VzLi4uJztcbiAgICAgIGlmIChwcm9ncmVzcyA8IDgwKSByZXR1cm4gJ0dlbmVyYXRpbmcgdHJ5LW9uLi4uJztcbiAgICAgIHJldHVybiAnRmluYWxpemluZyByZXN1bHQuLi4nO1xuICAgIGNhc2UgJ2NvbXBsZXRlJzpcbiAgICAgIHJldHVybiAnR2VuZXJhdGlvbiBjb21wbGV0ZSEnO1xuICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgIHJldHVybiAnR2VuZXJhdGlvbiBmYWlsZWQnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYFByb2Nlc3NpbmcuLi4gJHtwcm9ncmVzc30lYDtcbiAgfVxufVxuXG4vKipcbiAqIFNwZWNpYWxpemVkIGhvb2sgZm9yIHNpbXBsZSB0cnktb24gZ2VuZXJhdGlvbiAobW9zdCBiYXNpYyB1c2UgY2FzZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNpbXBsZVRyeW9uKGNvbmZpZzogQnJpZGdlTGF5ZXJDb25maWcgPSB7fSkge1xuICBjb25zdCB7IHN0YXRlLCBhY3Rpb25zIH0gPSB1c2VCcmlkZ2VMYXllcihjb25maWcpO1xuICBcbiAgcmV0dXJuIHtcbiAgICAvLyBNaW5pbWFsIHN0YXRlIGZvciBzaW1wbGUgY29tcG9uZW50c1xuICAgIGlzTG9hZGluZzogc3RhdGUuaXNMb2FkaW5nLFxuICAgIHJlc3VsdDogc3RhdGUucmVzdWx0SW1hZ2UsXG4gICAgZXJyb3I6IHN0YXRlLmVycm9yTWVzc2FnZSxcbiAgICBjYW5HZW5lcmF0ZTogc3RhdGUuY2FuR2VuZXJhdGUsXG4gICAgXG4gICAgLy8gRXNzZW50aWFsIGFjdGlvbnNcbiAgICB1cGxvYWRVc2VySW1hZ2U6IGFjdGlvbnMudXBsb2FkVXNlckltYWdlLFxuICAgIHVwbG9hZEFwcGFyZWxJbWFnZTogYWN0aW9ucy51cGxvYWRBcHBhcmVsSW1hZ2UsXG4gICAgZ2VuZXJhdGU6IGFjdGlvbnMuZ2VuZXJhdGUsXG4gICAgcmVzZXQ6IGFjdGlvbnMucmVzZXRcbiAgfTtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB1cGxvYWQgcHJvZ3Jlc3MgdHJhY2tpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyeW9uV2l0aFByb2dyZXNzKGNvbmZpZzogQnJpZGdlTGF5ZXJDb25maWcgPSB7fSkge1xuICBjb25zdCB7IHN0YXRlLCBhY3Rpb25zIH0gPSB1c2VCcmlkZ2VMYXllcihjb25maWcpO1xuICBcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICAuLi5hY3Rpb25zLFxuICAgIFxuICAgIC8vIEFkZGl0aW9uYWwgcHJvZ3Jlc3MgaW5mb3JtYXRpb25cbiAgICB1cGxvYWRQcm9ncmVzczoge1xuICAgICAgdXNlcjogc3RhdGUuaGFzVXNlckltYWdlID8gMTAwIDogMCxcbiAgICAgIGFwcGFyZWw6IHN0YXRlLmhhc0FwcGFyZWxJbWFnZSA/IDEwMCA6IDBcbiAgICB9LFxuICAgIFxuICAgIG92ZXJhbGxQcm9ncmVzczogY2FsY3VsYXRlT3ZlcmFsbFByb2dyZXNzKHN0YXRlKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgb3ZlcmFsbCBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVPdmVyYWxsUHJvZ3Jlc3Moc3RhdGU6IFNpbXBsaWZpZWRUcnlvblN0YXRlKTogbnVtYmVyIHtcbiAgbGV0IHByb2dyZXNzID0gMDtcbiAgXG4gIC8vIFVwbG9hZCBwcm9ncmVzcyAoNDAlIG9mIHRvdGFsKVxuICBpZiAoc3RhdGUuaGFzVXNlckltYWdlKSBwcm9ncmVzcyArPSAyMDtcbiAgaWYgKHN0YXRlLmhhc0FwcGFyZWxJbWFnZSkgcHJvZ3Jlc3MgKz0gMjA7XG4gIFxuICAvLyBHZW5lcmF0aW9uIHByb2dyZXNzICg2MCUgb2YgdG90YWwpXG4gIGlmIChzdGF0ZS5pc0xvYWRpbmcgfHwgc3RhdGUucHJvZ3Jlc3MgPiAwKSB7XG4gICAgcHJvZ3Jlc3MgKz0gKHN0YXRlLnByb2dyZXNzICogMC42KTtcbiAgfVxuICBcbiAgaWYgKHN0YXRlLnJlc3VsdEltYWdlKSBwcm9ncmVzcyA9IDEwMDtcbiAgXG4gIHJldHVybiBNYXRoLnJvdW5kKHByb2dyZXNzKTtcbn0iXSwibmFtZXMiOlsidXNlQnJpZGdlTGF5ZXIiLCJ1c2VTaW1wbGVUcnlvbiIsInVzZVRyeW9uV2l0aFByb2dyZXNzIiwiREVGQVVMVF9CUklER0VfQ09ORklHIiwid29ya2Zsb3ciLCJ0aW1lb3V0TXMiLCJjb21wcmVzc2lvbkxpbWl0S0IiLCJhdXRvUmV0cnkiLCJtYXhSZXRyaWVzIiwiZGVidWciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ1cGxvYWQiLCJtYXhTaXplQnl0ZXMiLCJhbGxvd2VkVHlwZXMiLCJnZW5lcmF0ZVRodW1ibmFpbHMiLCJ0aHVtYm5haWxTaXplcyIsImVuYWJsZURyYWdEcm9wIiwiYXV0b1Byb2Nlc3MiLCJ2YWxpZGF0aW9uIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInVpIiwiYXV0b0hpZGVNZXNzYWdlcyIsIm1lc3NhZ2VUaW1lb3V0TXMiLCJlbmFibGVTaGFyZSIsImVuYWJsZURvd25sb2FkIiwic2hvd0RldGFpbGVkUHJvZ3Jlc3MiLCJjYWxsYmFja3MiLCJjb25maWciLCJmaW5hbENvbmZpZyIsInNob3dUb2FzdCIsInVzZVRvYXN0IiwidXNlVHJ5b25Xb3JrZmxvdyIsInVzZXJVcGxvYWQiLCJ1c2VTaW5nbGVJbWFnZVVwbG9hZCIsImZpbGUiLCJoYW5kbGVVc2VyRmlsZVVwbG9hZCIsImVycm9yIiwib25FcnJvciIsIm1lc3NhZ2UiLCJhcHBhcmVsVXBsb2FkIiwiaGFuZGxlQXBwYXJlbEZpbGVVcGxvYWQiLCJzaW1wbGlmaWVkU3RhdGUiLCJpc0xvYWRpbmciLCJpc0NhcHR1cmluZyIsInVwbG9hZFN0YXRlIiwiaXNSZWFkeSIsImNhbkdlbmVyYXRlIiwic2hvd1Jlc3VsdCIsInNob3dQb2xhcm9pZCIsInJlc3VsdEltYWdlIiwiZ2VuZXJhdGVkSW1hZ2UiLCJlcnJvck1lc3NhZ2UiLCJzdWNjZXNzTWVzc2FnZSIsImhhc1VzZXJJbWFnZSIsInVzZXJJbWFnZUZpbGUiLCJoYXNBcHBhcmVsSW1hZ2UiLCJhcHBhcmVsSW1hZ2VGaWxlIiwidXNlckltYWdlUHJldmlldyIsImxlZnRDYXJkSW1hZ2UiLCJwcmV2aWV3IiwiYXBwYXJlbEltYWdlUHJldmlldyIsInJpZ2h0Q2FyZEltYWdlIiwicHJvZ3Jlc3MiLCJwcm9ncmVzc01lc3NhZ2UiLCJnZXRQcm9ncmVzc01lc3NhZ2UiLCJ3b3JrZmxvd1N0YXRlIiwiY2FuUmV0cnkiLCJoYXNFcnJvciIsInJldHJ5YWJsZSIsImNhblJlc2V0Iiwic2ltcGxpZmllZEFjdGlvbnMiLCJ1cGxvYWRVc2VySW1hZ2UiLCJ1c2VDYWxsYmFjayIsInVwbG9hZEZpbGUiLCJFcnJvciIsInVwbG9hZEFwcGFyZWxJbWFnZSIsInJlbW92ZVVzZXJJbWFnZSIsImNsZWFyRmlsZXMiLCJyZXNldFdvcmtmbG93IiwicmVtb3ZlQXBwYXJlbEltYWdlIiwiZ2VuZXJhdGUiLCJvbkdlbmVyYXRpb25TdGFydCIsInN0YXJ0R2VuZXJhdGlvbiIsIm9uR2VuZXJhdGlvbkNvbXBsZXRlIiwib25TdWNjZXNzIiwicmV0cnkiLCJyZXRyeUdlbmVyYXRpb24iLCJyZXNldCIsImhpZGVSZXN1bHQiLCJjbG9zZVBvbGFyb2lkIiwiY2xlYXJFcnJvciIsImRvd25sb2FkUmVzdWx0IiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsIkRhdGUiLCJub3ciLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwic2hhcmVSZXN1bHQiLCJuYXZpZ2F0b3IiLCJzaGFyZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJibG9iIiwiRmlsZSIsInR5cGUiLCJ0aXRsZSIsInRleHQiLCJmaWxlcyIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInN0YXRlIiwiYWN0aW9ucyIsImFkdmFuY2VkIiwidXBsb2FkcyIsInVzZXIiLCJhcHBhcmVsIiwicmVzdWx0IiwidXBsb2FkUHJvZ3Jlc3MiLCJvdmVyYWxsUHJvZ3Jlc3MiLCJjYWxjdWxhdGVPdmVyYWxsUHJvZ3Jlc3MiLCJNYXRoIiwicm91bmQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7SUFrSWdCQSxjQUFjO2VBQWRBOztJQTJQQUMsY0FBYztlQUFkQTs7SUFxQkFDLG9CQUFvQjtlQUFwQkE7Ozt1QkE3WVk7a0NBQzhFO2dDQUNHO3VCQUNwRjtBQW9GekI7O0NBRUMsR0FDRCxNQUFNQyx3QkFBcUQ7SUFDekRDLFVBQVU7UUFDUkMsV0FBVztRQUNYQyxvQkFBb0I7UUFDcEJDLFdBQVc7UUFDWEMsWUFBWTtRQUNaQyxPQUFPQyxRQUFRQyxHQUFHLENBQUNDLFFBQVEsS0FBSztJQUNsQztJQUNBQyxRQUFRO1FBQ05DLGNBQWMsS0FBSyxPQUFPO1FBQzFCQyxjQUFjO1lBQUM7WUFBYztZQUFhO1NBQWE7UUFDdkRDLG9CQUFvQjtRQUNwQkMsZ0JBQWdCO1lBQUM7WUFBSztTQUFJO1FBQzFCQyxnQkFBZ0I7UUFDaEJDLGFBQWE7UUFDYkMsWUFBWTtZQUNWQyxVQUFVO1lBQ1ZDLFdBQVc7WUFDWEMsVUFBVTtZQUNWQyxXQUFXO1FBQ2I7SUFDRjtJQUNBQyxJQUFJO1FBQ0ZDLGtCQUFrQjtRQUNsQkMsa0JBQWtCO1FBQ2xCQyxhQUFhO1FBQ2JDLGdCQUFnQjtRQUNoQkMsc0JBQXNCO0lBQ3hCO0lBQ0FDLFdBQVcsQ0FBQztBQUNkO0FBS08sU0FBUy9CLGVBQWVnQyxTQUE0QixDQUFDLENBQUM7SUFXM0QsTUFBTUMsY0FBYztRQUFFLEdBQUc5QixxQkFBcUI7UUFBRSxHQUFHNkIsTUFBTTtJQUFDO0lBQzFELE1BQU0sRUFBRUUsU0FBUyxFQUFFLEdBQUdDLElBQUFBLGVBQVE7SUFFOUIsOEJBQThCO0lBQzlCLE1BQU0vQixXQUFXZ0MsSUFBQUEsa0NBQWdCLEVBQy9CSCxZQUFZN0IsUUFBUSxFQUNw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