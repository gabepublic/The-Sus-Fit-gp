3f5eeb3ed5cccef721838193597be100
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearQueryCache: function() {
        return clearQueryCache;
    },
    createApiQueryConfig: function() {
        return createApiQueryConfig;
    },
    createImageProcessingQueryConfig: function() {
        return createImageProcessingQueryConfig;
    },
    createMutationConfig: function() {
        return createMutationConfig;
    },
    invalidateQueries: function() {
        return invalidateQueries;
    },
    queryClient: function() {
        return queryClient;
    }
});
const _reactquery = require("@tanstack/react-query");
const _constants = require("./constants");
const _errortypes = require("../types/error.types");
// Error handler for React Query (utility function for future use)
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const handleQueryError = (error)=>{
    if (error instanceof Error) {
        // Check for network errors
        if ('code' in error && error.code === 'NETWORK_ERROR') {
            return (0, _errortypes.createNetworkError)(error.message);
        }
        // Check for timeout errors
        if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
            return (0, _errortypes.createTimeoutError)(error.message);
        }
        // Return as-is if already a BusinessLayerError
        if ('code' in error && 'timestamp' in error) {
            return error;
        }
    }
    // Default error handling
    return {
        name: 'BusinessLayerError',
        message: error instanceof Error ? error.message : 'An unknown error occurred',
        code: 'UNKNOWN_ERROR',
        timestamp: new Date().toISOString()
    };
};
const queryClient = new _reactquery.QueryClient({
    defaultOptions: {
        queries: {
            staleTime: _constants.QUERY_DEFAULTS.STALE_TIME,
            gcTime: _constants.QUERY_DEFAULTS.CACHE_TIME,
            retry: (failureCount, error)=>{
                // Don't retry on 4xx errors (client errors)
                if (error && typeof error === 'object' && 'status' in error) {
                    const status = error.status;
                    if (status >= 400 && status < 500) {
                        return false;
                    }
                }
                return failureCount < _constants.QUERY_DEFAULTS.RETRY_COUNT;
            },
            retryDelay: _constants.QUERY_DEFAULTS.RETRY_DELAY,
            networkMode: 'online',
            refetchOnWindowFocus: false,
            refetchOnReconnect: true
        },
        mutations: {
            retry: (failureCount, error)=>{
                // Don't retry mutations on 4xx errors
                if (error && typeof error === 'object' && 'status' in error) {
                    const status = error.status;
                    if (status >= 400 && status < 500) {
                        return false;
                    }
                }
                return failureCount < _constants.MUTATION_DEFAULTS.RETRY_COUNT;
            },
            retryDelay: _constants.MUTATION_DEFAULTS.RETRY_DELAY,
            networkMode: 'online'
        }
    }
});
const createImageProcessingQueryConfig = (enabled = true)=>({
        staleTime: _constants.QUERY_DEFAULTS.STALE_TIME,
        gcTime: _constants.QUERY_DEFAULTS.CACHE_TIME,
        retry: 1,
        enabled,
        refetchOnMount: false,
        refetchOnWindowFocus: false
    });
const createApiQueryConfig = (enabled = true)=>({
        staleTime: _constants.QUERY_DEFAULTS.STALE_TIME,
        gcTime: _constants.QUERY_DEFAULTS.CACHE_TIME,
        retry: _constants.QUERY_DEFAULTS.RETRY_COUNT,
        retryDelay: _constants.QUERY_DEFAULTS.RETRY_DELAY,
        enabled,
        refetchOnMount: true,
        refetchOnWindowFocus: false
    });
const createMutationConfig = (options)=>({
        retry: _constants.MUTATION_DEFAULTS.RETRY_COUNT,
        retryDelay: _constants.MUTATION_DEFAULTS.RETRY_DELAY,
        networkMode: 'online',
        ...options
    });
const invalidateQueries = (queryKeys)=>{
    queryKeys.forEach((queryKey)=>{
        queryClient.invalidateQueries({
            queryKey
        });
    });
};
const clearQueryCache = ()=>{
    queryClient.clear();
};

//# sourceMappingURL=data:application/json;base64,