9451f7907cadb0cb7b09c5228e924f83
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _enhancedpolaroidphotogenerator = require("../../../src/components/ui/enhanced-polaroid-photo-generator");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock timers for testing animations
jest.useFakeTimers();
describe('EnhancedPolaroidPhotoGenerator', ()=>{
    const defaultProps = {
        onGenerationStart: jest.fn(),
        onGenerationComplete: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    afterEach(()=>{
        jest.clearAllTimers();
    });
    it('renders nothing when not generating', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps
        }));
        expect(container.firstChild).toBeNull();
    });
    it('starts generation sequence when isGenerating is true', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(defaultProps.onGenerationStart).toHaveBeenCalled();
    });
    it('shows polaroid when generating', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(_react1.screen.getByText('PROCESSING...')).toBeInTheDocument();
    });
    it('applies custom className', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true,
            className: "custom-class"
        }));
        expect(container.firstChild).toHaveClass('custom-class');
    });
    it('positions correctly at bottom by default', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        const polaroid = container.firstChild;
        expect(polaroid).toHaveClass('bottom-0');
        expect(polaroid).toHaveClass('-translate-x-1/2');
    });
    it('positions correctly at center when specified', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true,
            position: "center"
        }));
        const polaroid = container.firstChild;
        expect(polaroid).toHaveClass('top-1/2');
        expect(polaroid).toHaveClass('-translate-y-1/2');
    });
    it('shows progress bar during processing', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(_react1.screen.getByText('0%')).toBeInTheDocument();
    });
    it('updates progress during generation', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        // Fast-forward timers to see progress updates
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        await (0, _react1.waitFor)(()=>{
            const progressText = _react1.screen.getByText(/\d+%/);
            expect(progressText).toBeInTheDocument();
        });
    });
    it('completes generation sequence', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        // Fast-forward through the entire generation sequence
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(6000) // Complete all phases
            ;
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalled();
            expect(_react1.screen.getByText('SUS FIT COMPLETE')).toBeInTheDocument();
        });
    });
    it('shows ready indicator when complete', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(6000);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('âœ¨ READY!')).toBeInTheDocument();
        });
    });
    it('uses person image when provided', async ()=>{
        const personImageUrl = '/test-person.jpg';
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true,
            personImageUrl: personImageUrl
        }));
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(4500) // Advance to revealing phase
            ;
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalledWith(personImageUrl);
        });
    });
    it('uses garment image when person image not provided', async ()=>{
        const garmentImageUrl = '/test-garment.jpg';
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true,
            garmentImageUrl: garmentImageUrl
        }));
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(4500);
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalledWith(garmentImageUrl);
        });
    });
    it('uses mock image when no other images provided', async ()=>{
        const mockImageUrl = '/custom-mock.jpg';
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true,
            mockImageUrl: mockImageUrl
        }));
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(4500);
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalledWith(mockImageUrl);
        });
    });
    it('uses default mock image when no images provided', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(4500);
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalledWith('/images/ScoredGarment.jpg');
        });
    });
    it('shows correct status text during different phases', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        // Initial processing phase
        expect(_react1.screen.getByText('PROCESSING...')).toBeInTheDocument();
        // Advance to revealing phase
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(4500);
        });
        // Should show developing
        expect(_react1.screen.getByText('DEVELOPING...')).toBeInTheDocument();
        // Advance to complete phase
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(1500);
        });
        // Should show complete
        expect(_react1.screen.getByText('SUS FIT COMPLETE')).toBeInTheDocument();
    });
    it('shows SUS FIT logo', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(_react1.screen.getByText('SUS FIT')).toBeInTheDocument();
    });
    it('works without optional callbacks', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            isGenerating: true
        }));
        // Should not throw error
        expect(_react1.screen.getByText('PROCESSING...')).toBeInTheDocument();
    });
    it('resets state when isGenerating changes from true to false', ()=>{
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(_react1.screen.getByText('PROCESSING...')).toBeInTheDocument();
        // Change to false
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: false
        }));
        // Should not render anything
        expect(_react1.screen.queryByText('PROCESSING...')).not.toBeInTheDocument();
    });
    it('handles multiple generation cycles', async ()=>{
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        // Complete first generation
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(6000);
        });
        await (0, _react1.waitFor)(()=>{
            expect(defaultProps.onGenerationComplete).toHaveBeenCalledTimes(1);
        });
        // Reset and start second generation
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: false
        }));
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedpolaroidphotogenerator.EnhancedPolaroidPhotoGenerator, {
            ...defaultProps,
            isGenerating: true
        }));
        expect(defaultProps.onGenerationStart).toHaveBeenCalledTimes(2);
    });
});

//# sourceMappingURL=data:application/json;base64,