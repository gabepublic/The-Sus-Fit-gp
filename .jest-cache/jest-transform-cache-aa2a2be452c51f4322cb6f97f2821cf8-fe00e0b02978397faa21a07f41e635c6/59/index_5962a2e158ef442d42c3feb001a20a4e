137f21b6c5ccedb6c549992aee1ee840
/**
 * Try-On Service Public API
 * 
 * This module provides a clean public interface for the OpenAI try-on service.
 * It exports the main generateTryOn function and all related types and schemas
 * for easy consumption by other modules.
 */ // Export the main try-on function
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TryOnRequest: function() {
        return TryOnRequest;
    },
    TryOnResponse: function() {
        return TryOnResponse;
    },
    generateTryOn: function() {
        return _openaiClient.generateTryOn;
    },
    tryOnSchema: function() {
        return _schema.TryonSchema;
    }
});
const _openaiClient = require("./openaiClient");
_export_star(require("./tryOnSchema"), exports);
const _schema = require("../app/api/tryon/schema");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const TryOnRequest = {};
const TryOnResponse = {
    imgGenerated: ""
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyeS1PbiBTZXJ2aWNlIFB1YmxpYyBBUElcbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSBjbGVhbiBwdWJsaWMgaW50ZXJmYWNlIGZvciB0aGUgT3BlbkFJIHRyeS1vbiBzZXJ2aWNlLlxuICogSXQgZXhwb3J0cyB0aGUgbWFpbiBnZW5lcmF0ZVRyeU9uIGZ1bmN0aW9uIGFuZCBhbGwgcmVsYXRlZCB0eXBlcyBhbmQgc2NoZW1hc1xuICogZm9yIGVhc3kgY29uc3VtcHRpb24gYnkgb3RoZXIgbW9kdWxlcy5cbiAqL1xuXG4vLyBFeHBvcnQgdGhlIG1haW4gdHJ5LW9uIGZ1bmN0aW9uXG5leHBvcnQgeyBnZW5lcmF0ZVRyeU9uIH0gZnJvbSAnLi9vcGVuYWlDbGllbnQnO1xuXG4vLyBFeHBvcnQgYWxsIHR5cGVzIGFuZCBzY2hlbWFzIGZyb20gdGhlIHZhbGlkYXRpb24gbW9kdWxlXG5leHBvcnQgKiBmcm9tICcuL3RyeU9uU2NoZW1hJztcblxuLy8gRXhwb3J0IEFQSSBzY2hlbWEgdHlwZXMgZm9yIGNvbXBhdGliaWxpdHlcbmV4cG9ydCB7IFRyeW9uU2NoZW1hIGFzIHRyeU9uU2NoZW1hIH0gZnJvbSAnLi4vYXBwL2FwaS90cnlvbi9zY2hlbWEnO1xuXG4vLyBFeHBvcnQgdHlwZXMgYXMgdmFsdWVzIGZvciBydW50aW1lIGFjY2VzcyAoZm9yIHRlc3RpbmcpXG4vLyBUaGVzZSBydW50aW1lIGV4cG9ydHMgZXhpc3Qgb25seSB0byBzYXRpc2Z5IHRlc3QgcHJvcGVydHkgY2hlY2tzLiBUaGV5IGFyZSBub3QgdXNlZCBpbiBwcm9kdWN0aW9uIGNvZGUuXG5leHBvcnQgY29uc3QgVHJ5T25SZXF1ZXN0OiBUcnlPblJlcXVlc3QgPSB7fSBhcyBUcnlPblJlcXVlc3Q7XG5leHBvcnQgY29uc3QgVHJ5T25SZXNwb25zZTogVHJ5T25SZXNwb25zZSA9IHsgaW1nR2VuZXJhdGVkOiBcIlwiIH07XG5cbi8vIEV4cG9ydCB0eXBlcyBmb3IgVHlwZVNjcmlwdFxuZXhwb3J0IHR5cGUgVHJ5T25SZXF1ZXN0ID0gaW1wb3J0KCcuLi9hcHAvYXBpL3RyeW9uL3NjaGVtYScpLlRyeW9uUmVxdWVzdDtcbmV4cG9ydCB0eXBlIFRyeU9uUmVzcG9uc2UgPSB7IGltZ0dlbmVyYXRlZDogc3RyaW5nIH07ICJdLCJuYW1lcyI6WyJUcnlPblJlcXVlc3QiLCJUcnlPblJlc3BvbnNlIiwiZ2VuZXJhdGVUcnlPbiIsInRyeU9uU2NoZW1hIiwiVHJ5b25TY2hlbWEiLCJpbWdHZW5lcmF0ZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUVELGtDQUFrQzs7Ozs7Ozs7Ozs7O0lBV3JCQSxZQUFZO2VBQVpBOztJQUNBQyxhQUFhO2VBQWJBOztJQVhKQyxhQUFhO2VBQWJBLDJCQUFhOztJQU1FQyxXQUFXO2VBQTFCQyxtQkFBVzs7OzhCQU5VO3FCQUdoQjt3QkFHNkI7Ozs7Ozs7Ozs7Ozs7O0FBSXBDLE1BQU1KLGVBQTZCLENBQUM7QUFDcEMsTUFBTUMsZ0JBQStCO0lBQUVJLGNBQWM7QUFBRyJ9