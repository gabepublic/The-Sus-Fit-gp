a4e097ac2710902d6d74ccdbcebae22f
"use strict";
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: ({ src, alt, className, onLoad, onError, fill, unoptimized, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                src: src,
                alt: alt,
                className: className,
                onLoad: onLoad,
                onError: onError,
                ...props
            })
    }));
// Mock the Button component
jest.mock('../src/components/ui/button', ()=>({
        Button: ({ children, onClick, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                className: className,
                ...props,
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _polaroidphotogenerator = require("../src/components/ui/polaroid-photo-generator");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('PolaroidPhotoGenerator', ()=>{
    const defaultProps = {
        onGenerationStart: jest.fn(),
        onGenerationComplete: jest.fn(),
        onClose: jest.fn(),
        onRetry: jest.fn(),
        mockImageUrl: '/test-mock-image.jpg'
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Set up fake timers before each test
        jest.useFakeTimers();
        // Mock console methods to reduce noise in tests
        jest.spyOn(console, 'log').mockImplementation(()=>{});
        jest.spyOn(console, 'error').mockImplementation(()=>{});
        jest.spyOn(console, 'warn').mockImplementation(()=>{});
    });
    afterEach(()=>{
        // Clean up timers after each test
        (0, _react1.act)(()=>{
            jest.runOnlyPendingTimers();
        });
        jest.useRealTimers();
    });
    describe('Initial Rendering', ()=>{
        it('renders placeholder while generatedImage is undefined', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            // Should show text placeholder when no image is provided
            const placeholderTexts = _react1.screen.getAllByText('Ready to generate');
            expect(placeholderTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
            // Should not have an image element when no generatedImage is provided
            const img = _react1.screen.queryByAltText('Generated try-on preview');
            expect(img).not.toBeInTheDocument();
            // Snapshot test for initial state
            expect(container.firstChild).toMatchSnapshot();
        });
        it('renders with loading state when isLoading is true', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isLoading: true
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveAttribute('aria-busy', 'true');
        });
        it('renders with generating state when isGenerating is true', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveAttribute('aria-busy', 'true');
        });
        it('shows "Ready to generate" in idle state', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            const statusTexts = _react1.screen.getAllByText('Ready to generate');
            expect(statusTexts.length).toBeGreaterThan(0);
        });
        it('renders with custom className', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                className: "custom-class"
            }));
            expect(container.firstChild).toHaveClass('custom-class');
        });
        it('uses default mockImageUrl when not provided', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                onGenerationStart: jest.fn()
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveAttribute('src', '/images/demo/WillShalom.jpg');
        });
    });
    describe('base64', ()=>{
        it('displays generated image with correct base64 prefix', ()=>{
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: mockBase64
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveAttribute('src', `data:image/png;base64,${mockBase64}`);
        });
        it('shows fade-in class after image load event', async ()=>{
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: mockBase64
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveClass('opacity-0') // Initially hidden
            ;
            // Simulate image load
            _react1.fireEvent.load(img);
            await (0, _react1.waitFor)(()=>{
                expect(img).toHaveClass('opacity-100') // Should be visible after load
                ;
            });
        });
        it('shows skeleton shimmer while loading', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isLoading: true
            }));
            const shimmer = document.querySelector('.animate-pulse');
            expect(shimmer).toBeInTheDocument();
        });
        it('shows skeleton shimmer while generating', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            const shimmer = document.querySelector('.animate-pulse');
            expect(shimmer).toBeInTheDocument();
        });
    });
    describe('Animation States', ()=>{
        it('shows "Processing..." during processing phase', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Fast-forward to processing phase
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(100);
            });
            expect(_react1.screen.getByText('Processing...')).toBeInTheDocument();
        });
        it('shows "Developing..." during revealing phase', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Progress bar runs for ~3000ms (50 intervals Ã— 60ms), then 200ms delay to revealing phase
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(3200);
            });
            // For now, just check that we're not in the initial state
            expect(_react1.screen.queryByText('Ready to generate')).not.toBeInTheDocument();
        });
        it('shows "Complete!" when generation is complete', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Progress bar (3000ms) + revealing delay (200ms) + complete delay (1000ms) = 4200ms
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(4200);
            });
            // For now, just check that we're not in the initial state
            expect(_react1.screen.queryByText('Ready to generate')).not.toBeInTheDocument();
        });
        it('shows progress bar during processing', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Fast-forward to processing phase
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(100);
            });
            const progressBar = _react1.screen.getByTestId('progress-bar');
            expect(progressBar).toBeInTheDocument();
        });
        it('updates progress bar width', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Use data-testid for reliable selection
            const progressBar = _react1.screen.getByTestId('progress-bar');
            expect(progressBar).toBeInTheDocument();
            // The progress bar should start at 0%
            expect(progressBar).toHaveStyle({
                width: '0%'
            });
            // Fast-forward timers to see progress updates
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(1000) // Advance 1 second
                ;
            });
            // After advancing timers, the progress should have increased
            // Since it updates every 60ms and increases by 2%, after 1000ms it should be around 33%
            const widthAfter1Second = progressBar.style.width;
            expect(widthAfter1Second).toMatch(/^\d+%$/);
            // Fast-forward more to see further progress
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(1000) // Advance another second
                ;
            });
            const widthAfter2Seconds = progressBar.style.width;
            expect(widthAfter2Seconds).toMatch(/^\d+%$/);
            // The width should have increased
            const width1 = parseInt(widthAfter1Second);
            const width2 = parseInt(widthAfter2Seconds);
            expect(width2).toBeGreaterThan(width1);
        });
    });
    describe('Button Interactions', ()=>{
        it('shows retry and close buttons when complete', async ()=>{
            // Test with a component that's already in complete state
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: false,
                generatedImage: "test-base64-data"
            }));
            // Wait for buttons to appear
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Retry')).toBeInTheDocument();
                expect(_react1.screen.getByText('Close')).toBeInTheDocument();
            });
        });
        it('calls onRetry when retry button is clicked', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: false,
                generatedImage: "test-base64-data"
            }));
            // Wait for retry button to appear
            const retryButton = await (0, _react1.waitFor)(()=>_react1.screen.getByText('Retry'));
            _react1.fireEvent.click(retryButton);
            expect(defaultProps.onRetry).toHaveBeenCalled();
        });
        it('calls onClose when close button is clicked', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: false,
                generatedImage: "test-base64-data"
            }));
            // Wait for close button to appear
            const closeButton = await (0, _react1.waitFor)(()=>_react1.screen.getByText('Close'));
            _react1.fireEvent.click(closeButton);
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
        it('calls onRetry when retry button is clicked and resets internal state', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: false,
                generatedImage: "test-base64-data"
            }));
            // Wait for retry button to appear
            const retryButton = await (0, _react1.waitFor)(()=>_react1.screen.getByText('Retry'));
            _react1.fireEvent.click(retryButton);
            // Should call onRetry callback
            expect(defaultProps.onRetry).toHaveBeenCalled();
        // Internal state should be reset (buttons hidden, image not loaded)
        // Note: The component will still show the generated image until props are updated by parent
        // This is the expected behavior - the parent component should handle the state reset
        });
    });
    describe('Generation Sequence', ()=>{
        it('calls onGenerationStart when generation begins', ()=>{
            (0, _react1.act)(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: true
                }));
            });
            // Run any pending timers to ensure all effects have run
            (0, _react1.act)(()=>{
                jest.runOnlyPendingTimers();
            });
            expect(defaultProps.onGenerationStart).toHaveBeenCalled();
        });
        it('calls onGenerationComplete when generatedImage is provided', async ()=>{
            const onGenerationComplete = jest.fn();
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true,
                onGenerationComplete: onGenerationComplete,
                generatedImage: mockBase64
            }));
            // onGenerationComplete should be called immediately when generatedImage is provided
            await (0, _react1.waitFor)(()=>{
                expect(onGenerationComplete).toHaveBeenCalledTimes(1);
                expect(onGenerationComplete).toHaveBeenCalledWith(`data:image/png;base64,${mockBase64}`);
            });
        });
        it('handles multiple generation cycles', async ()=>{
            const onGenerationComplete = jest.fn();
            const onGenerationStart = jest.fn();
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true,
                onGenerationComplete: onGenerationComplete,
                onGenerationStart: onGenerationStart
            }));
            // First generation should call onGenerationStart
            expect(onGenerationStart).toHaveBeenCalledTimes(1);
            // Complete first generation by providing generatedImage
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: true,
                    onGenerationComplete: onGenerationComplete,
                    onGenerationStart: onGenerationStart,
                    generatedImage: mockBase64
                }));
            });
            // Wait for the first callback to be called
            await (0, _react1.waitFor)(()=>{
                expect(onGenerationComplete).toHaveBeenCalledTimes(1);
            });
            // Reset the component state for second generation
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: false,
                    onGenerationComplete: onGenerationComplete,
                    onGenerationStart: onGenerationStart
                }));
            });
            // Start second generation
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: true,
                    onGenerationComplete: onGenerationComplete,
                    onGenerationStart: onGenerationStart
                }));
            });
            // Complete second generation by providing generatedImage
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: true,
                    onGenerationComplete: onGenerationComplete,
                    onGenerationStart: onGenerationStart,
                    generatedImage: mockBase64
                }));
            });
            // Wait for the second callback to be called
            await (0, _react1.waitFor)(()=>{
                expect(onGenerationComplete).toHaveBeenCalledTimes(2);
            });
            expect(onGenerationStart).toHaveBeenCalledTimes(2);
        });
        it('handles generation with generated image', ()=>{
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true,
                generatedImage: mockBase64
            }));
            // Should still call onGenerationStart
            expect(defaultProps.onGenerationStart).toHaveBeenCalled();
        });
    });
    describe('Edge Cases', ()=>{
        it('works without optional callbacks', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                isGenerating: true
            }));
            // Fast-forward to processing phase
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(100);
            });
            // Run any pending timers to ensure state updates
            (0, _react1.act)(()=>{
                jest.runOnlyPendingTimers();
            });
            // Should not throw error
            expect(_react1.screen.getByText('Processing...')).toBeInTheDocument();
        });
        it('handles empty generated image', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: ""
            }));
            // Empty string should be treated as no image, so show placeholder text
            const placeholderTexts = _react1.screen.getAllByText('Ready to generate');
            expect(placeholderTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
            // Should not have an image element when generatedImage is empty
            const img = _react1.screen.queryByAltText('Generated try-on preview');
            expect(img).not.toBeInTheDocument();
        });
        it('handles null generated image', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: null
            }));
            // Null should be treated as no image, so show placeholder text
            const placeholderTexts = _react1.screen.getAllByText('Ready to generate');
            expect(placeholderTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
            // Should not have an image element when generatedImage is null
            const img = _react1.screen.queryByAltText('Generated try-on preview');
            expect(img).not.toBeInTheDocument();
        });
        it('handles undefined generated image', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: undefined
            }));
            // Undefined should be treated as no image, so show placeholder text
            const placeholderTexts = _react1.screen.getAllByText('Ready to generate');
            expect(placeholderTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
            // Should not have an image element when generatedImage is undefined
            const img = _react1.screen.queryByAltText('Generated try-on preview');
            expect(img).not.toBeInTheDocument();
        });
        it('handles rapid state changes', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: true
            }));
            // Rapidly change states
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: false
                }));
            });
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: true
                }));
            });
            (0, _react1.act)(()=>{
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                    ...defaultProps,
                    isGenerating: false
                }));
            });
            // Run any pending timers to ensure state updates
            (0, _react1.act)(()=>{
                jest.runOnlyPendingTimers();
            });
            // Should not throw error and should be in idle state
            const placeholderTexts = _react1.screen.getAllByText('Ready to generate');
            expect(placeholderTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
        });
        it('handles image load error gracefully', ()=>{
            // Test with a generated image to have an image element to test error handling
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: mockBase64
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            // Simulate image load error
            _react1.fireEvent.error(img);
            // Should not throw error
            expect(img).toBeInTheDocument();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA attributes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isLoading: true
            }));
            // When loading, should show loading text in multiple places
            const loadingTexts = _react1.screen.getAllByText('Loading...');
            expect(loadingTexts).toHaveLength(2) // One in photo area, one in bottom border
            ;
            // Should have an image element with proper ARIA attributes when loading
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toHaveAttribute('aria-busy', 'true');
        });
        it('has proper alt text', ()=>{
            // Test with a generated image to have an image element with alt text
            const mockBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                generatedImage: mockBase64
            }));
            const img = _react1.screen.getByAltText('Generated try-on preview');
            expect(img).toBeInTheDocument();
        });
        it('buttons are accessible', async ()=>{
            // Test with a component that's already in complete state with generated image
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps,
                isGenerating: false,
                generatedImage: "test-base64-data"
            }));
            // Wait for buttons to appear
            await (0, _react1.waitFor)(()=>{
                const retryButton = _react1.screen.getByRole('button', {
                    name: /retry/i
                });
                const closeButton = _react1.screen.getByRole('button', {
                    name: /close/i
                });
                expect(retryButton).toBeInTheDocument();
                expect(closeButton).toBeInTheDocument();
            });
        });
    });
    describe('Styling and Layout', ()=>{
        it('has correct polaroid dimensions', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            // Use a more specific selector that doesn't rely on Tailwind's arbitrary value syntax
            const polaroid = container.querySelector('div[class*="w-[475px]"]');
            expect(polaroid).toBeInTheDocument();
        });
        it('has correct photo area dimensions', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            // Use a more specific selector that doesn't rely on Tailwind's arbitrary value syntax
            const photoArea = container.querySelector('div[class*="h-[400px]"]');
            expect(photoArea).toBeInTheDocument();
        });
        it('has proper shadow styling', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            const polaroid = container.querySelector('.shadow-lg');
            expect(polaroid).toBeInTheDocument();
        });
        it('has proper border radius', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_polaroidphotogenerator.PolaroidPhotoGenerator, {
                ...defaultProps
            }));
            const polaroid = container.querySelector('.rounded-sm');
            expect(polaroid).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,