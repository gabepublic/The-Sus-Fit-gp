{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useFeatureFlag.ts"],"sourcesContent":["// Feature Flag Hooks\n// Custom React hooks for accessing feature flags with type safety and error handling\n\nimport { useMemo } from 'react';\nimport { useFeatureFlagContext } from '../providers/FeatureFlagContext';\nimport type {\n  FeatureFlag,\n  FeatureFlagValue,\n  UseFeatureFlagReturn,\n} from '../types/featureFlag.types';\n\n// Development logging utility\nconst logFlagUsage = (key: string, value: FeatureFlagValue, source: 'flag' | 'default') => {\n  if (process.env.NODE_ENV === 'development') {\n    console.debug(`[FeatureFlag] ${key}: ${JSON.stringify(value)} (${source})`);\n  }\n};\n\n/**\n * Hook to get a specific feature flag with type safety\n * @param key - Feature flag key\n * @param defaultValue - Fallback value if flag is not found or disabled\n * @returns Feature flag data with loading state and error handling\n */\nexport function useFeatureFlag<T extends FeatureFlagValue>(\n  key: string,\n  defaultValue?: T\n): UseFeatureFlagReturn<T> {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    const flag = context.getFlag<T>(key);\n    const isLoading = context.isLoading;\n    const error = context.error;\n\n    // Determine the final value\n    let value: T;\n    let isEnabled = false;\n    let source: 'flag' | 'default' = 'default';\n\n    if (flag && flag.enabled) {\n      value = flag.value as T;\n      isEnabled = Boolean(flag.value);\n      source = 'flag';\n    } else {\n      value = defaultValue as T;\n      isEnabled = Boolean(defaultValue);\n      source = 'default';\n    }\n\n    // Log usage in development\n    logFlagUsage(key, value, source);\n\n    return {\n      flag,\n      isEnabled,\n      value,\n      isLoading,\n      error,\n    };\n  }, [key, defaultValue, context]);\n}\n\n/**\n * Hook specifically for boolean feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default boolean value (defaults to false)\n * @returns Boolean flag state with loading/error info\n */\nexport function useFeatureFlagEnabled(\n  key: string,\n  defaultValue = false\n): UseFeatureFlagReturn<boolean> {\n  return useFeatureFlag<boolean>(key, defaultValue);\n}\n\n/**\n * Hook for string feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default string value\n * @returns String flag value with loading/error info\n */\nexport function useFeatureFlagString(\n  key: string,\n  defaultValue = ''\n): UseFeatureFlagReturn<string> {\n  return useFeatureFlag<string>(key, defaultValue);\n}\n\n/**\n * Hook for number feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default number value\n * @returns Number flag value with loading/error info\n */\nexport function useFeatureFlagNumber(\n  key: string,\n  defaultValue = 0\n): UseFeatureFlagReturn<number> {\n  return useFeatureFlag<number>(key, defaultValue);\n}\n\n/**\n * Hook to get multiple feature flags at once\n * @param keys - Array of feature flag keys\n * @param defaultValues - Optional object with default values for each key\n * @returns Object containing all requested flags\n */\nexport function useFeatureFlags<T extends Record<string, FeatureFlagValue>>(\n  keys: string[],\n  defaultValues?: Partial<T>\n): {\n  flags: Record<string, FeatureFlag | undefined>;\n  values: Record<string, FeatureFlagValue>;\n  isLoading: boolean;\n  error: Error | null;\n  isAnyEnabled: boolean;\n  areAllEnabled: boolean;\n} {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    const flags: Record<string, FeatureFlag | undefined> = {};\n    const values: Record<string, FeatureFlagValue> = {};\n    let enabledCount = 0;\n\n    keys.forEach(key => {\n      const flag = context.getFlag(key);\n      const defaultValue = defaultValues?.[key];\n      \n      flags[key] = flag;\n      \n      if (flag && flag.enabled) {\n        values[key] = flag.value;\n        if (flag.value) enabledCount++;\n        logFlagUsage(key, flag.value, 'flag');\n      } else {\n        const fallbackValue = defaultValue ?? false;\n        values[key] = fallbackValue;\n        if (fallbackValue) enabledCount++;\n        logFlagUsage(key, fallbackValue, 'default');\n      }\n    });\n\n    return {\n      flags,\n      values,\n      isLoading: context.isLoading,\n      error: context.error,\n      isAnyEnabled: enabledCount > 0,\n      areAllEnabled: enabledCount === keys.length,\n    };\n  }, [keys, defaultValues, context]);\n}\n\n/**\n * Hook to check if any of the provided flags are enabled\n * @param keys - Array of feature flag keys to check\n * @returns True if any flag is enabled\n */\nexport function useAnyFeatureFlagEnabled(keys: string[]): {\n  isEnabled: boolean;\n  enabledFlags: string[];\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { values, isLoading, error } = useFeatureFlags(keys);\n\n  return useMemo(() => {\n    const enabledFlags = keys.filter(key => Boolean(values[key]));\n    \n    return {\n      isEnabled: enabledFlags.length > 0,\n      enabledFlags,\n      isLoading,\n      error,\n    };\n  }, [keys, values, isLoading, error]);\n}\n\n/**\n * Hook to check if all provided flags are enabled\n * @param keys - Array of feature flag keys to check\n * @returns True if all flags are enabled\n */\nexport function useAllFeatureFlagsEnabled(keys: string[]): {\n  isEnabled: boolean;\n  disabledFlags: string[];\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { values, isLoading, error } = useFeatureFlags(keys);\n\n  return useMemo(() => {\n    const disabledFlags = keys.filter(key => !Boolean(values[key]));\n    \n    return {\n      isEnabled: disabledFlags.length === 0,\n      disabledFlags,\n      isLoading,\n      error,\n    };\n  }, [keys, values, isLoading, error]);\n}\n\n/**\n * Hook for conditional feature flag usage with fallback behavior\n * @param key - Feature flag key\n * @param enabledValue - Value to return when flag is enabled\n * @param disabledValue - Value to return when flag is disabled\n * @returns The appropriate value based on flag state\n */\nexport function useFeatureFlagValue<T>(\n  key: string,\n  enabledValue: T,\n  disabledValue: T\n): {\n  value: T;\n  isEnabled: boolean;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { isEnabled, isLoading, error } = useFeatureFlagEnabled(key);\n\n  return useMemo(() => ({\n    value: isEnabled ? enabledValue : disabledValue,\n    isEnabled,\n    isLoading,\n    error,\n  }), [isEnabled, enabledValue, disabledValue, isLoading, error]);\n}\n\n/**\n * Hook to refresh feature flags manually\n * @returns Function to refresh flags and loading state\n */\nexport function useFeatureFlagRefresh(): {\n  refresh: () => Promise<void>;\n  isRefreshing: boolean;\n  error: Error | null;\n} {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => ({\n    refresh: context.refreshFlags,\n    isRefreshing: context.isLoading,\n    error: context.error,\n  }), [context]);\n}\n\n/**\n * Development helper hook to get all available flags\n * Only works in development mode\n */\nexport function useAllFeatureFlags(): {\n  flags: Record<string, FeatureFlag>;\n  isLoading: boolean;\n  error: Error | null;\n} | null {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    if (process.env.NODE_ENV !== 'development') {\n      return null;\n    }\n\n    return {\n      flags: context.flags,\n      isLoading: context.isLoading,\n      error: context.error,\n    };\n  }, [context]);\n}\n\n/**\n * Hook for A/B testing scenarios\n * @param experimentKey - The experiment feature flag key\n * @param variants - Object mapping variant names to their values\n * @param defaultVariant - Default variant to use if flag is not found\n * @returns The variant value and metadata\n */\nexport function useExperimentVariant<T>(\n  experimentKey: string,\n  variants: Record<string, T>,\n  defaultVariant: string\n): {\n  variant: string;\n  value: T;\n  isInExperiment: boolean;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { flag, value: flagValue, isEnabled, isLoading, error } = useFeatureFlagString(\n    experimentKey,\n    defaultVariant\n  );\n\n  return useMemo(() => {\n    const flagExists = Boolean(flag);\n    const variant = flagExists && isEnabled && flagValue in variants ? flagValue : defaultVariant;\n    const value = variants[variant] || variants[defaultVariant];\n\n    if (process.env.NODE_ENV === 'development') {\n      console.debug(`[Experiment] ${experimentKey}: variant=${variant}, value=${JSON.stringify(value)}, flagExists=${flagExists}`);\n    }\n\n    return {\n      variant,\n      value,\n      isInExperiment: flagExists && isEnabled && flagValue in variants,\n      isLoading,\n      error,\n    };\n  }, [experimentKey, variants, defaultVariant, flag, flagValue, isEnabled, isLoading, error]);\n}"],"names":["useAllFeatureFlags","useAllFeatureFlagsEnabled","useAnyFeatureFlagEnabled","useExperimentVariant","useFeatureFlag","useFeatureFlagEnabled","useFeatureFlagNumber","useFeatureFlagRefresh","useFeatureFlagString","useFeatureFlagValue","useFeatureFlags","logFlagUsage","key","value","source","process","env","NODE_ENV","console","debug","JSON","stringify","defaultValue","context","useFeatureFlagContext","useMemo","flag","getFlag","isLoading","error","isEnabled","enabled","Boolean","keys","defaultValues","flags","values","enabledCount","forEach","fallbackValue","isAnyEnabled","areAllEnabled","length","enabledFlags","filter","disabledFlags","enabledValue","disabledValue","refresh","refreshFlags","isRefreshing","experimentKey","variants","defaultVariant","flagValue","flagExists","variant","isInExperiment"],"mappings":"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"}