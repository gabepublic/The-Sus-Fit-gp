63654ad60ff721b5ce4fd8aafe5d268c
// Feature Flag Hooks
// Custom React hooks for accessing feature flags with type safety and error handling
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAllFeatureFlags: function() {
        return useAllFeatureFlags;
    },
    useAllFeatureFlagsEnabled: function() {
        return useAllFeatureFlagsEnabled;
    },
    useAnyFeatureFlagEnabled: function() {
        return useAnyFeatureFlagEnabled;
    },
    useExperimentVariant: function() {
        return useExperimentVariant;
    },
    useFeatureFlag: function() {
        return useFeatureFlag;
    },
    useFeatureFlagEnabled: function() {
        return useFeatureFlagEnabled;
    },
    useFeatureFlagNumber: function() {
        return useFeatureFlagNumber;
    },
    useFeatureFlagRefresh: function() {
        return useFeatureFlagRefresh;
    },
    useFeatureFlagString: function() {
        return useFeatureFlagString;
    },
    useFeatureFlagValue: function() {
        return useFeatureFlagValue;
    },
    useFeatureFlags: function() {
        return useFeatureFlags;
    }
});
const _react = require("react");
const _FeatureFlagContext = require("../providers/FeatureFlagContext");
// Development logging utility
const logFlagUsage = (key, value, source)=>{
    if (process.env.NODE_ENV === 'development') {
        console.debug(`[FeatureFlag] ${key}: ${JSON.stringify(value)} (${source})`);
    }
};
function useFeatureFlag(key, defaultValue) {
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    return (0, _react.useMemo)(()=>{
        const flag = context.getFlag(key);
        const isLoading = context.isLoading;
        const error = context.error;
        // Determine the final value
        let value;
        let isEnabled = false;
        let source = 'default';
        if (flag && flag.enabled) {
            value = flag.value;
            isEnabled = Boolean(flag.value);
            source = 'flag';
        } else {
            value = defaultValue;
            isEnabled = Boolean(defaultValue);
            source = 'default';
        }
        // Log usage in development
        logFlagUsage(key, value, source);
        return {
            flag,
            isEnabled,
            value,
            isLoading,
            error
        };
    }, [
        key,
        defaultValue,
        context
    ]);
}
function useFeatureFlagEnabled(key, defaultValue = false) {
    return useFeatureFlag(key, defaultValue);
}
function useFeatureFlagString(key, defaultValue = '') {
    return useFeatureFlag(key, defaultValue);
}
function useFeatureFlagNumber(key, defaultValue = 0) {
    return useFeatureFlag(key, defaultValue);
}
function useFeatureFlags(keys, defaultValues) {
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    return (0, _react.useMemo)(()=>{
        const flags = {};
        const values = {};
        let enabledCount = 0;
        keys.forEach((key)=>{
            const flag = context.getFlag(key);
            const defaultValue = defaultValues?.[key];
            flags[key] = flag;
            if (flag && flag.enabled) {
                values[key] = flag.value;
                if (flag.value) enabledCount++;
                logFlagUsage(key, flag.value, 'flag');
            } else {
                const fallbackValue = defaultValue ?? false;
                values[key] = fallbackValue;
                if (fallbackValue) enabledCount++;
                logFlagUsage(key, fallbackValue, 'default');
            }
        });
        return {
            flags,
            values,
            isLoading: context.isLoading,
            error: context.error,
            isAnyEnabled: enabledCount > 0,
            areAllEnabled: enabledCount === keys.length
        };
    }, [
        keys,
        defaultValues,
        context
    ]);
}
function useAnyFeatureFlagEnabled(keys) {
    const { values, isLoading, error } = useFeatureFlags(keys);
    return (0, _react.useMemo)(()=>{
        const enabledFlags = keys.filter((key)=>Boolean(values[key]));
        return {
            isEnabled: enabledFlags.length > 0,
            enabledFlags,
            isLoading,
            error
        };
    }, [
        keys,
        values,
        isLoading,
        error
    ]);
}
function useAllFeatureFlagsEnabled(keys) {
    const { values, isLoading, error } = useFeatureFlags(keys);
    return (0, _react.useMemo)(()=>{
        const disabledFlags = keys.filter((key)=>!Boolean(values[key]));
        return {
            isEnabled: disabledFlags.length === 0,
            disabledFlags,
            isLoading,
            error
        };
    }, [
        keys,
        values,
        isLoading,
        error
    ]);
}
function useFeatureFlagValue(key, enabledValue, disabledValue) {
    const { isEnabled, isLoading, error } = useFeatureFlagEnabled(key);
    return (0, _react.useMemo)(()=>({
            value: isEnabled ? enabledValue : disabledValue,
            isEnabled,
            isLoading,
            error
        }), [
        isEnabled,
        enabledValue,
        disabledValue,
        isLoading,
        error
    ]);
}
function useFeatureFlagRefresh() {
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    return (0, _react.useMemo)(()=>({
            refresh: context.refreshFlags,
            isRefreshing: context.isLoading,
            error: context.error
        }), [
        context
    ]);
}
function useAllFeatureFlags() {
    const context = (0, _FeatureFlagContext.useFeatureFlagContext)();
    return (0, _react.useMemo)(()=>{
        if (process.env.NODE_ENV !== 'development') {
            return null;
        }
        return {
            flags: context.flags,
            isLoading: context.isLoading,
            error: context.error
        };
    }, [
        context
    ]);
}
function useExperimentVariant(experimentKey, variants, defaultVariant) {
    const { flag, value: flagValue, isEnabled, isLoading, error } = useFeatureFlagString(experimentKey, defaultVariant);
    return (0, _react.useMemo)(()=>{
        const flagExists = Boolean(flag);
        const variant = flagExists && isEnabled && flagValue in variants ? flagValue : defaultVariant;
        const value = variants[variant] || variants[defaultVariant];
        if (process.env.NODE_ENV === 'development') {
            console.debug(`[Experiment] ${experimentKey}: variant=${variant}, value=${JSON.stringify(value)}, flagExists=${flagExists}`);
        }
        return {
            variant,
            value,
            isInExperiment: flagExists && isEnabled && flagValue in variants,
            isLoading,
            error
        };
    }, [
        experimentKey,
        variants,
        defaultVariant,
        flag,
        flagValue,
        isEnabled,
        isLoading,
        error
    ]);
}

//# sourceMappingURL=data:application/json;base64,