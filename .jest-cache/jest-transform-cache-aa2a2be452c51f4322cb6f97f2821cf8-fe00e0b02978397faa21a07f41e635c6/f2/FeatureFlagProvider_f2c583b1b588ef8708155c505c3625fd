6709ad8517bbb4c55808d2adcfa891be
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FeatureFlagProvider", {
    enumerable: true,
    get: function() {
        return FeatureFlagProvider;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactquery = require("@tanstack/react-query");
const _FeatureFlagContext = require("./FeatureFlagContext");
const _ErrorBoundary = require("./ErrorBoundary");
const _featureFlagtypes = require("../types/featureFlag.types");
const _constants = require("../config/constants");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Default configuration
const DEFAULT_CONFIG = {
    flags: [
        ..._featureFlagtypes.DEFAULT_TRYON_FLAGS,
        ..._featureFlagtypes.DEFAULT_IMAGE_PROCESSING_FLAGS,
        ..._featureFlagtypes.DEFAULT_UI_FLAGS
    ],
    environment: process.env.NODE_ENV || 'development',
    enableRemoteConfig: false,
    refreshInterval: 5 * 60 * 1000,
    fallbackToDefaults: true
};
// Utility function to create feature flag from config
const createFeatureFlagFromConfig = (config, environment)=>{
    // Check if flag is enabled for current environment
    const isEnabledForEnvironment = !config.environment || config.environment.includes(environment);
    return {
        key: config.key,
        description: config.description,
        category: config.category,
        defaultValue: config.defaultValue,
        type: config.type,
        environment: config.environment,
        enabled: isEnabledForEnvironment,
        value: config.defaultValue,
        lastUpdated: new Date().toISOString()
    };
};
// Mock function for remote config fetching (to be implemented)
const fetchRemoteFlags = async (url)=>{
    // TODO: Implement actual remote config fetching
    if (!url) {
        throw new Error('Remote config URL not provided');
    }
    // For now, return empty array - this would be replaced with actual API call
    return [];
};
// Environment variable parser for feature flags
const parseEnvironmentFlags = ()=>{
    const envFlags = {};
    // Parse environment variables with FEATURE_FLAG_ prefix
    Object.entries(process.env).forEach(([key, value])=>{
        if (key.startsWith('FEATURE_FLAG_') && value !== undefined) {
            const flagKey = key.replace('FEATURE_FLAG_', '').toLowerCase();
            // Try to parse as boolean
            if (value === 'true' || value === 'false') {
                envFlags[flagKey] = value === 'true';
            } else if (!isNaN(Number(value))) {
                envFlags[flagKey] = Number(value);
            } else {
                envFlags[flagKey] = value;
            }
        }
    });
    return envFlags;
};
const FeatureFlagProviderContent = ({ children, config = {}, environment = DEFAULT_CONFIG.environment, initialFlags = DEFAULT_CONFIG.flags, enableRemoteConfig = DEFAULT_CONFIG.enableRemoteConfig, fallbackToDefaults = DEFAULT_CONFIG.fallbackToDefaults, onError })=>{
    const mergedConfig = (0, _react.useMemo)(()=>({
            ...DEFAULT_CONFIG,
            ...config,
            flags: initialFlags,
            environment,
            enableRemoteConfig,
            fallbackToDefaults
        }), [
        config,
        environment,
        initialFlags,
        enableRemoteConfig,
        fallbackToDefaults
    ]);
    // Query for remote feature flags (if enabled)
    const { data: remoteFlags = [], isLoading: isLoadingRemote, error: remoteError, refetch: refetchRemoteFlags } = (0, _reactquery.useQuery)({
        queryKey: [
            ..._constants.QUERY_KEYS.FEATURE_FLAGS,
            'remote',
            mergedConfig.remoteConfigUrl
        ],
        queryFn: ()=>fetchRemoteFlags(mergedConfig.remoteConfigUrl),
        enabled: enableRemoteConfig && !!mergedConfig.remoteConfigUrl,
        staleTime: mergedConfig.refreshInterval,
        retry: 2,
        retryDelay: 1000
    });
    // Combine local and remote flags with environment overrides
    const combinedFlags = (0, _react.useMemo)(()=>{
        const envFlags = parseEnvironmentFlags();
        const allConfigs = [
            ...mergedConfig.flags,
            ...remoteFlags
        ];
        const flagMap = {};
        // Create flags from configurations
        allConfigs.forEach((flagConfig)=>{
            const flag = createFeatureFlagFromConfig(flagConfig, environment);
            // Override with environment variable if available
            const envValue = envFlags[flagConfig.key.toLowerCase()];
            if (envValue !== undefined) {
                flag.value = envValue;
            }
            flagMap[flagConfig.key] = flag;
        });
        return flagMap;
    }, [
        mergedConfig.flags,
        remoteFlags,
        environment
    ]);
    // Context value implementation
    const contextValue = (0, _react.useMemo)(()=>{
        const getFlag = (key)=>{
            const flag = combinedFlags[key];
            return flag;
        };
        const isEnabled = (key)=>{
            const flag = combinedFlags[key];
            return flag ? flag.enabled && Boolean(flag.value) : false;
        };
        const getValue = (key, defaultValue)=>{
            const flag = combinedFlags[key];
            if (!flag || !flag.enabled) {
                return defaultValue;
            }
            return flag.value;
        };
        const updateFlag = (key, value)=>{
            const flag = combinedFlags[key];
            if (flag) {
                flag.value = value;
                flag.lastUpdated = new Date().toISOString();
            }
        };
        const refreshFlags = async ()=>{
            if (enableRemoteConfig) {
                await refetchRemoteFlags();
            }
        };
        return {
            flags: combinedFlags,
            getFlag,
            isEnabled,
            getValue,
            updateFlag,
            refreshFlags,
            isLoading: isLoadingRemote,
            error: remoteError instanceof Error ? remoteError : null
        };
    }, [
        combinedFlags,
        isLoadingRemote,
        remoteError,
        refetchRemoteFlags,
        enableRemoteConfig
    ]);
    // Handle errors
    _react.default.useEffect(()=>{
        if (remoteError && onError) {
            onError(remoteError instanceof Error ? remoteError : new Error('Unknown feature flag error'));
        }
    }, [
        remoteError,
        onError
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeatureFlagContext.FeatureFlagContext.Provider, {
        value: contextValue,
        children: children
    });
};
const FeatureFlagProvider = (props)=>{
    const { onError, fallbackToDefaults = true } = props;
    const handleError = (0, _react.useCallback)((error)=>{
        console.error('FeatureFlagProvider Error:', error);
        onError?.(error);
    }, [
        onError
    ]);
    // Fallback component for error boundary
    const ErrorFallback = (0, _react.useCallback)(({ error, resetError })=>{
        if (!fallbackToDefaults) {
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "feature-flag-error",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                        children: "Feature Flag Error"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        children: error.message
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: resetError,
                        children: "Retry"
                    })
                ]
            });
        }
        // Render children with default flags only
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(FeatureFlagProviderContent, {
            ...props,
            enableRemoteConfig: false,
            config: {
                ...props.config,
                enableRemoteConfig: false
            }
        });
    }, [
        fallbackToDefaults,
        props
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
        onError: handleError,
        fallback: ErrorFallback,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(FeatureFlagProviderContent, {
            ...props
        })
    });
};

//# sourceMappingURL=data:application/json;base64,