15d9fd640b691d5e0aaf545a3e5bd7ea
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTryonMutation", {
    enumerable: true,
    get: function() {
        return useTryonMutation;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _imageProcessing = require("../utils/imageProcessing");
const _image = require("../../utils/image");
const _errorHandling = require("../utils/errorHandling");
const _optimisticUpdates = require("../utils/optimisticUpdates");
const _cacheInvalidation = require("../utils/cacheInvalidation");
/**
 * API endpoint for try-on requests
 */ const TRYON_API_ENDPOINT = '/api/tryon';
/**
 * Default configuration for the try-on mutation
 */ const DEFAULT_CONFIG = {
    enableRetry: true,
    maxRetries: 3,
    initialRetryDelay: 1000,
    enableOptimisticUpdates: false
};
/**
 * Mutation function that calls the try-on API
 */ async function tryonMutationFn(variables) {
    const { modelImage, apparelImages, options } = variables;
    // Prepare request payload
    const payload = {
        modelImage,
        apparelImages,
        ...options?.metadata && {
            metadata: options.metadata
        }
    };
    // Configure request options
    const requestInit = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    };
    // Add timeout if specified
    if (options?.timeout) {
        const controller = new AbortController();
        const timeoutId = setTimeout(()=>controller.abort(), options.timeout);
        requestInit.signal = controller.signal;
        try {
            const response = await fetch(TRYON_API_ENDPOINT, requestInit);
            clearTimeout(timeoutId);
            return handleApiResponse(response);
        } catch (error) {
            clearTimeout(timeoutId);
            throw error;
        }
    }
    // Standard request without timeout
    const response = await fetch(TRYON_API_ENDPOINT, requestInit);
    return handleApiResponse(response);
}
/**
 * Handle API response and convert to appropriate format
 */ async function handleApiResponse(response) {
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        const error = {
            error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,
            details: errorData.details,
            code: errorData.code,
            status: response.status,
            retryable: response.status >= 500 || response.status === 408 || response.status === 429
        };
        throw error;
    }
    const data = await response.json();
    // Validate response structure
    if (!data.img_generated) {
        throw new Error('Invalid API response: missing img_generated field');
    }
    return {
        img_generated: data.img_generated,
        metadata: data.metadata
    };
}
/**
 * Determine if an error is retryable using comprehensive classification
 */ function isRetryableError(error) {
    // First check if error has explicit retryable property
    if (error && typeof error === 'object' && 'retryable' in error) {
        return Boolean(error.retryable);
    }
    // Use comprehensive error classification
    return (0, _errorHandling.isErrorRetryable)(error);
}
/**
 * Process image inputs if they are File objects
 */ async function processImageInputs(variables, imageProcessingOptions) {
    const startTime = Date.now();
    // Check if we have File objects to process
    const hasFileInputs = variables.modelImage instanceof File || variables.apparelImages.some((img)=>img instanceof File);
    if (!hasFileInputs) {
        // All inputs are already base64 strings
        return {
            processedVariables: variables
        };
    }
    try {
        let modelImageResult;
        const apparelImageResults = [];
        let processedModelImage;
        const processedApparelImages = [];
        // Process model image if it's a File
        if (variables.modelImage instanceof File) {
            const processedImage = await (0, _imageProcessing.processImageForTryon)(variables.modelImage, imageProcessingOptions);
            modelImageResult = processedImage;
            processedModelImage = processedImage.processedImage;
        } else {
            processedModelImage = variables.modelImage;
        }
        // Process apparel images
        for(let i = 0; i < variables.apparelImages.length; i++){
            const image = variables.apparelImages[i];
            if (image instanceof File) {
                const processedImage = await (0, _imageProcessing.processImageForTryon)(image, imageProcessingOptions);
                apparelImageResults.push(processedImage);
                processedApparelImages.push(processedImage.processedImage);
            } else {
                processedApparelImages.push(image);
            }
        }
        const totalProcessingTime = Date.now() - startTime;
        return {
            processedVariables: {
                modelImage: processedModelImage,
                apparelImages: processedApparelImages,
                options: variables.options
            },
            imageProcessingResults: {
                modelImageResult,
                apparelImageResults: apparelImageResults.length > 0 ? apparelImageResults : undefined,
                totalProcessingTime
            }
        };
    } catch (error) {
        // Re-throw known image processing errors
        if (error instanceof _image.FileTypeNotSupportedError || error instanceof _image.FileTooLargeError || error instanceof _image.CompressionFailedError || error instanceof _imageProcessing.ImageProcessingError || error instanceof _imageProcessing.ImageDimensionError) {
            throw error;
        }
        // Wrap unknown errors
        throw new _imageProcessing.ImageProcessingError('Unexpected error during image processing', error instanceof Error ? error : new Error(String(error)));
    }
}
/**
 * Create mutation context for lifecycle tracking
 */ function createMutationContext(variables, retryCount = 0, previousError, imageProcessingResults) {
    return {
        variables,
        startTime: Date.now(),
        retryCount,
        previousError,
        imageProcessingResults
    };
}
function useTryonMutation(config = {}) {
    const queryClient = (0, _reactquery.useQueryClient)();
    // Merge configuration with defaults
    const mergedConfig = (0, _react.useMemo)(()=>({
            ...DEFAULT_CONFIG,
            ...config
        }), [
        config
    ]);
    // Get optimistic updates manager instance
    const optimisticManager = (0, _react.useMemo)(()=>{
        try {
            return (0, _optimisticUpdates.getOptimisticUpdatesManager)();
        } catch  {
            // Initialize if not already initialized
            return new (require('../utils/optimisticUpdates')).OptimisticUpdatesManager(queryClient);
        }
    }, [
        queryClient
    ]);
    // Track active optimistic updates
    const activeOptimisticUpdates = (0, _react.useMemo)(()=>new Map(), []);
    // Define lifecycle callbacks with useCallback
    const onMutateCallback = (0, _react.useCallback)(async (variables)=>{
        try {
            // Extract image processing options from config and variables (variables take precedence)
            const configOptions = mergedConfig.imageProcessing ? {
                targetWidth: mergedConfig.imageProcessing.targetWidth,
                targetHeight: mergedConfig.imageProcessing.targetHeight,
                maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,
                quality: mergedConfig.imageProcessing.compressionQuality,
                preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio
            } : undefined;
            const variableOptions = variables.options?.imageProcessing ? {
                targetWidth: variables.options.imageProcessing.targetWidth,
                targetHeight: variables.options.imageProcessing.targetHeight,
                maxSizeKB: variables.options.imageProcessing.maxSizeKB,
                quality: variables.options.imageProcessing.compressionQuality,
                preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio
            } : undefined;
            // Merge options with variable options taking precedence
            const imageProcessingOptions = configOptions || variableOptions ? {
                ...configOptions,
                ...variableOptions
            } : undefined;
            // Process images if needed
            const { processedVariables, imageProcessingResults } = await processImageInputs(variables, imageProcessingOptions);
            // Create context with processed variables and image processing results
            const context = createMutationContext(processedVariables, 0, undefined, imageProcessingResults);
            // Start optimistic updates if enabled
            let optimisticId;
            if (mergedConfig.enableOptimisticUpdates) {
                try {
                    const optimisticContext = optimisticManager.startOptimisticUpdate(processedVariables, mergedConfig.optimisticConfig);
                    optimisticId = optimisticContext.optimisticId;
                    activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);
                    // Add optimistic ID to context for tracking
                    context.optimisticId = optimisticId;
                } catch (error) {
                    console.warn('Failed to start optimistic updates:', error);
                }
            }
            // Call user-provided onMutate if available
            if (mergedConfig.onMutate) {
                const userContext = await mergedConfig.onMutate(processedVariables);
                if (userContext) {
                    return {
                        ...context,
                        ...userContext
                    };
                }
            }
            return context;
        } catch (error) {
            // If image processing fails, still allow user's onMutate to be called
            // but with original variables (assuming they're base64)
            const baseVariables = variables;
            const context = createMutationContext(baseVariables);
            if (mergedConfig.onMutate) {
                const userContext = await mergedConfig.onMutate(baseVariables);
                if (userContext) {
                    return {
                        ...context,
                        ...userContext
                    };
                }
            }
            // Re-throw the error so mutation fails appropriately
            throw error;
        }
    }, [
        mergedConfig,
        optimisticManager,
        activeOptimisticUpdates
    ]);
    const onSuccessCallback = (0, _react.useCallback)(async (data, variables, context)=>{
        // Complete optimistic updates if they were started
        const optimisticId = context.optimisticId;
        if (optimisticId && mergedConfig.enableOptimisticUpdates) {
            try {
                optimisticManager.completeOptimisticUpdate(optimisticId, data, context);
                // Clean up tracking
                const trackingKey = variables.modelImage + variables.apparelImages.join('');
                activeOptimisticUpdates.delete(trackingKey);
            } catch (error) {
                console.warn('Failed to complete optimistic update:', error);
            }
        }
        // Advanced cache invalidation with configurable strategies
        try {
            await (0, _cacheInvalidation.invalidateCacheAfterMutation)(queryClient, data, variables, context, mergedConfig.cacheInvalidationConfig);
        } catch (error) {
            console.warn('Failed to invalidate cache after mutation:', error);
            // Fallback to basic invalidation
            await Promise.allSettled([
                queryClient.invalidateQueries({
                    queryKey: [
                        'tryon-history'
                    ],
                    exact: false
                }),
                queryClient.invalidateQueries({
                    queryKey: [
                        'user-data'
                    ],
                    exact: false
                }),
                queryClient.invalidateQueries({
                    queryKey: [
                        'tryon-stats'
                    ],
                    exact: false
                })
            ]);
        }
        // Call user-provided onSuccess
        if (mergedConfig.onSuccess) {
            mergedConfig.onSuccess(data, variables, context);
        }
    }, [
        mergedConfig,
        queryClient,
        optimisticManager,
        activeOptimisticUpdates
    ]);
    const onErrorCallback = (0, _react.useCallback)((error, variables, context)=>{
        // Rollback optimistic updates if they were started
        const optimisticId = context?.optimisticId;
        if (optimisticId && mergedConfig.enableOptimisticUpdates) {
            try {
                optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
                // Clean up tracking
                const trackingKey = variables.modelImage + variables.apparelImages.join('');
                activeOptimisticUpdates.delete(trackingKey);
            } catch (rollbackError) {
                console.warn('Failed to rollback optimistic update:', rollbackError);
            }
        }
        // Classify and log the error comprehensively
        const classifiedError = (0, _errorHandling.logAndClassifyError)(error, {
            mutationVariables: variables,
            mutationContext: context,
            timestamp: new Date().toISOString()
        });
        // Format error for mutation system compatibility
        const formattedError = {
            error: classifiedError.userMessage,
            details: classifiedError.technicalMessage,
            code: classifiedError.errorCode,
            retryable: classifiedError.retryable,
            // Add classified error information
            category: classifiedError.category,
            severity: classifiedError.severity,
            recoveryActions: classifiedError.recoveryActions
        };
        // Call user-provided onError with enhanced error information
        if (mergedConfig.onError && context) {
            mergedConfig.onError(formattedError, variables, context);
        }
    }, [
        mergedConfig,
        optimisticManager,
        activeOptimisticUpdates
    ]);
    const onSettledCallback = (0, _react.useCallback)((data, error, variables, context)=>{
        // Format error with comprehensive classification if error exists
        let formattedError = null;
        if (error) {
            const classifiedError = (0, _errorHandling.classifyTryonError)(error, {
                mutationVariables: variables,
                mutationContext: context,
                settled: true,
                timestamp: new Date().toISOString()
            });
            formattedError = {
                error: classifiedError.userMessage,
                details: classifiedError.technicalMessage,
                code: classifiedError.errorCode,
                retryable: classifiedError.retryable,
                category: classifiedError.category,
                severity: classifiedError.severity,
                recoveryActions: classifiedError.recoveryActions
            };
        }
        // Final cleanup of any remaining optimistic updates
        if (context) {
            const optimisticId = context.optimisticId;
            if (optimisticId) {
                const trackingKey = variables.modelImage + variables.apparelImages.join('');
                activeOptimisticUpdates.delete(trackingKey);
            }
        }
        // Call user-provided onSettled
        if (mergedConfig.onSettled && context) {
            mergedConfig.onSettled(data, formattedError, variables, context);
        }
    }, [
        mergedConfig,
        activeOptimisticUpdates
    ]);
    // Cleanup effect for optimistic updates on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            // Rollback any remaining optimistic updates when component unmounts
            activeOptimisticUpdates.forEach((optimisticId, trackingKey)=>{
                try {
                    optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
                } catch (error) {
                    console.warn('Failed to cleanup optimistic update on unmount:', error);
                }
            });
            activeOptimisticUpdates.clear();
        };
    }, [
        optimisticManager,
        activeOptimisticUpdates
    ]);
    // Mutation configuration
    const mutationConfig = (0, _react.useMemo)(()=>({
            mutationFn: tryonMutationFn,
            // Custom retry logic
            retry: mergedConfig.enableRetry ? (failureCount, error)=>{
                if (failureCount >= mergedConfig.maxRetries) {
                    return false;
                }
                return isRetryableError(error);
            } : false,
            // Exponential backoff delay
            retryDelay: (attemptIndex)=>{
                return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);
            },
            // Lifecycle callbacks
            onMutate: onMutateCallback,
            onSuccess: onSuccessCallback,
            onError: onErrorCallback,
            onSettled: onSettledCallback
        }), [
        mergedConfig,
        onMutateCallback,
        onSuccessCallback,
        onErrorCallback,
        onSettledCallback
    ]);
    // Use React Query mutation
    const mutation = (0, _reactquery.useMutation)(mutationConfig);
    // Return hook interface
    return (0, _react.useMemo)(()=>({
            mutate: mutation.mutate,
            mutateAsync: mutation.mutateAsync,
            data: mutation.data,
            error: mutation.error,
            isLoading: mutation.isPending,
            isSuccess: mutation.isSuccess,
            isError: mutation.isError,
            isIdle: mutation.isIdle,
            status: mutation.status === 'pending' ? 'loading' : mutation.status,
            reset: mutation.reset,
            context: mutation.context
        }), [
        mutation
    ]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2J1c2luZXNzLWxheWVyL211dGF0aW9ucy91c2VUcnlvbk11dGF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuLy8gVHJ5LU9uIE11dGF0aW9uIEhvb2tcbi8vIFJlYWN0IFF1ZXJ5IG11dGF0aW9uIGhvb2sgZm9yIGhhbmRsaW5nIHRyeS1vbiBBUEkgY2FsbHMgd2l0aCBjb21wcmVoZW5zaXZlIGVycm9yIGhhbmRsaW5nXG5cbmltcG9ydCB7IHVzZU11dGF0aW9uLCB1c2VRdWVyeUNsaWVudCB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUge1xuICBUcnlvbk11dGF0aW9uVmFyaWFibGVzLFxuICBUcnlvbk11dGF0aW9uVmFyaWFibGVzV2l0aEZpbGVzLFxuICBUcnlvbk11dGF0aW9uUmVzcG9uc2UsXG4gIFRyeW9uTXV0YXRpb25FcnJvcixcbiAgVHJ5b25NdXRhdGlvbkNvbnRleHQsXG4gIFVzZVRyeW9uTXV0YXRpb25SZXR1cm4sXG4gIFVzZVRyeW9uTXV0YXRpb25Db25maWdcbn0gZnJvbSAnLi4vdHlwZXMvdHJ5b24udHlwZXMnO1xuaW1wb3J0IHtcbiAgcHJvY2Vzc0ltYWdlRm9yVHJ5b24sXG4gIEltYWdlUHJvY2Vzc2luZ0Vycm9yLFxuICBJbWFnZURpbWVuc2lvbkVycm9yLFxuICB0eXBlIEltYWdlUHJvY2Vzc2luZ09wdGlvbnNcbn0gZnJvbSAnLi4vdXRpbHMvaW1hZ2VQcm9jZXNzaW5nJztcbmltcG9ydCB7XG4gIEZpbGVUeXBlTm90U3VwcG9ydGVkRXJyb3IsXG4gIEZpbGVUb29MYXJnZUVycm9yLFxuICBDb21wcmVzc2lvbkZhaWxlZEVycm9yXG59IGZyb20gJy4uLy4uL3V0aWxzL2ltYWdlJztcbmltcG9ydCB7XG4gIGNsYXNzaWZ5VHJ5b25FcnJvcixcbiAgbG9nQW5kQ2xhc3NpZnlFcnJvcixcbiAgaXNFcnJvclJldHJ5YWJsZSBhcyBpc0Vycm9yUmV0cnlhYmxlRnJvbUNsYXNzaWZpY2F0aW9uXG59IGZyb20gJy4uL3V0aWxzL2Vycm9ySGFuZGxpbmcnO1xuaW1wb3J0IHtcbiAgZ2V0T3B0aW1pc3RpY1VwZGF0ZXNNYW5hZ2VyLFxuICB0eXBlIE9wdGltaXN0aWNVcGRhdGVDb25maWdcbn0gZnJvbSAnLi4vdXRpbHMvb3B0aW1pc3RpY1VwZGF0ZXMnO1xuaW1wb3J0IHtcbiAgZ2V0Q2FjaGVJbnZhbGlkYXRpb25NYW5hZ2VyLFxuICBpbnZhbGlkYXRlQ2FjaGVBZnRlck11dGF0aW9uLFxuICB0eXBlIENhY2hlSW52YWxpZGF0aW9uQ29uZmlnXG59IGZyb20gJy4uL3V0aWxzL2NhY2hlSW52YWxpZGF0aW9uJztcblxuLyoqXG4gKiBBUEkgZW5kcG9pbnQgZm9yIHRyeS1vbiByZXF1ZXN0c1xuICovXG5jb25zdCBUUllPTl9BUElfRU5EUE9JTlQgPSAnL2FwaS90cnlvbic7XG5cbi8qKlxuICogRGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciB0aGUgdHJ5LW9uIG11dGF0aW9uXG4gKi9cbmNvbnN0IERFRkFVTFRfQ09ORklHOiBSZXF1aXJlZDxQaWNrPFVzZVRyeW9uTXV0YXRpb25Db25maWcsICdlbmFibGVSZXRyeScgfCAnbWF4UmV0cmllcycgfCAnaW5pdGlhbFJldHJ5RGVsYXknIHwgJ2VuYWJsZU9wdGltaXN0aWNVcGRhdGVzJz4+ID0ge1xuICBlbmFibGVSZXRyeTogdHJ1ZSxcbiAgbWF4UmV0cmllczogMyxcbiAgaW5pdGlhbFJldHJ5RGVsYXk6IDEwMDAsXG4gIGVuYWJsZU9wdGltaXN0aWNVcGRhdGVzOiBmYWxzZVxufTtcblxuLyoqXG4gKiBNdXRhdGlvbiBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSB0cnktb24gQVBJXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHRyeW9uTXV0YXRpb25Gbih2YXJpYWJsZXM6IFRyeW9uTXV0YXRpb25WYXJpYWJsZXMpOiBQcm9taXNlPFRyeW9uTXV0YXRpb25SZXNwb25zZT4ge1xuICBjb25zdCB7IG1vZGVsSW1hZ2UsIGFwcGFyZWxJbWFnZXMsIG9wdGlvbnMgfSA9IHZhcmlhYmxlcztcbiAgXG4gIC8vIFByZXBhcmUgcmVxdWVzdCBwYXlsb2FkXG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgbW9kZWxJbWFnZSxcbiAgICBhcHBhcmVsSW1hZ2VzLFxuICAgIC4uLihvcHRpb25zPy5tZXRhZGF0YSAmJiB7IG1ldGFkYXRhOiBvcHRpb25zLm1ldGFkYXRhIH0pXG4gIH07XG5cbiAgLy8gQ29uZmlndXJlIHJlcXVlc3Qgb3B0aW9uc1xuICBjb25zdCByZXF1ZXN0SW5pdDogUmVxdWVzdEluaXQgPSB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICB9O1xuXG4gIC8vIEFkZCB0aW1lb3V0IGlmIHNwZWNpZmllZFxuICBpZiAob3B0aW9ucz8udGltZW91dCkge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiBjb250cm9sbGVyLmFib3J0KCksIG9wdGlvbnMudGltZW91dCk7XG4gICAgcmVxdWVzdEluaXQuc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goVFJZT05fQVBJX0VORFBPSU5ULCByZXF1ZXN0SW5pdCk7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIHJldHVybiBoYW5kbGVBcGlSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLy8gU3RhbmRhcmQgcmVxdWVzdCB3aXRob3V0IHRpbWVvdXRcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChUUllPTl9BUElfRU5EUE9JTlQsIHJlcXVlc3RJbml0KTtcbiAgcmV0dXJuIGhhbmRsZUFwaVJlc3BvbnNlKHJlc3BvbnNlKTtcbn1cblxuLyoqXG4gKiBIYW5kbGUgQVBJIHJlc3BvbnNlIGFuZCBjb252ZXJ0IHRvIGFwcHJvcHJpYXRlIGZvcm1hdFxuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVBcGlSZXNwb25zZShyZXNwb25zZTogUmVzcG9uc2UpOiBQcm9taXNlPFRyeW9uTXV0YXRpb25SZXNwb25zZT4ge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7fSkpO1xuICAgIGNvbnN0IGVycm9yOiBUcnlvbk11dGF0aW9uRXJyb3IgPSB7XG4gICAgICBlcnJvcjogZXJyb3JEYXRhLmVycm9yIHx8IGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWAsXG4gICAgICBkZXRhaWxzOiBlcnJvckRhdGEuZGV0YWlscyxcbiAgICAgIGNvZGU6IGVycm9yRGF0YS5jb2RlLFxuICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXRyeWFibGU6IHJlc3BvbnNlLnN0YXR1cyA+PSA1MDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDggfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MjlcbiAgICB9O1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgXG4gIC8vIFZhbGlkYXRlIHJlc3BvbnNlIHN0cnVjdHVyZVxuICBpZiAoIWRhdGEuaW1nX2dlbmVyYXRlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBUEkgcmVzcG9uc2U6IG1pc3NpbmcgaW1nX2dlbmVyYXRlZCBmaWVsZCcpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbWdfZ2VuZXJhdGVkOiBkYXRhLmltZ19nZW5lcmF0ZWQsXG4gICAgbWV0YWRhdGE6IGRhdGEubWV0YWRhdGFcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYW4gZXJyb3IgaXMgcmV0cnlhYmxlIHVzaW5nIGNvbXByZWhlbnNpdmUgY2xhc3NpZmljYXRpb25cbiAqL1xuZnVuY3Rpb24gaXNSZXRyeWFibGVFcnJvcihlcnJvcjogdW5rbm93bik6IGJvb2xlYW4ge1xuICAvLyBGaXJzdCBjaGVjayBpZiBlcnJvciBoYXMgZXhwbGljaXQgcmV0cnlhYmxlIHByb3BlcnR5XG4gIGlmIChlcnJvciAmJiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmICdyZXRyeWFibGUnIGluIGVycm9yKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZXJyb3IucmV0cnlhYmxlKTtcbiAgfVxuICBcbiAgLy8gVXNlIGNvbXByZWhlbnNpdmUgZXJyb3IgY2xhc3NpZmljYXRpb25cbiAgcmV0dXJuIGlzRXJyb3JSZXRyeWFibGVGcm9tQ2xhc3NpZmljYXRpb24oZXJyb3IpO1xufVxuXG4vKipcbiAqIFByb2Nlc3MgaW1hZ2UgaW5wdXRzIGlmIHRoZXkgYXJlIEZpbGUgb2JqZWN0c1xuICovXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzSW1hZ2VJbnB1dHMoXG4gIHZhcmlhYmxlczogVHJ5b25NdXRhdGlvblZhcmlhYmxlcyB8IFRyeW9uTXV0YXRpb25WYXJpYWJsZXNXaXRoRmlsZXMsXG4gIGltYWdlUHJvY2Vzc2luZ09wdGlvbnM/OiBJbWFnZVByb2Nlc3NpbmdPcHRpb25zXG4pOiBQcm9taXNlPHtcbiAgcHJvY2Vzc2VkVmFyaWFibGVzOiBUcnlvbk11dGF0aW9uVmFyaWFibGVzO1xuICBpbWFnZVByb2Nlc3NpbmdSZXN1bHRzPzoge1xuICAgIG1vZGVsSW1hZ2VSZXN1bHQ/OiBpbXBvcnQoJy4uL3V0aWxzL2ltYWdlUHJvY2Vzc2luZycpLkltYWdlUHJvY2Vzc2luZ1Jlc3VsdDtcbiAgICBhcHBhcmVsSW1hZ2VSZXN1bHRzPzogaW1wb3J0KCcuLi91dGlscy9pbWFnZVByb2Nlc3NpbmcnKS5JbWFnZVByb2Nlc3NpbmdSZXN1bHRbXTtcbiAgICB0b3RhbFByb2Nlc3NpbmdUaW1lOiBudW1iZXI7XG4gIH07XG59PiB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gIFxuICAvLyBDaGVjayBpZiB3ZSBoYXZlIEZpbGUgb2JqZWN0cyB0byBwcm9jZXNzXG4gIGNvbnN0IGhhc0ZpbGVJbnB1dHMgPSB2YXJpYWJsZXMubW9kZWxJbWFnZSBpbnN0YW5jZW9mIEZpbGUgfHwgXG4gICAgdmFyaWFibGVzLmFwcGFyZWxJbWFnZXMuc29tZShpbWcgPT4gaW1nIGluc3RhbmNlb2YgRmlsZSk7XG4gIFxuICBpZiAoIWhhc0ZpbGVJbnB1dHMpIHtcbiAgICAvLyBBbGwgaW5wdXRzIGFyZSBhbHJlYWR5IGJhc2U2NCBzdHJpbmdzXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2Nlc3NlZFZhcmlhYmxlczogdmFyaWFibGVzIGFzIFRyeW9uTXV0YXRpb25WYXJpYWJsZXNcbiAgICB9O1xuICB9XG4gIFxuICB0cnkge1xuICAgIGxldCBtb2RlbEltYWdlUmVzdWx0OiBpbXBvcnQoJy4uL3V0aWxzL2ltYWdlUHJvY2Vzc2luZycpLkltYWdlUHJvY2Vzc2luZ1Jlc3VsdCB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBhcHBhcmVsSW1hZ2VSZXN1bHRzOiBpbXBvcnQoJy4uL3V0aWxzL2ltYWdlUHJvY2Vzc2luZycpLkltYWdlUHJvY2Vzc2luZ1Jlc3VsdFtdID0gW107XG4gICAgbGV0IHByb2Nlc3NlZE1vZGVsSW1hZ2U6IHN0cmluZztcbiAgICBjb25zdCBwcm9jZXNzZWRBcHBhcmVsSW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIC8vIFByb2Nlc3MgbW9kZWwgaW1hZ2UgaWYgaXQncyBhIEZpbGVcbiAgICBpZiAodmFyaWFibGVzLm1vZGVsSW1hZ2UgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICBjb25zdCBwcm9jZXNzZWRJbWFnZSA9IGF3YWl0IHByb2Nlc3NJbWFnZUZvclRyeW9uKHZhcmlhYmxlcy5tb2RlbEltYWdlLCBpbWFnZVByb2Nlc3NpbmdPcHRpb25zKTtcbiAgICAgIG1vZGVsSW1hZ2VSZXN1bHQgPSBwcm9jZXNzZWRJbWFnZTtcbiAgICAgIHByb2Nlc3NlZE1vZGVsSW1hZ2UgPSBwcm9jZXNzZWRJbWFnZS5wcm9jZXNzZWRJbWFnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzc2VkTW9kZWxJbWFnZSA9IHZhcmlhYmxlcy5tb2RlbEltYWdlO1xuICAgIH1cbiAgICBcbiAgICAvLyBQcm9jZXNzIGFwcGFyZWwgaW1hZ2VzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YXJpYWJsZXMuYXBwYXJlbEltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW1hZ2UgPSB2YXJpYWJsZXMuYXBwYXJlbEltYWdlc1tpXTtcbiAgICAgIGlmIChpbWFnZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkSW1hZ2UgPSBhd2FpdCBwcm9jZXNzSW1hZ2VGb3JUcnlvbihpbWFnZSwgaW1hZ2VQcm9jZXNzaW5nT3B0aW9ucyk7XG4gICAgICAgIGFwcGFyZWxJbWFnZVJlc3VsdHMucHVzaChwcm9jZXNzZWRJbWFnZSk7XG4gICAgICAgIHByb2Nlc3NlZEFwcGFyZWxJbWFnZXMucHVzaChwcm9jZXNzZWRJbWFnZS5wcm9jZXNzZWRJbWFnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzZWRBcHBhcmVsSW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCB0b3RhbFByb2Nlc3NpbmdUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc2VkVmFyaWFibGVzOiB7XG4gICAgICAgIG1vZGVsSW1hZ2U6IHByb2Nlc3NlZE1vZGVsSW1hZ2UsXG4gICAgICAgIGFwcGFyZWxJbWFnZXM6IHByb2Nlc3NlZEFwcGFyZWxJbWFnZXMsXG4gICAgICAgIG9wdGlvbnM6IHZhcmlhYmxlcy5vcHRpb25zXG4gICAgICB9LFxuICAgICAgaW1hZ2VQcm9jZXNzaW5nUmVzdWx0czoge1xuICAgICAgICBtb2RlbEltYWdlUmVzdWx0LFxuICAgICAgICBhcHBhcmVsSW1hZ2VSZXN1bHRzOiBhcHBhcmVsSW1hZ2VSZXN1bHRzLmxlbmd0aCA+IDAgPyBhcHBhcmVsSW1hZ2VSZXN1bHRzIDogdW5kZWZpbmVkLFxuICAgICAgICB0b3RhbFByb2Nlc3NpbmdUaW1lXG4gICAgICB9XG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBSZS10aHJvdyBrbm93biBpbWFnZSBwcm9jZXNzaW5nIGVycm9yc1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEZpbGVUeXBlTm90U3VwcG9ydGVkRXJyb3IgfHxcbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBGaWxlVG9vTGFyZ2VFcnJvciB8fFxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIENvbXByZXNzaW9uRmFpbGVkRXJyb3IgfHxcbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBJbWFnZVByb2Nlc3NpbmdFcnJvciB8fFxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEltYWdlRGltZW5zaW9uRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBXcmFwIHVua25vd24gZXJyb3JzXG4gICAgdGhyb3cgbmV3IEltYWdlUHJvY2Vzc2luZ0Vycm9yKFxuICAgICAgJ1VuZXhwZWN0ZWQgZXJyb3IgZHVyaW5nIGltYWdlIHByb2Nlc3NpbmcnLFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBtdXRhdGlvbiBjb250ZXh0IGZvciBsaWZlY3ljbGUgdHJhY2tpbmdcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTXV0YXRpb25Db250ZXh0KFxuICB2YXJpYWJsZXM6IFRyeW9uTXV0YXRpb25WYXJpYWJsZXMsXG4gIHJldHJ5Q291bnQgPSAwLFxuICBwcmV2aW91c0Vycm9yPzogRXJyb3IsXG4gIGltYWdlUHJvY2Vzc2luZ1Jlc3VsdHM/OiB7XG4gICAgbW9kZWxJbWFnZVJlc3VsdD86IGltcG9ydCgnLi4vdXRpbHMvaW1hZ2VQcm9jZXNzaW5nJykuSW1hZ2VQcm9jZXNzaW5nUmVzdWx0O1xuICAgIGFwcGFyZWxJbWFnZVJlc3VsdHM/OiBpbXBvcnQoJy4uL3V0aWxzL2ltYWdlUHJvY2Vzc2luZycpLkltYWdlUHJvY2Vzc2luZ1Jlc3VsdFtdO1xuICAgIHRvdGFsUHJvY2Vzc2luZ1RpbWU6IG51bWJlcjtcbiAgfVxuKTogVHJ5b25NdXRhdGlvbkNvbnRleHQge1xuICByZXR1cm4ge1xuICAgIHZhcmlhYmxlcyxcbiAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gICAgcmV0cnlDb3VudCxcbiAgICBwcmV2aW91c0Vycm9yLFxuICAgIGltYWdlUHJvY2Vzc2luZ1Jlc3VsdHNcbiAgfTtcbn1cblxuLyoqXG4gKiBSZWFjdCBRdWVyeSBtdXRhdGlvbiBob29rIGZvciB0cnktb24gZnVuY3Rpb25hbGl0eVxuICogXG4gKiBAcGFyYW0gY29uZmlnIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIG11dGF0aW9uXG4gKiBAcmV0dXJucyBVc2VUcnlvbk11dGF0aW9uUmV0dXJuIG9iamVjdCB3aXRoIG11dGF0aW9uIHN0YXRlIGFuZCBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyeW9uTXV0YXRpb24oY29uZmlnOiBVc2VUcnlvbk11dGF0aW9uQ29uZmlnID0ge30pOiBVc2VUcnlvbk11dGF0aW9uUmV0dXJuIHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICBcbiAgLy8gTWVyZ2UgY29uZmlndXJhdGlvbiB3aXRoIGRlZmF1bHRzXG4gIGNvbnN0IG1lcmdlZENvbmZpZyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAuLi5ERUZBVUxUX0NPTkZJRyxcbiAgICAuLi5jb25maWdcbiAgfSksIFtjb25maWddKTtcblxuICAvLyBHZXQgb3B0aW1pc3RpYyB1cGRhdGVzIG1hbmFnZXIgaW5zdGFuY2VcbiAgY29uc3Qgb3B0aW1pc3RpY01hbmFnZXIgPSB1c2VNZW1vKCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGdldE9wdGltaXN0aWNVcGRhdGVzTWFuYWdlcigpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gSW5pdGlhbGl6ZSBpZiBub3QgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgICAgcmV0dXJuIG5ldyAocmVxdWlyZSgnLi4vdXRpbHMvb3B0aW1pc3RpY1VwZGF0ZXMnKS5PcHRpbWlzdGljVXBkYXRlc01hbmFnZXIpKHF1ZXJ5Q2xpZW50KTtcbiAgICB9XG4gIH0sIFtxdWVyeUNsaWVudF0pO1xuXG4gIC8vIFRyYWNrIGFjdGl2ZSBvcHRpbWlzdGljIHVwZGF0ZXNcbiAgY29uc3QgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXMgPSB1c2VNZW1vKCgpID0+IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCksIFtdKTtcblxuICAvLyBEZWZpbmUgbGlmZWN5Y2xlIGNhbGxiYWNrcyB3aXRoIHVzZUNhbGxiYWNrXG4gIGNvbnN0IG9uTXV0YXRlQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhhc3luYyAodmFyaWFibGVzOiBUcnlvbk11dGF0aW9uVmFyaWFibGVzIHwgVHJ5b25NdXRhdGlvblZhcmlhYmxlc1dpdGhGaWxlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBFeHRyYWN0IGltYWdlIHByb2Nlc3Npbmcgb3B0aW9ucyBmcm9tIGNvbmZpZyBhbmQgdmFyaWFibGVzICh2YXJpYWJsZXMgdGFrZSBwcmVjZWRlbmNlKVxuICAgICAgY29uc3QgY29uZmlnT3B0aW9ucyA9IG1lcmdlZENvbmZpZy5pbWFnZVByb2Nlc3NpbmcgPyB7XG4gICAgICAgIHRhcmdldFdpZHRoOiBtZXJnZWRDb25maWcuaW1hZ2VQcm9jZXNzaW5nLnRhcmdldFdpZHRoLFxuICAgICAgICB0YXJnZXRIZWlnaHQ6IG1lcmdlZENvbmZpZy5pbWFnZVByb2Nlc3NpbmcudGFyZ2V0SGVpZ2h0LFxuICAgICAgICBtYXhTaXplS0I6IG1lcmdlZENvbmZpZy5pbWFnZVByb2Nlc3NpbmcubWF4U2l6ZUtCLFxuICAgICAgICBxdWFsaXR5OiBtZXJnZWRDb25maWcuaW1hZ2VQcm9jZXNzaW5nLmNvbXByZXNzaW9uUXVhbGl0eSxcbiAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogbWVyZ2VkQ29uZmlnLmltYWdlUHJvY2Vzc2luZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvXG4gICAgICB9IDogdW5kZWZpbmVkO1xuICAgICAgXG4gICAgICBjb25zdCB2YXJpYWJsZU9wdGlvbnMgPSB2YXJpYWJsZXMub3B0aW9ucz8uaW1hZ2VQcm9jZXNzaW5nID8ge1xuICAgICAgICB0YXJnZXRXaWR0aDogdmFyaWFibGVzLm9wdGlvbnMuaW1hZ2VQcm9jZXNzaW5nLnRhcmdldFdpZHRoLFxuICAgICAgICB0YXJnZXRIZWlnaHQ6IHZhcmlhYmxlcy5vcHRpb25zLmltYWdlUHJvY2Vzc2luZy50YXJnZXRIZWlnaHQsXG4gICAgICAgIG1heFNpemVLQjogdmFyaWFibGVzLm9wdGlvbnMuaW1hZ2VQcm9jZXNzaW5nLm1heFNpemVLQixcbiAgICAgICAgcXVhbGl0eTogdmFyaWFibGVzLm9wdGlvbnMuaW1hZ2VQcm9jZXNzaW5nLmNvbXByZXNzaW9uUXVhbGl0eSxcbiAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogdmFyaWFibGVzLm9wdGlvbnMuaW1hZ2VQcm9jZXNzaW5nLnByZXNlcnZlQXNwZWN0UmF0aW9cbiAgICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgICBcbiAgICAgIC8vIE1lcmdlIG9wdGlvbnMgd2l0aCB2YXJpYWJsZSBvcHRpb25zIHRha2luZyBwcmVjZWRlbmNlXG4gICAgICBjb25zdCBpbWFnZVByb2Nlc3NpbmdPcHRpb25zOiBJbWFnZVByb2Nlc3NpbmdPcHRpb25zIHwgdW5kZWZpbmVkID0gXG4gICAgICAgIGNvbmZpZ09wdGlvbnMgfHwgdmFyaWFibGVPcHRpb25zID8ge1xuICAgICAgICAgIC4uLmNvbmZpZ09wdGlvbnMsXG4gICAgICAgICAgLi4udmFyaWFibGVPcHRpb25zXG4gICAgICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgaW1hZ2VzIGlmIG5lZWRlZFxuICAgICAgY29uc3QgeyBwcm9jZXNzZWRWYXJpYWJsZXMsIGltYWdlUHJvY2Vzc2luZ1Jlc3VsdHMgfSA9IGF3YWl0IHByb2Nlc3NJbWFnZUlucHV0cyhcbiAgICAgICAgdmFyaWFibGVzLCBcbiAgICAgICAgaW1hZ2VQcm9jZXNzaW5nT3B0aW9uc1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGNvbnRleHQgd2l0aCBwcm9jZXNzZWQgdmFyaWFibGVzIGFuZCBpbWFnZSBwcm9jZXNzaW5nIHJlc3VsdHNcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVNdXRhdGlvbkNvbnRleHQoXG4gICAgICAgIHByb2Nlc3NlZFZhcmlhYmxlcyxcbiAgICAgICAgMCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBpbWFnZVByb2Nlc3NpbmdSZXN1bHRzXG4gICAgICApO1xuXG4gICAgICAvLyBTdGFydCBvcHRpbWlzdGljIHVwZGF0ZXMgaWYgZW5hYmxlZFxuICAgICAgbGV0IG9wdGltaXN0aWNJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgaWYgKG1lcmdlZENvbmZpZy5lbmFibGVPcHRpbWlzdGljVXBkYXRlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IG9wdGltaXN0aWNDb250ZXh0ID0gb3B0aW1pc3RpY01hbmFnZXIuc3RhcnRPcHRpbWlzdGljVXBkYXRlKFxuICAgICAgICAgICAgcHJvY2Vzc2VkVmFyaWFibGVzLFxuICAgICAgICAgICAgbWVyZ2VkQ29uZmlnLm9wdGltaXN0aWNDb25maWdcbiAgICAgICAgICApO1xuICAgICAgICAgIG9wdGltaXN0aWNJZCA9IG9wdGltaXN0aWNDb250ZXh0Lm9wdGltaXN0aWNJZDtcbiAgICAgICAgICBhY3RpdmVPcHRpbWlzdGljVXBkYXRlcy5zZXQocHJvY2Vzc2VkVmFyaWFibGVzLm1vZGVsSW1hZ2UgKyBwcm9jZXNzZWRWYXJpYWJsZXMuYXBwYXJlbEltYWdlcy5qb2luKCcnKSwgb3B0aW1pc3RpY0lkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBZGQgb3B0aW1pc3RpYyBJRCB0byBjb250ZXh0IGZvciB0cmFja2luZ1xuICAgICAgICAgIGNvbnRleHQub3B0aW1pc3RpY0lkID0gb3B0aW1pc3RpY0lkO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHN0YXJ0IG9wdGltaXN0aWMgdXBkYXRlczonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2FsbCB1c2VyLXByb3ZpZGVkIG9uTXV0YXRlIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKG1lcmdlZENvbmZpZy5vbk11dGF0ZSkge1xuICAgICAgICBjb25zdCB1c2VyQ29udGV4dCA9IGF3YWl0IG1lcmdlZENvbmZpZy5vbk11dGF0ZShwcm9jZXNzZWRWYXJpYWJsZXMpO1xuICAgICAgICBpZiAodXNlckNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4geyAuLi5jb250ZXh0LCAuLi51c2VyQ29udGV4dCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBpbWFnZSBwcm9jZXNzaW5nIGZhaWxzLCBzdGlsbCBhbGxvdyB1c2VyJ3Mgb25NdXRhdGUgdG8gYmUgY2FsbGVkXG4gICAgICAvLyBidXQgd2l0aCBvcmlnaW5hbCB2YXJpYWJsZXMgKGFzc3VtaW5nIHRoZXkncmUgYmFzZTY0KVxuICAgICAgY29uc3QgYmFzZVZhcmlhYmxlcyA9IHZhcmlhYmxlcyBhcyBUcnlvbk11dGF0aW9uVmFyaWFibGVzO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZU11dGF0aW9uQ29udGV4dChiYXNlVmFyaWFibGVzKTtcbiAgICAgIFxuICAgICAgaWYgKG1lcmdlZENvbmZpZy5vbk11dGF0ZSkge1xuICAgICAgICBjb25zdCB1c2VyQ29udGV4dCA9IGF3YWl0IG1lcmdlZENvbmZpZy5vbk11dGF0ZShiYXNlVmFyaWFibGVzKTtcbiAgICAgICAgaWYgKHVzZXJDb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIHsgLi4uY29udGV4dCwgLi4udXNlckNvbnRleHQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBSZS10aHJvdyB0aGUgZXJyb3Igc28gbXV0YXRpb24gZmFpbHMgYXBwcm9wcmlhdGVseVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LCBbbWVyZ2VkQ29uZmlnLCBvcHRpbWlzdGljTWFuYWdlciwgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXNdKTtcblxuICBjb25zdCBvblN1Y2Nlc3NDYWxsYmFjayA9IHVzZUNhbGxiYWNrKGFzeW5jIChcbiAgICBkYXRhOiBUcnlvbk11dGF0aW9uUmVzcG9uc2UsXG4gICAgdmFyaWFibGVzOiBUcnlvbk11dGF0aW9uVmFyaWFibGVzLFxuICAgIGNvbnRleHQ6IFRyeW9uTXV0YXRpb25Db250ZXh0XG4gICkgPT4ge1xuICAgIC8vIENvbXBsZXRlIG9wdGltaXN0aWMgdXBkYXRlcyBpZiB0aGV5IHdlcmUgc3RhcnRlZFxuICAgIGNvbnN0IG9wdGltaXN0aWNJZCA9IGNvbnRleHQub3B0aW1pc3RpY0lkO1xuICAgIGlmIChvcHRpbWlzdGljSWQgJiYgbWVyZ2VkQ29uZmlnLmVuYWJsZU9wdGltaXN0aWNVcGRhdGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpbWlzdGljTWFuYWdlci5jb21wbGV0ZU9wdGltaXN0aWNVcGRhdGUob3B0aW1pc3RpY0lkLCBkYXRhLCBjb250ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFuIHVwIHRyYWNraW5nXG4gICAgICAgIGNvbnN0IHRyYWNraW5nS2V5ID0gdmFyaWFibGVzLm1vZGVsSW1hZ2UgKyB2YXJpYWJsZXMuYXBwYXJlbEltYWdlcy5qb2luKCcnKTtcbiAgICAgICAgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXMuZGVsZXRlKHRyYWNraW5nS2V5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGNvbXBsZXRlIG9wdGltaXN0aWMgdXBkYXRlOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZHZhbmNlZCBjYWNoZSBpbnZhbGlkYXRpb24gd2l0aCBjb25maWd1cmFibGUgc3RyYXRlZ2llc1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpbnZhbGlkYXRlQ2FjaGVBZnRlck11dGF0aW9uKFxuICAgICAgICBxdWVyeUNsaWVudCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBtZXJnZWRDb25maWcuY2FjaGVJbnZhbGlkYXRpb25Db25maWdcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGludmFsaWRhdGUgY2FjaGUgYWZ0ZXIgbXV0YXRpb246JywgZXJyb3IpO1xuICAgICAgXG4gICAgICAvLyBGYWxsYmFjayB0byBiYXNpYyBpbnZhbGlkYXRpb25cbiAgICAgIGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChbXG4gICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgXG4gICAgICAgICAgcXVlcnlLZXk6IFsndHJ5b24taGlzdG9yeSddLFxuICAgICAgICAgIGV4YWN0OiBmYWxzZSBcbiAgICAgICAgfSksXG4gICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgXG4gICAgICAgICAgcXVlcnlLZXk6IFsndXNlci1kYXRhJ10sXG4gICAgICAgICAgZXhhY3Q6IGZhbHNlIFxuICAgICAgICB9KSxcbiAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoeyBcbiAgICAgICAgICBxdWVyeUtleTogWyd0cnlvbi1zdGF0cyddLFxuICAgICAgICAgIGV4YWN0OiBmYWxzZSBcbiAgICAgICAgfSlcbiAgICAgIF0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBDYWxsIHVzZXItcHJvdmlkZWQgb25TdWNjZXNzXG4gICAgaWYgKG1lcmdlZENvbmZpZy5vblN1Y2Nlc3MpIHtcbiAgICAgIG1lcmdlZENvbmZpZy5vblN1Y2Nlc3MoZGF0YSwgdmFyaWFibGVzLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sIFttZXJnZWRDb25maWcsIHF1ZXJ5Q2xpZW50LCBvcHRpbWlzdGljTWFuYWdlciwgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXNdKTtcblxuICBjb25zdCBvbkVycm9yQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoXG4gICAgZXJyb3I6IHVua25vd24sXG4gICAgdmFyaWFibGVzOiBUcnlvbk11dGF0aW9uVmFyaWFibGVzLFxuICAgIGNvbnRleHQ6IFRyeW9uTXV0YXRpb25Db250ZXh0IHwgdW5kZWZpbmVkXG4gICkgPT4ge1xuICAgIC8vIFJvbGxiYWNrIG9wdGltaXN0aWMgdXBkYXRlcyBpZiB0aGV5IHdlcmUgc3RhcnRlZFxuICAgIGNvbnN0IG9wdGltaXN0aWNJZCA9IGNvbnRleHQ/Lm9wdGltaXN0aWNJZDtcbiAgICBpZiAob3B0aW1pc3RpY0lkICYmIG1lcmdlZENvbmZpZy5lbmFibGVPcHRpbWlzdGljVXBkYXRlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW1pc3RpY01hbmFnZXIucm9sbGJhY2tPcHRpbWlzdGljVXBkYXRlKG9wdGltaXN0aWNJZCwgZXJyb3IpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYW4gdXAgdHJhY2tpbmdcbiAgICAgICAgY29uc3QgdHJhY2tpbmdLZXkgPSB2YXJpYWJsZXMubW9kZWxJbWFnZSArIHZhcmlhYmxlcy5hcHBhcmVsSW1hZ2VzLmpvaW4oJycpO1xuICAgICAgICBhY3RpdmVPcHRpbWlzdGljVXBkYXRlcy5kZWxldGUodHJhY2tpbmdLZXkpO1xuICAgICAgfSBjYXRjaCAocm9sbGJhY2tFcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byByb2xsYmFjayBvcHRpbWlzdGljIHVwZGF0ZTonLCByb2xsYmFja0Vycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDbGFzc2lmeSBhbmQgbG9nIHRoZSBlcnJvciBjb21wcmVoZW5zaXZlbHlcbiAgICBjb25zdCBjbGFzc2lmaWVkRXJyb3IgPSBsb2dBbmRDbGFzc2lmeUVycm9yKGVycm9yLCB7XG4gICAgICBtdXRhdGlvblZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgbXV0YXRpb25Db250ZXh0OiBjb250ZXh0LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KTtcblxuICAgIC8vIEZvcm1hdCBlcnJvciBmb3IgbXV0YXRpb24gc3lzdGVtIGNvbXBhdGliaWxpdHlcbiAgICBjb25zdCBmb3JtYXR0ZWRFcnJvcjogVHJ5b25NdXRhdGlvbkVycm9yID0ge1xuICAgICAgZXJyb3I6IGNsYXNzaWZpZWRFcnJvci51c2VyTWVzc2FnZSxcbiAgICAgIGRldGFpbHM6IGNsYXNzaWZpZWRFcnJvci50ZWNobmljYWxNZXNzYWdlLFxuICAgICAgY29kZTogY2xhc3NpZmllZEVycm9yLmVycm9yQ29kZSxcbiAgICAgIHJldHJ5YWJsZTogY2xhc3NpZmllZEVycm9yLnJldHJ5YWJsZSxcbiAgICAgIC8vIEFkZCBjbGFzc2lmaWVkIGVycm9yIGluZm9ybWF0aW9uXG4gICAgICBjYXRlZ29yeTogY2xhc3NpZmllZEVycm9yLmNhdGVnb3J5LFxuICAgICAgc2V2ZXJpdHk6IGNsYXNzaWZpZWRFcnJvci5zZXZlcml0eSxcbiAgICAgIHJlY292ZXJ5QWN0aW9uczogY2xhc3NpZmllZEVycm9yLnJlY292ZXJ5QWN0aW9uc1xuICAgIH07XG5cbiAgICAvLyBDYWxsIHVzZXItcHJvdmlkZWQgb25FcnJvciB3aXRoIGVuaGFuY2VkIGVycm9yIGluZm9ybWF0aW9uXG4gICAgaWYgKG1lcmdlZENvbmZpZy5vbkVycm9yICYmIGNvbnRleHQpIHtcbiAgICAgIG1lcmdlZENvbmZpZy5vbkVycm9yKGZvcm1hdHRlZEVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH1cbiAgfSwgW21lcmdlZENvbmZpZywgb3B0aW1pc3RpY01hbmFnZXIsIGFjdGl2ZU9wdGltaXN0aWNVcGRhdGVzXSk7XG5cbiAgY29uc3Qgb25TZXR0bGVkQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoXG4gICAgZGF0YTogVHJ5b25NdXRhdGlvblJlc3BvbnNlIHwgdW5kZWZpbmVkLFxuICAgIGVycm9yOiB1bmtub3duLFxuICAgIHZhcmlhYmxlczogVHJ5b25NdXRhdGlvblZhcmlhYmxlcyxcbiAgICBjb250ZXh0OiBUcnlvbk11dGF0aW9uQ29udGV4dCB8IHVuZGVmaW5lZFxuICApID0+IHtcbiAgICAvLyBGb3JtYXQgZXJyb3Igd2l0aCBjb21wcmVoZW5zaXZlIGNsYXNzaWZpY2F0aW9uIGlmIGVycm9yIGV4aXN0c1xuICAgIGxldCBmb3JtYXR0ZWRFcnJvcjogVHJ5b25NdXRhdGlvbkVycm9yIHwgbnVsbCA9IG51bGw7XG4gICAgXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zdCBjbGFzc2lmaWVkRXJyb3IgPSBjbGFzc2lmeVRyeW9uRXJyb3IoZXJyb3IsIHtcbiAgICAgICAgbXV0YXRpb25WYXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgbXV0YXRpb25Db250ZXh0OiBjb250ZXh0LFxuICAgICAgICBzZXR0bGVkOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG5cbiAgICAgIGZvcm1hdHRlZEVycm9yID0ge1xuICAgICAgICBlcnJvcjogY2xhc3NpZmllZEVycm9yLnVzZXJNZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiBjbGFzc2lmaWVkRXJyb3IudGVjaG5pY2FsTWVzc2FnZSxcbiAgICAgICAgY29kZTogY2xhc3NpZmllZEVycm9yLmVycm9yQ29kZSxcbiAgICAgICAgcmV0cnlhYmxlOiBjbGFzc2lmaWVkRXJyb3IucmV0cnlhYmxlLFxuICAgICAgICBjYXRlZ29yeTogY2xhc3NpZmllZEVycm9yLmNhdGVnb3J5LFxuICAgICAgICBzZXZlcml0eTogY2xhc3NpZmllZEVycm9yLnNldmVyaXR5LFxuICAgICAgICByZWNvdmVyeUFjdGlvbnM6IGNsYXNzaWZpZWRFcnJvci5yZWNvdmVyeUFjdGlvbnNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRmluYWwgY2xlYW51cCBvZiBhbnkgcmVtYWluaW5nIG9wdGltaXN0aWMgdXBkYXRlc1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBjb25zdCBvcHRpbWlzdGljSWQgPSBjb250ZXh0Lm9wdGltaXN0aWNJZDtcbiAgICAgIGlmIChvcHRpbWlzdGljSWQpIHtcbiAgICAgICAgY29uc3QgdHJhY2tpbmdLZXkgPSB2YXJpYWJsZXMubW9kZWxJbWFnZSArIHZhcmlhYmxlcy5hcHBhcmVsSW1hZ2VzLmpvaW4oJycpO1xuICAgICAgICBhY3RpdmVPcHRpbWlzdGljVXBkYXRlcy5kZWxldGUodHJhY2tpbmdLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGwgdXNlci1wcm92aWRlZCBvblNldHRsZWRcbiAgICBpZiAobWVyZ2VkQ29uZmlnLm9uU2V0dGxlZCAmJiBjb250ZXh0KSB7XG4gICAgICBtZXJnZWRDb25maWcub25TZXR0bGVkKGRhdGEsIGZvcm1hdHRlZEVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH1cbiAgfSwgW21lcmdlZENvbmZpZywgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXNdKTtcblxuICAvLyBDbGVhbnVwIGVmZmVjdCBmb3Igb3B0aW1pc3RpYyB1cGRhdGVzIG9uIHVubW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gUm9sbGJhY2sgYW55IHJlbWFpbmluZyBvcHRpbWlzdGljIHVwZGF0ZXMgd2hlbiBjb21wb25lbnQgdW5tb3VudHNcbiAgICAgIGFjdGl2ZU9wdGltaXN0aWNVcGRhdGVzLmZvckVhY2goKG9wdGltaXN0aWNJZCwgdHJhY2tpbmdLZXkpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvcHRpbWlzdGljTWFuYWdlci5yb2xsYmFja09wdGltaXN0aWNVcGRhdGUob3B0aW1pc3RpY0lkLCBuZXcgRXJyb3IoJ0NvbXBvbmVudCB1bm1vdW50ZWQnKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gY2xlYW51cCBvcHRpbWlzdGljIHVwZGF0ZSBvbiB1bm1vdW50OicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhY3RpdmVPcHRpbWlzdGljVXBkYXRlcy5jbGVhcigpO1xuICAgIH07XG4gIH0sIFtvcHRpbWlzdGljTWFuYWdlciwgYWN0aXZlT3B0aW1pc3RpY1VwZGF0ZXNdKTtcblxuICAvLyBNdXRhdGlvbiBjb25maWd1cmF0aW9uXG4gIGNvbnN0IG11dGF0aW9uQ29uZmlnID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIG11dGF0aW9uRm46IHRyeW9uTXV0YXRpb25GbixcbiAgICBcbiAgICAvLyBDdXN0b20gcmV0cnkgbG9naWNcbiAgICByZXRyeTogbWVyZ2VkQ29uZmlnLmVuYWJsZVJldHJ5ID8gKGZhaWx1cmVDb3VudDogbnVtYmVyLCBlcnJvcjogdW5rbm93bikgPT4ge1xuICAgICAgaWYgKGZhaWx1cmVDb3VudCA+PSBtZXJnZWRDb25maWcubWF4UmV0cmllcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNSZXRyeWFibGVFcnJvcihlcnJvcik7XG4gICAgfSA6IGZhbHNlLFxuICAgIFxuICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmYgZGVsYXlcbiAgICByZXRyeURlbGF5OiAoYXR0ZW1wdEluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHJldHVybiBtZXJnZWRDb25maWcuaW5pdGlhbFJldHJ5RGVsYXkgKiBNYXRoLnBvdygyLCBhdHRlbXB0SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvLyBMaWZlY3ljbGUgY2FsbGJhY2tzXG4gICAgb25NdXRhdGU6IG9uTXV0YXRlQ2FsbGJhY2ssXG4gICAgb25TdWNjZXNzOiBvblN1Y2Nlc3NDYWxsYmFjayxcbiAgICBvbkVycm9yOiBvbkVycm9yQ2FsbGJhY2ssXG4gICAgb25TZXR0bGVkOiBvblNldHRsZWRDYWxsYmFja1xuICB9KSwgW21lcmdlZENvbmZpZywgb25NdXRhdGVDYWxsYmFjaywgb25TdWNjZXNzQ2FsbGJhY2ssIG9uRXJyb3JDYWxsYmFjaywgb25TZXR0bGVkQ2FsbGJhY2tdKTtcblxuICAvLyBVc2UgUmVhY3QgUXVlcnkgbXV0YXRpb25cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbihtdXRhdGlvbkNvbmZpZyk7XG5cbiAgLy8gUmV0dXJuIGhvb2sgaW50ZXJmYWNlXG4gIHJldHVybiB1c2VNZW1vPFVzZVRyeW9uTXV0YXRpb25SZXR1cm4+KCgpID0+ICh7XG4gICAgbXV0YXRlOiBtdXRhdGlvbi5tdXRhdGUsXG4gICAgbXV0YXRlQXN5bmM6IG11dGF0aW9uLm11dGF0ZUFzeW5jLFxuICAgIGRhdGE6IG11dGF0aW9uLmRhdGEsXG4gICAgZXJyb3I6IG11dGF0aW9uLmVycm9yIGFzIFRyeW9uTXV0YXRpb25FcnJvciB8IG51bGwsXG4gICAgaXNMb2FkaW5nOiBtdXRhdGlvbi5pc1BlbmRpbmcsXG4gICAgaXNTdWNjZXNzOiBtdXRhdGlvbi5pc1N1Y2Nlc3MsXG4gICAgaXNFcnJvcjogbXV0YXRpb24uaXNFcnJvcixcbiAgICBpc0lkbGU6IG11dGF0aW9uLmlzSWRsZSxcbiAgICBzdGF0dXM6IG11dGF0aW9uLnN0YXR1cyA9PT0gJ3BlbmRpbmcnID8gJ2xvYWRpbmcnIDogbXV0YXRpb24uc3RhdHVzLFxuICAgIHJlc2V0OiBtdXRhdGlvbi5yZXNldCxcbiAgICBjb250ZXh0OiBtdXRhdGlvbi5jb250ZXh0IGFzIFRyeW9uTXV0YXRpb25Db250ZXh0IHwgdW5kZWZpbmVkXG4gIH0pLCBbbXV0YXRpb25dKTtcbn0iXSwibmFtZXMiOlsidXNlVHJ5b25NdXRhdGlvbiIsIlRSWU9OX0FQSV9FTkRQT0lOVCIsIkRFRkFVTFRfQ09ORklHIiwiZW5hYmxlUmV0cnkiLCJtYXhSZXRyaWVzIiwiaW5pdGlhbFJldHJ5RGVsYXkiLCJlbmFibGVPcHRpbWlzdGljVXBkYXRlcyIsInRyeW9uTXV0YXRpb25GbiIsInZhcmlhYmxlcyIsIm1vZGVsSW1hZ2UiLCJhcHBhcmVsSW1hZ2VzIiwib3B0aW9ucyIsInBheWxvYWQiLCJtZXRhZGF0YSIsInJlcXVlc3RJbml0IiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGltZW91dCIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiYWJvcnQiLCJzaWduYWwiLCJyZXNwb25zZSIsImZldGNoIiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlQXBpUmVzcG9uc2UiLCJlcnJvciIsIm9rIiwiZXJyb3JEYXRhIiwianNvbiIsImNhdGNoIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRldGFpbHMiLCJjb2RlIiwicmV0cnlhYmxlIiwiZGF0YSIsImltZ19nZW5lcmF0ZWQiLCJFcnJvciIsImlzUmV0cnlhYmxlRXJyb3IiLCJCb29sZWFuIiwiaXNFcnJvclJldHJ5YWJsZUZyb21DbGFzc2lmaWNhdGlvbiIsInByb2Nlc3NJbWFnZUlucHV0cyIsImltYWdlUHJvY2Vzc2luZ09wdGlvbnMiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiaGFzRmlsZUlucHV0cyIsIkZpbGUiLCJzb21lIiwiaW1nIiwicHJvY2Vzc2VkVmFyaWFibGVzIiwibW9kZWxJbWFnZVJlc3VsdCIsImFwcGFyZWxJbWFnZVJlc3VsdHMiLCJwcm9jZXNzZWRNb2RlbEltYWdlIiwicHJvY2Vzc2VkQXBwYXJlbEltYWdlcyIsInByb2Nlc3NlZEltYWdlIiwicHJvY2Vzc0ltYWdlRm9yVHJ5b24iLCJpIiwibGVuZ3RoIiwiaW1hZ2UiLCJwdXNoIiwidG90YWxQcm9jZXNzaW5nVGltZSIsImltYWdlUHJvY2Vzc2luZ1Jlc3VsdHMiLCJ1bmRlZmluZWQiLCJGaWxlVHlwZU5vdFN1cHBvcnRlZEVycm9yIiwiRmlsZVRvb0xhcmdlRXJyb3IiLCJDb21wcmVzc2lvbkZhaWxlZEVycm9yIiwiSW1hZ2VQcm9jZXNzaW5nRXJyb3IiLCJJbWFnZURpbWVuc2lvbkVycm9yIiwiU3RyaW5nIiwiY3JlYXRlTXV0YXRpb25Db250ZXh0IiwicmV0cnlDb3VudCIsInByZXZpb3VzRXJyb3IiLCJjb25maWciLCJxdWVyeUNsaWVudCIsInVzZVF1ZXJ5Q2xpZW50IiwibWVyZ2VkQ29uZmlnIiwidXNlTWVtbyIsIm9wdGltaXN0aWNNYW5hZ2VyIiwiZ2V0T3B0aW1pc3RpY1VwZGF0ZXNNYW5hZ2VyIiwicmVxdWlyZSIsIk9wdGltaXN0aWNVcGRhdGVzTWFuYWdlciIsImFjdGl2ZU9wdGltaXN0aWNVcGRhdGVzIiwiTWFwIiwib25NdXRhdGVDYWxsYmFjayIsInVzZUNhbGxiYWNrIiwiY29uZmlnT3B0aW9ucyIsImltYWdlUHJvY2Vzc2luZyIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwibWF4U2l6ZUtCIiwicXVhbGl0eSIsImNvbXByZXNzaW9uUXVhbGl0eSIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJ2YXJpYWJsZU9wdGlvbnMiLCJjb250ZXh0Iiwib3B0aW1pc3RpY0lkIiwib3B0aW1pc3RpY0NvbnRleHQiLCJzdGFydE9wdGltaXN0aWNVcGRhdGUiLCJvcHRpbWlzdGljQ29uZmlnIiwic2V0Iiwiam9pbiIsImNvbnNvbGUiLCJ3YXJuIiwib25NdXRhdGUiLCJ1c2VyQ29udGV4dCIsImJhc2VWYXJpYWJsZXMiLCJvblN1Y2Nlc3NDYWxsYmFjayIsImNvbXBsZXRlT3B0aW1pc3RpY1VwZGF0ZSIsInRyYWNraW5nS2V5IiwiZGVsZXRlIiwiaW52YWxpZGF0ZUNhY2hlQWZ0ZXJNdXRhdGlvbiIsImNhY2hlSW52YWxpZGF0aW9uQ29uZmlnIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJpbnZhbGlkYXRlUXVlcmllcyIsInF1ZXJ5S2V5IiwiZXhhY3QiLCJvblN1Y2Nlc3MiLCJvbkVycm9yQ2FsbGJhY2siLCJyb2xsYmFja09wdGltaXN0aWNVcGRhdGUiLCJyb2xsYmFja0Vycm9yIiwiY2xhc3NpZmllZEVycm9yIiwibG9nQW5kQ2xhc3NpZnlFcnJvciIsIm11dGF0aW9uVmFyaWFibGVzIiwibXV0YXRpb25Db250ZXh0IiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJmb3JtYXR0ZWRFcnJvciIsInVzZXJNZXNzYWdlIiwidGVjaG5pY2FsTWVzc2FnZSIsImVycm9yQ29kZSIsImNhdGVnb3J5Iiwic2V2ZXJpdHkiLCJyZWNvdmVyeUFjdGlvbnMiLCJvbkVycm9yIiwib25TZXR0bGVkQ2FsbGJhY2siLCJjbGFzc2lmeVRyeW9uRXJyb3IiLCJzZXR0bGVkIiwib25TZXR0bGVkIiwidXNlRWZmZWN0IiwiZm9yRWFjaCIsImNsZWFyIiwibXV0YXRpb25Db25maWciLCJtdXRhdGlvbkZuIiwicmV0cnkiLCJmYWlsdXJlQ291bnQiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdEluZGV4IiwiTWF0aCIsInBvdyIsIm11dGF0aW9uIiwidXNlTXV0YXRpb24iLCJtdXRhdGUiLCJtdXRhdGVBc3luYyIsImlzTG9hZGluZyIsImlzUGVuZGluZyIsImlzU3VjY2VzcyIsImlzRXJyb3IiLCJpc0lkbGUiLCJyZXNldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OytCQWdRZ0JBOzs7ZUFBQUE7Ozs0QkEzUDRCO3VCQUNJO2lDQWV6Qzt1QkFLQTsrQkFLQTttQ0FJQTttQ0FLQTtBQUVQOztDQUVDLEdBQ0QsTUFBTUMscUJBQXFCO0FBRTNCOztDQUVDLEdBQ0QsTUFBTUMsaUJBQXlJO0lBQzdJQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsbUJBQW1CO0lBQ25CQyx5QkFBeUI7QUFDM0I7QUFFQTs7Q0FFQyxHQUNELGVBQWVDLGdCQUFnQkMsU0FBaUM7SUFDOUQsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsT0FBTyxFQUFFLEdBQUdIO0lBRS9DLDBCQUEwQjtJQUMxQixNQUFNSSxVQUFVO1FBQ2RIO1FBQ0FDO1FBQ0EsR0FBSUMsU0FBU0UsWUFBWTtZQUFFQSxVQUFVRixRQUFRRSxRQUFRO1FBQUMsQ0FBQztJQUN6RDtJQUVBLDRCQUE0QjtJQUM1QixNQUFNQyxjQUEyQjtRQUMvQkMsUUFBUTtRQUNSQyxTQUFTO1lBQ1AsZ0JBQWdCO1FBQ2xCO1FBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1A7SUFDdkI7SUFFQSwyQkFBMkI7SUFDM0IsSUFBSUQsU0FBU1MsU0FBUztRQUNwQixNQUFNQyxhQUFhLElBQUlDO1FBQ3ZCLE1BQU1DLFlBQVlDLFdBQVcsSUFBTUgsV0FBV0ksS0FBSyxJQUFJZCxRQUFRUyxPQUFPO1FBQ3RFTixZQUFZWSxNQUFNLEdBQUdMLFdBQVdLLE1BQU07UUFFdEMsSUFBSTtZQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTTNCLG9CQUFv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