8b7a355ebb544a5d0874d2d02a53107d
'use client';
"use strict";

/* istanbul ignore next */
function cov_bceljhu8i() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts";
  var hash = "833e99de2a1077dc851efa09cb62e12de9f93d5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "7": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "9": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "10": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "11": {
        start: {
          line: 29,
          column: 34
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "12": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "13": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "14": {
        start: {
          line: 74,
          column: 21
        },
        end: {
          line: 74,
          column: 93
        }
      },
      "15": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 80,
          column: 6
        }
      },
      "16": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 49
        }
      },
      "17": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 55
        }
      },
      "18": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "19": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 86,
          column: 6
        }
      },
      "20": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "21": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 55
        }
      },
      "22": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "23": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "24": {
        start: {
          line: 111,
          column: 30
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "25": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "26": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 50
        }
      },
      "27": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "28": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 77
        }
      },
      "29": {
        start: {
          line: 120,
          column: 32
        },
        end: {
          line: 120,
          column: 102
        }
      },
      "30": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "31": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 28
        }
      },
      "32": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "33": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "34": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "35": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 80
        }
      },
      "36": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 105
        }
      },
      "37": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 57
        }
      },
      "38": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "39": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 36
        }
      },
      "40": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "41": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 39
        }
      },
      "42": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 37
        }
      },
      "43": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "44": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 60
        }
      },
      "45": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 49
        }
      },
      "46": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "47": {
        start: {
          line: 167,
          column: 36
        },
        end: {
          line: 167,
          column: 68
        }
      },
      "48": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 90
        }
      },
      "49": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "50": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 172,
          column: 21
        }
      },
      "51": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 54
        }
      },
      "52": {
        start: {
          line: 175,
          column: 32
        },
        end: {
          line: 175,
          column: 100
        }
      },
      "53": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 57
        }
      },
      "54": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 28
        }
      },
      "55": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "56": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 49
        }
      },
      "57": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 195,
          column: 17
        }
      },
      "58": {
        start: {
          line: 189,
          column: 36
        },
        end: {
          line: 189,
          column: 68
        }
      },
      "59": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 90
        }
      },
      "60": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 63
        }
      },
      "61": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "62": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "63": {
        start: {
          line: 197,
          column: 32
        },
        end: {
          line: 197,
          column: 101
        }
      },
      "64": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 57
        }
      },
      "65": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 28
        }
      },
      "66": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 37
        }
      },
      "67": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 36
        }
      },
      "68": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 39
        }
      },
      "69": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 37
        }
      },
      "70": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 34
        }
      },
      "71": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "72": {
        start: {
          line: 228,
          column: 76
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "73": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "74": {
        start: {
          line: 230,
          column: 29
        },
        end: {
          line: 230,
          column: 56
        }
      },
      "75": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 52
        }
      },
      "76": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 65
        }
      },
      "77": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 48
        }
      },
      "78": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 29
        }
      },
      "79": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 48
        }
      },
      "80": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 70
        }
      },
      "81": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 63
        }
      },
      "82": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 80
        }
      },
      "83": {
        start: {
          line: 246,
          column: 73
        },
        end: {
          line: 246,
          column: 80
        }
      },
      "84": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "85": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "86": {
        start: {
          line: 250,
          column: 37
        },
        end: {
          line: 250,
          column: 73
        }
      },
      "87": {
        start: {
          line: 251,
          column: 33
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "88": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 256,
          column: 22
        }
      },
      "89": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "90": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 81
        }
      },
      "91": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 74
        }
      },
      "92": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 60
        }
      },
      "93": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 288,
          column: 6
        }
      },
      "94": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 310,
          column: 5
        }
      },
      "95": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 39
        }
      },
      "96": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 41
        }
      },
      "97": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 42
        }
      },
      "98": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 60
        }
      },
      "99": {
        start: {
          line: 301,
          column: 31
        },
        end: {
          line: 301,
          column: 60
        }
      },
      "100": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "101": {
        start: {
          line: 302,
          column: 31
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "102": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 42
        }
      },
      "103": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 42
        }
      },
      "104": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 39
        }
      },
      "105": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 48
        }
      },
      "106": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 313,
          column: 53
        }
      },
      "107": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 325,
          column: 6
        }
      },
      "108": {
        start: {
          line: 328,
          column: 31
        },
        end: {
          line: 328,
          column: 53
        }
      },
      "109": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 338,
          column: 6
        }
      },
      "110": {
        start: {
          line: 343,
          column: 19
        },
        end: {
          line: 343,
          column: 20
        }
      },
      "111": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 345,
          column: 43
        }
      },
      "112": {
        start: {
          line: 345,
          column: 28
        },
        end: {
          line: 345,
          column: 43
        }
      },
      "113": {
        start: {
          line: 346,
          column: 4
        },
        end: {
          line: 346,
          column: 46
        }
      },
      "114": {
        start: {
          line: 346,
          column: 31
        },
        end: {
          line: 346,
          column: 46
        }
      },
      "115": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "116": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 41
        }
      },
      "117": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 351,
          column: 42
        }
      },
      "118": {
        start: {
          line: 351,
          column: 27
        },
        end: {
          line: 351,
          column: 42
        }
      },
      "119": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 352,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 21
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 21
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "useBridgeLayer",
        decl: {
          start: {
            line: 67,
            column: 9
          },
          end: {
            line: 67,
            column: 23
          }
        },
        loc: {
          start: {
            line: 67,
            column: 37
          },
          end: {
            line: 289,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 85
          },
          end: {
            line: 75,
            column: 86
          }
        },
        loc: {
          start: {
            line: 75,
            column: 93
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 7
          },
          end: {
            line: 77,
            column: 8
          }
        },
        loc: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 88
          },
          end: {
            line: 81,
            column: 89
          }
        },
        loc: {
          start: {
            line: 81,
            column: 96
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 7
          },
          end: {
            line: 83,
            column: 8
          }
        },
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 50
          }
        },
        loc: {
          start: {
            line: 113,
            column: 63
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 113
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 130,
            column: 52
          },
          end: {
            line: 130,
            column: 53
          }
        },
        loc: {
          start: {
            line: 130,
            column: 66
          },
          end: {
            line: 141,
            column: 9
          }
        },
        line: 130
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 50
          }
        },
        loc: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 147
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 154,
            column: 52
          },
          end: {
            line: 154,
            column: 53
          }
        },
        loc: {
          start: {
            line: 154,
            column: 56
          },
          end: {
            line: 157,
            column: 9
          }
        },
        line: 154
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 162,
            column: 42
          },
          end: {
            line: 162,
            column: 43
          }
        },
        loc: {
          start: {
            line: 162,
            column: 52
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 162
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 40
          }
        },
        loc: {
          start: {
            line: 185,
            column: 49
          },
          end: {
            line: 201,
            column: 9
          }
        },
        line: 185
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 40
          }
        },
        loc: {
          start: {
            line: 207,
            column: 43
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 207
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 217,
            column: 44
          },
          end: {
            line: 217,
            column: 45
          }
        },
        loc: {
          start: {
            line: 217,
            column: 48
          },
          end: {
            line: 219,
            column: 9
          }
        },
        line: 217
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 222,
            column: 44
          },
          end: {
            line: 222,
            column: 45
          }
        },
        loc: {
          start: {
            line: 222,
            column: 48
          },
          end: {
            line: 224,
            column: 9
          }
        },
        line: 222
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 227,
            column: 48
          },
          end: {
            line: 227,
            column: 49
          }
        },
        loc: {
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 240,
            column: 9
          }
        },
        line: 227
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 245,
            column: 45
          },
          end: {
            line: 245,
            column: 46
          }
        },
        loc: {
          start: {
            line: 245,
            column: 55
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 245
      },
      "20": {
        name: "getProgressMessage",
        decl: {
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 292,
            column: 31
          }
        },
        loc: {
          start: {
            line: 292,
            column: 57
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 292
      },
      "21": {
        name: "useSimpleTryon",
        decl: {
          start: {
            line: 312,
            column: 9
          },
          end: {
            line: 312,
            column: 23
          }
        },
        loc: {
          start: {
            line: 312,
            column: 37
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 312
      },
      "22": {
        name: "useTryonWithProgress",
        decl: {
          start: {
            line: 327,
            column: 9
          },
          end: {
            line: 327,
            column: 29
          }
        },
        loc: {
          start: {
            line: 327,
            column: 43
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 327
      },
      "23": {
        name: "calculateOverallProgress",
        decl: {
          start: {
            line: 342,
            column: 13
          },
          end: {
            line: 342,
            column: 37
          }
        },
        loc: {
          start: {
            line: 342,
            column: 45
          },
          end: {
            line: 353,
            column: 1
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 24
          },
          end: {
            line: 67,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 35
          }
        }],
        line: 67
      },
      "1": {
        loc: {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 39
          }
        }, {
          start: {
            line: 90,
            column: 43
          },
          end: {
            line: 90,
            column: 82
          }
        }, {
          start: {
            line: 90,
            column: 86
          },
          end: {
            line: 90,
            column: 128
          }
        }],
        line: 90
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 45
          }
        }, {
          start: {
            line: 95,
            column: 49
          },
          end: {
            line: 95,
            column: 53
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 50
          },
          end: {
            line: 96,
            column: 82
          }
        }, {
          start: {
            line: 96,
            column: 85
          },
          end: {
            line: 96,
            column: 89
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 98,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 98,
            column: 46
          }
        }, {
          start: {
            line: 98,
            column: 50
          },
          end: {
            line: 98,
            column: 67
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 52
          }
        }, {
          start: {
            line: 99,
            column: 56
          },
          end: {
            line: 99,
            column: 76
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 100,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 100,
            column: 48
          }
        }, {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 100,
            column: 76
          }
        }, {
          start: {
            line: 100,
            column: 80
          },
          end: {
            line: 100,
            column: 84
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 52
          }
        }, {
          start: {
            line: 101,
            column: 56
          },
          end: {
            line: 101,
            column: 83
          }
        }, {
          start: {
            line: 101,
            column: 87
          },
          end: {
            line: 101,
            column: 91
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 18
          },
          end: {
            line: 107,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 18
          },
          end: {
            line: 107,
            column: 35
          }
        }, {
          start: {
            line: 107,
            column: 39
          },
          end: {
            line: 107,
            column: 73
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 18
          },
          end: {
            line: 108,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 18
          },
          end: {
            line: 108,
            column: 51
          }
        }, {
          start: {
            line: 108,
            column: 55
          },
          end: {
            line: 108,
            column: 72
          }
        }, {
          start: {
            line: 108,
            column: 76
          },
          end: {
            line: 108,
            column: 96
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 120,
            column: 32
          },
          end: {
            line: 120,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 57
          },
          end: {
            line: 120,
            column: 70
          }
        }, {
          start: {
            line: 120,
            column: 73
          },
          end: {
            line: 120,
            column: 102
          }
        }],
        line: 120
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 32
          },
          end: {
            line: 137,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 70
          }
        }, {
          start: {
            line: 137,
            column: 73
          },
          end: {
            line: 137,
            column: 105
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 173,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 173,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "15": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "16": {
        loc: {
          start: {
            line: 175,
            column: 32
          },
          end: {
            line: 175,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 57
          },
          end: {
            line: 175,
            column: 70
          }
        }, {
          start: {
            line: 175,
            column: 73
          },
          end: {
            line: 175,
            column: 100
          }
        }],
        line: 175
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 195,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 195,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 194,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 194,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 32
          },
          end: {
            line: 197,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 57
          },
          end: {
            line: 197,
            column: 70
          }
        }, {
          start: {
            line: 197,
            column: 73
          },
          end: {
            line: 197,
            column: 101
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 40
          }
        }, {
          start: {
            line: 228,
            column: 44
          },
          end: {
            line: 228,
            column: 74
          }
        }],
        line: 228
      },
      "22": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "23": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 40
          }
        }, {
          start: {
            line: 246,
            column: 44
          },
          end: {
            line: 246,
            column: 71
          }
        }],
        line: 246
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        }, {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 268,
            column: 17
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 295,
            column: 39
          }
        }, {
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 297,
            column: 41
          }
        }, {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 299,
            column: 42
          }
        }, {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 303,
            column: 42
          }
        }, {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 305,
            column: 42
          }
        }, {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 307,
            column: 39
          }
        }, {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 309,
            column: 48
          }
        }],
        line: 293
      },
      "26": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "27": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "28": {
        loc: {
          start: {
            line: 312,
            column: 24
          },
          end: {
            line: 312,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 312,
            column: 33
          },
          end: {
            line: 312,
            column: 35
          }
        }],
        line: 312
      },
      "29": {
        loc: {
          start: {
            line: 327,
            column: 30
          },
          end: {
            line: 327,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 327,
            column: 39
          },
          end: {
            line: 327,
            column: 41
          }
        }],
        line: 327
      },
      "30": {
        loc: {
          start: {
            line: 334,
            column: 18
          },
          end: {
            line: 334,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 39
          },
          end: {
            line: 334,
            column: 42
          }
        }, {
          start: {
            line: 334,
            column: 45
          },
          end: {
            line: 334,
            column: 46
          }
        }],
        line: 334
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 21
          },
          end: {
            line: 335,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 45
          },
          end: {
            line: 335,
            column: 48
          }
        }, {
          start: {
            line: 335,
            column: 51
          },
          end: {
            line: 335,
            column: 52
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "33": {
        loc: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "34": {
        loc: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "35": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 348,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 348,
            column: 23
          }
        }, {
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 348,
            column: 45
          }
        }],
        line: 348
      },
      "36": {
        loc: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useBridgeLayer.ts"],
      sourcesContent: ["'use client';\n\n// Bridge Layer Component Interfaces\n// Clean, declarative APIs that hide business logic complexity from React components\n\nimport { useCallback } from 'react';\nimport { useTryonWorkflow, type WorkflowConfig, type TryonWorkflowState, type TryonWorkflowActions } from './useTryonWorkflow';\nimport { useImageUpload, useSingleImageUpload, type UploadConfig, type UploadedFile, type UploadError } from './useImageUpload';\nimport { useToast } from './index';\n\n/**\n * Simplified component state interface\n * Abstracts away complex business logic and provides only what UI components need\n */\nexport interface SimplifiedTryonState {\n  // Core UI state\n  isLoading: boolean;\n  isReady: boolean;\n  showResult: boolean;\n  \n  // User feedback\n  resultImage: string | null;\n  errorMessage: string | null;\n  successMessage: string | null;\n  \n  // Upload state\n  hasUserImage: boolean;\n  hasApparelImage: boolean;\n  userImagePreview: string | null;\n  apparelImagePreview: string | null;\n  \n  // Progress\n  progress: number;\n  progressMessage: string;\n  \n  // Interaction state\n  canGenerate: boolean;\n  canRetry: boolean;\n  canReset: boolean;\n}\n\n/**\n * Simplified component actions interface\n * Provides clean, semantic actions for UI components\n */\nexport interface SimplifiedTryonActions {\n  // File upload actions\n  uploadUserImage: (file: File) => Promise<void>;\n  uploadApparelImage: (file: File) => Promise<void>;\n  removeUserImage: () => void;\n  removeApparelImage: () => void;\n  \n  // Generation actions\n  generate: () => Promise<void>;\n  retry: () => Promise<void>;\n  reset: () => void;\n  \n  // UI actions\n  hideResult: () => void;\n  clearError: () => void;\n  downloadResult: () => void;\n  shareResult: () => Promise<void>;\n}\n\n/**\n * Configuration for the simplified bridge layer\n */\nexport interface BridgeLayerConfig {\n  // Workflow configuration\n  workflow?: WorkflowConfig;\n  \n  // Upload configuration\n  upload?: UploadConfig;\n  \n  // UI behavior\n  ui?: {\n    autoHideMessages?: boolean;\n    messageTimeoutMs?: number;\n    enableShare?: boolean;\n    enableDownload?: boolean;\n    showDetailedProgress?: boolean;\n  };\n  \n  // Callbacks\n  callbacks?: {\n    onGenerationStart?: () => void;\n    onGenerationComplete?: (imageUrl: string) => void;\n    onError?: (error: string) => void;\n    onSuccess?: (message: string) => void;\n  };\n}\n\n/**\n * Default bridge layer configuration\n */\nconst DEFAULT_BRIDGE_CONFIG: Required<BridgeLayerConfig> = {\n  workflow: {\n    timeoutMs: 60000,\n    compressionLimitKB: 2048,\n    autoRetry: false,\n    maxRetries: 3,\n    debug: process.env.NODE_ENV === 'development'\n  },\n  upload: {\n    maxSizeBytes: 10 * 1024 * 1024,\n    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    generateThumbnails: true,\n    thumbnailSizes: [150, 300],\n    enableDragDrop: true,\n    autoProcess: false,\n    validation: {\n      minWidth: 256,\n      minHeight: 256,\n      maxWidth: 4096,\n      maxHeight: 4096\n    }\n  },\n  ui: {\n    autoHideMessages: true,\n    messageTimeoutMs: 5000,\n    enableShare: true,\n    enableDownload: true,\n    showDetailedProgress: true\n  },\n  callbacks: {}\n};\n\n/**\n * Main bridge layer hook that provides simplified interface for UI components\n */\nexport function useBridgeLayer(config: BridgeLayerConfig = {}): {\n  state: SimplifiedTryonState;\n  actions: SimplifiedTryonActions;\n  advanced: {\n    workflow: TryonWorkflowState & TryonWorkflowActions;\n    uploads: {\n      user: ReturnType<typeof useSingleImageUpload>;\n      apparel: ReturnType<typeof useSingleImageUpload>;\n    };\n  };\n} {\n  const finalConfig = { ...DEFAULT_BRIDGE_CONFIG, ...config };\n  const { showToast } = useToast();\n\n  // Initialize underlying hooks\n  const workflow = useTryonWorkflow(\n    finalConfig.workflow,\n    showToast\n  );\n\n  const userUpload = useSingleImageUpload(\n    finalConfig.upload,\n    (file: UploadedFile) => {\n      workflow.handleUserFileUpload(file.file);\n    },\n    (error: UploadError) => {\n      finalConfig.callbacks.onError?.(error.message);\n      showToast(error.message, 'error');\n    }\n  );\n\n  const apparelUpload = useSingleImageUpload(\n    finalConfig.upload,\n    (file: UploadedFile) => {\n      workflow.handleApparelFileUpload(file.file);\n    },\n    (error: UploadError) => {\n      finalConfig.callbacks.onError?.(error.message);\n      showToast(error.message, 'error');\n    }\n  );\n\n  // Simplified state mapping\n  const simplifiedState: SimplifiedTryonState = {\n    // Core UI state\n    isLoading: workflow.isCapturing || \n               userUpload.uploadState === 'processing' || \n               apparelUpload.uploadState === 'processing',\n    isReady: workflow.canGenerate(),\n    showResult: workflow.showPolaroid,\n    \n    // User feedback\n    resultImage: workflow.generatedImage,\n    errorMessage: workflow.error?.message || null,\n    successMessage: workflow.generatedImage ? 'Try-on generated successfully!' : null,\n    \n    // Upload state\n    hasUserImage: !!workflow.userImageFile || !!userUpload.file,\n    hasApparelImage: !!workflow.apparelImageFile || !!apparelUpload.file,\n    userImagePreview: workflow.leftCardImage || userUpload.file?.preview || null,\n    apparelImagePreview: workflow.rightCardImage || apparelUpload.file?.preview || null,\n    \n    // Progress\n    progress: workflow.progress,\n    progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),\n    \n    // Interaction state\n    canGenerate: workflow.canGenerate(),\n    canRetry: workflow.hasError && workflow.error?.retryable === true,\n    canReset: workflow.workflowState !== 'idle' || !!userUpload.file || !!apparelUpload.file\n  };\n\n  // Simplified actions\n  const simplifiedActions: SimplifiedTryonActions = {\n    // File upload actions\n    uploadUserImage: useCallback(async (file: File) => {\n      try {\n        await userUpload.uploadFile(file);\n        if (finalConfig.ui.showDetailedProgress) {\n          showToast('User image uploaded successfully', 'success');\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to upload user image';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [userUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    uploadApparelImage: useCallback(async (file: File) => {\n      try {\n        await apparelUpload.uploadFile(file);\n        if (finalConfig.ui.showDetailedProgress) {\n          showToast('Apparel image uploaded successfully', 'success');\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to upload apparel image';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [apparelUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    removeUserImage: useCallback(() => {\n      userUpload.clearFiles();\n      workflow.resetWorkflow();\n    }, [userUpload, workflow]),\n\n    removeApparelImage: useCallback(() => {\n      apparelUpload.clearFiles();\n      workflow.resetWorkflow();\n    }, [apparelUpload, workflow]),\n\n    // Generation actions\n    generate: useCallback(async () => {\n      try {\n        finalConfig.callbacks.onGenerationStart?.();\n        await workflow.startGeneration();\n        \n        if (workflow.generatedImage) {\n          const message = 'Try-on generated successfully!';\n          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);\n          finalConfig.callbacks.onSuccess?.(message);\n          \n          if (finalConfig.ui.showDetailedProgress) {\n            showToast(message, 'success');\n          }\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to generate try-on';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    retry: useCallback(async () => {\n      try {\n        await workflow.retryGeneration();\n        \n        if (workflow.generatedImage) {\n          const message = 'Try-on generated successfully!';\n          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);\n          finalConfig.callbacks.onSuccess?.(message);\n          \n          if (finalConfig.ui.showDetailedProgress) {\n            showToast(message, 'success');\n          }\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to retry generation';\n        finalConfig.callbacks.onError?.(message);\n        throw error;\n      }\n    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),\n\n    reset: useCallback(() => {\n      workflow.resetWorkflow();\n      userUpload.clearFiles();\n      apparelUpload.clearFiles();\n    }, [workflow, userUpload, apparelUpload]),\n\n    // UI actions\n    hideResult: useCallback(() => {\n      workflow.closePolaroid();\n    }, [workflow]),\n\n    clearError: useCallback(() => {\n      workflow.clearError();\n    }, [workflow]),\n\n    downloadResult: useCallback(() => {\n      if (!workflow.generatedImage || !finalConfig.ui.enableDownload) return;\n      \n      try {\n        const link = document.createElement('a');\n        link.href = workflow.generatedImage;\n        link.download = `tryon-result-${Date.now()}.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        showToast('Image downloaded successfully', 'success');\n      } catch (error) {\n        showToast('Failed to download image', 'error');\n      }\n    }, [workflow.generatedImage, finalConfig.ui.enableDownload, showToast]),\n\n    shareResult: useCallback(async () => {\n      if (!workflow.generatedImage || !finalConfig.ui.enableShare) return;\n      \n      try {\n        if (navigator.share) {\n          // Use native share API if available\n          const response = await fetch(workflow.generatedImage);\n          const blob = await response.blob();\n          const file = new File([blob], 'tryon-result.png', { type: 'image/png' });\n          \n          await navigator.share({\n            title: 'My Try-On Result',\n            text: 'Check out my virtual try-on!',\n            files: [file]\n          });\n        } else {\n          // Fallback to copying URL\n          await navigator.clipboard.writeText(workflow.generatedImage);\n          showToast('Image URL copied to clipboard', 'success');\n        }\n      } catch (error) {\n        showToast('Failed to share image', 'error');\n      }\n    }, [workflow.generatedImage, finalConfig.ui.enableShare, showToast])\n  };\n\n  return {\n    state: simplifiedState,\n    actions: simplifiedActions,\n    advanced: {\n      workflow,\n      uploads: {\n        user: userUpload,\n        apparel: apparelUpload\n      }\n    }\n  };\n}\n\n/**\n * Helper function to generate user-friendly progress messages\n */\nfunction getProgressMessage(workflowState: string, progress: number): string {\n  switch (workflowState) {\n    case 'idle':\n      return 'Ready to generate';\n    case 'uploading':\n      return 'Uploading images...';\n    case 'processing':\n      return 'Processing images...';\n    case 'generating':\n      if (progress < 30) return 'Preparing images...';\n      if (progress < 80) return 'Generating try-on...';\n      return 'Finalizing result...';\n    case 'complete':\n      return 'Generation complete!';\n    case 'error':\n      return 'Generation failed';\n    default:\n      return `Processing... ${progress}%`;\n  }\n}\n\n/**\n * Specialized hook for simple try-on generation (most basic use case)\n */\nexport function useSimpleTryon(config: BridgeLayerConfig = {}) {\n  const { state, actions } = useBridgeLayer(config);\n  \n  return {\n    // Minimal state for simple components\n    isLoading: state.isLoading,\n    result: state.resultImage,\n    error: state.errorMessage,\n    canGenerate: state.canGenerate,\n    \n    // Essential actions\n    uploadUserImage: actions.uploadUserImage,\n    uploadApparelImage: actions.uploadApparelImage,\n    generate: actions.generate,\n    reset: actions.reset\n  };\n}\n\n/**\n * Hook for components that need upload progress tracking\n */\nexport function useTryonWithProgress(config: BridgeLayerConfig = {}) {\n  const { state, actions } = useBridgeLayer(config);\n  \n  return {\n    ...state,\n    ...actions,\n    \n    // Additional progress information\n    uploadProgress: {\n      user: state.hasUserImage ? 100 : 0,\n      apparel: state.hasApparelImage ? 100 : 0\n    },\n    \n    overallProgress: calculateOverallProgress(state)\n  };\n}\n\n/**\n * Helper function to calculate overall progress\n */\nfunction calculateOverallProgress(state: SimplifiedTryonState): number {\n  let progress = 0;\n  \n  // Upload progress (40% of total)\n  if (state.hasUserImage) progress += 20;\n  if (state.hasApparelImage) progress += 20;\n  \n  // Generation progress (60% of total)\n  if (state.isLoading || state.progress > 0) {\n    progress += (state.progress * 0.6);\n  }\n  \n  if (state.resultImage) progress = 100;\n  \n  return Math.round(progress);\n}"],
      names: ["useBridgeLayer", "useSimpleTryon", "useTryonWithProgress", "DEFAULT_BRIDGE_CONFIG", "workflow", "timeoutMs", "compressionLimitKB", "autoRetry", "maxRetries", "debug", "process", "env", "NODE_ENV", "upload", "maxSizeBytes", "allowedTypes", "generateThumbnails", "thumbnailSizes", "enableDragDrop", "autoProcess", "validation", "minWidth", "minHeight", "maxWidth", "maxHeight", "ui", "autoHideMessages", "messageTimeoutMs", "enableShare", "enableDownload", "showDetailedProgress", "callbacks", "config", "finalConfig", "showToast", "useToast", "useTryonWorkflow", "userUpload", "useSingleImageUpload", "file", "handleUserFileUpload", "error", "onError", "message", "apparelUpload", "handleApparelFileUpload", "simplifiedState", "isLoading", "isCapturing", "uploadState", "isReady", "canGenerate", "showResult", "showPolaroid", "resultImage", "generatedImage", "errorMessage", "successMessage", "hasUserImage", "userImageFile", "hasApparelImage", "apparelImageFile", "userImagePreview", "leftCardImage", "preview", "apparelImagePreview", "rightCardImage", "progress", "progressMessage", "getProgressMessage", "workflowState", "canRetry", "hasError", "retryable", "canReset", "simplifiedActions", "uploadUserImage", "useCallback", "uploadFile", "Error", "uploadApparelImage", "removeUserImage", "clearFiles", "resetWorkflow", "removeApparelImage", "generate", "onGenerationStart", "startGeneration", "onGenerationComplete", "onSuccess", "retry", "retryGeneration", "reset", "hideResult", "closePolaroid", "clearError", "downloadResult", "link", "document", "createElement", "href", "download", "Date", "now", "body", "appendChild", "click", "removeChild", "shareResult", "navigator", "share", "response", "fetch", "blob", "File", "type", "title", "text", "files", "clipboard", "writeText", "state", "actions", "advanced", "uploads", "user", "apparel", "result", "uploadProgress", "overallProgress", "calculateOverallProgress", "Math", "round"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "833e99de2a1077dc851efa09cb62e12de9f93d5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bceljhu8i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bceljhu8i();
cov_bceljhu8i().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[0]++;
  cov_bceljhu8i().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bceljhu8i().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_bceljhu8i().s[3]++;
_export(exports, {
  useBridgeLayer: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[1]++;
    cov_bceljhu8i().s[4]++;
    return useBridgeLayer;
  },
  useSimpleTryon: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[2]++;
    cov_bceljhu8i().s[5]++;
    return useSimpleTryon;
  },
  useTryonWithProgress: function () {
    /* istanbul ignore next */
    cov_bceljhu8i().f[3]++;
    cov_bceljhu8i().s[6]++;
    return useTryonWithProgress;
  }
});
const _react =
/* istanbul ignore next */
(cov_bceljhu8i().s[7]++, require("react"));
const _useTryonWorkflow =
/* istanbul ignore next */
(cov_bceljhu8i().s[8]++, require("./useTryonWorkflow"));
const _useImageUpload =
/* istanbul ignore next */
(cov_bceljhu8i().s[9]++, require("./useImageUpload"));
const _index =
/* istanbul ignore next */
(cov_bceljhu8i().s[10]++, require("./index"));
/**
 * Default bridge layer configuration
 */
const DEFAULT_BRIDGE_CONFIG =
/* istanbul ignore next */
(cov_bceljhu8i().s[11]++, {
  workflow: {
    timeoutMs: 60000,
    compressionLimitKB: 2048,
    autoRetry: false,
    maxRetries: 3,
    debug: process.env.NODE_ENV === 'development'
  },
  upload: {
    maxSizeBytes: 10 * 1024 * 1024,
    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],
    generateThumbnails: true,
    thumbnailSizes: [150, 300],
    enableDragDrop: true,
    autoProcess: false,
    validation: {
      minWidth: 256,
      minHeight: 256,
      maxWidth: 4096,
      maxHeight: 4096
    }
  },
  ui: {
    autoHideMessages: true,
    messageTimeoutMs: 5000,
    enableShare: true,
    enableDownload: true,
    showDetailedProgress: true
  },
  callbacks: {}
});
function useBridgeLayer(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[4]++;
  const finalConfig =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[12]++, {
    ...DEFAULT_BRIDGE_CONFIG,
    ...config
  });
  const {
    showToast
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[13]++, (0, _index.useToast)());
  // Initialize underlying hooks
  const workflow =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[14]++, (0, _useTryonWorkflow.useTryonWorkflow)(finalConfig.workflow, showToast));
  const userUpload =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[15]++, (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, file => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[5]++;
    cov_bceljhu8i().s[16]++;
    workflow.handleUserFileUpload(file.file);
  }, error => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[6]++;
    cov_bceljhu8i().s[17]++;
    finalConfig.callbacks.onError?.(error.message);
    /* istanbul ignore next */
    cov_bceljhu8i().s[18]++;
    showToast(error.message, 'error');
  }));
  const apparelUpload =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[19]++, (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, file => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[7]++;
    cov_bceljhu8i().s[20]++;
    workflow.handleApparelFileUpload(file.file);
  }, error => {
    /* istanbul ignore next */
    cov_bceljhu8i().f[8]++;
    cov_bceljhu8i().s[21]++;
    finalConfig.callbacks.onError?.(error.message);
    /* istanbul ignore next */
    cov_bceljhu8i().s[22]++;
    showToast(error.message, 'error');
  }));
  // Simplified state mapping
  const simplifiedState =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[23]++, {
    // Core UI state
    isLoading:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][0]++, workflow.isCapturing) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][1]++, userUpload.uploadState === 'processing') ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[1][2]++, apparelUpload.uploadState === 'processing'),
    isReady: workflow.canGenerate(),
    showResult: workflow.showPolaroid,
    // User feedback
    resultImage: workflow.generatedImage,
    errorMessage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[2][0]++, workflow.error?.message) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[2][1]++, null),
    successMessage: workflow.generatedImage ?
    /* istanbul ignore next */
    (cov_bceljhu8i().b[3][0]++, 'Try-on generated successfully!') :
    /* istanbul ignore next */
    (cov_bceljhu8i().b[3][1]++, null),
    // Upload state
    hasUserImage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[4][0]++, !!workflow.userImageFile) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[4][1]++, !!userUpload.file),
    hasApparelImage:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[5][0]++, !!workflow.apparelImageFile) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[5][1]++, !!apparelUpload.file),
    userImagePreview:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][0]++, workflow.leftCardImage) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][1]++, userUpload.file?.preview) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[6][2]++, null),
    apparelImagePreview:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][0]++, workflow.rightCardImage) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][1]++, apparelUpload.file?.preview) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[7][2]++, null),
    // Progress
    progress: workflow.progress,
    progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),
    // Interaction state
    canGenerate: workflow.canGenerate(),
    canRetry:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[8][0]++, workflow.hasError) &&
    /* istanbul ignore next */
    (cov_bceljhu8i().b[8][1]++, workflow.error?.retryable === true),
    canReset:
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][0]++, workflow.workflowState !== 'idle') ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][1]++, !!userUpload.file) ||
    /* istanbul ignore next */
    (cov_bceljhu8i().b[9][2]++, !!apparelUpload.file)
  });
  // Simplified actions
  const simplifiedActions =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[24]++, {
    // File upload actions
    uploadUserImage: (0, _react.useCallback)(async file => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[9]++;
      cov_bceljhu8i().s[25]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[26]++;
        await userUpload.uploadFile(file);
        /* istanbul ignore next */
        cov_bceljhu8i().s[27]++;
        if (finalConfig.ui.showDetailedProgress) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[10][0]++;
          cov_bceljhu8i().s[28]++;
          showToast('User image uploaded successfully', 'success');
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[10][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[29]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[11][1]++, 'Failed to upload user image'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[30]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[31]++;
        throw error;
      }
    }, [userUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    uploadApparelImage: (0, _react.useCallback)(async file => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[10]++;
      cov_bceljhu8i().s[32]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[33]++;
        await apparelUpload.uploadFile(file);
        /* istanbul ignore next */
        cov_bceljhu8i().s[34]++;
        if (finalConfig.ui.showDetailedProgress) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[12][0]++;
          cov_bceljhu8i().s[35]++;
          showToast('Apparel image uploaded successfully', 'success');
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[12][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[36]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[13][1]++, 'Failed to upload apparel image'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[37]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[38]++;
        throw error;
      }
    }, [apparelUpload, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    removeUserImage: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[11]++;
      cov_bceljhu8i().s[39]++;
      userUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[40]++;
      workflow.resetWorkflow();
    }, [userUpload, workflow]),
    removeApparelImage: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[12]++;
      cov_bceljhu8i().s[41]++;
      apparelUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[42]++;
      workflow.resetWorkflow();
    }, [apparelUpload, workflow]),
    // Generation actions
    generate: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[13]++;
      cov_bceljhu8i().s[43]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[44]++;
        finalConfig.callbacks.onGenerationStart?.();
        /* istanbul ignore next */
        cov_bceljhu8i().s[45]++;
        await workflow.startGeneration();
        /* istanbul ignore next */
        cov_bceljhu8i().s[46]++;
        if (workflow.generatedImage) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[14][0]++;
          const message =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[47]++, 'Try-on generated successfully!');
          /* istanbul ignore next */
          cov_bceljhu8i().s[48]++;
          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[49]++;
          finalConfig.callbacks.onSuccess?.(message);
          /* istanbul ignore next */
          cov_bceljhu8i().s[50]++;
          if (finalConfig.ui.showDetailedProgress) {
            /* istanbul ignore next */
            cov_bceljhu8i().b[15][0]++;
            cov_bceljhu8i().s[51]++;
            showToast(message, 'success');
          } else
          /* istanbul ignore next */
          {
            cov_bceljhu8i().b[15][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[14][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[52]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[16][1]++, 'Failed to generate try-on'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[53]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[54]++;
        throw error;
      }
    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    retry: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[14]++;
      cov_bceljhu8i().s[55]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[56]++;
        await workflow.retryGeneration();
        /* istanbul ignore next */
        cov_bceljhu8i().s[57]++;
        if (workflow.generatedImage) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[17][0]++;
          const message =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[58]++, 'Try-on generated successfully!');
          /* istanbul ignore next */
          cov_bceljhu8i().s[59]++;
          finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[60]++;
          finalConfig.callbacks.onSuccess?.(message);
          /* istanbul ignore next */
          cov_bceljhu8i().s[61]++;
          if (finalConfig.ui.showDetailedProgress) {
            /* istanbul ignore next */
            cov_bceljhu8i().b[18][0]++;
            cov_bceljhu8i().s[62]++;
            showToast(message, 'success');
          } else
          /* istanbul ignore next */
          {
            cov_bceljhu8i().b[18][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_bceljhu8i().b[17][1]++;
        }
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[63]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_bceljhu8i().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_bceljhu8i().b[19][1]++, 'Failed to retry generation'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[64]++;
        finalConfig.callbacks.onError?.(message);
        /* istanbul ignore next */
        cov_bceljhu8i().s[65]++;
        throw error;
      }
    }, [workflow, finalConfig.callbacks, finalConfig.ui.showDetailedProgress, showToast]),
    reset: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[15]++;
      cov_bceljhu8i().s[66]++;
      workflow.resetWorkflow();
      /* istanbul ignore next */
      cov_bceljhu8i().s[67]++;
      userUpload.clearFiles();
      /* istanbul ignore next */
      cov_bceljhu8i().s[68]++;
      apparelUpload.clearFiles();
    }, [workflow, userUpload, apparelUpload]),
    // UI actions
    hideResult: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[16]++;
      cov_bceljhu8i().s[69]++;
      workflow.closePolaroid();
    }, [workflow]),
    clearError: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[17]++;
      cov_bceljhu8i().s[70]++;
      workflow.clearError();
    }, [workflow]),
    downloadResult: (0, _react.useCallback)(() => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[18]++;
      cov_bceljhu8i().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_bceljhu8i().b[21][0]++, !workflow.generatedImage) ||
      /* istanbul ignore next */
      (cov_bceljhu8i().b[21][1]++, !finalConfig.ui.enableDownload)) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[20][0]++;
        cov_bceljhu8i().s[72]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[20][1]++;
      }
      cov_bceljhu8i().s[73]++;
      try {
        const link =
        /* istanbul ignore next */
        (cov_bceljhu8i().s[74]++, document.createElement('a'));
        /* istanbul ignore next */
        cov_bceljhu8i().s[75]++;
        link.href = workflow.generatedImage;
        /* istanbul ignore next */
        cov_bceljhu8i().s[76]++;
        link.download = `tryon-result-${Date.now()}.png`;
        /* istanbul ignore next */
        cov_bceljhu8i().s[77]++;
        document.body.appendChild(link);
        /* istanbul ignore next */
        cov_bceljhu8i().s[78]++;
        link.click();
        /* istanbul ignore next */
        cov_bceljhu8i().s[79]++;
        document.body.removeChild(link);
        /* istanbul ignore next */
        cov_bceljhu8i().s[80]++;
        showToast('Image downloaded successfully', 'success');
      } catch (error) {
        /* istanbul ignore next */
        cov_bceljhu8i().s[81]++;
        showToast('Failed to download image', 'error');
      }
    }, [workflow.generatedImage, finalConfig.ui.enableDownload, showToast]),
    shareResult: (0, _react.useCallback)(async () => {
      /* istanbul ignore next */
      cov_bceljhu8i().f[19]++;
      cov_bceljhu8i().s[82]++;
      if (
      /* istanbul ignore next */
      (cov_bceljhu8i().b[23][0]++, !workflow.generatedImage) ||
      /* istanbul ignore next */
      (cov_bceljhu8i().b[23][1]++, !finalConfig.ui.enableShare)) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[22][0]++;
        cov_bceljhu8i().s[83]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[22][1]++;
      }
      cov_bceljhu8i().s[84]++;
      try {
        /* istanbul ignore next */
        cov_bceljhu8i().s[85]++;
        if (navigator.share) {
          /* istanbul ignore next */
          cov_bceljhu8i().b[24][0]++;
          // Use native share API if available
          const response =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[86]++, await fetch(workflow.generatedImage));
          const blob =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[87]++, await response.blob());
          const file =
          /* istanbul ignore next */
          (cov_bceljhu8i().s[88]++, new File([blob], 'tryon-result.png', {
            type: 'image/png'
          }));
          /* istanbul ignore next */
          cov_bceljhu8i().s[89]++;
          await navigator.share({
            title: 'My Try-On Result',
            text: 'Check out my virtual try-on!',
            files: [file]
          });
        } else {
          /* istanbul ignore next */
          cov_bceljhu8i().b[24][1]++;
          cov_bceljhu8i().s[90]++;
          // Fallback to copying URL
          await navigator.clipboard.writeText(workflow.generatedImage);
          /* istanbul ignore next */
          cov_bceljhu8i().s[91]++;
          showToast('Image URL copied to clipboard', 'success');
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_bceljhu8i().s[92]++;
        showToast('Failed to share image', 'error');
      }
    }, [workflow.generatedImage, finalConfig.ui.enableShare, showToast])
  });
  /* istanbul ignore next */
  cov_bceljhu8i().s[93]++;
  return {
    state: simplifiedState,
    actions: simplifiedActions,
    advanced: {
      workflow,
      uploads: {
        user: userUpload,
        apparel: apparelUpload
      }
    }
  };
}
/**
 * Helper function to generate user-friendly progress messages
 */
function getProgressMessage(workflowState, progress) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[20]++;
  cov_bceljhu8i().s[94]++;
  switch (workflowState) {
    case 'idle':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][0]++;
      cov_bceljhu8i().s[95]++;
      return 'Ready to generate';
    case 'uploading':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][1]++;
      cov_bceljhu8i().s[96]++;
      return 'Uploading images...';
    case 'processing':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][2]++;
      cov_bceljhu8i().s[97]++;
      return 'Processing images...';
    case 'generating':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][3]++;
      cov_bceljhu8i().s[98]++;
      if (progress < 30) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[26][0]++;
        cov_bceljhu8i().s[99]++;
        return 'Preparing images...';
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[26][1]++;
      }
      cov_bceljhu8i().s[100]++;
      if (progress < 80) {
        /* istanbul ignore next */
        cov_bceljhu8i().b[27][0]++;
        cov_bceljhu8i().s[101]++;
        return 'Generating try-on...';
      } else
      /* istanbul ignore next */
      {
        cov_bceljhu8i().b[27][1]++;
      }
      cov_bceljhu8i().s[102]++;
      return 'Finalizing result...';
    case 'complete':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][4]++;
      cov_bceljhu8i().s[103]++;
      return 'Generation complete!';
    case 'error':
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][5]++;
      cov_bceljhu8i().s[104]++;
      return 'Generation failed';
    default:
      /* istanbul ignore next */
      cov_bceljhu8i().b[25][6]++;
      cov_bceljhu8i().s[105]++;
      return `Processing... ${progress}%`;
  }
}
function useSimpleTryon(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[28][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[21]++;
  const {
    state,
    actions
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[106]++, useBridgeLayer(config));
  /* istanbul ignore next */
  cov_bceljhu8i().s[107]++;
  return {
    // Minimal state for simple components
    isLoading: state.isLoading,
    result: state.resultImage,
    error: state.errorMessage,
    canGenerate: state.canGenerate,
    // Essential actions
    uploadUserImage: actions.uploadUserImage,
    uploadApparelImage: actions.uploadApparelImage,
    generate: actions.generate,
    reset: actions.reset
  };
}
function useTryonWithProgress(config =
/* istanbul ignore next */
(cov_bceljhu8i().b[29][0]++, {})) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[22]++;
  const {
    state,
    actions
  } =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[108]++, useBridgeLayer(config));
  /* istanbul ignore next */
  cov_bceljhu8i().s[109]++;
  return {
    ...state,
    ...actions,
    // Additional progress information
    uploadProgress: {
      user: state.hasUserImage ?
      /* istanbul ignore next */
      (cov_bceljhu8i().b[30][0]++, 100) :
      /* istanbul ignore next */
      (cov_bceljhu8i().b[30][1]++, 0),
      apparel: state.hasApparelImage ?
      /* istanbul ignore next */
      (cov_bceljhu8i().b[31][0]++, 100) :
      /* istanbul ignore next */
      (cov_bceljhu8i().b[31][1]++, 0)
    },
    overallProgress: calculateOverallProgress(state)
  };
}
/**
 * Helper function to calculate overall progress
 */
function calculateOverallProgress(state) {
  /* istanbul ignore next */
  cov_bceljhu8i().f[23]++;
  let progress =
  /* istanbul ignore next */
  (cov_bceljhu8i().s[110]++, 0);
  // Upload progress (40% of total)
  /* istanbul ignore next */
  cov_bceljhu8i().s[111]++;
  if (state.hasUserImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[32][0]++;
    cov_bceljhu8i().s[112]++;
    progress += 20;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[32][1]++;
  }
  cov_bceljhu8i().s[113]++;
  if (state.hasApparelImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[33][0]++;
    cov_bceljhu8i().s[114]++;
    progress += 20;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[33][1]++;
  }
  // Generation progress (60% of total)
  cov_bceljhu8i().s[115]++;
  if (
  /* istanbul ignore next */
  (cov_bceljhu8i().b[35][0]++, state.isLoading) ||
  /* istanbul ignore next */
  (cov_bceljhu8i().b[35][1]++, state.progress > 0)) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[34][0]++;
    cov_bceljhu8i().s[116]++;
    progress += state.progress * 0.6;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[34][1]++;
  }
  cov_bceljhu8i().s[117]++;
  if (state.resultImage) {
    /* istanbul ignore next */
    cov_bceljhu8i().b[36][0]++;
    cov_bceljhu8i().s[118]++;
    progress = 100;
  } else
  /* istanbul ignore next */
  {
    cov_bceljhu8i().b[36][1]++;
  }
  cov_bceljhu8i().s[119]++;
  return Math.round(progress);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,