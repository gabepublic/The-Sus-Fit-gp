{"version":3,"names":["env","cov_s8k0ydhfi","f","s","validateEnv","envSchema","_zod","z","object","ANTHROPIC_API_KEY","string","min","PINECONE_API_KEY","PINECONE_ENVIRONMENT","PINECONE_INDEX_NAME","LANGCHAIN_API_KEY","optional","LANGCHAIN_TRACING_V2","NEXT_PUBLIC_APP_URL","url","NODE_ENV","enum","parse","process","error","ZodError","b","console","errors","forEach","err","path","join","message","Error"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/lib/env.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst envSchema = z.object({\n  ANTHROPIC_API_KEY: z.string().min(1, 'Claude API key is required'),\n  PINECONE_API_KEY: z.string().min(1, 'Pinecone API key is required'),\n  PINECONE_ENVIRONMENT: z.string().min(1, 'Pinecone environment is required'),\n  PINECONE_INDEX_NAME: z.string().min(1, 'Pinecone index name is required'),\n  LANGCHAIN_API_KEY: z.string().optional(),\n  LANGCHAIN_TRACING_V2: z.string().optional(),\n  NEXT_PUBLIC_APP_URL: z.string().url().optional(),\n  NODE_ENV: z.enum(['development', 'production', 'test']).optional(),\n})\n\nexport type Env = z.infer<typeof envSchema>\n\nexport function validateEnv(): Env {\n  try {\n    return envSchema.parse(process.env)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      console.error('Environment validation failed:')\n      error.errors.forEach((err) => {\n        console.error(`- ${err.path.join('.')}: ${err.message}`)\n      })\n      throw new Error('Invalid environment variables')\n    }\n    throw error\n  }\n}\n\n// Only validate env at import time if not in test environment\nexport const env = process.env.NODE_ENV === 'test' ? {} as Env : validateEnv()"],"mappings":"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","ignoreList":[]}