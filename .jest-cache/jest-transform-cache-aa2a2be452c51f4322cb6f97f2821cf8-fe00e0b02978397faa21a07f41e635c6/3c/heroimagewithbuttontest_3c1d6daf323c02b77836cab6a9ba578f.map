{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/components/ui/hero-image-with-button.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport { HeroImageWithButton } from '@/components/ui/hero-image-with-button'\n\n// Mock Next.js Image component\njest.mock('next/image', () => {\n  return function MockImage({ src, alt, onLoad, priority, fill, ...props }: any) {\n    return (\n      <img\n        src={src}\n        alt={alt}\n        onLoad={onLoad}\n        data-priority={priority}\n        data-fill={fill}\n        {...props}\n        data-testid=\"next-image\"\n      />\n    )\n  }\n})\n\n// Mock window resize\nconst mockResizeEvent = new Event('resize')\nObject.defineProperty(window, 'innerWidth', {\n  writable: true,\n  configurable: true,\n  value: 1920\n})\n\ndescribe('HeroImageWithButton', () => {\n  const defaultProps = {\n    src: '/test-image.jpg',\n    alt: 'Test hero image'\n  }\n\n  const mockOverlayButton = {\n    onClick: jest.fn(),\n    position: { leftPercent: '50%', topPercent: '50%' },\n    size: 'md' as const\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset window width\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 1920\n    })\n    \n    // Mock image dimensions for consistent testing\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 600 // Default to medium size for consistent testing\n      }\n    })\n    \n    Object.defineProperty(HTMLElement.prototype, 'clientWidth', {\n      configurable: true,\n      get() {\n        return 800\n      }\n    })\n  })\n\n  it('renders image with correct props', () => {\n    render(<HeroImageWithButton {...defaultProps} />)\n    \n    const image = screen.getByTestId('next-image')\n    expect(image).toHaveAttribute('src', '/test-image.jpg')\n    expect(image).toHaveAttribute('alt', 'Test hero image')\n  })\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <HeroImageWithButton {...defaultProps} className=\"custom-class\" />\n    )\n    \n    expect(container.firstChild).toHaveClass('custom-class')\n  })\n\n  it('sets priority prop correctly', () => {\n    render(<HeroImageWithButton {...defaultProps} priority={false} />)\n    \n    const image = screen.getByTestId('next-image')\n    expect(image).toHaveAttribute('data-priority', 'false')\n  })\n\n  it('renders without overlay button by default', () => {\n    render(<HeroImageWithButton {...defaultProps} />)\n    \n    const button = screen.queryByRole('button')\n    expect(button).not.toBeInTheDocument()\n  })\n\n  it('renders overlay button when provided', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load to make button appear\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    // Wait for button to be ready (after image load simulation)\n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  it('calls onClick when button is clicked', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      expect(mockOverlayButton.onClick).toHaveBeenCalled()\n    })\n  })\n\n  it('applies correct button size classes', async () => {\n    const largeButton = { ...mockOverlayButton, size: 'lg' as const }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={largeButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('w-10', 'h-10')\n    })\n  })\n\n  it('applies correct small button size classes', async () => {\n    const smallButton = { ...mockOverlayButton, size: 'sm' as const }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={smallButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('w-6', 'h-6')\n    })\n  })\n\n  it('applies correct medium button size classes (default)', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('w-8', 'h-8')\n    })\n  })\n\n  it('disables button when disabled prop is true', async () => {\n    const disabledButton = { ...mockOverlayButton, disabled: true }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={disabledButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeDisabled()\n      expect(button).toHaveClass('cursor-not-allowed', 'opacity-50')\n    })\n  })\n\n  it('applies custom button className', async () => {\n    const customButton = { ...mockOverlayButton, className: 'custom-button-class' }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={customButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('custom-button-class')\n    })\n  })\n\n  it('positions button correctly', async () => {\n    const positionedButton = {\n      ...mockOverlayButton,\n      position: { leftPercent: '25%', topPercent: '75%' }\n    }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={positionedButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      // The component uses the original position values, not adjusted ones\n      expect(button).toHaveStyle({ left: '25%' })\n      expect(button).toHaveStyle({ top: '75%' })\n    })\n  })\n\n  it('handles image load event', async () => {\n    const onLoadMock = jest.fn()\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    // Should trigger button positioning calculation\n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  it('adjusts button position based on image height - small image (< 500px)', async () => {\n    // Mock image with small height\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 400 // Small image\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 400px height, position adjustment is +3.4, so 50% + 3.4% = 53.4%\n      expect(button).toHaveStyle({ left: '53.4%' })\n    })\n  })\n\n  it('adjusts button position based on image height - medium image (500-600px)', async () => {\n    // Mock image with medium height\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 550 // Medium image\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 550px height, position adjustment is +1.0, so 50% + 1.0% = 51%\n      expect(button).toHaveStyle({ left: '51%' })\n    })\n  })\n\n  it('adjusts button position based on image height - large image (600px+)', async () => {\n    // Mock image with large height\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 700 // Large image\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 700px height, position adjustment is 0, so 50% + 0% = 50%\n      expect(button).toHaveStyle({ left: '50%' })\n    })\n  })\n\n  it('adjusts button position based on screen width - small screen (< 1400px)', async () => {\n    // Mock small screen width\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 1200\n    })\n    \n    // Mock image with small height to trigger fallback logic\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 400 // Small height to trigger fallback\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 400px height, position adjustment is +3.4, so 50% + 3.4% = 53.4%\n      expect(button).toHaveStyle({ left: '53.4%' })\n    })\n  })\n\n  it('adjusts button position based on screen width - medium screen (1400-1800px)', async () => {\n    // Mock medium screen width\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 1600\n    })\n    \n    // Mock image with small height to trigger fallback logic\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 400 // Small height to trigger fallback\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 400px height, position adjustment is +3.4, so 50% + 3.4% = 53.4%\n      expect(button).toHaveStyle({ left: '53.4%' })\n    })\n  })\n\n  it('adjusts button position based on screen width - large screen (1800px+)', async () => {\n    // Mock large screen width\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 2000\n    })\n    \n    // Mock image with small height to trigger fallback logic\n    Object.defineProperty(HTMLElement.prototype, 'clientHeight', {\n      configurable: true,\n      get() {\n        return 400 // Small height to trigger fallback\n      }\n    })\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // With 400px height, position adjustment is +3.4, so 50% + 3.4% = 53.4%\n      expect(button).toHaveStyle({ left: '53.4%' })\n    })\n  })\n\n  it('handles window resize events', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    // Trigger resize event\n    await act(async () => {\n      window.dispatchEvent(mockResizeEvent)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  it('has correct accessibility attributes', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveAttribute('aria-label', 'Camera capture button')\n    })\n  })\n\n  it('applies hover and active states to enabled button', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('hover:scale-110', 'active:scale-95', 'cursor-pointer')\n    })\n  })\n\n  it('renders with correct container structure', () => {\n    const { container } = render(<HeroImageWithButton {...defaultProps} />)\n    \n    const mainContainer = container.firstChild as HTMLElement\n    expect(mainContainer).toHaveClass('relative', 'w-full', 'flex', 'items-center', 'justify-center')\n    expect(mainContainer).toHaveClass('h-[50vh]', 'min-h-[400px]', 'max-h-[800px]')\n  })\n\n  it('renders image with correct styling', () => {\n    render(<HeroImageWithButton {...defaultProps} />)\n    \n    const image = screen.getByTestId('next-image')\n    expect(image).toHaveClass('object-contain', 'drop-shadow-2xl')\n  })\n\n  it('works without overlay button props', () => {\n    render(<HeroImageWithButton {...defaultProps} />)\n    \n    expect(screen.getByTestId('next-image')).toBeInTheDocument()\n    expect(screen.queryByRole('button')).not.toBeInTheDocument()\n  })\n\n  it('handles button position with percentage values', async () => {\n    const buttonWithPercentages = {\n      ...mockOverlayButton,\n      position: { leftPercent: '75.5%', topPercent: '25.3%' }\n    }\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={buttonWithPercentages}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      // The component uses the original position values, not adjusted ones\n      expect(button).toHaveStyle({ left: '75.5%' })\n      expect(button).toHaveStyle({ top: '25.3%' })\n    })\n  })\n\n  it('handles case when overlayButton is null', () => {\n    render(<HeroImageWithButton {...defaultProps} overlayButton={null} />)\n    \n    expect(screen.getByTestId('next-image')).toBeInTheDocument()\n    expect(screen.queryByRole('button')).not.toBeInTheDocument()\n  })\n\n  it('handles case when overlayButton is undefined', () => {\n    render(<HeroImageWithButton {...defaultProps} overlayButton={undefined} />)\n    \n    expect(screen.getByTestId('next-image')).toBeInTheDocument()\n    expect(screen.queryByRole('button')).not.toBeInTheDocument()\n  })\n\n  it('handles disabled button click (should not call onClick)', async () => {\n    const disabledButton = { ...mockOverlayButton, disabled: true }\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={disabledButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      expect(mockOverlayButton.onClick).not.toHaveBeenCalled()\n    })\n  })\n\n  it('handles button with custom position and no size specified', async () => {\n    const customButton = {\n      onClick: jest.fn(),\n      position: { leftPercent: '30%', topPercent: '70%' }\n      // No size specified, should default to 'md'\n    }\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={customButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('w-8', 'h-8') // Default medium size\n      expect(button).toHaveStyle({ left: '30%' })\n      expect(button).toHaveStyle({ top: '70%' })\n    })\n  })\n\n  it('handles button with default leftPercent when not provided', async () => {\n    const buttonWithoutLeftPercent = {\n      onClick: jest.fn(),\n      position: { leftPercent: '41.65%', topPercent: '50%' } // Use the actual default value\n    }\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={buttonWithoutLeftPercent}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // Should use the provided leftPercent of '41.65%'\n      expect(button).toHaveStyle({ left: '41.65%' })\n    })\n  })\n\n  it('cleans up resize event listener on unmount', () => {\n    const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener')\n    \n    const { unmount } = render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    unmount()\n    \n    expect(removeEventListenerSpy).toHaveBeenCalledWith('resize', expect.any(Function))\n    removeEventListenerSpy.mockRestore()\n  })\n\n  it('handles multiple resize events correctly', async () => {\n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Trigger image load first\n    const image = screen.getByTestId('next-image')\n    await act(async () => {\n      fireEvent.load(image)\n    })\n    \n    // Trigger multiple resize events\n    await act(async () => {\n      window.dispatchEvent(mockResizeEvent)\n      window.dispatchEvent(mockResizeEvent)\n      window.dispatchEvent(mockResizeEvent)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  it('handles image load with delay correctly', async () => {\n    jest.useFakeTimers()\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    const image = screen.getByTestId('next-image')\n    fireEvent.load(image)\n    \n    // Fast-forward time to trigger the setTimeout in handleImageLoad\n    act(() => {\n      jest.advanceTimersByTime(250)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n    \n    jest.useRealTimers()\n  })\n\n  it('handles initial calculation timeout correctly', async () => {\n    jest.useFakeTimers()\n    \n    render(\n      <HeroImageWithButton \n        {...defaultProps} \n        overlayButton={mockOverlayButton}\n      />\n    )\n    \n    // Fast-forward time to trigger the initial calculation timeout\n    act(() => {\n      jest.advanceTimersByTime(100)\n    })\n    \n    await waitFor(() => {\n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n    })\n    \n    jest.useRealTimers()\n  })\n}) "],"names":["jest","mock","MockImage","src","alt","onLoad","priority","fill","props","img","data-priority","data-fill","data-testid","mockResizeEvent","Event","Object","defineProperty","window","writable","configurable","value","describe","defaultProps","mockOverlayButton","onClick","fn","position","leftPercent","topPercent","size","beforeEach","clearAllMocks","HTMLElement","prototype","get","it","render","HeroImageWithButton","image","screen","getByTestId","expect","toHaveAttribute","container","className","firstChild","toHaveClass","button","queryByRole","not","toBeInTheDocument","overlayButton","act","fireEvent","load","waitFor","getByRole","click","toHaveBeenCalled","largeButton","smallButton","disabledButton","disabled","toBeDisabled","customButton","positionedButton","toHaveStyle","left","top","onLoadMock","dispatchEvent","mainContainer","buttonWithPercentages","undefined","buttonWithoutLeftPercent","removeEventListenerSpy","spyOn","unmount","toHaveBeenCalledWith","any","Function","mockRestore","useFakeTimers","advanceTimersByTime","useRealTimers"],"mappings":";AAIA,+BAA+B;AAC/BA,KAAKC,IAAI,CAAC,cAAc;IACtB,OAAO,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAGC,OAAY;QAC3E,qBACE,qBAACC;YACCN,KAAKA;YACLC,KAAKA;YACLC,QAAQA;YACRK,iBAAeJ;YACfK,aAAWJ;YACV,GAAGC,KAAK;YACTI,eAAY;;IAGlB;AACF;;;;;8DAnBkB;wBACsC;qCACpB;;;;;;AAmBpC,qBAAqB;AACrB,MAAMC,kBAAkB,IAAIC,MAAM;AAClCC,OAAOC,cAAc,CAACC,QAAQ,cAAc;IAC1CC,UAAU;IACVC,cAAc;IACdC,OAAO;AACT;AAEAC,SAAS,uBAAuB;IAC9B,MAAMC,eAAe;QACnBnB,KAAK;QACLC,KAAK;IACP;IAEA,MAAMmB,oBAAoB;QACxBC,SAASxB,KAAKyB,EAAE;QAChBC,UAAU;YAAEC,aAAa;YAAOC,YAAY;QAAM;QAClDC,MAAM;IACR;IAEAC,WAAW;QACT9B,KAAK+B,aAAa;QAClB,qBAAqB;QACrBhB,OAAOC,cAAc,CAACC,QAAQ,cAAc;YAC1CC,UAAU;YACVC,cAAc;YACdC,OAAO;QACT;QAEA,+CAA+C;QAC/CL,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,gDAAgD;;YAC7D;QACF;QAEAnB,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,eAAe;YAC1Dd,cAAc;YACde;gBACE,OAAO;YACT;QACF;IACF;IAEAC,GAAG,oCAAoC;QACrCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;;QAE5C,MAAMgB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjCC,OAAOH,OAAOI,eAAe,CAAC,OAAO;QACrCD,OAAOH,OAAOI,eAAe,CAAC,OAAO;IACvC;IAEAP,GAAG,4BAA4B;QAC7B,MAAM,EAAEQ,SAAS,EAAE,GAAGP,IAAAA,cAAM,gBAC1B,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;YAAEsB,WAAU;;QAGnDH,OAAOE,UAAUE,UAAU,EAAEC,WAAW,CAAC;IAC3C;IAEAX,GAAG,gCAAgC;QACjCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;YAAEhB,UAAU;;QAExD,MAAMgC,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjCC,OAAOH,OAAOI,eAAe,CAAC,iBAAiB;IACjD;IAEAP,GAAG,6CAA6C;QAC9CC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;;QAE5C,MAAMyB,SAASR,cAAM,CAACS,WAAW,CAAC;QAClCP,OAAOM,QAAQE,GAAG,CAACC,iBAAiB;IACtC;IAEAf,GAAG,wCAAwC;QACzCC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2CAA2C;QAC3C,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,4DAA4D;QAC5D,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;IACF;IAEAf,GAAG,wCAAwC;QACzCC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCH,iBAAS,CAACI,KAAK,CAACV;YAChBN,OAAOlB,kBAAkBC,OAAO,EAAEkC,gBAAgB;QACpD;IACF;IAEAvB,GAAG,uCAAuC;QACxC,MAAMwB,cAAc;YAAE,GAAGpC,iBAAiB;YAAEM,MAAM;QAAc;QAChEO,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeQ;;QAInB,2BAA2B;QAC3B,MAAMrB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC,QAAQ;QACrC;IACF;IAEAX,GAAG,6CAA6C;QAC9C,MAAMyB,cAAc;YAAE,GAAGrC,iBAAiB;YAAEM,MAAM;QAAc;QAChEO,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeS;;QAInB,2BAA2B;QAC3B,MAAMtB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC,OAAO;QACpC;IACF;IAEAX,GAAG,wDAAwD;QACzDC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC,OAAO;QACpC;IACF;IAEAX,GAAG,8CAA8C;QAC/C,MAAM0B,iBAAiB;YAAE,GAAGtC,iBAAiB;YAAEuC,UAAU;QAAK;QAC9D1B,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeU;;QAInB,2BAA2B;QAC3B,MAAMvB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQgB,YAAY;YAC3BtB,OAAOM,QAAQD,WAAW,CAAC,sBAAsB;QACnD;IACF;IAEAX,GAAG,mCAAmC;QACpC,MAAM6B,eAAe;YAAE,GAAGzC,iBAAiB;YAAEqB,WAAW;QAAsB;QAC9ER,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAea;;QAInB,2BAA2B;QAC3B,MAAM1B,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC;QAC7B;IACF;IAEAX,GAAG,8BAA8B;QAC/B,MAAM8B,mBAAmB;YACvB,GAAG1C,iBAAiB;YACpBG,UAAU;gBAAEC,aAAa;gBAAOC,YAAY;YAAM;QACpD;QACAQ,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAec;;QAInB,2BAA2B;QAC3B,MAAM3B,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChC,qEAAqE;YACrEf,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAM;YACzC1B,OAAOM,QAAQmB,WAAW,CAAC;gBAAEE,KAAK;YAAM;QAC1C;IACF;IAEAjC,GAAG,4BAA4B;QAC7B,MAAMkC,aAAarE,KAAKyB,EAAE;QAC1BW,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,gDAAgD;QAChD,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;IACF;IAEAf,GAAG,yEAAyE;QAC1E,+BAA+B;QAC/BpB,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,cAAc;;YAC3B;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,wEAAwE;YACxET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAQ;QAC7C;IACF;IAEAhC,GAAG,4EAA4E;QAC7E,gCAAgC;QAChCpB,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,eAAe;;YAC5B;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,sEAAsE;YACtET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAM;QAC3C;IACF;IAEAhC,GAAG,wEAAwE;QACzE,+BAA+B;QAC/BpB,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,cAAc;;YAC3B;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,iEAAiE;YACjET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAM;QAC3C;IACF;IAEAhC,GAAG,2EAA2E;QAC5E,0BAA0B;QAC1BpB,OAAOC,cAAc,CAACC,QAAQ,cAAc;YAC1CC,UAAU;YACVC,cAAc;YACdC,OAAO;QACT;QAEA,yDAAyD;QACzDL,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,mCAAmC;;YAChD;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,wEAAwE;YACxET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAQ;QAC7C;IACF;IAEAhC,GAAG,+EAA+E;QAChF,2BAA2B;QAC3BpB,OAAOC,cAAc,CAACC,QAAQ,cAAc;YAC1CC,UAAU;YACVC,cAAc;YACdC,OAAO;QACT;QAEA,yDAAyD;QACzDL,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,mCAAmC;;YAChD;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,wEAAwE;YACxET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAQ;QAC7C;IACF;IAEAhC,GAAG,0EAA0E;QAC3E,0BAA0B;QAC1BpB,OAAOC,cAAc,CAACC,QAAQ,cAAc;YAC1CC,UAAU;YACVC,cAAc;YACdC,OAAO;QACT;QAEA,yDAAyD;QACzDL,OAAOC,cAAc,CAACgB,YAAYC,SAAS,EAAE,gBAAgB;YAC3Dd,cAAc;YACde;gBACE,OAAO,IAAI,mCAAmC;;YAChD;QACF;QAEAE,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,wEAAwE;YACxET,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAQ;QAC7C;IACF;IAEAhC,GAAG,gCAAgC;QACjCC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,uBAAuB;QACvB,MAAMc,IAAAA,WAAG,EAAC;YACRnC,OAAOqD,aAAa,CAACzD;QACvB;QAEA,MAAM0C,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;IACF;IAEAf,GAAG,wCAAwC;QACzCC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQL,eAAe,CAAC,cAAc;QAC/C;IACF;IAEAP,GAAG,qDAAqD;QACtDC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC,mBAAmB,mBAAmB;QACnE;IACF;IAEAX,GAAG,4CAA4C;QAC7C,MAAM,EAAEQ,SAAS,EAAE,GAAGP,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;;QAElE,MAAMiD,gBAAgB5B,UAAUE,UAAU;QAC1CJ,OAAO8B,eAAezB,WAAW,CAAC,YAAY,UAAU,QAAQ,gBAAgB;QAChFL,OAAO8B,eAAezB,WAAW,CAAC,YAAY,iBAAiB;IACjE;IAEAX,GAAG,sCAAsC;QACvCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;;QAE5C,MAAMgB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjCC,OAAOH,OAAOQ,WAAW,CAAC,kBAAkB;IAC9C;IAEAX,GAAG,sCAAsC;QACvCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;;QAE5CmB,OAAOF,cAAM,CAACC,WAAW,CAAC,eAAeU,iBAAiB;QAC1DT,OAAOF,cAAM,CAACS,WAAW,CAAC,WAAWC,GAAG,CAACC,iBAAiB;IAC5D;IAEAf,GAAG,kDAAkD;QACnD,MAAMqC,wBAAwB;YAC5B,GAAGjD,iBAAiB;YACpBG,UAAU;gBAAEC,aAAa;gBAASC,YAAY;YAAQ;QACxD;QAEAQ,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeqB;;QAInB,2BAA2B;QAC3B,MAAMlC,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChC,qEAAqE;YACrEf,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAQ;YAC3C1B,OAAOM,QAAQmB,WAAW,CAAC;gBAAEE,KAAK;YAAQ;QAC5C;IACF;IAEAjC,GAAG,2CAA2C;QAC5CC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;YAAE6B,eAAe;;QAE7DV,OAAOF,cAAM,CAACC,WAAW,CAAC,eAAeU,iBAAiB;QAC1DT,OAAOF,cAAM,CAACS,WAAW,CAAC,WAAWC,GAAG,CAACC,iBAAiB;IAC5D;IAEAf,GAAG,gDAAgD;QACjDC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAAE,GAAGf,YAAY;YAAE6B,eAAesB;;QAE7DhC,OAAOF,cAAM,CAACC,WAAW,CAAC,eAAeU,iBAAiB;QAC1DT,OAAOF,cAAM,CAACS,WAAW,CAAC,WAAWC,GAAG,CAACC,iBAAiB;IAC5D;IAEAf,GAAG,2DAA2D;QAC5D,MAAM0B,iBAAiB;YAAE,GAAGtC,iBAAiB;YAAEuC,UAAU;QAAK;QAC9D1B,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeU;;QAInB,2BAA2B;QAC3B,MAAMvB,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCH,iBAAS,CAACI,KAAK,CAACV;YAChBN,OAAOlB,kBAAkBC,OAAO,EAAEyB,GAAG,CAACS,gBAAgB;QACxD;IACF;IAEAvB,GAAG,6DAA6D;QAC9D,MAAM6B,eAAe;YACnBxC,SAASxB,KAAKyB,EAAE;YAChBC,UAAU;gBAAEC,aAAa;gBAAOC,YAAY;YAAM;QAEpD;QAEAQ,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAea;;QAInB,2BAA2B;QAC3B,MAAM1B,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQD,WAAW,CAAC,OAAO,OAAO,sBAAsB;;YAC/DL,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAM;YACzC1B,OAAOM,QAAQmB,WAAW,CAAC;gBAAEE,KAAK;YAAM;QAC1C;IACF;IAEAjC,GAAG,6DAA6D;QAC9D,MAAMuC,2BAA2B;YAC/BlD,SAASxB,KAAKyB,EAAE;YAChBC,UAAU;gBAAEC,aAAa;gBAAUC,YAAY;YAAM,EAAE,+BAA+B;QACxF;QAEAQ,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAeuB;;QAInB,2BAA2B;QAC3B,MAAMpC,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,MAAMiB,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;YAChC,kDAAkD;YAClDT,OAAOM,QAAQmB,WAAW,CAAC;gBAAEC,MAAM;YAAS;QAC9C;IACF;IAEAhC,GAAG,8CAA8C;QAC/C,MAAMwC,yBAAyB3E,KAAK4E,KAAK,CAAC3D,QAAQ;QAElD,MAAM,EAAE4D,OAAO,EAAE,GAAGzC,IAAAA,cAAM,gBACxB,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInBsD;QAEApC,OAAOkC,wBAAwBG,oBAAoB,CAAC,UAAUrC,OAAOsC,GAAG,CAACC;QACzEL,uBAAuBM,WAAW;IACpC;IAEA9C,GAAG,4CAA4C;QAC7CC,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,2BAA2B;QAC3B,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjC,MAAMY,IAAAA,WAAG,EAAC;YACRC,iBAAS,CAACC,IAAI,CAAChB;QACjB;QAEA,iCAAiC;QACjC,MAAMc,IAAAA,WAAG,EAAC;YACRnC,OAAOqD,aAAa,CAACzD;YACrBI,OAAOqD,aAAa,CAACzD;YACrBI,OAAOqD,aAAa,CAACzD;QACvB;QAEA,MAAM0C,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;IACF;IAEAf,GAAG,2CAA2C;QAC5CnC,KAAKkF,aAAa;QAElB9C,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,MAAMe,QAAQC,cAAM,CAACC,WAAW,CAAC;QACjCa,iBAAS,CAACC,IAAI,CAAChB;QAEf,iEAAiE;QACjEc,IAAAA,WAAG,EAAC;YACFpD,KAAKmF,mBAAmB,CAAC;QAC3B;QAEA,MAAM5B,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;QAEAlD,KAAKoF,aAAa;IACpB;IAEAjD,GAAG,iDAAiD;QAClDnC,KAAKkF,aAAa;QAElB9C,IAAAA,cAAM,gBACJ,qBAACC,wCAAmB;YACjB,GAAGf,YAAY;YAChB6B,eAAe5B;;QAInB,+DAA+D;QAC/D6B,IAAAA,WAAG,EAAC;YACFpD,KAAKmF,mBAAmB,CAAC;QAC3B;QAEA,MAAM5B,IAAAA,eAAO,EAAC;YACZ,MAAMR,SAASR,cAAM,CAACiB,SAAS,CAAC;YAChCf,OAAOM,QAAQG,iBAAiB;QAClC;QAEAlD,KAAKoF,aAAa;IACpB;AACF"}