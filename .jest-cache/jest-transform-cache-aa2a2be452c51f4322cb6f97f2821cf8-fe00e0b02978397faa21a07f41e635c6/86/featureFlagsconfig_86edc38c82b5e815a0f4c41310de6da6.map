{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/featureFlags.config.ts"],"sourcesContent":["// Feature Flag Configuration System\n// Environment-based configuration loading with validation and caching\n\nimport type {\n  FeatureFlagConfig,\n  FeatureFlagValue,\n  Environment,\n  FeatureFlagValidation,\n  FeatureFlagCategory,\n} from '../types/featureFlag.types';\nimport {\n  DEFAULT_TRYON_FLAGS,\n  DEFAULT_IMAGE_PROCESSING_FLAGS,\n  DEFAULT_UI_FLAGS,\n} from '../types/featureFlag.types';\n\n// Configuration cache to avoid repeated environment reads\nlet configCache: FeatureFlagConfig[] | null = null;\nlet lastCacheUpdate = 0;\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n// Environment-specific flag configurations\nconst ENVIRONMENT_SPECIFIC_FLAGS: Record<Environment, Partial<Record<string, FeatureFlagValue>>> = {\n  development: {\n    enableDarkMode: true,\n    showAdvancedControls: true,\n    enableDevTools: true,\n    enableVerboseLogging: true,\n    showDebugInfo: true,\n  },\n  staging: {\n    enableDarkMode: false,\n    showAdvancedControls: true,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableABTesting: true,\n  },\n  production: {\n    enableDarkMode: false,\n    showAdvancedControls: false,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableErrorReporting: true,\n    enableMetrics: true,\n  },\n  test: {\n    enableDarkMode: false,\n    showAdvancedControls: false,\n    enableDevTools: false,\n    enableVerboseLogging: false,\n    showDebugInfo: false,\n    enableAnimations: false,\n  },\n};\n\n// Validation rules for different flag types\nconst VALIDATION_RULES: Record<string, FeatureFlagValidation> = {\n  maxConcurrentRequests: {\n    required: true,\n    min: 1,\n    max: 10,\n  },\n  maxFileSize: {\n    required: true,\n    min: 1024, // 1KB minimum\n    max: 50 * 1024 * 1024, // 50MB maximum\n  },\n  compressionQuality: {\n    required: true,\n    min: 1,\n    max: 100,\n  },\n  tryonTimeout: {\n    required: true,\n    min: 5000, // 5 seconds minimum\n    max: 120000, // 2 minutes maximum\n  },\n  cacheTimeoutMs: {\n    required: true,\n    min: 1000, // 1 second minimum\n    max: 24 * 60 * 60 * 1000, // 24 hours maximum\n  },\n  supportedFormats: {\n    required: true,\n    pattern: /^[a-zA-Z,]+$/,\n    customValidator: (value: FeatureFlagValue) => {\n      if (typeof value !== 'string') return 'Must be a string';\n      const formats = value.split(',').map(f => f.trim().toLowerCase());\n      const validFormats = ['jpeg', 'jpg', 'png', 'webp', 'gif'];\n      const invalidFormats = formats.filter(f => !validFormats.includes(f));\n      return invalidFormats.length === 0 || `Invalid formats: ${invalidFormats.join(', ')}`;\n    },\n  },\n  experimentVariant: {\n    allowedValues: ['control', 'variant-a', 'variant-b', 'variant-c'],\n  },\n};\n\n// Parse environment variable value based on type\nconst parseEnvironmentValue = (\n  value: string,\n  type: 'boolean' | 'string' | 'number'\n): FeatureFlagValue => {\n  switch (type) {\n    case 'boolean':\n      return value.toLowerCase() === 'true';\n    case 'number':\n      const numValue = Number(value);\n      return isNaN(numValue) ? 0 : numValue;\n    case 'string':\n    default:\n      return value;\n  }\n};\n\n// Validate flag value against validation rules\nconst validateFlagValue = (\n  key: string,\n  value: FeatureFlagValue,\n  validation?: FeatureFlagValidation\n): { isValid: boolean; error?: string } => {\n  const rules = validation || VALIDATION_RULES[key];\n  if (!rules) return { isValid: true };\n\n  // Required check\n  if (rules.required && (value === undefined || value === null || value === '')) {\n    return { isValid: false, error: `${key} is required` };\n  }\n\n  // Type-specific validations\n  if (typeof value === 'number') {\n    if (rules.min !== undefined && value < rules.min) {\n      return { isValid: false, error: `${key} must be at least ${rules.min}` };\n    }\n    if (rules.max !== undefined && value > rules.max) {\n      return { isValid: false, error: `${key} must be at most ${rules.max}` };\n    }\n  }\n\n  if (typeof value === 'string') {\n    if (rules.pattern && !rules.pattern.test(value)) {\n      return { isValid: false, error: `${key} format is invalid` };\n    }\n  }\n\n  // Allowed values check\n  if (rules.allowedValues && !rules.allowedValues.includes(value)) {\n    return { \n      isValid: false, \n      error: `${key} must be one of: ${rules.allowedValues.join(', ')}` \n    };\n  }\n\n  // Custom validator\n  if (rules.customValidator) {\n    const result = rules.customValidator(value);\n    if (result !== true) {\n      return { isValid: false, error: typeof result === 'string' ? result : `${key} is invalid` };\n    }\n  }\n\n  return { isValid: true };\n};\n\n// Load feature flags from environment variables\nexport const loadEnvironmentFlags = (): Record<string, FeatureFlagValue> => {\n  const envFlags: Record<string, FeatureFlagValue> = {};\n\n  Object.entries(process.env).forEach(([key, value]) => {\n    if (key.startsWith('FEATURE_FLAG_') && value !== undefined) {\n      const flagKey = key.replace('FEATURE_FLAG_', '').toLowerCase();\n      \n      // Try to determine type from existing default flags\n      const allDefaults = [...DEFAULT_TRYON_FLAGS, ...DEFAULT_IMAGE_PROCESSING_FLAGS, ...DEFAULT_UI_FLAGS];\n      const defaultFlag = allDefaults.find(f => f.key.toLowerCase() === flagKey);\n      const type = defaultFlag?.type || 'string';\n      \n      const parsedValue = parseEnvironmentValue(value, type);\n      \n      // Validate the value\n      const validation = validateFlagValue(flagKey, parsedValue);\n      if (validation.isValid) {\n        envFlags[flagKey] = parsedValue;\n      } else {\n        console.warn(`Invalid environment flag ${flagKey}: ${validation.error}`);\n      }\n    }\n  });\n\n  return envFlags;\n};\n\n// Get current environment\nexport const getCurrentEnvironment = (): Environment => {\n  const nodeEnv = process.env.NODE_ENV;\n  const customEnv = process.env.FEATURE_FLAG_ENVIRONMENT;\n  \n  // Use custom environment if specified, otherwise fall back to NODE_ENV\n  const env = customEnv || nodeEnv;\n  \n  switch (env) {\n    case 'development':\n    case 'staging':\n    case 'production':\n    case 'test':\n      return env;\n    default:\n      return 'development';\n  }\n};\n\n// Merge configurations with priority order: environment variables > environment-specific > defaults\nexport const mergeConfigurations = (\n  defaultConfigs: FeatureFlagConfig[],\n  environment: Environment,\n  envFlags: Record<string, FeatureFlagValue> = {}\n): FeatureFlagConfig[] => {\n  const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};\n  \n  return defaultConfigs.map(config => {\n    // Start with default config\n    const finalConfig = { ...config };\n    \n    // Apply environment-specific overrides\n    const envOverride = environmentOverrides[config.key];\n    if (envOverride !== undefined) {\n      finalConfig.defaultValue = envOverride;\n    }\n    \n    // Apply environment variable overrides (highest priority)\n    const envFlag = envFlags[config.key];\n    if (envFlag !== undefined) {\n      finalConfig.defaultValue = envFlag;\n    }\n    \n    return finalConfig;\n  });\n};\n\n// Main configuration loading function with caching\nexport const loadFeatureFlagConfig = (\n  forceRefresh = false,\n  customDefaults?: FeatureFlagConfig[]\n): FeatureFlagConfig[] => {\n  const now = Date.now();\n  \n  // Return cached config if still valid and not forcing refresh\n  if (!forceRefresh && configCache && (now - lastCacheUpdate) < CACHE_TTL) {\n    return configCache;\n  }\n  \n  // Load environment flags\n  const envFlags = loadEnvironmentFlags();\n  const environment = getCurrentEnvironment();\n  \n  // Use custom defaults or standard defaults\n  const defaultConfigs = customDefaults || [\n    ...DEFAULT_TRYON_FLAGS,\n    ...DEFAULT_IMAGE_PROCESSING_FLAGS,\n    ...DEFAULT_UI_FLAGS,\n  ];\n  \n  // Merge all configurations\n  const mergedConfigs = mergeConfigurations(defaultConfigs, environment, envFlags);\n  \n  // Add environment-specific flags that don't exist in defaults\n  const existingKeys = new Set(mergedConfigs.map(c => c.key));\n  const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};\n  \n  Object.entries(environmentOverrides).forEach(([key, value]) => {\n    if (!existingKeys.has(key) && value !== undefined) {\n      // Infer type from value\n      const type = typeof value as 'boolean' | 'string' | 'number';\n      const category: FeatureFlagCategory = key.startsWith('enable') ? 'ui' : 'experiment';\n      \n      mergedConfigs.push({\n        key,\n        description: `Environment-specific flag for ${environment}`,\n        category,\n        defaultValue: value,\n        type,\n        environment: [environment],\n      });\n    }\n  });\n  \n  // Update cache\n  configCache = mergedConfigs;\n  lastCacheUpdate = now;\n  \n  return mergedConfigs;\n};\n\n// Clear configuration cache (useful for testing or hot reloading)\nexport const clearConfigCache = (): void => {\n  configCache = null;\n  lastCacheUpdate = 0;\n};\n\n// Validate all configurations\nexport const validateConfigurations = (configs: FeatureFlagConfig[]): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n  \n  configs.forEach(config => {\n    const validation = validateFlagValue(config.key, config.defaultValue);\n    if (!validation.isValid && validation.error) {\n      errors.push(validation.error);\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// Hot reload support for development\nexport const enableHotReload = (): void => {\n  if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {\n    // Listen for environment changes (this would be extended based on your hot reload setup)\n    const checkForUpdates = () => {\n      const newConfigs = loadFeatureFlagConfig(true);\n      // Trigger re-render of components using feature flags\n      window.dispatchEvent(new CustomEvent('featureFlags:updated', { \n        detail: { configs: newConfigs } \n      }));\n    };\n    \n    // Check for updates every 30 seconds in development\n    setInterval(checkForUpdates, 30000);\n  }\n};\n\n// Export utility functions for configuration debugging\nexport const debugConfiguration = (): {\n  environment: Environment;\n  envFlags: Record<string, FeatureFlagValue>;\n  finalConfigs: FeatureFlagConfig[];\n  validation: { isValid: boolean; errors: string[] };\n} => {\n  const environment = getCurrentEnvironment();\n  const envFlags = loadEnvironmentFlags();\n  const finalConfigs = loadFeatureFlagConfig(true);\n  const validation = validateConfigurations(finalConfigs);\n  \n  return {\n    environment,\n    envFlags,\n    finalConfigs,\n    validation,\n  };\n};"],"names":["clearConfigCache","debugConfiguration","enableHotReload","getCurrentEnvironment","loadEnvironmentFlags","loadFeatureFlagConfig","mergeConfigurations","validateConfigurations","configCache","lastCacheUpdate","CACHE_TTL","ENVIRONMENT_SPECIFIC_FLAGS","development","enableDarkMode","showAdvancedControls","enableDevTools","enableVerboseLogging","showDebugInfo","staging","enableABTesting","production","enableErrorReporting","enableMetrics","test","enableAnimations","VALIDATION_RULES","maxConcurrentRequests","required","min","max","maxFileSize","compressionQuality","tryonTimeout","cacheTimeoutMs","supportedFormats","pattern","customValidator","value","formats","split","map","f","trim","toLowerCase","validFormats","invalidFormats","filter","includes","length","join","experimentVariant","allowedValues","parseEnvironmentValue","type","numValue","Number","isNaN","validateFlagValue","key","validation","rules","isValid","undefined","error","result","envFlags","Object","entries","process","env","forEach","startsWith","flagKey","replace","allDefaults","DEFAULT_TRYON_FLAGS","DEFAULT_IMAGE_PROCESSING_FLAGS","DEFAULT_UI_FLAGS","defaultFlag","find","parsedValue","console","warn","nodeEnv","NODE_ENV","customEnv","FEATURE_FLAG_ENVIRONMENT","defaultConfigs","environment","environmentOverrides","config","finalConfig","envOverride","defaultValue","envFlag","forceRefresh","customDefaults","now","Date","mergedConfigs","existingKeys","Set","c","has","category","push","description","configs","errors","window","checkForUpdates","newConfigs","dispatchEvent","CustomEvent","detail","setInterval","finalConfigs"],"mappings":"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"}