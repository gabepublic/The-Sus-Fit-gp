{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/business-layer/utils/errorHandling.test.ts"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport { \n  FileTypeNotSupportedError, \n  FileTooLargeError, \n  CompressionFailedError \n} from '../../../src/utils/image';\nimport { \n  ImageProcessingError, \n  ImageDimensionError \n} from '../../../src/business-layer/utils/imageProcessing';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  getUserFriendlyErrorMessage,\n  isErrorRetryable,\n  getErrorRecoveryActions,\n  formatErrorForDisplay,\n  setErrorLogger,\n  ConsoleErrorLogger,\n  ErrorCategory,\n  ErrorSeverity,\n  type ClassifiedError,\n  type ErrorLogger\n} from '../../../src/business-layer/utils/errorHandling';\nimport type { TryonMutationError } from '../../../src/business-layer/types/tryon.types';\n\ndescribe('Error Handling System', () => {\n  let mockLogger: jest.Mocked<ErrorLogger>;\n\n  beforeEach(() => {\n    mockLogger = {\n      logError: jest.fn()\n    };\n    setErrorLogger(mockLogger);\n  });\n\n  describe('Error Classification', () => {\n    it('should classify FileTypeNotSupportedError correctly', () => {\n      const error = new FileTypeNotSupportedError('Invalid file type');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.VALIDATION);\n      expect(classified.severity).toBe(ErrorSeverity.LOW);\n      expect(classified.errorCode).toBe('INVALID_FILE_TYPE');\n      expect(classified.retryable).toBe(false);\n      expect(classified.userMessage).toContain('valid image file');\n      expect(classified.recoveryActions).toHaveLength(1);\n      expect(classified.recoveryActions[0].type).toBe('try_different_image');\n    });\n\n    it('should classify FileTooLargeError correctly', () => {\n      const error = new FileTooLargeError('File too large');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.VALIDATION);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('FILE_TOO_LARGE');\n      expect(classified.retryable).toBe(false);\n      expect(classified.userMessage).toContain('too large');\n      expect(classified.recoveryActions).toHaveLength(2);\n      expect(classified.recoveryActions[0].type).toBe('reduce_image_size');\n    });\n\n    it('should classify ImageDimensionError correctly', () => {\n      const error = new ImageDimensionError('Invalid dimensions', 100, 100);\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.VALIDATION);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('INVALID_DIMENSIONS');\n      expect(classified.retryable).toBe(false);\n      expect(classified.userMessage).toContain('dimensions');\n    });\n\n    it('should classify ImageProcessingError correctly', () => {\n      const error = new ImageProcessingError('Processing failed');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.IMAGE_PROCESSING);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('IMAGE_PROCESSING_FAILED');\n      expect(classified.retryable).toBe(false);\n      expect(classified.userMessage).toContain('process the image');\n    });\n\n    it('should classify CompressionFailedError correctly', () => {\n      const error = new CompressionFailedError('Compression failed');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.IMAGE_PROCESSING);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('IMAGE_PROCESSING_FAILED');\n      expect(classified.retryable).toBe(false);\n    });\n\n    it('should classify rate limit errors correctly', () => {\n      const error: TryonMutationError = {\n        error: 'Rate limited',\n        status: 429\n      };\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.RATE_LIMIT);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('RATE_LIMITED');\n      expect(classified.retryable).toBe(true);\n      expect(classified.recoveryActions[0].type).toBe('wait_and_retry');\n      expect(classified.recoveryActions[0].waitTime).toBe(60);\n    });\n\n    it('should classify server errors correctly', () => {\n      const error: TryonMutationError = {\n        error: 'Internal server error',\n        status: 500\n      };\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.API_SERVER);\n      expect(classified.severity).toBe(ErrorSeverity.HIGH);\n      expect(classified.errorCode).toBe('SERVER_ERROR');\n      expect(classified.retryable).toBe(true);\n      expect(classified.recoveryActions[0].type).toBe('retry');\n    });\n\n    it('should classify client errors correctly', () => {\n      const error: TryonMutationError = {\n        error: 'Bad request',\n        status: 400\n      };\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.VALIDATION);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('CLIENT_ERROR');\n      expect(classified.retryable).toBe(false);\n    });\n\n    it('should classify timeout errors correctly', () => {\n      const error = new Error('Request timeout');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.TIMEOUT);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('REQUEST_TIMEOUT');\n      expect(classified.retryable).toBe(true);\n      expect(classified.recoveryActions).toContainEqual(\n        expect.objectContaining({ type: 'check_connection' })\n      );\n    });\n\n    it('should classify network errors correctly', () => {\n      const error = new Error('Network connection failed');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.NETWORK);\n      expect(classified.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(classified.errorCode).toBe('NETWORK_ERROR');\n      expect(classified.retryable).toBe(true);\n    });\n\n    it('should classify unknown errors correctly', () => {\n      const error = new Error('Something unexpected happened');\n      const classified = classifyTryonError(error);\n\n      expect(classified.category).toBe(ErrorCategory.UNKNOWN);\n      expect(classified.severity).toBe(ErrorSeverity.HIGH);\n      expect(classified.errorCode).toBe('UNKNOWN_ERROR');\n      expect(classified.retryable).toBe(true);\n      expect(classified.userMessage).toContain('unexpected error');\n    });\n  });\n\n  describe('Error Logging', () => {\n    it('should log errors with classification', () => {\n      const error = new Error('Test error');\n      const context = { test: 'context' };\n      \n      const classified = logAndClassifyError(error, context);\n\n      expect(mockLogger.logError).toHaveBeenCalledWith(\n        classified,\n        context\n      );\n    });\n\n    it('should use default console logger when no custom logger set', () => {\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation();\n\n      const logger = new ConsoleErrorLogger();\n      setErrorLogger(logger);\n\n      // Test critical error\n      const criticalError = classifyTryonError(new Error('Critical'));\n      criticalError.severity = ErrorSeverity.CRITICAL;\n      logger.logError(criticalError);\n      expect(consoleErrorSpy).toHaveBeenCalled();\n\n      // Test medium error\n      const mediumError = classifyTryonError(new Error('Medium'));\n      mediumError.severity = ErrorSeverity.MEDIUM;\n      logger.logError(mediumError);\n      expect(consoleWarnSpy).toHaveBeenCalled();\n\n      // Test low error\n      const lowError = classifyTryonError(new Error('Low'));\n      lowError.severity = ErrorSeverity.LOW;\n      logger.logError(lowError);\n      expect(consoleInfoSpy).toHaveBeenCalled();\n\n      consoleErrorSpy.mockRestore();\n      consoleWarnSpy.mockRestore();\n      consoleInfoSpy.mockRestore();\n    });\n  });\n\n  describe('Utility Functions', () => {\n    it('should get user-friendly error messages', () => {\n      const error = new FileTypeNotSupportedError('Invalid type');\n      const message = getUserFriendlyErrorMessage(error);\n      \n      expect(message).toContain('valid image file');\n      expect(message).not.toContain('Invalid type'); // Should not expose technical message\n    });\n\n    it('should determine if errors are retryable', () => {\n      const retryableError = new Error('Network error');\n      const nonRetryableError = new FileTypeNotSupportedError('Invalid type');\n\n      expect(isErrorRetryable(retryableError)).toBe(true);\n      expect(isErrorRetryable(nonRetryableError)).toBe(false);\n    });\n\n    it('should get recovery actions for errors', () => {\n      const error = new FileTooLargeError('Too large');\n      const actions = getErrorRecoveryActions(error);\n\n      expect(actions).toHaveLength(2);\n      expect(actions[0].type).toBe('reduce_image_size');\n      expect(actions[1].type).toBe('try_different_image');\n    });\n\n    it('should format errors for display', () => {\n      const error = new Error('Network connection failed');\n      const formatted = formatErrorForDisplay(error);\n\n      expect(formatted.title).toBe('Connection Issue');\n      expect(formatted.message).toContain('Network connection');\n      expect(formatted.canRetry).toBe(true);\n      expect(formatted.actions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Recovery Actions', () => {\n    it('should provide appropriate recovery actions for validation errors', () => {\n      const error = new FileTypeNotSupportedError('Invalid type');\n      const classified = classifyTryonError(error);\n\n      expect(classified.recoveryActions).toContainEqual(\n        expect.objectContaining({\n          type: 'try_different_image',\n          description: expect.stringContaining('JPEG, PNG, WebP, or GIF')\n        })\n      );\n    });\n\n    it('should provide automated recovery actions for network errors', () => {\n      const error = new Error('Network error');\n      const classified = classifyTryonError(error);\n\n      const automatedAction = classified.recoveryActions.find(\n        action => action.automated === true\n      );\n      \n      expect(automatedAction).toBeDefined();\n      expect(automatedAction?.type).toBe('retry');\n      expect(automatedAction?.waitTime).toBeDefined();\n    });\n\n    it('should provide wait times for rate limiting', () => {\n      const error: TryonMutationError = { error: 'Rate limited', status: 429 };\n      const classified = classifyTryonError(error);\n\n      const waitAction = classified.recoveryActions.find(\n        action => action.type === 'wait_and_retry'\n      );\n\n      expect(waitAction).toBeDefined();\n      expect(waitAction?.waitTime).toBe(60);\n    });\n  });\n\n  describe('Context Handling', () => {\n    it('should include context in classified errors', () => {\n      const error = new Error('Test error');\n      const context = { \n        userId: '123', \n        imageCount: 2,\n        timestamp: '2023-01-01T00:00:00Z'\n      };\n\n      const classified = classifyTryonError(error, context);\n\n      expect(classified.context).toEqual(context);\n    });\n\n    it('should handle undefined context gracefully', () => {\n      const error = new Error('Test error');\n      const classified = classifyTryonError(error);\n\n      expect(classified.context).toBeUndefined();\n      expect(classified.originalError).toBe(error);\n    });\n  });\n\n  describe('Error Chaining', () => {\n    it('should preserve original error information', () => {\n      const originalError = new Error('Original message');\n      originalError.stack = 'Original stack trace';\n      \n      const classified = classifyTryonError(originalError);\n\n      expect(classified.originalError).toBe(originalError);\n      expect(classified.technicalMessage).toContain('Original message');\n    });\n\n    it('should handle non-Error objects', () => {\n      const errorObject = { message: 'Custom error', code: 'CUSTOM' };\n      const classified = classifyTryonError(errorObject);\n\n      expect(classified.originalError).toBe(errorObject);\n      expect(classified.category).toBe(ErrorCategory.UNKNOWN);\n    });\n  });\n});"],"names":["describe","mockLogger","beforeEach","logError","jest","fn","setErrorLogger","it","error","FileTypeNotSupportedError","classified","classifyTryonError","expect","category","toBe","ErrorCategory","VALIDATION","severity","ErrorSeverity","LOW","errorCode","retryable","userMessage","toContain","recoveryActions","toHaveLength","type","FileTooLargeError","MEDIUM","ImageDimensionError","ImageProcessingError","IMAGE_PROCESSING","CompressionFailedError","status","RATE_LIMIT","waitTime","API_SERVER","HIGH","Error","TIMEOUT","toContainEqual","objectContaining","NETWORK","UNKNOWN","context","test","logAndClassifyError","toHaveBeenCalledWith","consoleErrorSpy","spyOn","console","mockImplementation","consoleWarnSpy","consoleInfoSpy","logger","ConsoleErrorLogger","criticalError","CRITICAL","toHaveBeenCalled","mediumError","lowError","mockRestore","message","getUserFriendlyErrorMessage","not","retryableError","nonRetryableError","isErrorRetryable","actions","getErrorRecoveryActions","formatted","formatErrorForDisplay","title","canRetry","length","toBeGreaterThan","description","stringContaining","automatedAction","find","action","automated","toBeDefined","waitAction","userId","imageCount","timestamp","toEqual","toBeUndefined","originalError","stack","technicalMessage","errorObject","code"],"mappings":"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"}