{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/errorHandling.ts"],"sourcesContent":["// Comprehensive Error Handling for Try-On Mutations\n// Error classification, user-friendly messages, and recovery suggestions\n\nimport { \n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError\n} from '../../utils/image';\nimport {\n  ImageProcessingError,\n  ImageDimensionError\n} from './imageProcessing';\nimport type { TryonMutationError } from '../types/tryon.types';\n\n/**\n * Error categories for classification\n */\nexport enum ErrorCategory {\n  VALIDATION = 'validation',\n  NETWORK = 'network',\n  TIMEOUT = 'timeout',\n  API_SERVER = 'api_server',\n  IMAGE_PROCESSING = 'image_processing',\n  RATE_LIMIT = 'rate_limit',\n  AUTHENTICATION = 'authentication',\n  UNKNOWN = 'unknown'\n}\n\n/**\n * Error severity levels\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n/**\n * Error recovery suggestions\n */\nexport interface ErrorRecoveryAction {\n  /** Action type identifier */\n  type: 'retry' | 'reduce_image_size' | 'check_connection' | 'contact_support' | 'try_different_image' | 'wait_and_retry';\n  /** User-friendly description of the action */\n  description: string;\n  /** Whether this action can be automated */\n  automated?: boolean;\n  /** Estimated time to wait before retry (in seconds) */\n  waitTime?: number;\n}\n\n/**\n * Comprehensive error information\n */\nexport interface ClassifiedError {\n  /** Original error object */\n  originalError: Error | TryonMutationError | unknown;\n  /** Error category for handling logic */\n  category: ErrorCategory;\n  /** Severity level */\n  severity: ErrorSeverity;\n  /** User-friendly error message */\n  userMessage: string;\n  /** Technical details for developers */\n  technicalMessage: string;\n  /** Suggested recovery actions */\n  recoveryActions: ErrorRecoveryAction[];\n  /** Whether the error is retryable */\n  retryable: boolean;\n  /** Error code for programmatic handling */\n  errorCode: string;\n  /** Additional context data */\n  context?: Record<string, unknown>;\n}\n\n/**\n * Error logging interface\n */\nexport interface ErrorLogger {\n  logError(error: ClassifiedError, additionalContext?: Record<string, unknown>): void;\n}\n\n/**\n * Default console-based error logger\n */\nexport class ConsoleErrorLogger implements ErrorLogger {\n  logError(error: ClassifiedError, additionalContext?: Record<string, unknown>): void {\n    const logData = {\n      timestamp: new Date().toISOString(),\n      category: error.category,\n      severity: error.severity,\n      errorCode: error.errorCode,\n      userMessage: error.userMessage,\n      technicalMessage: error.technicalMessage,\n      retryable: error.retryable,\n      originalError: error.originalError,\n      context: error.context,\n      additionalContext\n    };\n\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n      case ErrorSeverity.HIGH:\n        console.error('[TryOn Error]', logData);\n        break;\n      case ErrorSeverity.MEDIUM:\n        console.warn('[TryOn Warning]', logData);\n        break;\n      default:\n        console.info('[TryOn Info]', logData);\n    }\n  }\n}\n\n/**\n * Global error logger instance\n */\nlet errorLogger: ErrorLogger = new ConsoleErrorLogger();\n\n/**\n * Set custom error logger\n */\nexport function setErrorLogger(logger: ErrorLogger): void {\n  errorLogger = logger;\n}\n\n/**\n * Get current error logger\n */\nexport function getErrorLogger(): ErrorLogger {\n  return errorLogger;\n}\n\n/**\n * Classify and enhance error with user-friendly information\n */\nexport function classifyTryonError(error: unknown, context?: Record<string, unknown>): ClassifiedError {\n  // Handle known error types\n  if (error instanceof FileTypeNotSupportedError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.LOW,\n      userMessage: 'Please select a valid image file (JPEG, PNG, WebP, or GIF).',\n      technicalMessage: `File type validation failed: ${error.message}`,\n      errorCode: 'INVALID_FILE_TYPE',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Select a different image file in JPEG, PNG, WebP, or GIF format'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof FileTooLargeError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Image file is too large. Please select an image under 5MB or try compressing it.',\n      technicalMessage: `File size validation failed: ${error.message}`,\n      errorCode: 'FILE_TOO_LARGE',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'reduce_image_size',\n          description: 'Compress or resize your image to under 5MB'\n        },\n        {\n          type: 'try_different_image',\n          description: 'Select a smaller image file'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof ImageDimensionError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Image dimensions are not suitable. Please use an image that is at least 512x512 pixels.',\n      technicalMessage: `Image dimension validation failed: ${error.message}`,\n      errorCode: 'INVALID_DIMENSIONS',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Select an image with dimensions of at least 512x512 pixels'\n        }\n      ],\n      context\n    };\n  }\n\n  if (error instanceof CompressionFailedError || error instanceof ImageProcessingError) {\n    return {\n      originalError: error,\n      category: ErrorCategory.IMAGE_PROCESSING,\n      severity: ErrorSeverity.MEDIUM,\n      userMessage: 'Unable to process the image. Please try a different image or reduce the file size.',\n      technicalMessage: `Image processing failed: ${error.message}`,\n      errorCode: 'IMAGE_PROCESSING_FAILED',\n      retryable: false,\n      recoveryActions: [\n        {\n          type: 'try_different_image',\n          description: 'Try selecting a different image'\n        },\n        {\n          type: 'reduce_image_size',\n          description: 'Use a smaller or simpler image'\n        }\n      ],\n      context\n    };\n  }\n\n  // Handle TryonMutationError (API errors)\n  if (error && typeof error === 'object' && 'error' in error) {\n    const mutationError = error as TryonMutationError;\n    \n    // Rate limiting\n    if (mutationError.status === 429) {\n      return {\n        originalError: error,\n        category: ErrorCategory.RATE_LIMIT,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Too many requests. Please wait a moment before trying again.',\n        technicalMessage: 'Rate limit exceeded',\n        errorCode: 'RATE_LIMITED',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'wait_and_retry',\n            description: 'Wait 60 seconds and try again',\n            automated: true,\n            waitTime: 60\n          }\n        ],\n        context\n      };\n    }\n\n    // Server errors\n    if (mutationError.status && mutationError.status >= 500) {\n      return {\n        originalError: error,\n        category: ErrorCategory.API_SERVER,\n        severity: ErrorSeverity.HIGH,\n        userMessage: 'Server is temporarily unavailable. Please try again in a few moments.',\n        technicalMessage: `Server error: ${mutationError.error}`,\n        errorCode: 'SERVER_ERROR',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'retry',\n            description: 'Try again in a few moments',\n            automated: true,\n            waitTime: 30\n          },\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          }\n        ],\n        context\n      };\n    }\n\n    // Client errors (400-499)\n    if (mutationError.status && mutationError.status >= 400 && mutationError.status < 500) {\n      return {\n        originalError: error,\n        category: ErrorCategory.VALIDATION,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Request could not be processed. Please check your images and try again.',\n        technicalMessage: `Client error: ${mutationError.error}`,\n        errorCode: 'CLIENT_ERROR',\n        retryable: false,\n        recoveryActions: [\n          {\n            type: 'try_different_image',\n            description: 'Try using different images'\n          }\n        ],\n        context\n      };\n    }\n  }\n\n  // Handle network/timeout errors\n  if (error instanceof Error) {\n    const message = error.message.toLowerCase();\n    \n    if (message.includes('timeout') || message.includes('aborted')) {\n      return {\n        originalError: error,\n        category: ErrorCategory.TIMEOUT,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Request timed out. Please check your connection and try again.',\n        technicalMessage: `Timeout error: ${error.message}`,\n        errorCode: 'REQUEST_TIMEOUT',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          },\n          {\n            type: 'retry',\n            description: 'Try again with a stable connection',\n            automated: true,\n            waitTime: 10\n          }\n        ],\n        context\n      };\n    }\n\n    if (message.includes('network') || message.includes('fetch') || message.includes('connection')) {\n      return {\n        originalError: error,\n        category: ErrorCategory.NETWORK,\n        severity: ErrorSeverity.MEDIUM,\n        userMessage: 'Network connection issue. Please check your internet and try again.',\n        technicalMessage: `Network error: ${error.message}`,\n        errorCode: 'NETWORK_ERROR',\n        retryable: true,\n        recoveryActions: [\n          {\n            type: 'check_connection',\n            description: 'Check your internet connection'\n          },\n          {\n            type: 'retry',\n            description: 'Try again when connection is stable',\n            automated: true,\n            waitTime: 15\n          }\n        ],\n        context\n      };\n    }\n  }\n\n  // Unknown error fallback\n  return {\n    originalError: error,\n    category: ErrorCategory.UNKNOWN,\n    severity: ErrorSeverity.HIGH,\n    userMessage: 'An unexpected error occurred. Please try again or contact support if the problem persists.',\n    technicalMessage: error instanceof Error ? error.message : 'Unknown error occurred',\n    errorCode: 'UNKNOWN_ERROR',\n    retryable: true,\n    recoveryActions: [\n      {\n        type: 'retry',\n        description: 'Try the operation again'\n      },\n      {\n        type: 'contact_support',\n        description: 'Contact support if the problem continues'\n      }\n    ],\n    context\n  };\n}\n\n/**\n * Log and classify error in one operation\n */\nexport function logAndClassifyError(\n  error: unknown, \n  context?: Record<string, unknown>\n): ClassifiedError {\n  const classifiedError = classifyTryonError(error, context);\n  errorLogger.logError(classifiedError, context);\n  return classifiedError;\n}\n\n/**\n * Get user-friendly error message\n */\nexport function getUserFriendlyErrorMessage(error: unknown): string {\n  const classified = classifyTryonError(error);\n  return classified.userMessage;\n}\n\n/**\n * Check if error is retryable\n */\nexport function isErrorRetryable(error: unknown): boolean {\n  const classified = classifyTryonError(error);\n  return classified.retryable;\n}\n\n/**\n * Get recovery actions for error\n */\nexport function getErrorRecoveryActions(error: unknown): ErrorRecoveryAction[] {\n  const classified = classifyTryonError(error);\n  return classified.recoveryActions;\n}\n\n/**\n * Format error for display in UI\n */\nexport function formatErrorForDisplay(error: unknown): {\n  title: string;\n  message: string;\n  actions: ErrorRecoveryAction[];\n  canRetry: boolean;\n} {\n  const classified = classifyTryonError(error);\n  \n  let title: string;\n  switch (classified.category) {\n    case ErrorCategory.VALIDATION:\n      title = 'Invalid Input';\n      break;\n    case ErrorCategory.NETWORK:\n      title = 'Connection Issue';\n      break;\n    case ErrorCategory.TIMEOUT:\n      title = 'Request Timed Out';\n      break;\n    case ErrorCategory.API_SERVER:\n      title = 'Server Error';\n      break;\n    case ErrorCategory.IMAGE_PROCESSING:\n      title = 'Image Processing Error';\n      break;\n    case ErrorCategory.RATE_LIMIT:\n      title = 'Too Many Requests';\n      break;\n    default:\n      title = 'Error';\n  }\n\n  return {\n    title,\n    message: classified.userMessage,\n    actions: classified.recoveryActions,\n    canRetry: classified.retryable\n  };\n}"],"names":["ConsoleErrorLogger","ErrorCategory","ErrorSeverity","classifyTryonError","formatErrorForDisplay","getErrorLogger","getErrorRecoveryActions","getUserFriendlyErrorMessage","isErrorRetryable","logAndClassifyError","setErrorLogger","logError","error","additionalContext","logData","timestamp","Date","toISOString","category","severity","errorCode","userMessage","technicalMessage","retryable","originalError","context","console","warn","info","errorLogger","logger","FileTypeNotSupportedError","message","recoveryActions","type","description","FileTooLargeError","ImageDimensionError","CompressionFailedError","ImageProcessingError","mutationError","status","automated","waitTime","Error","toLowerCase","includes","classifiedError","classified","title","actions","canRetry"],"mappings":"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"}