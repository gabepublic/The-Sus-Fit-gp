{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageFilters.ts"],"sourcesContent":["// Image Filter System for Canvas\n// Comprehensive image filtering with real-time preview and filter composition\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\nimport { BlendMode } from './canvasUtils';\n\n/**\n * Filter types available in the system\n */\nexport enum FilterType {\n  // Basic filters\n  Brightness = 'brightness',\n  Contrast = 'contrast',\n  Saturation = 'saturation',\n  Hue = 'hue',\n  Gamma = 'gamma',\n  Exposure = 'exposure',\n  \n  // Blur and sharpening\n  Blur = 'blur',\n  GaussianBlur = 'gaussianBlur',\n  MotionBlur = 'motionBlur',\n  Sharpen = 'sharpen',\n  UnsharpMask = 'unsharpMask',\n  \n  // Noise and texture\n  Noise = 'noise',\n  Grain = 'grain',\n  \n  // Color effects\n  Sepia = 'sepia',\n  Grayscale = 'grayscale',\n  Invert = 'invert',\n  Posterize = 'posterize',\n  Solarize = 'solarize',\n  \n  // Artistic filters\n  Emboss = 'emboss',\n  EdgeDetection = 'edgeDetection',\n  Vintage = 'vintage',\n  Vignette = 'vignette',\n  \n  // Color correction\n  WhiteBalance = 'whiteBalance',\n  ColorBalance = 'colorBalance',\n  Levels = 'levels',\n  Curves = 'curves',\n  \n  // Special effects\n  Pixelate = 'pixelate',\n  Halftone = 'halftone',\n  CrossHatch = 'crossHatch',\n  OilPainting = 'oilPainting'\n}\n\n/**\n * Filter parameter configuration\n */\nexport interface FilterParameter {\n  name: string;\n  type: 'number' | 'range' | 'boolean' | 'color' | 'select';\n  value: any;\n  min?: number;\n  max?: number;\n  step?: number;\n  options?: string[];\n  description?: string;\n}\n\n/**\n * Filter configuration\n */\nexport interface FilterConfig {\n  id: string;\n  type: FilterType;\n  name: string;\n  description: string;\n  parameters: Record<string, FilterParameter>;\n  enabled: boolean;\n  opacity: number;\n  blendMode: BlendMode;\n}\n\n/**\n * Filter preset configuration\n */\nexport interface FilterPreset {\n  id: string;\n  name: string;\n  description: string;\n  thumbnail?: string;\n  filters: FilterConfig[];\n  category: string;\n  tags: string[];\n}\n\n/**\n * Filter application result\n */\nexport interface FilterResult {\n  success: boolean;\n  processedImageData?: ImageData;\n  error?: string;\n  processingTime: number;\n}\n\n/**\n * Filter preview configuration\n */\nexport interface FilterPreviewConfig {\n  enabled: boolean;\n  updateInterval: number;\n  maxPreviewSize: { width: number; height: number };\n  quality: number;\n}\n\n/**\n * Default filter parameters for each filter type\n */\nexport const DEFAULT_FILTER_PARAMETERS: Record<FilterType, Record<string, FilterParameter>> = {\n  [FilterType.Brightness]: {\n    amount: { name: 'Brightness', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust image brightness' }\n  },\n  [FilterType.Contrast]: {\n    amount: { name: 'Contrast', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust image contrast' }\n  },\n  [FilterType.Saturation]: {\n    amount: { name: 'Saturation', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Adjust color saturation' }\n  },\n  [FilterType.Hue]: {\n    angle: { name: 'Hue Shift', type: 'range', value: 0, min: -180, max: 180, step: 1, description: 'Shift hue in degrees' }\n  },\n  [FilterType.Gamma]: {\n    gamma: { name: 'Gamma', type: 'range', value: 1, min: 0.1, max: 3, step: 0.1, description: 'Gamma correction' }\n  },\n  [FilterType.Exposure]: {\n    stops: { name: 'Exposure', type: 'range', value: 0, min: -3, max: 3, step: 0.1, description: 'Exposure in stops' }\n  },\n  [FilterType.Blur]: {\n    radius: { name: 'Radius', type: 'range', value: 5, min: 0, max: 50, step: 1, description: 'Blur radius in pixels' }\n  },\n  [FilterType.GaussianBlur]: {\n    radius: { name: 'Radius', type: 'range', value: 5, min: 0, max: 50, step: 1, description: 'Gaussian blur radius' }\n  },\n  [FilterType.MotionBlur]: {\n    distance: { name: 'Distance', type: 'range', value: 10, min: 0, max: 100, step: 1, description: 'Motion blur distance' },\n    angle: { name: 'Angle', type: 'range', value: 0, min: 0, max: 360, step: 1, description: 'Motion blur angle' }\n  },\n  [FilterType.Sharpen]: {\n    amount: { name: 'Amount', type: 'range', value: 50, min: 0, max: 200, step: 1, description: 'Sharpening amount' }\n  },\n  [FilterType.UnsharpMask]: {\n    amount: { name: 'Amount', type: 'range', value: 100, min: 0, max: 500, step: 1, description: 'Unsharp mask amount' },\n    radius: { name: 'Radius', type: 'range', value: 1, min: 0.1, max: 10, step: 0.1, description: 'Unsharp mask radius' },\n    threshold: { name: 'Threshold', type: 'range', value: 3, min: 0, max: 255, step: 1, description: 'Unsharp mask threshold' }\n  },\n  [FilterType.Noise]: {\n    amount: { name: 'Amount', type: 'range', value: 25, min: 0, max: 100, step: 1, description: 'Noise amount' },\n    type: { name: 'Type', type: 'select', value: 'uniform', options: ['uniform', 'gaussian'], description: 'Noise type' }\n  },\n  [FilterType.Grain]: {\n    amount: { name: 'Amount', type: 'range', value: 25, min: 0, max: 100, step: 1, description: 'Grain amount' },\n    size: { name: 'Size', type: 'range', value: 1, min: 0.5, max: 5, step: 0.1, description: 'Grain size' }\n  },\n  [FilterType.Sepia]: {\n    amount: { name: 'Amount', type: 'range', value: 100, min: 0, max: 100, step: 1, description: 'Sepia effect amount' }\n  },\n  [FilterType.Grayscale]: {\n    method: { name: 'Method', type: 'select', value: 'luminance', options: ['average', 'luminance', 'desaturation'], description: 'Grayscale conversion method' }\n  },\n  [FilterType.Invert]: {},\n  [FilterType.Posterize]: {\n    levels: { name: 'Levels', type: 'range', value: 8, min: 2, max: 64, step: 1, description: 'Number of color levels' }\n  },\n  [FilterType.Solarize]: {\n    threshold: { name: 'Threshold', type: 'range', value: 128, min: 0, max: 255, step: 1, description: 'Solarization threshold' }\n  },\n  [FilterType.Emboss]: {\n    strength: { name: 'Strength', type: 'range', value: 1, min: 0.1, max: 5, step: 0.1, description: 'Emboss strength' }\n  },\n  [FilterType.EdgeDetection]: {\n    threshold: { name: 'Threshold', type: 'range', value: 50, min: 0, max: 255, step: 1, description: 'Edge detection threshold' }\n  },\n  [FilterType.Vintage]: {\n    warmth: { name: 'Warmth', type: 'range', value: 20, min: 0, max: 100, step: 1, description: 'Vintage warmth' },\n    vignette: { name: 'Vignette', type: 'range', value: 30, min: 0, max: 100, step: 1, description: 'Vignette strength' }\n  },\n  [FilterType.Vignette]: {\n    strength: { name: 'Strength', type: 'range', value: 50, min: 0, max: 100, step: 1, description: 'Vignette strength' },\n    size: { name: 'Size', type: 'range', value: 50, min: 10, max: 90, step: 1, description: 'Vignette size' }\n  },\n  [FilterType.WhiteBalance]: {\n    temperature: { name: 'Temperature', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Color temperature' },\n    tint: { name: 'Tint', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Green/Magenta tint' }\n  },\n  [FilterType.ColorBalance]: {\n    shadows: { name: 'Shadows', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Shadow color balance' },\n    midtones: { name: 'Midtones', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Midtone color balance' },\n    highlights: { name: 'Highlights', type: 'range', value: 0, min: -100, max: 100, step: 1, description: 'Highlight color balance' }\n  },\n  [FilterType.Levels]: {\n    inputBlack: { name: 'Input Black', type: 'range', value: 0, min: 0, max: 255, step: 1, description: 'Input black point' },\n    inputWhite: { name: 'Input White', type: 'range', value: 255, min: 0, max: 255, step: 1, description: 'Input white point' },\n    gamma: { name: 'Gamma', type: 'range', value: 1, min: 0.1, max: 3, step: 0.1, description: 'Gamma correction' }\n  },\n  [FilterType.Curves]: {\n    points: { name: 'Curve Points', type: 'number', value: '0,0;255,255', description: 'Curve control points' }\n  },\n  [FilterType.Pixelate]: {\n    size: { name: 'Pixel Size', type: 'range', value: 8, min: 2, max: 32, step: 1, description: 'Pixel block size' }\n  },\n  [FilterType.Halftone]: {\n    size: { name: 'Dot Size', type: 'range', value: 4, min: 1, max: 20, step: 1, description: 'Halftone dot size' },\n    angle: { name: 'Angle', type: 'range', value: 45, min: 0, max: 90, step: 1, description: 'Halftone angle' }\n  },\n  [FilterType.CrossHatch]: {\n    strength: { name: 'Strength', type: 'range', value: 50, min: 0, max: 100, step: 1, description: 'Cross-hatch strength' }\n  },\n  [FilterType.OilPainting]: {\n    radius: { name: 'Radius', type: 'range', value: 4, min: 1, max: 20, step: 1, description: 'Oil painting radius' },\n    intensity: { name: 'Intensity', type: 'range', value: 55, min: 1, max: 255, step: 1, description: 'Oil painting intensity' }\n  }\n};\n\n/**\n * Image filter engine class\n */\nexport class ImageFilterEngine {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private originalImageData: ImageData | null = null;\n  private currentImageData: ImageData | null = null;\n\n  constructor(managedCanvas: ManagedCanvas) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n  }\n\n  /**\n   * Set original image data for filtering\n   */\n  setOriginalImage(imageData: ImageData): void {\n    this.originalImageData = new ImageData(\n      new Uint8ClampedArray(imageData.data),\n      imageData.width,\n      imageData.height\n    );\n    this.currentImageData = new ImageData(\n      new Uint8ClampedArray(imageData.data),\n      imageData.width,\n      imageData.height\n    );\n  }\n\n  /**\n   * Apply brightness filter\n   */\n  private applyBrightness(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const brightnessFactor = amount / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, data[i] + brightnessFactor * 255));     // R\n      data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + brightnessFactor * 255)); // G\n      data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + brightnessFactor * 255)); // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply contrast filter\n   */\n  private applyContrast(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const contrastFactor = (amount + 100) / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, ((data[i] - 128) * contrastFactor) + 128));     // R\n      data[i + 1] = Math.max(0, Math.min(255, ((data[i + 1] - 128) * contrastFactor) + 128)); // G\n      data[i + 2] = Math.max(0, Math.min(255, ((data[i + 2] - 128) * contrastFactor) + 128)); // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply saturation filter\n   */\n  private applySaturation(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const saturationFactor = (amount + 100) / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      // Calculate grayscale value\n      const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n      \n      // Apply saturation\n      data[i] = Math.max(0, Math.min(255, gray + saturationFactor * (r - gray)));\n      data[i + 1] = Math.max(0, Math.min(255, gray + saturationFactor * (g - gray)));\n      data[i + 2] = Math.max(0, Math.min(255, gray + saturationFactor * (b - gray)));\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply hue shift filter\n   */\n  private applyHueShift(imageData: ImageData, angle: number): ImageData {\n    const data = imageData.data;\n    const hueShift = (angle * Math.PI) / 180;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i] / 255;\n      const g = data[i + 1] / 255;\n      const b = data[i + 2] / 255;\n      \n      // Convert RGB to HSV\n      const max = Math.max(r, g, b);\n      const min = Math.min(r, g, b);\n      const delta = max - min;\n      \n      let h = 0;\n      if (delta !== 0) {\n        if (max === r) h = ((g - b) / delta) % 6;\n        else if (max === g) h = (b - r) / delta + 2;\n        else h = (r - g) / delta + 4;\n      }\n      h = (h * 60 + hueShift * 180 / Math.PI) % 360;\n      if (h < 0) h += 360;\n      \n      const s = max === 0 ? 0 : delta / max;\n      const v = max;\n      \n      // Convert HSV back to RGB\n      const c = v * s;\n      const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n      const m = v - c;\n      \n      let rNew = 0, gNew = 0, bNew = 0;\n      if (h >= 0 && h < 60) { rNew = c; gNew = x; bNew = 0; }\n      else if (h >= 60 && h < 120) { rNew = x; gNew = c; bNew = 0; }\n      else if (h >= 120 && h < 180) { rNew = 0; gNew = c; bNew = x; }\n      else if (h >= 180 && h < 240) { rNew = 0; gNew = x; bNew = c; }\n      else if (h >= 240 && h < 300) { rNew = x; gNew = 0; bNew = c; }\n      else if (h >= 300 && h < 360) { rNew = c; gNew = 0; bNew = x; }\n      \n      data[i] = Math.round((rNew + m) * 255);\n      data[i + 1] = Math.round((gNew + m) * 255);\n      data[i + 2] = Math.round((bNew + m) * 255);\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply blur filter\n   */\n  private applyBlur(imageData: ImageData, radius: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const newData = new Uint8ClampedArray(data);\n    \n    const kernelSize = Math.floor(radius) * 2 + 1;\n    const half = Math.floor(kernelSize / 2);\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let r = 0, g = 0, b = 0, a = 0;\n        let count = 0;\n        \n        for (let ky = -half; ky <= half; ky++) {\n          for (let kx = -half; kx <= half; kx++) {\n            const nx = x + kx;\n            const ny = y + ky;\n            \n            if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n              const idx = (ny * width + nx) * 4;\n              r += data[idx];\n              g += data[idx + 1];\n              b += data[idx + 2];\n              a += data[idx + 3];\n              count++;\n            }\n          }\n        }\n        \n        const idx = (y * width + x) * 4;\n        newData[idx] = r / count;\n        newData[idx + 1] = g / count;\n        newData[idx + 2] = b / count;\n        newData[idx + 3] = a / count;\n      }\n    }\n    \n    return new ImageData(newData, width, height);\n  }\n\n  /**\n   * Apply sharpen filter\n   */\n  private applySharpen(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const newData = new Uint8ClampedArray(data);\n    \n    const kernel = [\n      0, -amount / 100, 0,\n      -amount / 100, 1 + 4 * amount / 100, -amount / 100,\n      0, -amount / 100, 0\n    ];\n    \n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        for (let c = 0; c < 3; c++) {\n          let sum = 0;\n          for (let ky = -1; ky <= 1; ky++) {\n            for (let kx = -1; kx <= 1; kx++) {\n              const idx = ((y + ky) * width + (x + kx)) * 4 + c;\n              const kernelIdx = (ky + 1) * 3 + (kx + 1);\n              sum += data[idx] * kernel[kernelIdx];\n            }\n          }\n          newData[(y * width + x) * 4 + c] = Math.max(0, Math.min(255, sum));\n        }\n      }\n    }\n    \n    return new ImageData(newData, width, height);\n  }\n\n  /**\n   * Apply sepia filter\n   */\n  private applySepia(imageData: ImageData, amount: number): ImageData {\n    const data = imageData.data;\n    const intensity = amount / 100;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      const sepiaR = (r * 0.393 + g * 0.769 + b * 0.189);\n      const sepiaG = (r * 0.349 + g * 0.686 + b * 0.168);\n      const sepiaB = (r * 0.272 + g * 0.534 + b * 0.131);\n      \n      data[i] = Math.min(255, r + intensity * (sepiaR - r));\n      data[i + 1] = Math.min(255, g + intensity * (sepiaG - g));\n      data[i + 2] = Math.min(255, b + intensity * (sepiaB - b));\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply grayscale filter\n   */\n  private applyGrayscale(imageData: ImageData, method: string): ImageData {\n    const data = imageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      \n      let gray: number;\n      switch (method) {\n        case 'average':\n          gray = (r + g + b) / 3;\n          break;\n        case 'luminance':\n          gray = 0.299 * r + 0.587 * g + 0.114 * b;\n          break;\n        case 'desaturation':\n          gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n          break;\n        default:\n          gray = 0.299 * r + 0.587 * g + 0.114 * b;\n      }\n      \n      data[i] = gray;\n      data[i + 1] = gray;\n      data[i + 2] = gray;\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply invert filter\n   */\n  private applyInvert(imageData: ImageData): ImageData {\n    const data = imageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];         // R\n      data[i + 1] = 255 - data[i + 1]; // G\n      data[i + 2] = 255 - data[i + 2]; // B\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply vignette filter\n   */\n  private applyVignette(imageData: ImageData, strength: number, size: number): ImageData {\n    const data = imageData.data;\n    const width = imageData.width;\n    const height = imageData.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxRadius = Math.sqrt(centerX * centerX + centerY * centerY);\n    const vignetteRadius = maxRadius * (size / 100);\n    const vignetteStrength = strength / 100;\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n        const vignetteFactor = Math.max(0, 1 - (distance / vignetteRadius) * vignetteStrength);\n        \n        const idx = (y * width + x) * 4;\n        data[idx] *= vignetteFactor;         // R\n        data[idx + 1] *= vignetteFactor;     // G\n        data[idx + 2] *= vignetteFactor;     // B\n      }\n    }\n    \n    return imageData;\n  }\n\n  /**\n   * Apply single filter to image data\n   */\n  applyFilter(filterConfig: FilterConfig, sourceImageData?: ImageData): FilterResult {\n    const startTime = performance.now();\n    \n    try {\n      const imageData = sourceImageData || this.currentImageData;\n      if (!imageData) {\n        return {\n          success: false,\n          error: 'No image data available',\n          processingTime: performance.now() - startTime\n        };\n      }\n\n      // Create a copy of the image data\n      const processedData = new ImageData(\n        new Uint8ClampedArray(imageData.data),\n        imageData.width,\n        imageData.height\n      );\n\n      if (!filterConfig.enabled) {\n        return {\n          success: true,\n          processedImageData: processedData,\n          processingTime: performance.now() - startTime\n        };\n      }\n\n      // Apply the specific filter based on type\n      let result: ImageData;\n      const params = filterConfig.parameters;\n\n      switch (filterConfig.type) {\n        case FilterType.Brightness:\n          result = this.applyBrightness(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Contrast:\n          result = this.applyContrast(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Saturation:\n          result = this.applySaturation(processedData, params.amount?.value || 0);\n          break;\n        case FilterType.Hue:\n          result = this.applyHueShift(processedData, params.angle?.value || 0);\n          break;\n        case FilterType.Blur:\n          result = this.applyBlur(processedData, params.radius?.value || 5);\n          break;\n        case FilterType.Sharpen:\n          result = this.applySharpen(processedData, params.amount?.value || 50);\n          break;\n        case FilterType.Sepia:\n          result = this.applySepia(processedData, params.amount?.value || 100);\n          break;\n        case FilterType.Grayscale:\n          result = this.applyGrayscale(processedData, params.method?.value || 'luminance');\n          break;\n        case FilterType.Invert:\n          result = this.applyInvert(processedData);\n          break;\n        case FilterType.Vignette:\n          result = this.applyVignette(processedData, params.strength?.value || 50, params.size?.value || 50);\n          break;\n        default:\n          result = processedData;\n          console.warn(`Filter type ${filterConfig.type} not implemented`);\n      }\n\n      // Apply opacity if less than 100%\n      if (filterConfig.opacity < 1 && sourceImageData) {\n        const originalData = sourceImageData.data;\n        const filteredData = result.data;\n        \n        for (let i = 0; i < originalData.length; i += 4) {\n          filteredData[i] = originalData[i] + filterConfig.opacity * (filteredData[i] - originalData[i]);\n          filteredData[i + 1] = originalData[i + 1] + filterConfig.opacity * (filteredData[i + 1] - originalData[i + 1]);\n          filteredData[i + 2] = originalData[i + 2] + filterConfig.opacity * (filteredData[i + 2] - originalData[i + 2]);\n        }\n      }\n\n      return {\n        success: true,\n        processedImageData: result,\n        processingTime: performance.now() - startTime\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime: performance.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Apply multiple filters in sequence\n   */\n  applyFilterChain(filters: FilterConfig[]): FilterResult {\n    const startTime = performance.now();\n    \n    if (!this.originalImageData) {\n      return {\n        success: false,\n        error: 'No original image data available',\n        processingTime: performance.now() - startTime\n      };\n    }\n\n    try {\n      let currentData = new ImageData(\n        new Uint8ClampedArray(this.originalImageData.data),\n        this.originalImageData.width,\n        this.originalImageData.height\n      );\n\n      // Sort filters by enabled status and apply only enabled filters\n      const enabledFilters = filters.filter(f => f.enabled);\n\n      for (const filter of enabledFilters) {\n        const result = this.applyFilter(filter, currentData);\n        if (!result.success || !result.processedImageData) {\n          return {\n            success: false,\n            error: `Failed to apply filter ${filter.name}: ${result.error}`,\n            processingTime: performance.now() - startTime\n          };\n        }\n        currentData = result.processedImageData;\n      }\n\n      this.currentImageData = currentData;\n\n      return {\n        success: true,\n        processedImageData: currentData,\n        processingTime: performance.now() - startTime\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime: performance.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Reset to original image\n   */\n  resetToOriginal(): void {\n    if (this.originalImageData) {\n      this.currentImageData = new ImageData(\n        new Uint8ClampedArray(this.originalImageData.data),\n        this.originalImageData.width,\n        this.originalImageData.height\n      );\n    }\n  }\n\n  /**\n   * Get current processed image data\n   */\n  getCurrentImageData(): ImageData | null {\n    return this.currentImageData;\n  }\n\n  /**\n   * Render current image data to canvas\n   */\n  renderToCanvas(): void {\n    if (this.currentImageData) {\n      this.ctx.putImageData(this.currentImageData, 0, 0);\n    }\n  }\n}\n\n/**\n * Filter preset library\n */\nexport class FilterPresetLibrary {\n  private presets: Map<string, FilterPreset> = new Map();\n\n  constructor() {\n    this.initializeDefaultPresets();\n  }\n\n  /**\n   * Initialize default filter presets\n   */\n  private initializeDefaultPresets(): void {\n    // Vintage preset\n    this.addPreset({\n      id: 'vintage',\n      name: 'Vintage',\n      description: 'Classic vintage film look',\n      category: 'Retro',\n      tags: ['vintage', 'retro', 'film'],\n      filters: [\n        this.createFilterConfig(FilterType.Sepia, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Sepia].amount, value: 30 } }),\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: -10 } }),\n        this.createFilterConfig(FilterType.Saturation, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Saturation].amount, value: -20 } }),\n        this.createFilterConfig(FilterType.Vignette, { \n          strength: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Vignette].strength, value: 40 },\n          size: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Vignette].size, value: 60 }\n        })\n      ]\n    });\n\n    // Black and White preset\n    this.addPreset({\n      id: 'blackwhite',\n      name: 'Black & White',\n      description: 'Classic black and white with enhanced contrast',\n      category: 'Classic',\n      tags: ['bw', 'monochrome', 'classic'],\n      filters: [\n        this.createFilterConfig(FilterType.Grayscale, { method: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Grayscale].method, value: 'luminance' } }),\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: 20 } })\n      ]\n    });\n\n    // Dramatic preset\n    this.addPreset({\n      id: 'dramatic',\n      name: 'Dramatic',\n      description: 'High contrast dramatic effect',\n      category: 'Artistic',\n      tags: ['dramatic', 'contrast', 'bold'],\n      filters: [\n        this.createFilterConfig(FilterType.Contrast, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Contrast].amount, value: 40 } }),\n        this.createFilterConfig(FilterType.Saturation, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Saturation].amount, value: 20 } }),\n        this.createFilterConfig(FilterType.Sharpen, { amount: { ...DEFAULT_FILTER_PARAMETERS[FilterType.Sharpen].amount, value: 30 } })\n      ]\n    });\n  }\n\n  /**\n   * Create filter configuration helper\n   */\n  private createFilterConfig(type: FilterType, params: Record<string, FilterParameter>): FilterConfig {\n    return {\n      id: `filter-${type}-${Date.now()}`,\n      type,\n      name: type.charAt(0).toUpperCase() + type.slice(1),\n      description: `${type} filter`,\n      parameters: { ...DEFAULT_FILTER_PARAMETERS[type], ...params },\n      enabled: true,\n      opacity: 1,\n      blendMode: BlendMode.Normal\n    };\n  }\n\n  /**\n   * Add preset to library\n   */\n  addPreset(preset: FilterPreset): void {\n    this.presets.set(preset.id, preset);\n  }\n\n  /**\n   * Get preset by ID\n   */\n  getPreset(id: string): FilterPreset | undefined {\n    return this.presets.get(id);\n  }\n\n  /**\n   * Get all presets\n   */\n  getAllPresets(): FilterPreset[] {\n    return Array.from(this.presets.values());\n  }\n\n  /**\n   * Get presets by category\n   */\n  getPresetsByCategory(category: string): FilterPreset[] {\n    return this.getAllPresets().filter(preset => preset.category === category);\n  }\n\n  /**\n   * Search presets by tags\n   */\n  searchPresets(query: string): FilterPreset[] {\n    const lowerQuery = query.toLowerCase();\n    return this.getAllPresets().filter(preset =>\n      preset.name.toLowerCase().includes(lowerQuery) ||\n      preset.description.toLowerCase().includes(lowerQuery) ||\n      preset.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  /**\n   * Remove preset\n   */\n  removePreset(id: string): boolean {\n    return this.presets.delete(id);\n  }\n}\n\n/**\n * Factory function to create image filter engine\n */\nexport function createImageFilterEngine(managedCanvas: ManagedCanvas): ImageFilterEngine {\n  return new ImageFilterEngine(managedCanvas);\n}\n\n/**\n * Factory function to create filter preset library\n */\nexport function createFilterPresetLibrary(): FilterPresetLibrary {\n  return new FilterPresetLibrary();\n}"],"names":["DEFAULT_FILTER_PARAMETERS","FilterPresetLibrary","FilterType","ImageFilterEngine","createFilterPresetLibrary","createImageFilterEngine","amount","name","type","value","min","max","step","description","angle","gamma","stops","radius","distance","threshold","options","size","method","levels","strength","warmth","vignette","temperature","tint","shadows","midtones","highlights","inputBlack","inputWhite","points","intensity","constructor","managedCanvas","originalImageData","currentImageData","canvas","ctx","context","setOriginalImage","imageData","ImageData","Uint8ClampedArray","data","width","height","applyBrightness","brightnessFactor","i","length","Math","applyContrast","contrastFactor","applySaturation","saturationFactor","r","g","b","gray","applyHueShift","hueShift","PI","delta","h","s","v","c","x","abs","m","rNew","gNew","bNew","round","applyBlur","newData","kernelSize","floor","half","y","a","count","ky","kx","nx","ny","idx","applySharpen","kernel","sum","kernelIdx","applySepia","sepiaR","sepiaG","sepiaB","applyGrayscale","applyInvert","applyVignette","centerX","centerY","maxRadius","sqrt","vignetteRadius","vignetteStrength","vignetteFactor","applyFilter","filterConfig","sourceImageData","startTime","performance","now","success","error","processingTime","processedData","enabled","processedImageData","result","params","parameters","console","warn","opacity","originalData","filteredData","Error","message","applyFilterChain","filters","currentData","enabledFilters","filter","f","resetToOriginal","getCurrentImageData","renderToCanvas","putImageData","presets","Map","initializeDefaultPresets","addPreset","id","category","tags","createFilterConfig","Date","charAt","toUpperCase","slice","blendMode","BlendMode","Normal","preset","set","getPreset","get","getAllPresets","Array","from","values","getPresetsByCategory","searchPresets","query","lowerQuery","toLowerCase","includes","some","tag","removePreset","delete"],"mappings":"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"}