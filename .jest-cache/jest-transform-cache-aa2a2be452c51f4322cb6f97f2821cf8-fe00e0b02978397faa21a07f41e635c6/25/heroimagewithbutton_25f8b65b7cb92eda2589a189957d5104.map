{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/components/ui/hero-image-with-button.tsx"],"sourcesContent":["\"use client\"\n\nimport Image from \"next/image\"\nimport { cn } from \"@/lib/utils\"\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface OverlayButtonProps {\n    onClick: () => void\n    position: { leftPercent: string; topPercent: string }\n    className?: string\n    size?: 'sm' | 'md' | 'lg'\n    disabled?: boolean\n}\n\ninterface HeroImageProps {\n    src: string\n    alt: string\n    className?: string\n    priority?: boolean\n    overlayButton?: OverlayButtonProps | null\n}\n\nexport function HeroImageWithButton({\n                                        src,\n                                        alt,\n                                        className,\n                                        priority = true,\n                                        overlayButton\n                                    }: HeroImageProps) {\n    const [adjustedLeftPercent, setAdjustedLeftPercent] = useState(\n        overlayButton?.position.leftPercent || '41.65%'\n    )\n    const [buttonScale, setButtonScale] = useState(1)\n    const [isButtonReady, setIsButtonReady] = useState(false)\n    const containerRef = useRef<HTMLDivElement>(null)\n    const imageRef = useRef<HTMLImageElement>(null)\n\n    const buttonSizes = {\n        sm: 'w-6 h-6',\n        md: 'w-8 h-8',\n        lg: 'w-10 h-10'\n    }\n\n    const calculateButtonPositionAndSize = useCallback(() => {\n        if (!overlayButton) return\n\n        const baseLeftPercent = parseFloat(overlayButton.position.leftPercent.replace('%', ''))\n\n        // Try image-based calculation first\n        if (containerRef.current && imageRef.current) {\n            const image = imageRef.current\n            const renderedImageHeight = image.clientHeight\n\n\n            if (renderedImageHeight > 0) {\n                let positionAdjustment = 0\n                let scale = 1\n\n                if (renderedImageHeight < 500) {\n                    // Small camera image (laptop - 471px)\n                    positionAdjustment = 3.4   // Move button RIGHT\n                    scale = 0.67               // Scale button DOWN\n                } else if (renderedImageHeight < 600) {\n                    // Medium camera image (desktop - between 500-600px)\n                    positionAdjustment = 1.0  // Move button LEFT (negative)\n                    scale = 0.8                // Scale down slightly\n                } else {\n                    // Large camera image (27\" monitor - 634px+)\n                    positionAdjustment = 0     // Keep current position (perfect)\n                    scale = 1.0                // Keep full scale\n                }\n\n                const newLeftPercent = baseLeftPercent + positionAdjustment\n                setAdjustedLeftPercent(`${newLeftPercent}%`)\n                setButtonScale(scale)\n                setIsButtonReady(true) // Show button after calculations\n\n                // console.log('Height-based position & scale:', {\n                //     renderedImageHeight,\n                //     category: renderedImageHeight < 500 ? 'SMALL' : renderedImageHeight < 600 ? 'MEDIUM' : 'LARGE',\n                //     baseLeftPercent,\n                //     positionAdjustment,\n                //     newLeftPercent: newLeftPercent.toFixed(2),\n                //     buttonScale: scale,\n                //     finalScale: (1.5 * scale).toFixed(2)\n                // })\n                return\n            }\n        }\n\n        // Fallback: screen width\n        if (typeof window !== 'undefined') {\n            const screenWidth = window.innerWidth\n            let positionAdjustment = 0\n            let scale = 1\n\n            if (screenWidth < 1400) {\n                positionAdjustment = 6.0\n                scale = 0.67\n            } else if (screenWidth < 1800) {\n                positionAdjustment = -3.0  // Desktop adjustment\n                scale = 0.8\n            }\n\n            const newLeftPercent = baseLeftPercent + positionAdjustment\n            setAdjustedLeftPercent(`${newLeftPercent}%`)\n            setButtonScale(scale)\n        }\n    }, [overlayButton])\n\n\n    // Calculate position when image loads\n    const handleImageLoad = () => {\n        setTimeout(() => {\n            calculateButtonPositionAndSize()\n        }, 250)\n    }\n\n    // Initial calculation on mount\n    useEffect(() => {\n        calculateButtonPositionAndSize()\n        const timeoutId = setTimeout(calculateButtonPositionAndSize, 100)\n        return () => clearTimeout(timeoutId)\n    }, [overlayButton, calculateButtonPositionAndSize])\n\n    // Recalculate on window resize\n    useEffect(() => {\n        const handleResize = () => {\n            calculateButtonPositionAndSize()\n        }\n\n        window.addEventListener('resize', handleResize)\n        return () => window.removeEventListener('resize', handleResize)\n    }, [overlayButton, calculateButtonPositionAndSize])\n\n    // Always render button when overlayButton is provided, but apply disabled state\n    const shouldShowButton = overlayButton && isButtonReady\n\n    return (\n        <div className={cn(\n            \"relative w-full flex items-center justify-center\",\n            \"h-[50vh] min-h-[400px] max-h-[800px]\",\n            className\n        )}>\n            <div ref={containerRef} className=\"relative w-full h-full max-w-5xl\">\n                <Image\n                    ref={imageRef}\n                    src={src}\n                    alt={alt}\n                    fill\n                    priority={priority}\n                    className=\"object-contain drop-shadow-2xl\"\n                    sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw\"\n                    onLoad={handleImageLoad}\n                />\n\n                {/* Overlay Button - Only render when both images are uploaded */}\n                {shouldShowButton && (\n                    <div\n                        className=\"absolute inset-0\"\n                        style={{\n                            transform: 'scale(1.5)', // Keep this as it was\n                            transformOrigin: 'center center'\n                        }}\n                    >\n                        <button\n                            onClick={overlayButton.onClick}\n                            disabled={overlayButton.disabled}\n                            data-test=\"generate-button\"\n                                                                                            className={cn(\n                                    \"absolute z-[200] rounded-full pointer-events-auto\",\n                                    \"transition-all duration-150 ease-in-out\",\n                                overlayButton.disabled \n                                    ? \"cursor-not-allowed opacity-50\" \n                                    : \"hover:scale-110 active:scale-95 cursor-pointer\",\n                                buttonSizes[overlayButton.size || 'md'],\n                                overlayButton.className\n                            )}\n                            style={{\n                                left: adjustedLeftPercent,\n                                top: overlayButton.position.topPercent,\n                                transform: `translate(-50%, -50%) scale(${buttonScale})`,\n                                background: `\n                                    radial-gradient(circle at 35% 35%, rgba(255, 255, 255, 0.6) 0%, rgba(255, 255, 255, 0) 60%),\n                                    #D80E0E\n                                `,\n                                border: '2px solid #BF1212',\n                                boxShadow: `\n                                    0 15px 25px rgba(0, 0, 0, 0.4),\n                                    0 0 0 4px rgba(240, 228, 228, 0.5)\n                                `,\n                            }}\n                            aria-label=\"Camera capture button\"\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n"],"names":["HeroImageWithButton","src","alt","className","priority","overlayButton","adjustedLeftPercent","setAdjustedLeftPercent","useState","position","leftPercent","buttonScale","setButtonScale","isButtonReady","setIsButtonReady","containerRef","useRef","imageRef","buttonSizes","sm","md","lg","calculateButtonPositionAndSize","useCallback","baseLeftPercent","parseFloat","replace","current","image","renderedImageHeight","clientHeight","positionAdjustment","scale","newLeftPercent","window","screenWidth","innerWidth","handleImageLoad","setTimeout","useEffect","timeoutId","clearTimeout","handleResize","addEventListener","removeEventListener","shouldShowButton","div","cn","ref","Image","fill","sizes","onLoad","style","transform","transformOrigin","button","onClick","disabled","data-test","size","left","top","topPercent","background","border","boxShadow","aria-label"],"mappings":"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"}