aa0a59a557c8357811b799dfcd05e2b9
'use client';
"use strict";

/* istanbul ignore next */
function cov_bahv0ttb6() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts";
  var hash = "ca2b4c07f008eca1ce46efefee4bdf81259268d5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 60
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "7": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "9": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 64
        }
      },
      "10": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "11": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "12": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 68
        }
      },
      "13": {
        start: {
          line: 34,
          column: 51
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "14": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "15": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "16": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "17": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 48
        }
      },
      "18": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 54,
          column: 77
        }
      },
      "19": {
        start: {
          line: 54,
          column: 41
        },
        end: {
          line: 54,
          column: 59
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 47
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 100
        }
      },
      "23": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 73
        }
      },
      "24": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 90
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 36
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "27": {
        start: {
          line: 62,
          column: 31
        },
        end: {
          line: 62,
          column: 64
        }
      },
      "28": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 92
        }
      },
      "29": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 30
        }
      },
      "30": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 104
        }
      },
      "31": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 31
        }
      },
      "32": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 91
        }
      },
      "33": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "34": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 24
        }
      },
      "35": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 76,
          column: 65
        }
      },
      "36": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 39
        }
      },
      "37": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "38": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "39": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 63
        }
      },
      "40": {
        start: {
          line: 87,
          column: 59
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "41": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "42": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "43": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 50
        }
      },
      "44": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 42
        }
      },
      "45": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 115
        }
      },
      "46": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 26
        }
      },
      "47": {
        start: {
          line: 102,
          column: 17
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "48": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "49": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 77
        }
      },
      "50": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 110,
          column: 6
        }
      },
      "51": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "52": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 40
        }
      },
      "53": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 120,
          column: 55
        }
      },
      "54": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 32
        }
      },
      "55": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 122
        }
      },
      "56": {
        start: {
          line: 127,
          column: 102
        },
        end: {
          line: 127,
          column: 121
        }
      },
      "57": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "58": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "59": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "60": {
        start: {
          line: 136,
          column: 36
        },
        end: {
          line: 136,
          column: 38
        }
      },
      "61": {
        start: {
          line: 138,
          column: 39
        },
        end: {
          line: 138,
          column: 41
        }
      },
      "62": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "63": {
        start: {
          line: 141,
          column: 35
        },
        end: {
          line: 141,
          column: 129
        }
      },
      "64": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 46
        }
      },
      "65": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 64
        }
      },
      "66": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 55
        }
      },
      "67": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "68": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 21
        }
      },
      "69": {
        start: {
          line: 149,
          column: 26
        },
        end: {
          line: 149,
          column: 52
        }
      },
      "70": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "71": {
        start: {
          line: 151,
          column: 39
        },
        end: {
          line: 151,
          column: 118
        }
      },
      "72": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 57
        }
      },
      "73": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 75
        }
      },
      "74": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "75": {
        start: {
          line: 158,
          column: 36
        },
        end: {
          line: 158,
          column: 58
        }
      },
      "76": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "77": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "78": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "79": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 159
        }
      },
      "80": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 189,
          column: 6
        }
      },
      "81": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 192,
          column: 57
        }
      },
      "82": {
        start: {
          line: 194,
          column: 25
        },
        end: {
          line: 199,
          column: 6
        }
      },
      "83": {
        start: {
          line: 194,
          column: 50
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "84": {
        start: {
          line: 201,
          column: 30
        },
        end: {
          line: 210,
          column: 6
        }
      },
      "85": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "86": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 73
        }
      },
      "87": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 101
        }
      },
      "88": {
        start: {
          line: 212,
          column: 36
        },
        end: {
          line: 212,
          column: 74
        }
      },
      "89": {
        start: {
          line: 212,
          column: 60
        },
        end: {
          line: 212,
          column: 69
        }
      },
      "90": {
        start: {
          line: 214,
          column: 29
        },
        end: {
          line: 297,
          column: 6
        }
      },
      "91": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "92": {
        start: {
          line: 217,
          column: 34
        },
        end: {
          line: 223,
          column: 25
        }
      },
      "93": {
        start: {
          line: 224,
          column: 36
        },
        end: {
          line: 230,
          column: 25
        }
      },
      "94": {
        start: {
          line: 232,
          column: 43
        },
        end: {
          line: 235,
          column: 25
        }
      },
      "95": {
        start: {
          line: 237,
          column: 67
        },
        end: {
          line: 237,
          column: 126
        }
      },
      "96": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 107
        }
      },
      "97": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "98": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "99": {
        start: {
          line: 244,
          column: 46
        },
        end: {
          line: 244,
          column: 136
        }
      },
      "100": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 66
        }
      },
      "101": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 137
        }
      },
      "102": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 56
        }
      },
      "103": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 79
        }
      },
      "104": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "105": {
        start: {
          line: 255,
          column: 36
        },
        end: {
          line: 255,
          column: 83
        }
      },
      "106": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 261,
          column: 17
        }
      },
      "107": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 260,
          column: 22
        }
      },
      "108": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 27
        }
      },
      "109": {
        start: {
          line: 268,
          column: 34
        },
        end: {
          line: 268,
          column: 130
        }
      },
      "110": {
        start: {
          line: 268,
          column: 110
        },
        end: {
          line: 268,
          column: 129
        }
      },
      "111": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "112": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 59
        }
      },
      "113": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 59
        }
      },
      "114": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "115": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 288,
          column: 17
        }
      },
      "116": {
        start: {
          line: 278,
          column: 40
        },
        end: {
          line: 278,
          column: 78
        }
      },
      "117": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 284,
          column: 21
        }
      },
      "118": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 283,
          column: 26
        }
      },
      "119": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 90
        }
      },
      "120": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 24
        }
      },
      "121": {
        start: {
          line: 298,
          column: 30
        },
        end: {
          line: 347,
          column: 6
        }
      },
      "122": {
        start: {
          line: 300,
          column: 29
        },
        end: {
          line: 300,
          column: 49
        }
      },
      "123": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "124": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "125": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 88
        }
      },
      "126": {
        start: {
          line: 305,
          column: 36
        },
        end: {
          line: 305,
          column: 91
        }
      },
      "127": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 60
        }
      },
      "128": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 77
        }
      },
      "129": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "130": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 148
        }
      },
      "131": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 78
        }
      },
      "132": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "133": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "134": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 69
        }
      },
      "135": {
        start: {
          line: 348,
          column: 28
        },
        end: {
          line: 391,
          column: 6
        }
      },
      "136": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 353,
          column: 11
        }
      },
      "137": {
        start: {
          line: 355,
          column: 29
        },
        end: {
          line: 355,
          column: 50
        }
      },
      "138": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "139": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "140": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 80
        }
      },
      "141": {
        start: {
          line: 360,
          column: 36
        },
        end: {
          line: 360,
          column: 91
        }
      },
      "142": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 60
        }
      },
      "143": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 85
        }
      },
      "144": {
        start: {
          line: 367,
          column: 32
        },
        end: {
          line: 371,
          column: 10
        }
      },
      "145": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "146": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "147": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 69
        }
      },
      "148": {
        start: {
          line: 392,
          column: 30
        },
        end: {
          line: 427,
          column: 6
        }
      },
      "149": {
        start: {
          line: 394,
          column: 29
        },
        end: {
          line: 394,
          column: 33
        }
      },
      "150": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "151": {
        start: {
          line: 396,
          column: 36
        },
        end: {
          line: 401,
          column: 14
        }
      },
      "152": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "153": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "154": {
        start: {
          line: 414,
          column: 33
        },
        end: {
          line: 414,
          column: 53
        }
      },
      "155": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 418,
          column: 13
        }
      },
      "156": {
        start: {
          line: 416,
          column: 36
        },
        end: {
          line: 416,
          column: 91
        }
      },
      "157": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 60
        }
      },
      "158": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "159": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 77
        }
      },
      "160": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 444,
          column: 7
        }
      },
      "161": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 440,
          column: 10
        }
      },
      "162": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 438,
          column: 15
        }
      },
      "163": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 437,
          column: 17
        }
      },
      "164": {
        start: {
          line: 434,
          column: 20
        },
        end: {
          line: 434,
          column: 111
        }
      },
      "165": {
        start: {
          line: 436,
          column: 20
        },
        end: {
          line: 436,
          column: 91
        }
      },
      "166": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 44
        }
      },
      "167": {
        start: {
          line: 446,
          column: 27
        },
        end: {
          line: 470,
          column: 6
        }
      },
      "168": {
        start: {
          line: 446,
          column: 52
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "169": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 452,
          column: 17
        }
      },
      "170": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 451,
          column: 33
        }
      },
      "171": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 47
        }
      },
      "172": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 82
        }
      },
      "173": {
        start: {
          line: 472,
          column: 21
        },
        end: {
          line: 472,
          column: 65
        }
      },
      "174": {
        start: {
          line: 474,
          column: 4
        },
        end: {
          line: 488,
          column: 7
        }
      },
      "175": {
        start: {
          line: 474,
          column: 36
        },
        end: {
          line: 486,
          column: 9
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "tryonMutationFn",
        decl: {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 34
          }
        },
        loc: {
          start: {
            line: 32,
            column: 46
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 38
          }
        },
        loc: {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 54,
            column: 59
          }
        },
        line: 54
      },
      "3": {
        name: "handleApiResponse",
        decl: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 81,
            column: 36
          }
        },
        loc: {
          start: {
            line: 81,
            column: 47
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 87,
            column: 54
          },
          end: {
            line: 87,
            column: 55
          }
        },
        loc: {
          start: {
            line: 87,
            column: 59
          },
          end: {
            line: 87,
            column: 61
          }
        },
        line: 87
      },
      "5": {
        name: "isRetryableError",
        decl: {
          start: {
            line: 114,
            column: 13
          },
          end: {
            line: 114,
            column: 29
          }
        },
        loc: {
          start: {
            line: 114,
            column: 37
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 114
      },
      "6": {
        name: "processImageInputs",
        decl: {
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 124,
            column: 37
          }
        },
        loc: {
          start: {
            line: 124,
            column: 73
          },
          end: {
            line: 179,
            column: 1
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 127,
            column: 95
          },
          end: {
            line: 127,
            column: 96
          }
        },
        loc: {
          start: {
            line: 127,
            column: 102
          },
          end: {
            line: 127,
            column: 121
          }
        },
        line: 127
      },
      "8": {
        name: "createMutationContext",
        decl: {
          start: {
            line: 182,
            column: 13
          },
          end: {
            line: 182,
            column: 34
          }
        },
        loc: {
          start: {
            line: 182,
            column: 101
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 182
      },
      "9": {
        name: "useTryonMutation",
        decl: {
          start: {
            line: 191,
            column: 9
          },
          end: {
            line: 191,
            column: 25
          }
        },
        loc: {
          start: {
            line: 191,
            column: 39
          },
          end: {
            line: 489,
            column: 1
          }
        },
        line: 191
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 194,
            column: 45
          },
          end: {
            line: 194,
            column: 46
          }
        },
        loc: {
          start: {
            line: 194,
            column: 50
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 194
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 201,
            column: 50
          },
          end: {
            line: 201,
            column: 51
          }
        },
        loc: {
          start: {
            line: 201,
            column: 54
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 201
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 212,
            column: 56
          },
          end: {
            line: 212,
            column: 57
          }
        },
        loc: {
          start: {
            line: 212,
            column: 60
          },
          end: {
            line: 212,
            column: 69
          }
        },
        line: 212
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 214,
            column: 53
          },
          end: {
            line: 214,
            column: 54
          }
        },
        loc: {
          start: {
            line: 214,
            column: 72
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 214
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 268,
            column: 103
          },
          end: {
            line: 268,
            column: 104
          }
        },
        loc: {
          start: {
            line: 268,
            column: 110
          },
          end: {
            line: 268,
            column: 129
          }
        },
        line: 268
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 298,
            column: 54
          },
          end: {
            line: 298,
            column: 55
          }
        },
        loc: {
          start: {
            line: 298,
            column: 88
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 298
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 348,
            column: 52
          },
          end: {
            line: 348,
            column: 53
          }
        },
        loc: {
          start: {
            line: 348,
            column: 81
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 348
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 392,
            column: 54
          },
          end: {
            line: 392,
            column: 55
          }
        },
        loc: {
          start: {
            line: 392,
            column: 89
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 392
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 429,
            column: 26
          },
          end: {
            line: 429,
            column: 27
          }
        },
        loc: {
          start: {
            line: 429,
            column: 30
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 429
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 430,
            column: 15
          },
          end: {
            line: 430,
            column: 16
          }
        },
        loc: {
          start: {
            line: 430,
            column: 19
          },
          end: {
            line: 440,
            column: 9
          }
        },
        line: 430
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 432,
            column: 44
          },
          end: {
            line: 432,
            column: 45
          }
        },
        loc: {
          start: {
            line: 432,
            column: 73
          },
          end: {
            line: 438,
            column: 13
          }
        },
        line: 432
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 446,
            column: 47
          },
          end: {
            line: 446,
            column: 48
          }
        },
        loc: {
          start: {
            line: 446,
            column: 52
          },
          end: {
            line: 464,
            column: 9
          }
        },
        line: 446
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 449,
            column: 46
          },
          end: {
            line: 449,
            column: 47
          }
        },
        loc: {
          start: {
            line: 449,
            column: 69
          },
          end: {
            line: 454,
            column: 13
          }
        },
        line: 449
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 456,
            column: 24
          },
          end: {
            line: 456,
            column: 25
          }
        },
        loc: {
          start: {
            line: 456,
            column: 40
          },
          end: {
            line: 458,
            column: 13
          }
        },
        line: 456
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 474,
            column: 31
          },
          end: {
            line: 474,
            column: 32
          }
        },
        loc: {
          start: {
            line: 474,
            column: 36
          },
          end: {
            line: 486,
            column: 9
          }
        },
        line: 474
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 28
          }
        }, {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 41,
            column: 9
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 34
          }
        }, {
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 89,
            column: 87
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 23
          },
          end: {
            line: 93,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 23
          },
          end: {
            line: 93,
            column: 45
          }
        }, {
          start: {
            line: 93,
            column: 49
          },
          end: {
            line: 93,
            column: 72
          }
        }, {
          start: {
            line: 93,
            column: 76
          },
          end: {
            line: 93,
            column: 99
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "7": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 116,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 116,
            column: 42
          }
        }, {
          start: {
            line: 116,
            column: 46
          },
          end: {
            line: 116,
            column: 66
          }
        }],
        line: 116
      },
      "8": {
        loc: {
          start: {
            line: 127,
            column: 26
          },
          end: {
            line: 127,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 26
          },
          end: {
            line: 127,
            column: 62
          }
        }, {
          start: {
            line: 127,
            column: 66
          },
          end: {
            line: 127,
            column: 122
          }
        }],
        line: 127
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: 144,
            column: 15
          },
          end: {
            line: 146,
            column: 9
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: 154,
            column: 19
          },
          end: {
            line: 156,
            column: 13
          }
        }],
        line: 150
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 37
          },
          end: {
            line: 167,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 89
          }
        }, {
          start: {
            line: 167,
            column: 92
          },
          end: {
            line: 167,
            column: 101
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "14": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 271
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 61
          }
        }, {
          start: {
            line: 173,
            column: 65
          },
          end: {
            line: 173,
            column: 106
          }
        }, {
          start: {
            line: 173,
            column: 110
          },
          end: {
            line: 173,
            column: 156
          }
        }, {
          start: {
            line: 173,
            column: 160
          },
          end: {
            line: 173,
            column: 214
          }
        }, {
          start: {
            line: 173,
            column: 218
          },
          end: {
            line: 173,
            column: 271
          }
        }],
        line: 173
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 100
          },
          end: {
            line: 177,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 125
          },
          end: {
            line: 177,
            column: 130
          }
        }, {
          start: {
            line: 177,
            column: 133
          },
          end: {
            line: 177,
            column: 157
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 46
          },
          end: {
            line: 182,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 182,
            column: 59
          },
          end: {
            line: 182,
            column: 60
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 26
          },
          end: {
            line: 191,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 191,
            column: 35
          },
          end: {
            line: 191,
            column: 37
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 217,
            column: 34
          },
          end: {
            line: 223,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 65
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: 223,
            column: 16
          },
          end: {
            line: 223,
            column: 25
          }
        }],
        line: 217
      },
      "19": {
        loc: {
          start: {
            line: 224,
            column: 36
          },
          end: {
            line: 230,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 73
          },
          end: {
            line: 230,
            column: 13
          }
        }, {
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 25
          }
        }],
        line: 224
      },
      "20": {
        loc: {
          start: {
            line: 232,
            column: 43
          },
          end: {
            line: 235,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 78
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 235,
            column: 25
          }
        }],
        line: 232
      },
      "21": {
        loc: {
          start: {
            line: 232,
            column: 43
          },
          end: {
            line: 232,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 43
          },
          end: {
            line: 232,
            column: 56
          }
        }, {
          start: {
            line: 232,
            column: 60
          },
          end: {
            line: 232,
            column: 75
          }
        }],
        line: 232
      },
      "22": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "23": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "24": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 34
          },
          end: {
            line: 268,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 34
          },
          end: {
            line: 268,
            column: 70
          }
        }, {
          start: {
            line: 268,
            column: 74
          },
          end: {
            line: 268,
            column: 130
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: 272,
            column: 19
          },
          end: {
            line: 275,
            column: 13
          }
        }],
        line: 269
      },
      "27": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "28": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 284,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 284,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "29": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 24
          }
        }, {
          start: {
            line: 301,
            column: 28
          },
          end: {
            line: 301,
            column: 64
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "32": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "33": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 356,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 356,
            column: 24
          }
        }, {
          start: {
            line: 356,
            column: 28
          },
          end: {
            line: 356,
            column: 64
          }
        }],
        line: 356
      },
      "34": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "35": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 384,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 384,
            column: 32
          }
        }, {
          start: {
            line: 384,
            column: 36
          },
          end: {
            line: 384,
            column: 43
          }
        }],
        line: 384
      },
      "36": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "37": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "38": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "39": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "40": {
        loc: {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 421,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 421,
            column: 34
          }
        }, {
          start: {
            line: 421,
            column: 38
          },
          end: {
            line: 421,
            column: 45
          }
        }],
        line: 421
      },
      "41": {
        loc: {
          start: {
            line: 449,
            column: 19
          },
          end: {
            line: 454,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 449,
            column: 46
          },
          end: {
            line: 454,
            column: 13
          }
        }, {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 454,
            column: 21
          }
        }],
        line: 449
      },
      "42": {
        loc: {
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 452,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 452,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "43": {
        loc: {
          start: {
            line: 483,
            column: 20
          },
          end: {
            line: 483,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 483,
            column: 52
          },
          end: {
            line: 483,
            column: 61
          }
        }, {
          start: {
            line: 483,
            column: 64
          },
          end: {
            line: 483,
            column: 79
          }
        }],
        line: 483
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts"],
      sourcesContent: ["'use client';\n\n// Try-On Mutation Hook\n// React Query mutation hook for handling try-on API calls with comprehensive error handling\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo, useEffect } from 'react';\nimport type {\n  TryonMutationVariables,\n  TryonMutationVariablesWithFiles,\n  TryonMutationResponse,\n  TryonMutationError,\n  TryonMutationContext,\n  UseTryonMutationReturn,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\nimport {\n  processImageForTryon,\n  ImageProcessingError,\n  ImageDimensionError,\n  type ImageProcessingOptions\n} from '../utils/imageProcessing';\nimport {\n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError\n} from '../../utils/image';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  isErrorRetryable as isErrorRetryableFromClassification\n} from '../utils/errorHandling';\nimport {\n  getOptimisticUpdatesManager,\n  type OptimisticUpdateConfig\n} from '../utils/optimisticUpdates';\nimport {\n  getCacheInvalidationManager,\n  invalidateCacheAfterMutation,\n  type CacheInvalidationConfig\n} from '../utils/cacheInvalidation';\n\n/**\n * API endpoint for try-on requests\n */\nconst TRYON_API_ENDPOINT = '/api/tryon';\n\n/**\n * Default configuration for the try-on mutation\n */\nconst DEFAULT_CONFIG: Required<Pick<UseTryonMutationConfig, 'enableRetry' | 'maxRetries' | 'initialRetryDelay' | 'enableOptimisticUpdates'>> = {\n  enableRetry: true,\n  maxRetries: 3,\n  initialRetryDelay: 1000,\n  enableOptimisticUpdates: false\n};\n\n/**\n * Mutation function that calls the try-on API\n */\nasync function tryonMutationFn(variables: TryonMutationVariables): Promise<TryonMutationResponse> {\n  console.log('\uD83D\uDFE1 tryonMutationFn: Starting mutation', variables);\n  const { modelImage, apparelImages, options } = variables;\n  \n  // Prepare request payload\n  const payload = {\n    modelImage,\n    apparelImages,\n    ...(options?.metadata && { metadata: options.metadata })\n  };\n\n  // Configure request options\n  const requestInit: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  };\n\n  // Add timeout if specified\n  if (options?.timeout) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), options.timeout);\n    requestInit.signal = controller.signal;\n    \n    try {\n      console.log('\uD83D\uDFE1 tryonMutationFn: About to call fetch with timeout', TRYON_API_ENDPOINT);\n      const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n      console.log('\uD83D\uDFE1 tryonMutationFn: Fetch completed, calling handleApiResponse');\n      clearTimeout(timeoutId);\n      \n      try {\n        const result = await handleApiResponse(response);\n        console.log('\uD83D\uDFE2 tryonMutationFn: handleApiResponse completed successfully');\n        return result;\n      } catch (apiError) {\n        console.log('\uD83D\uDD34 tryonMutationFn: handleApiResponse threw error, re-throwing', apiError);\n        throw apiError;\n      }\n    } catch (error) {\n      console.log('\uD83D\uDD34 tryonMutationFn: Fetch error caught in timeout branch', error);\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  }\n\n  // Standard request without timeout\n  const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n  return handleApiResponse(response);\n}\n\n/**\n * Handle API response and convert to appropriate format\n */\nasync function handleApiResponse(response: Response): Promise<TryonMutationResponse> {\n  console.log('\uD83D\uDD35 handleApiResponse: Processing response', { ok: response.ok, status: response.status });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    const error: TryonMutationError = {\n      error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,\n      details: errorData.details,\n      code: errorData.code,\n      status: response.status,\n      retryable: response.status >= 500 || response.status === 408 || response.status === 429\n    };\n    console.log('\uD83D\uDD34 handleApiResponse: About to throw error', error);\n    // Try throwing a simple Error to see if React Query handles it better\n    const simpleError = new Error(error.error);\n    Object.assign(simpleError, error); // Add the TryonMutationError properties\n    console.log('\uD83D\uDD34 handleApiResponse: Throwing simple error with TryonMutationError properties', simpleError);\n    throw simpleError;\n  }\n\n  const data = await response.json();\n  \n  // Validate response structure\n  if (!data.img_generated) {\n    throw new Error('Invalid API response: missing img_generated field');\n  }\n\n  return {\n    img_generated: data.img_generated,\n    metadata: data.metadata\n  };\n}\n\n/**\n * Determine if an error is retryable using comprehensive classification\n */\nfunction isRetryableError(error: unknown): boolean {\n  // First check if error has explicit retryable property\n  if (error && typeof error === 'object' && 'retryable' in error) {\n    return Boolean(error.retryable);\n  }\n  \n  // Use comprehensive error classification\n  return isErrorRetryableFromClassification(error);\n}\n\n/**\n * Process image inputs if they are File objects\n */\nasync function processImageInputs(\n  variables: TryonMutationVariables | TryonMutationVariablesWithFiles,\n  imageProcessingOptions?: ImageProcessingOptions\n): Promise<{\n  processedVariables: TryonMutationVariables;\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  };\n}> {\n  const startTime = Date.now();\n  \n  // Check if we have File objects to process\n  const hasFileInputs = variables.modelImage instanceof File || \n    variables.apparelImages.some(img => img instanceof File);\n  \n  if (!hasFileInputs) {\n    // All inputs are already base64 strings\n    return {\n      processedVariables: variables as TryonMutationVariables\n    };\n  }\n  \n  try {\n    let modelImageResult: import('../utils/imageProcessing').ImageProcessingResult | undefined;\n    const apparelImageResults: import('../utils/imageProcessing').ImageProcessingResult[] = [];\n    let processedModelImage: string;\n    const processedApparelImages: string[] = [];\n    \n    // Process model image if it's a File\n    if (variables.modelImage instanceof File) {\n      const processedImage = await processImageForTryon(variables.modelImage, imageProcessingOptions);\n      modelImageResult = processedImage;\n      processedModelImage = processedImage.processedImage;\n    } else {\n      processedModelImage = variables.modelImage;\n    }\n    \n    // Process apparel images\n    for (let i = 0; i < variables.apparelImages.length; i++) {\n      const image = variables.apparelImages[i];\n      if (image instanceof File) {\n        const processedImage = await processImageForTryon(image, imageProcessingOptions);\n        apparelImageResults.push(processedImage);\n        processedApparelImages.push(processedImage.processedImage);\n      } else {\n        processedApparelImages.push(image);\n      }\n    }\n    \n    const totalProcessingTime = Date.now() - startTime;\n    \n    return {\n      processedVariables: {\n        modelImage: processedModelImage,\n        apparelImages: processedApparelImages,\n        options: variables.options\n      },\n      imageProcessingResults: {\n        modelImageResult,\n        apparelImageResults: apparelImageResults.length > 0 ? apparelImageResults : undefined,\n        totalProcessingTime\n      }\n    };\n  } catch (error) {\n    // Re-throw known image processing errors\n    if (error instanceof FileTypeNotSupportedError ||\n        error instanceof FileTooLargeError ||\n        error instanceof CompressionFailedError ||\n        error instanceof ImageProcessingError ||\n        error instanceof ImageDimensionError) {\n      throw error;\n    }\n    \n    // Wrap unknown errors\n    throw new ImageProcessingError(\n      'Unexpected error during image processing',\n      error instanceof Error ? error : new Error(String(error))\n    );\n  }\n}\n\n/**\n * Create mutation context for lifecycle tracking\n */\nfunction createMutationContext(\n  variables: TryonMutationVariables,\n  retryCount = 0,\n  previousError?: Error,\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  }\n): TryonMutationContext {\n  return {\n    variables,\n    startTime: Date.now(),\n    retryCount,\n    previousError,\n    imageProcessingResults\n  };\n}\n\n/**\n * React Query mutation hook for try-on functionality\n * \n * @param config - Optional configuration for the mutation\n * @returns UseTryonMutationReturn object with mutation state and functions\n */\nexport function useTryonMutation(config: UseTryonMutationConfig = {}): UseTryonMutationReturn {\n  const queryClient = useQueryClient();\n  \n  // Merge configuration with defaults\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config\n  }), [config]);\n\n  // Get optimistic updates manager instance\n  const optimisticManager = useMemo(() => {\n    try {\n      return getOptimisticUpdatesManager();\n    } catch {\n      // Initialize if not already initialized\n      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);\n    }\n  }, [queryClient]);\n\n  // Track active optimistic updates\n  const activeOptimisticUpdates = useMemo(() => new Map<string, string>(), []);\n\n  // Define lifecycle callbacks with useCallback\n  const onMutateCallback = useCallback(async (variables: TryonMutationVariables | TryonMutationVariablesWithFiles) => {\n    try {\n      // Extract image processing options from config and variables (variables take precedence)\n      const configOptions = mergedConfig.imageProcessing ? {\n        targetWidth: mergedConfig.imageProcessing.targetWidth,\n        targetHeight: mergedConfig.imageProcessing.targetHeight,\n        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,\n        quality: mergedConfig.imageProcessing.compressionQuality,\n        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      const variableOptions = variables.options?.imageProcessing ? {\n        targetWidth: variables.options.imageProcessing.targetWidth,\n        targetHeight: variables.options.imageProcessing.targetHeight,\n        maxSizeKB: variables.options.imageProcessing.maxSizeKB,\n        quality: variables.options.imageProcessing.compressionQuality,\n        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      // Merge options with variable options taking precedence\n      const imageProcessingOptions: ImageProcessingOptions | undefined = \n        configOptions || variableOptions ? {\n          ...configOptions,\n          ...variableOptions\n        } : undefined;\n      \n      // Process images if needed\n      const { processedVariables, imageProcessingResults } = await processImageInputs(\n        variables, \n        imageProcessingOptions\n      );\n      \n      // Create context with processed variables and image processing results\n      const context = createMutationContext(\n        processedVariables,\n        0,\n        undefined,\n        imageProcessingResults\n      );\n\n      // Start optimistic updates if enabled\n      let optimisticId: string | undefined;\n      if (mergedConfig.enableOptimisticUpdates) {\n        try {\n          const optimisticContext = optimisticManager.startOptimisticUpdate(\n            processedVariables,\n            mergedConfig.optimisticConfig\n          );\n          optimisticId = optimisticContext.optimisticId;\n          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);\n          \n          // Add optimistic ID to context for tracking\n          context.optimisticId = optimisticId;\n        } catch (error) {\n          console.warn('Failed to start optimistic updates:', error);\n        }\n      }\n      \n      // Call user-provided onMutate if available\n      if (mergedConfig.onMutate) {\n        const userContext = await mergedConfig.onMutate(processedVariables);\n        if (userContext) {\n          return { ...context, ...userContext };\n        }\n      }\n      \n      return context;\n    } catch (error) {\n      // If image processing fails, still allow user's onMutate to be called\n      // The user's onMutate can decide how to handle the failure\n      let context;\n      \n      const hasFileInputs = variables.modelImage instanceof File || \n        variables.apparelImages.some(img => img instanceof File);\n      \n      if (hasFileInputs) {\n        // Create context with File objects - user's onMutate must handle this\n        context = createMutationContext(variables as any);\n      } else {\n        // All inputs are base64 strings, safe to cast\n        context = createMutationContext(variables as TryonMutationVariables);\n      }\n      \n      if (mergedConfig.onMutate) {\n        try {\n          const userContext = await mergedConfig.onMutate(variables as any);\n          if (userContext) {\n            context = { ...context, ...userContext };\n          }\n        } catch (onMutateError) {\n          // If onMutate also fails, prefer the original processing error\n          console.warn('onMutate failed during error handling:', onMutateError);\n        }\n      }\n      \n      // Always re-throw the error so mutation fails appropriately\n      throw error;\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSuccessCallback = useCallback(async (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Complete optimistic updates if they were started\n    const optimisticId = context.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (error) {\n        console.warn('Failed to complete optimistic update:', error);\n      }\n    }\n\n    // Advanced cache invalidation with configurable strategies\n    try {\n      await invalidateCacheAfterMutation(\n        queryClient,\n        data,\n        variables,\n        context,\n        mergedConfig.cacheInvalidationConfig\n      );\n    } catch (error) {\n      console.warn('Failed to invalidate cache after mutation:', error);\n      \n      // Fallback to basic invalidation\n      await Promise.allSettled([\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-history'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['user-data'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-stats'],\n          exact: false \n        })\n      ]);\n    }\n    \n    // Call user-provided onSuccess with processed variables\n    if (mergedConfig.onSuccess) {\n      mergedConfig.onSuccess(data, context.variables, context);\n    }\n  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]);\n\n  const onErrorCallback = useCallback((\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    console.log('\uD83D\uDD34 onErrorCallback: Mutation error occurred', { error, variables, context });\n    // Rollback optimistic updates if they were started\n    const optimisticId = context?.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (rollbackError) {\n        console.warn('Failed to rollback optimistic update:', rollbackError);\n      }\n    }\n\n    // Classify and log the error comprehensively\n    const classifiedError = logAndClassifyError(error, {\n      mutationVariables: variables,\n      mutationContext: context,\n      timestamp: new Date().toISOString()\n    });\n\n    // Format error for mutation system compatibility\n    const formattedError: TryonMutationError = {\n      error: classifiedError.userMessage,\n      details: classifiedError.technicalMessage,\n      code: classifiedError.errorCode,\n      retryable: classifiedError.retryable,\n      // Add classified error information\n      category: classifiedError.category,\n      severity: classifiedError.severity,\n      recoveryActions: classifiedError.recoveryActions\n    };\n\n    // Call user-provided onError with enhanced error information\n    if (mergedConfig.onError && context) {\n      mergedConfig.onError(formattedError, variables, context);\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSettledCallback = useCallback((\n    data: TryonMutationResponse | undefined,\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    // Format error with comprehensive classification if error exists\n    let formattedError: TryonMutationError | null = null;\n    \n    if (error) {\n      const classifiedError = classifyTryonError(error, {\n        mutationVariables: variables,\n        mutationContext: context,\n        settled: true,\n        timestamp: new Date().toISOString()\n      });\n\n      formattedError = {\n        error: classifiedError.userMessage,\n        details: classifiedError.technicalMessage,\n        code: classifiedError.errorCode,\n        retryable: classifiedError.retryable,\n        category: classifiedError.category,\n        severity: classifiedError.severity,\n        recoveryActions: classifiedError.recoveryActions\n      };\n    }\n\n    // Final cleanup of any remaining optimistic updates\n    if (context) {\n      const optimisticId = context.optimisticId;\n      if (optimisticId) {\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      }\n    }\n\n    // Call user-provided onSettled\n    if (mergedConfig.onSettled && context) {\n      mergedConfig.onSettled(data, formattedError, variables, context);\n    }\n  }, [mergedConfig, activeOptimisticUpdates]);\n\n  // Cleanup effect for optimistic updates on unmount\n  useEffect(() => {\n    return () => {\n      // Rollback any remaining optimistic updates when component unmounts\n      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {\n        try {\n          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));\n        } catch (error) {\n          console.warn('Failed to cleanup optimistic update on unmount:', error);\n        }\n      });\n      activeOptimisticUpdates.clear();\n    };\n  }, [optimisticManager, activeOptimisticUpdates]);\n\n  // Mutation configuration\n  const mutationConfig = useMemo(() => ({\n    mutationFn: tryonMutationFn,\n    \n    // Custom retry logic\n    retry: mergedConfig.enableRetry ? (failureCount: number, error: unknown) => {\n      if (failureCount >= mergedConfig.maxRetries) {\n        return false;\n      }\n      return isRetryableError(error);\n    } : false,\n    \n    // Exponential backoff delay\n    retryDelay: (attemptIndex: number) => {\n      return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);\n    },\n\n    // Lifecycle callbacks\n    onMutate: onMutateCallback,\n    onSuccess: onSuccessCallback,\n    onError: onErrorCallback,\n    onSettled: onSettledCallback\n  }), [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]);\n\n  // Use React Query mutation\n  const mutation = useMutation(mutationConfig);\n\n  // Return hook interface\n  return useMemo<UseTryonMutationReturn>(() => ({\n    mutate: mutation.mutate,\n    mutateAsync: mutation.mutateAsync,\n    data: mutation.data,\n    error: mutation.error as TryonMutationError | null,\n    isLoading: mutation.isPending,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status === 'pending' ? 'loading' : mutation.status,\n    reset: mutation.reset,\n    context: mutation.context as TryonMutationContext | undefined\n  }), [mutation]);\n}"],
      names: ["useTryonMutation", "TRYON_API_ENDPOINT", "DEFAULT_CONFIG", "enableRetry", "maxRetries", "initialRetryDelay", "enableOptimisticUpdates", "tryonMutationFn", "variables", "console", "log", "modelImage", "apparelImages", "options", "payload", "metadata", "requestInit", "method", "headers", "body", "JSON", "stringify", "timeout", "controller", "AbortController", "timeoutId", "setTimeout", "abort", "signal", "response", "fetch", "clearTimeout", "result", "handleApiResponse", "apiError", "error", "ok", "status", "errorData", "json", "catch", "statusText", "details", "code", "retryable", "simpleError", "Error", "Object", "assign", "data", "img_generated", "isRetryableError", "Boolean", "isErrorRetryableFromClassification", "processImageInputs", "imageProcessingOptions", "startTime", "Date", "now", "hasFileInputs", "File", "some", "img", "processedVariables", "modelImageResult", "apparelImageResults", "processedModelImage", "processedApparelImages", "processedImage", "processImageForTryon", "i", "length", "image", "push", "totalProcessingTime", "imageProcessingResults", "undefined", "FileTypeNotSupportedError", "FileTooLargeError", "CompressionFailedError", "ImageProcessingError", "ImageDimensionError", "String", "createMutationContext", "retryCount", "previousError", "config", "queryClient", "useQueryClient", "mergedConfig", "useMemo", "optimisticManager", "getOptimisticUpdatesManager", "require", "OptimisticUpdatesManager", "activeOptimisticUpdates", "Map", "onMutateCallback", "useCallback", "configOptions", "imageProcessing", "targetWidth", "targetHeight", "maxSizeKB", "quality", "compressionQuality", "preserveAspectRatio", "variableOptions", "context", "optimisticId", "optimisticContext", "startOptimisticUpdate", "optimisticConfig", "set", "join", "warn", "onMutate", "userContext", "onMutateError", "onSuccessCallback", "completeOptimisticUpdate", "trackingKey", "delete", "invalidateCacheAfterMutation", "cacheInvalidationConfig", "Promise", "allSettled", "invalidateQueries", "queryKey", "exact", "onSuccess", "onErrorCallback", "rollbackOptimisticUpdate", "rollbackError", "classifiedError", "logAndClassifyError", "mutationVariables", "mutationContext", "timestamp", "toISOString", "formattedError", "userMessage", "technicalMessage", "errorCode", "category", "severity", "recoveryActions", "onError", "onSettledCallback", "classifyTryonError", "settled", "onSettled", "useEffect", "forEach", "clear", "mutationConfig", "mutationFn", "retry", "failureCount", "retryDelay", "attemptIndex", "Math", "pow", "mutation", "useMutation", "mutate", "mutateAsync", "isLoading", "isPending", "isSuccess", "isError", "isIdle", "reset"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ca2b4c07f008eca1ce46efefee4bdf81259268d5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bahv0ttb6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bahv0ttb6();
cov_bahv0ttb6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bahv0ttb6().s[1]++;
Object.defineProperty(exports, "useTryonMutation", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[0]++;
    cov_bahv0ttb6().s[2]++;
    return useTryonMutation;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_bahv0ttb6().s[3]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_bahv0ttb6().s[4]++, require("react"));
const _imageProcessing =
/* istanbul ignore next */
(cov_bahv0ttb6().s[5]++, require("../utils/imageProcessing"));
const _image =
/* istanbul ignore next */
(cov_bahv0ttb6().s[6]++, require("../../utils/image"));
const _errorHandling =
/* istanbul ignore next */
(cov_bahv0ttb6().s[7]++, require("../utils/errorHandling"));
const _optimisticUpdates =
/* istanbul ignore next */
(cov_bahv0ttb6().s[8]++, require("../utils/optimisticUpdates"));
const _cacheInvalidation =
/* istanbul ignore next */
(cov_bahv0ttb6().s[9]++, require("../utils/cacheInvalidation"));
/**
 * API endpoint for try-on requests
 */
const TRYON_API_ENDPOINT =
/* istanbul ignore next */
(cov_bahv0ttb6().s[10]++, '/api/tryon');
/**
 * Default configuration for the try-on mutation
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_bahv0ttb6().s[11]++, {
  enableRetry: true,
  maxRetries: 3,
  initialRetryDelay: 1000,
  enableOptimisticUpdates: false
});
/**
 * Mutation function that calls the try-on API
 */
async function tryonMutationFn(variables) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[1]++;
  cov_bahv0ttb6().s[12]++;
  console.log('🟡 tryonMutationFn: Starting mutation', variables);
  const {
    modelImage,
    apparelImages,
    options
  } =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[13]++, variables);
  // Prepare request payload
  const payload =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[14]++, {
    modelImage,
    apparelImages,
    ...(
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[0][0]++, options?.metadata) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[0][1]++, {
      metadata: options.metadata
    }))
  });
  // Configure request options
  const requestInit =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[15]++, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  });
  // Add timeout if specified
  /* istanbul ignore next */
  cov_bahv0ttb6().s[16]++;
  if (options?.timeout) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[1][0]++;
    const controller =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[17]++, new AbortController());
    const timeoutId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[18]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[2]++;
      cov_bahv0ttb6().s[19]++;
      return controller.abort();
    }, options.timeout));
    /* istanbul ignore next */
    cov_bahv0ttb6().s[20]++;
    requestInit.signal = controller.signal;
    /* istanbul ignore next */
    cov_bahv0ttb6().s[21]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[22]++;
      console.log('🟡 tryonMutationFn: About to call fetch with timeout', TRYON_API_ENDPOINT);
      const response =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[23]++, await fetch(TRYON_API_ENDPOINT, requestInit));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[24]++;
      console.log('🟡 tryonMutationFn: Fetch completed, calling handleApiResponse');
      /* istanbul ignore next */
      cov_bahv0ttb6().s[25]++;
      clearTimeout(timeoutId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[26]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[27]++, await handleApiResponse(response));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[28]++;
        console.log('🟢 tryonMutationFn: handleApiResponse completed successfully');
        /* istanbul ignore next */
        cov_bahv0ttb6().s[29]++;
        return result;
      } catch (apiError) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[30]++;
        console.log('🔴 tryonMutationFn: handleApiResponse threw error, re-throwing', apiError);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[31]++;
        throw apiError;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[32]++;
      console.log('🔴 tryonMutationFn: Fetch error caught in timeout branch', error);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[33]++;
      clearTimeout(timeoutId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[34]++;
      throw error;
    }
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[1][1]++;
  }
  // Standard request without timeout
  const response =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[35]++, await fetch(TRYON_API_ENDPOINT, requestInit));
  /* istanbul ignore next */
  cov_bahv0ttb6().s[36]++;
  return handleApiResponse(response);
}
/**
 * Handle API response and convert to appropriate format
 */
async function handleApiResponse(response) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[3]++;
  cov_bahv0ttb6().s[37]++;
  console.log('🔵 handleApiResponse: Processing response', {
    ok: response.ok,
    status: response.status
  });
  /* istanbul ignore next */
  cov_bahv0ttb6().s[38]++;
  if (!response.ok) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[2][0]++;
    const errorData =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[39]++, await response.json().catch(() => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[4]++;
      cov_bahv0ttb6().s[40]++;
      return {};
    }));
    const error =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[41]++, {
      error:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][0]++, errorData.error) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][1]++, `HTTP ${response.status}: ${response.statusText}`),
      details: errorData.details,
      code: errorData.code,
      status: response.status,
      retryable:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][0]++, response.status >= 500) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][1]++, response.status === 408) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][2]++, response.status === 429)
    });
    /* istanbul ignore next */
    cov_bahv0ttb6().s[42]++;
    console.log('🔴 handleApiResponse: About to throw error', error);
    // Try throwing a simple Error to see if React Query handles it better
    const simpleError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[43]++, new Error(error.error));
    /* istanbul ignore next */
    cov_bahv0ttb6().s[44]++;
    Object.assign(simpleError, error); // Add the TryonMutationError properties
    /* istanbul ignore next */
    cov_bahv0ttb6().s[45]++;
    console.log('🔴 handleApiResponse: Throwing simple error with TryonMutationError properties', simpleError);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[46]++;
    throw simpleError;
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[2][1]++;
  }
  const data =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[47]++, await response.json());
  // Validate response structure
  /* istanbul ignore next */
  cov_bahv0ttb6().s[48]++;
  if (!data.img_generated) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[5][0]++;
    cov_bahv0ttb6().s[49]++;
    throw new Error('Invalid API response: missing img_generated field');
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[5][1]++;
  }
  cov_bahv0ttb6().s[50]++;
  return {
    img_generated: data.img_generated,
    metadata: data.metadata
  };
}
/**
 * Determine if an error is retryable using comprehensive classification
 */
function isRetryableError(error) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[5]++;
  cov_bahv0ttb6().s[51]++;
  // First check if error has explicit retryable property
  if (
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][0]++, error) &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][1]++, typeof error === 'object') &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][2]++, 'retryable' in error)) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[6][0]++;
    cov_bahv0ttb6().s[52]++;
    return Boolean(error.retryable);
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[6][1]++;
  }
  // Use comprehensive error classification
  cov_bahv0ttb6().s[53]++;
  return (0, _errorHandling.isErrorRetryable)(error);
}
/**
 * Process image inputs if they are File objects
 */
async function processImageInputs(variables, imageProcessingOptions) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[54]++, Date.now());
  // Check if we have File objects to process
  const hasFileInputs =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[55]++,
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][0]++, variables.modelImage instanceof File) ||
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][1]++, variables.apparelImages.some(img => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[7]++;
    cov_bahv0ttb6().s[56]++;
    return img instanceof File;
  })));
  /* istanbul ignore next */
  cov_bahv0ttb6().s[57]++;
  if (!hasFileInputs) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[9][0]++;
    cov_bahv0ttb6().s[58]++;
    // All inputs are already base64 strings
    return {
      processedVariables: variables
    };
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[9][1]++;
  }
  cov_bahv0ttb6().s[59]++;
  try {
    let modelImageResult;
    const apparelImageResults =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[60]++, []);
    let processedModelImage;
    const processedApparelImages =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[61]++, []);
    // Process model image if it's a File
    /* istanbul ignore next */
    cov_bahv0ttb6().s[62]++;
    if (variables.modelImage instanceof File) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][0]++;
      const processedImage =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[63]++, await (0, _imageProcessing.processImageForTryon)(variables.modelImage, imageProcessingOptions));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[64]++;
      modelImageResult = processedImage;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[65]++;
      processedModelImage = processedImage.processedImage;
    } else {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][1]++;
      cov_bahv0ttb6().s[66]++;
      processedModelImage = variables.modelImage;
    }
    // Process apparel images
    /* istanbul ignore next */
    cov_bahv0ttb6().s[67]++;
    for (let i =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[68]++, 0); i < variables.apparelImages.length; i++) {
      const image =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[69]++, variables.apparelImages[i]);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[70]++;
      if (image instanceof File) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][0]++;
        const processedImage =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[71]++, await (0, _imageProcessing.processImageForTryon)(image, imageProcessingOptions));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[72]++;
        apparelImageResults.push(processedImage);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[73]++;
        processedApparelImages.push(processedImage.processedImage);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][1]++;
        cov_bahv0ttb6().s[74]++;
        processedApparelImages.push(image);
      }
    }
    const totalProcessingTime =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[75]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[76]++;
    return {
      processedVariables: {
        modelImage: processedModelImage,
        apparelImages: processedApparelImages,
        options: variables.options
      },
      imageProcessingResults: {
        modelImageResult,
        apparelImageResults: apparelImageResults.length > 0 ?
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][0]++, apparelImageResults) :
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][1]++, undefined),
        totalProcessingTime
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_bahv0ttb6().s[77]++;
    // Re-throw known image processing errors
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][0]++, error instanceof _image.FileTypeNotSupportedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][1]++, error instanceof _image.FileTooLargeError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][2]++, error instanceof _image.CompressionFailedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][3]++, error instanceof _imageProcessing.ImageProcessingError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][4]++, error instanceof _imageProcessing.ImageDimensionError)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[13][0]++;
      cov_bahv0ttb6().s[78]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[13][1]++;
    }
    // Wrap unknown errors
    cov_bahv0ttb6().s[79]++;
    throw new _imageProcessing.ImageProcessingError('Unexpected error during image processing', error instanceof Error ?
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][0]++, error) :
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][1]++, new Error(String(error))));
  }
}
/**
 * Create mutation context for lifecycle tracking
 */
function createMutationContext(variables, retryCount =
/* istanbul ignore next */
(cov_bahv0ttb6().b[16][0]++, 0), previousError, imageProcessingResults) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[8]++;
  cov_bahv0ttb6().s[80]++;
  return {
    variables,
    startTime: Date.now(),
    retryCount,
    previousError,
    imageProcessingResults
  };
}
function useTryonMutation(config =
/* istanbul ignore next */
(cov_bahv0ttb6().b[17][0]++, {})) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[9]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[81]++, (0, _reactquery.useQueryClient)());
  // Merge configuration with defaults
  const mergedConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[82]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[10]++;
    cov_bahv0ttb6().s[83]++;
    return {
      ...DEFAULT_CONFIG,
      ...config
    };
  }, [config]));
  // Get optimistic updates manager instance
  const optimisticManager =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[84]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[11]++;
    cov_bahv0ttb6().s[85]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[86]++;
      return (0, _optimisticUpdates.getOptimisticUpdatesManager)();
    } catch {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[87]++;
      // Initialize if not already initialized
      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);
    }
  }, [queryClient]));
  // Track active optimistic updates
  const activeOptimisticUpdates =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[88]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[12]++;
    cov_bahv0ttb6().s[89]++;
    return new Map();
  }, []));
  // Define lifecycle callbacks with useCallback
  const onMutateCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[90]++, (0, _react.useCallback)(async variables => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[13]++;
    cov_bahv0ttb6().s[91]++;
    try {
      // Extract image processing options from config and variables (variables take precedence)
      const configOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[92]++, mergedConfig.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][0]++, {
        targetWidth: mergedConfig.imageProcessing.targetWidth,
        targetHeight: mergedConfig.imageProcessing.targetHeight,
        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,
        quality: mergedConfig.imageProcessing.compressionQuality,
        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][1]++, undefined));
      const variableOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[93]++, variables.options?.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][0]++, {
        targetWidth: variables.options.imageProcessing.targetWidth,
        targetHeight: variables.options.imageProcessing.targetHeight,
        maxSizeKB: variables.options.imageProcessing.maxSizeKB,
        quality: variables.options.imageProcessing.compressionQuality,
        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][1]++, undefined));
      // Merge options with variable options taking precedence
      const imageProcessingOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[94]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][0]++, configOptions) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][1]++, variableOptions) ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][0]++, {
        ...configOptions,
        ...variableOptions
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][1]++, undefined));
      // Process images if needed
      const {
        processedVariables,
        imageProcessingResults
      } =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[95]++, await processImageInputs(variables, imageProcessingOptions));
      // Create context with processed variables and image processing results
      const context =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[96]++, createMutationContext(processedVariables, 0, undefined, imageProcessingResults));
      // Start optimistic updates if enabled
      let optimisticId;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[97]++;
      if (mergedConfig.enableOptimisticUpdates) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[22][0]++;
        cov_bahv0ttb6().s[98]++;
        try {
          const optimisticContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[99]++, optimisticManager.startOptimisticUpdate(processedVariables, mergedConfig.optimisticConfig));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[100]++;
          optimisticId = optimisticContext.optimisticId;
          /* istanbul ignore next */
          cov_bahv0ttb6().s[101]++;
          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);
          // Add optimistic ID to context for tracking
          /* istanbul ignore next */
          cov_bahv0ttb6().s[102]++;
          context.optimisticId = optimisticId;
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[103]++;
          console.warn('Failed to start optimistic updates:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[22][1]++;
      }
      // Call user-provided onMutate if available
      cov_bahv0ttb6().s[104]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[23][0]++;
        const userContext =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[105]++, await mergedConfig.onMutate(processedVariables));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[106]++;
        if (userContext) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[24][0]++;
          cov_bahv0ttb6().s[107]++;
          return {
            ...context,
            ...userContext
          };
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[24][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[23][1]++;
      }
      cov_bahv0ttb6().s[108]++;
      return context;
    } catch (error) {
      // If image processing fails, still allow user's onMutate to be called
      // The user's onMutate can decide how to handle the failure
      let context;
      const hasFileInputs =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[109]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][0]++, variables.modelImage instanceof File) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][1]++, variables.apparelImages.some(img => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[14]++;
        cov_bahv0ttb6().s[110]++;
        return img instanceof File;
      })));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[111]++;
      if (hasFileInputs) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][0]++;
        cov_bahv0ttb6().s[112]++;
        // Create context with File objects - user's onMutate must handle this
        context = createMutationContext(variables);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][1]++;
        cov_bahv0ttb6().s[113]++;
        // All inputs are base64 strings, safe to cast
        context = createMutationContext(variables);
      }
      /* istanbul ignore next */
      cov_bahv0ttb6().s[114]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[27][0]++;
        cov_bahv0ttb6().s[115]++;
        try {
          const userContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[116]++, await mergedConfig.onMutate(variables));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[117]++;
          if (userContext) {
            /* istanbul ignore next */
            cov_bahv0ttb6().b[28][0]++;
            cov_bahv0ttb6().s[118]++;
            context = {
              ...context,
              ...userContext
            };
          } else
          /* istanbul ignore next */
          {
            cov_bahv0ttb6().b[28][1]++;
          }
        } catch (onMutateError) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[119]++;
          // If onMutate also fails, prefer the original processing error
          console.warn('onMutate failed during error handling:', onMutateError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[27][1]++;
      }
      // Always re-throw the error so mutation fails appropriately
      cov_bahv0ttb6().s[120]++;
      throw error;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSuccessCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[121]++, (0, _react.useCallback)(async (data, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[15]++;
    // Complete optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[122]++, context.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[123]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[29][0]++;
      cov_bahv0ttb6().s[124]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[125]++;
        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[126]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[127]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (error) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[128]++;
        console.warn('Failed to complete optimistic update:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[29][1]++;
    }
    // Advanced cache invalidation with configurable strategies
    cov_bahv0ttb6().s[129]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[130]++;
      await (0, _cacheInvalidation.invalidateCacheAfterMutation)(queryClient, data, variables, context, mergedConfig.cacheInvalidationConfig);
    } catch (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[131]++;
      console.warn('Failed to invalidate cache after mutation:', error);
      // Fallback to basic invalidation
      /* istanbul ignore next */
      cov_bahv0ttb6().s[132]++;
      await Promise.allSettled([queryClient.invalidateQueries({
        queryKey: ['tryon-history'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['user-data'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['tryon-stats'],
        exact: false
      })]);
    }
    // Call user-provided onSuccess with processed variables
    /* istanbul ignore next */
    cov_bahv0ttb6().s[133]++;
    if (mergedConfig.onSuccess) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[31][0]++;
      cov_bahv0ttb6().s[134]++;
      mergedConfig.onSuccess(data, context.variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[31][1]++;
    }
  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]));
  const onErrorCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[135]++, (0, _react.useCallback)((error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[16]++;
    cov_bahv0ttb6().s[136]++;
    console.log('🔴 onErrorCallback: Mutation error occurred', {
      error,
      variables,
      context
    });
    // Rollback optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[137]++, context?.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[138]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[32][0]++;
      cov_bahv0ttb6().s[139]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[140]++;
        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[141]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[142]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (rollbackError) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[143]++;
        console.warn('Failed to rollback optimistic update:', rollbackError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[32][1]++;
    }
    // Classify and log the error comprehensively
    const classifiedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[144]++, (0, _errorHandling.logAndClassifyError)(error, {
      mutationVariables: variables,
      mutationContext: context,
      timestamp: new Date().toISOString()
    }));
    // Format error for mutation system compatibility
    const formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[145]++, {
      error: classifiedError.userMessage,
      details: classifiedError.technicalMessage,
      code: classifiedError.errorCode,
      retryable: classifiedError.retryable,
      // Add classified error information
      category: classifiedError.category,
      severity: classifiedError.severity,
      recoveryActions: classifiedError.recoveryActions
    });
    // Call user-provided onError with enhanced error information
    /* istanbul ignore next */
    cov_bahv0ttb6().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][0]++, mergedConfig.onError) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[34][0]++;
      cov_bahv0ttb6().s[147]++;
      mergedConfig.onError(formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[34][1]++;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSettledCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[148]++, (0, _react.useCallback)((data, error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[17]++;
    // Format error with comprehensive classification if error exists
    let formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[149]++, null);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[150]++;
    if (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[36][0]++;
      const classifiedError =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[151]++, (0, _errorHandling.classifyTryonError)(error, {
        mutationVariables: variables,
        mutationContext: context,
        settled: true,
        timestamp: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[152]++;
      formattedError = {
        error: classifiedError.userMessage,
        details: classifiedError.technicalMessage,
        code: classifiedError.errorCode,
        retryable: classifiedError.retryable,
        category: classifiedError.category,
        severity: classifiedError.severity,
        recoveryActions: classifiedError.recoveryActions
      };
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[36][1]++;
    }
    // Final cleanup of any remaining optimistic updates
    cov_bahv0ttb6().s[153]++;
    if (context) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[37][0]++;
      const optimisticId =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[154]++, context.optimisticId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[155]++;
      if (optimisticId) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[38][0]++;
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[156]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[157]++;
        activeOptimisticUpdates.delete(trackingKey);
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[38][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[37][1]++;
    }
    // Call user-provided onSettled
    cov_bahv0ttb6().s[158]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][0]++, mergedConfig.onSettled) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[39][0]++;
      cov_bahv0ttb6().s[159]++;
      mergedConfig.onSettled(data, formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[39][1]++;
    }
  }, [mergedConfig, activeOptimisticUpdates]));
  // Cleanup effect for optimistic updates on unmount
  /* istanbul ignore next */
  cov_bahv0ttb6().s[160]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[18]++;
    cov_bahv0ttb6().s[161]++;
    return () => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[19]++;
      cov_bahv0ttb6().s[162]++;
      // Rollback any remaining optimistic updates when component unmounts
      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[20]++;
        cov_bahv0ttb6().s[163]++;
        try {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[164]++;
          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[165]++;
          console.warn('Failed to cleanup optimistic update on unmount:', error);
        }
      });
      /* istanbul ignore next */
      cov_bahv0ttb6().s[166]++;
      activeOptimisticUpdates.clear();
    };
  }, [optimisticManager, activeOptimisticUpdates]);
  // Mutation configuration
  const mutationConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[167]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[21]++;
    cov_bahv0ttb6().s[168]++;
    return {
      mutationFn: tryonMutationFn,
      // Custom retry logic
      retry: mergedConfig.enableRetry ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][0]++, (failureCount, error) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[22]++;
        cov_bahv0ttb6().s[169]++;
        if (failureCount >= mergedConfig.maxRetries) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[42][0]++;
          cov_bahv0ttb6().s[170]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[42][1]++;
        }
        cov_bahv0ttb6().s[171]++;
        return isRetryableError(error);
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][1]++, false),
      // Exponential backoff delay
      retryDelay: attemptIndex => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[23]++;
        cov_bahv0ttb6().s[172]++;
        return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);
      },
      // Lifecycle callbacks
      onMutate: onMutateCallback,
      onSuccess: onSuccessCallback,
      onError: onErrorCallback,
      onSettled: onSettledCallback
    };
  }, [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]));
  // Use React Query mutation
  const mutation =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[173]++, (0, _reactquery.useMutation)(mutationConfig));
  // Return hook interface
  /* istanbul ignore next */
  cov_bahv0ttb6().s[174]++;
  return (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[24]++;
    cov_bahv0ttb6().s[175]++;
    return {
      mutate: mutation.mutate,
      mutateAsync: mutation.mutateAsync,
      data: mutation.data,
      error: mutation.error,
      isLoading: mutation.isPending,
      isSuccess: mutation.isSuccess,
      isError: mutation.isError,
      isIdle: mutation.isIdle,
      status: mutation.status === 'pending' ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][0]++, 'loading') :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][1]++, mutation.status),
      reset: mutation.reset,
      context: mutation.context
    };
  }, [mutation]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,