e262a8efb8d47921ced7d8d24d1df1f1
"use strict";

/* istanbul ignore next */
function cov_269f0k7fk0() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/test/mocks/handlers.ts";
  var hash = "7c23456c035a5eb91d67d626a2e3991769d57dfb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/test/mocks/handlers.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 13
        },
        end: {
          line: 11,
          column: 27
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 78,
          column: 1
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "6": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "7": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "8": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 60
          },
          end: {
            line: 14,
            column: 61
          }
        },
        loc: {
          start: {
            line: 14,
            column: 64
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 74
          },
          end: {
            line: 35,
            column: 75
          }
        },
        loc: {
          start: {
            line: 35,
            column: 78
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 73
          },
          end: {
            line: 40,
            column: 74
          }
        },
        loc: {
          start: {
            line: 40,
            column: 77
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 65
          },
          end: {
            line: 55,
            column: 66
          }
        },
        loc: {
          start: {
            line: 55,
            column: 69
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 55
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/test/mocks/handlers.ts"],
      sourcesContent: ["import { http, HttpResponse } from 'msw'\n\nexport const handlers = [\n  // Mock Claude API\n  http.post('https://api.anthropic.com/v1/messages', () => {\n    return HttpResponse.json({\n      id: 'msg_test123',\n      type: 'message',\n      role: 'assistant',\n      content: [\n        {\n          type: 'text',\n          text: 'This is a mock response from Claude API',\n        },\n      ],\n      model: 'claude-3-sonnet-20240229',\n      stop_reason: 'end_turn',\n      stop_sequence: null,\n      usage: {\n        input_tokens: 10,\n        output_tokens: 25,\n      },\n    })\n  }),\n\n  // Mock Pinecone API\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/upsert', () => {\n    return HttpResponse.json({\n      upsertedCount: 1,\n    })\n  }),\n\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/query', () => {\n    return HttpResponse.json({\n      matches: [\n        {\n          id: 'test-vector-1',\n          score: 0.9,\n          metadata: {\n            text: 'This is a test vector',\n            timestamp: '2023-01-01T00:00:00Z',\n          },\n        },\n      ],\n    })\n  }),\n\n  // Mock LangChain/OpenAI API\n  http.post('https://api.openai.com/v1/chat/completions', () => {\n    return HttpResponse.json({\n      id: 'chatcmpl-test123',\n      object: 'chat.completion',\n      created: 1677652288,\n      model: 'gpt-3.5-turbo',\n      choices: [\n        {\n          index: 0,\n          message: {\n            role: 'assistant',\n            content: 'This is a mock response from OpenAI API',\n          },\n          finish_reason: 'stop',\n        },\n      ],\n      usage: {\n        prompt_tokens: 9,\n        completion_tokens: 12,\n        total_tokens: 21,\n      },\n    })\n  }),\n]"],
      names: ["handlers", "http", "post", "HttpResponse", "json", "id", "type", "role", "content", "text", "model", "stop_reason", "stop_sequence", "usage", "input_tokens", "output_tokens", "upsertedCount", "matches", "score", "metadata", "timestamp", "object", "created", "choices", "index", "message", "finish_reason", "prompt_tokens", "completion_tokens", "total_tokens"],
      mappings: ";;;;+BAEaA;;;eAAAA;;;qBAFsB;AAE5B,MAAMA,WAAW;IACtB,kBAAkB;IAClBC,SAAI,CAACC,IAAI,CAAC,yCAAyC;QACjD,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBC,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,SAAS;gBACP;oBACEF,MAAM;oBACNG,MAAM;gBACR;aACD;YACDC,OAAO;YACPC,aAAa;YACbC,eAAe;YACfC,OAAO;gBACLC,cAAc;gBACdC,eAAe;YACjB;QACF;IACF;IAEA,oBAAoB;IACpBd,SAAI,CAACC,IAAI,CAAC,uDAAuD;QAC/D,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBY,eAAe;QACjB;IACF;IAEAf,SAAI,CAACC,IAAI,CAAC,sDAAsD;QAC9D,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBa,SAAS;gBACP;oBACEZ,IAAI;oBACJa,OAAO;oBACPC,UAAU;wBACRV,MAAM;wBACNW,WAAW;oBACb;gBACF;aACD;QACH;IACF;IAEA,4BAA4B;IAC5BnB,SAAI,CAACC,IAAI,CAAC,8CAA8C;QACtD,OAAOC,iBAAY,CAACC,IAAI,CAAC;YACvBC,IAAI;YACJgB,QAAQ;YACRC,SAAS;YACTZ,OAAO;YACPa,SAAS;gBACP;oBACEC,OAAO;oBACPC,SAAS;wBACPlB,MAAM;wBACNC,SAAS;oBACX;oBACAkB,eAAe;gBACjB;aACD;YACDb,OAAO;gBACLc,eAAe;gBACfC,mBAAmB;gBACnBC,cAAc;YAChB;QACF;IACF;CACD"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7c23456c035a5eb91d67d626a2e3991769d57dfb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_269f0k7fk0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_269f0k7fk0();
cov_269f0k7fk0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_269f0k7fk0().s[1]++;
Object.defineProperty(exports, "handlers", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_269f0k7fk0().f[0]++;
    cov_269f0k7fk0().s[2]++;
    return handlers;
  }
});
const _msw =
/* istanbul ignore next */
(cov_269f0k7fk0().s[3]++, require("msw"));
const handlers =
/* istanbul ignore next */
(cov_269f0k7fk0().s[4]++, [
// Mock Claude API
_msw.http.post('https://api.anthropic.com/v1/messages', () => {
  /* istanbul ignore next */
  cov_269f0k7fk0().f[1]++;
  cov_269f0k7fk0().s[5]++;
  return _msw.HttpResponse.json({
    id: 'msg_test123',
    type: 'message',
    role: 'assistant',
    content: [{
      type: 'text',
      text: 'This is a mock response from Claude API'
    }],
    model: 'claude-3-sonnet-20240229',
    stop_reason: 'end_turn',
    stop_sequence: null,
    usage: {
      input_tokens: 10,
      output_tokens: 25
    }
  });
}),
// Mock Pinecone API
_msw.http.post('https://api.pinecone.io/v1/indexes/*/vectors/upsert', () => {
  /* istanbul ignore next */
  cov_269f0k7fk0().f[2]++;
  cov_269f0k7fk0().s[6]++;
  return _msw.HttpResponse.json({
    upsertedCount: 1
  });
}), _msw.http.post('https://api.pinecone.io/v1/indexes/*/vectors/query', () => {
  /* istanbul ignore next */
  cov_269f0k7fk0().f[3]++;
  cov_269f0k7fk0().s[7]++;
  return _msw.HttpResponse.json({
    matches: [{
      id: 'test-vector-1',
      score: 0.9,
      metadata: {
        text: 'This is a test vector',
        timestamp: '2023-01-01T00:00:00Z'
      }
    }]
  });
}),
// Mock LangChain/OpenAI API
_msw.http.post('https://api.openai.com/v1/chat/completions', () => {
  /* istanbul ignore next */
  cov_269f0k7fk0().f[4]++;
  cov_269f0k7fk0().s[8]++;
  return _msw.HttpResponse.json({
    id: 'chatcmpl-test123',
    object: 'chat.completion',
    created: 1677652288,
    model: 'gpt-3.5-turbo',
    choices: [{
      index: 0,
      message: {
        role: 'assistant',
        content: 'This is a mock response from OpenAI API'
      },
      finish_reason: 'stop'
    }],
    usage: {
      prompt_tokens: 9,
      completion_tokens: 12,
      total_tokens: 21
    }
  });
})]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjY5ZjBrN2ZrMCIsImFjdHVhbENvdmVyYWdlIiwicyIsImhhbmRsZXJzIiwiX21zdyIsImh0dHAiLCJwb3N0IiwiZiIsIkh0dHBSZXNwb25zZSIsImpzb24iLCJpZCIsInR5cGUiLCJyb2xlIiwiY29udGVudCIsInRleHQiLCJtb2RlbCIsInN0b3BfcmVhc29uIiwic3RvcF9zZXF1ZW5jZSIsInVzYWdlIiwiaW5wdXRfdG9rZW5zIiwib3V0cHV0X3Rva2VucyIsInVwc2VydGVkQ291bnQiLCJtYXRjaGVzIiwic2NvcmUiLCJtZXRhZGF0YSIsInRpbWVzdGFtcCIsIm9iamVjdCIsImNyZWF0ZWQiLCJjaG9pY2VzIiwiaW5kZXgiLCJtZXNzYWdlIiwiZmluaXNoX3JlYXNvbiIsInByb21wdF90b2tlbnMiLCJjb21wbGV0aW9uX3Rva2VucyIsInRvdGFsX3Rva2VucyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL3Rlc3QvbW9ja3MvaGFuZGxlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHR0cCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnbXN3J1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcnMgPSBbXG4gIC8vIE1vY2sgQ2xhdWRlIEFQSVxuICBodHRwLnBvc3QoJ2h0dHBzOi8vYXBpLmFudGhyb3BpYy5jb20vdjEvbWVzc2FnZXMnLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIGlkOiAnbXNnX3Rlc3QxMjMnLFxuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICBjb250ZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSBtb2NrIHJlc3BvbnNlIGZyb20gQ2xhdWRlIEFQSScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgbW9kZWw6ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknLFxuICAgICAgc3RvcF9yZWFzb246ICdlbmRfdHVybicsXG4gICAgICBzdG9wX3NlcXVlbmNlOiBudWxsLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRfdG9rZW5zOiAxMCxcbiAgICAgICAgb3V0cHV0X3Rva2VuczogMjUsXG4gICAgICB9LFxuICAgIH0pXG4gIH0pLFxuXG4gIC8vIE1vY2sgUGluZWNvbmUgQVBJXG4gIGh0dHAucG9zdCgnaHR0cHM6Ly9hcGkucGluZWNvbmUuaW8vdjEvaW5kZXhlcy8qL3ZlY3RvcnMvdXBzZXJ0JywgKCkgPT4ge1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICB1cHNlcnRlZENvdW50OiAxLFxuICAgIH0pXG4gIH0pLFxuXG4gIGh0dHAucG9zdCgnaHR0cHM6Ly9hcGkucGluZWNvbmUuaW8vdjEvaW5kZXhlcy8qL3ZlY3RvcnMvcXVlcnknLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIG1hdGNoZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndGVzdC12ZWN0b3ItMScsXG4gICAgICAgICAgc2NvcmU6IDAuOSxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSB0ZXN0IHZlY3RvcicsXG4gICAgICAgICAgICB0aW1lc3RhbXA6ICcyMDIzLTAxLTAxVDAwOjAwOjAwWicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgfSksXG5cbiAgLy8gTW9jayBMYW5nQ2hhaW4vT3BlbkFJIEFQSVxuICBodHRwLnBvc3QoJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsICgpID0+IHtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgaWQ6ICdjaGF0Y21wbC10ZXN0MTIzJyxcbiAgICAgIG9iamVjdDogJ2NoYXQuY29tcGxldGlvbicsXG4gICAgICBjcmVhdGVkOiAxNjc3NjUyMjg4LFxuICAgICAgbW9kZWw6ICdncHQtMy41LXR1cmJvJyxcbiAgICAgIGNob2ljZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICAgICAgY29udGVudDogJ1RoaXMgaXMgYSBtb2NrIHJlc3BvbnNlIGZyb20gT3BlbkFJIEFQSScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaW5pc2hfcmVhc29uOiAnc3RvcCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgcHJvbXB0X3Rva2VuczogOSxcbiAgICAgICAgY29tcGxldGlvbl90b2tlbnM6IDEyLFxuICAgICAgICB0b3RhbF90b2tlbnM6IDIxLFxuICAgICAgfSxcbiAgICB9KVxuICB9KSxcbl0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTU07SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFKTzs7Ozs7O1dBQUFDLFFBQUE7Ozs7O2tDQUZzQjtBQUU1QixNQUFNQSxRQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFFLENBQUEsT0FBVztBQUN0QjtBQUNBRSxJQUFBLENBQUFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLHlDQUF5QztFQUFBO0VBQUFOLGNBQUEsR0FBQU8sQ0FBQTtFQUFBUCxjQUFBLEdBQUFFLENBQUE7RUFDakQsT0FBT0UsSUFBQSxDQUFBSSxZQUFZLENBQUNDLElBQUksQ0FBQztJQUN2QkMsRUFBQSxFQUFJO0lBQ0pDLElBQUEsRUFBTTtJQUNOQyxJQUFBLEVBQU07SUFDTkMsT0FBQSxFQUFTLENBQ1A7TUFDRUYsSUFBQSxFQUFNO01BQ05HLElBQUEsRUFBTTtJQUNSLEVBQ0Q7SUFDREMsS0FBQSxFQUFPO0lBQ1BDLFdBQUEsRUFBYTtJQUNiQyxhQUFBLEVBQWU7SUFDZkMsS0FBQSxFQUFPO01BQ0xDLFlBQUEsRUFBYztNQUNkQyxhQUFBLEVBQWU7SUFDakI7RUFDRjtBQUNGO0FBRUE7QUFDQWhCLElBQUEsQ0FBQUMsSUFBSSxDQUFDQyxJQUFJLENBQUMsdURBQXVEO0VBQUE7RUFBQU4sY0FBQSxHQUFBTyxDQUFBO0VBQUFQLGNBQUEsR0FBQUUsQ0FBQTtFQUMvRCxPQUFPRSxJQUFBLENBQUFJLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO0lBQ3ZCWSxhQUFBLEVBQWU7RUFDakI7QUFDRixJQUVBakIsSUFBQSxDQUFBQyxJQUFJLENBQUNDLElBQUksQ0FBQyxzREFBc0Q7RUFBQTtFQUFBTixjQUFBLEdBQUFPLENBQUE7RUFBQVAsY0FBQSxHQUFBRSxDQUFBO0VBQzlELE9BQU9FLElBQUEsQ0FBQUksWUFBWSxDQUFDQyxJQUFJLENBQUM7SUFDdkJhLE9BQUEsRUFBUyxDQUNQO01BQ0VaLEVBQUEsRUFBSTtNQUNKYSxLQUFBLEVBQU87TUFDUEMsUUFBQSxFQUFVO1FBQ1JWLElBQUEsRUFBTTtRQUNOVyxTQUFBLEVBQVc7TUFDYjtJQUNGO0VBRUo7QUFDRjtBQUVBO0FBQ0FyQixJQUFBLENBQUFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLDhDQUE4QztFQUFBO0VBQUFOLGNBQUEsR0FBQU8sQ0FBQTtFQUFBUCxjQUFBLEdBQUFFLENBQUE7RUFDdEQsT0FBT0UsSUFBQSxDQUFBSSxZQUFZLENBQUNDLElBQUksQ0FBQztJQUN2QkMsRUFBQSxFQUFJO0lBQ0pnQixNQUFBLEVBQVE7SUFDUkMsT0FBQSxFQUFTO0lBQ1RaLEtBQUEsRUFBTztJQUNQYSxPQUFBLEVBQVMsQ0FDUDtNQUNFQyxLQUFBLEVBQU87TUFDUEMsT0FBQSxFQUFTO1FBQ1BsQixJQUFBLEVBQU07UUFDTkMsT0FBQSxFQUFTO01BQ1g7TUFDQWtCLGFBQUEsRUFBZTtJQUNqQixFQUNEO0lBQ0RiLEtBQUEsRUFBTztNQUNMYyxhQUFBLEVBQWU7TUFDZkMsaUJBQUEsRUFBbUI7TUFDbkJDLFlBQUEsRUFBYztJQUNoQjtFQUNGO0FBQ0YsR0FDRCIsImlnbm9yZUxpc3QiOltdfQ==