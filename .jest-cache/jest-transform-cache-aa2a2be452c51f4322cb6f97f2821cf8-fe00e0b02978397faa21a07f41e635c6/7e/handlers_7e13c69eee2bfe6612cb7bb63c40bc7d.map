{"version":3,"names":["cov_269f0k7fk0","actualCoverage","s","handlers","_msw","http","post","f","HttpResponse","json","id","type","role","content","text","model","stop_reason","stop_sequence","usage","input_tokens","output_tokens","upsertedCount","matches","score","metadata","timestamp","object","created","choices","index","message","finish_reason","prompt_tokens","completion_tokens","total_tokens"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/test/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw'\n\nexport const handlers = [\n  // Mock Claude API\n  http.post('https://api.anthropic.com/v1/messages', () => {\n    return HttpResponse.json({\n      id: 'msg_test123',\n      type: 'message',\n      role: 'assistant',\n      content: [\n        {\n          type: 'text',\n          text: 'This is a mock response from Claude API',\n        },\n      ],\n      model: 'claude-3-sonnet-20240229',\n      stop_reason: 'end_turn',\n      stop_sequence: null,\n      usage: {\n        input_tokens: 10,\n        output_tokens: 25,\n      },\n    })\n  }),\n\n  // Mock Pinecone API\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/upsert', () => {\n    return HttpResponse.json({\n      upsertedCount: 1,\n    })\n  }),\n\n  http.post('https://api.pinecone.io/v1/indexes/*/vectors/query', () => {\n    return HttpResponse.json({\n      matches: [\n        {\n          id: 'test-vector-1',\n          score: 0.9,\n          metadata: {\n            text: 'This is a test vector',\n            timestamp: '2023-01-01T00:00:00Z',\n          },\n        },\n      ],\n    })\n  }),\n\n  // Mock LangChain/OpenAI API\n  http.post('https://api.openai.com/v1/chat/completions', () => {\n    return HttpResponse.json({\n      id: 'chatcmpl-test123',\n      object: 'chat.completion',\n      created: 1677652288,\n      model: 'gpt-3.5-turbo',\n      choices: [\n        {\n          index: 0,\n          message: {\n            role: 'assistant',\n            content: 'This is a mock response from OpenAI API',\n          },\n          finish_reason: 'stop',\n        },\n      ],\n      usage: {\n        prompt_tokens: 9,\n        completion_tokens: 12,\n        total_tokens: 21,\n      },\n    })\n  }),\n]"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAJO;;;;;;WAAAC,QAAA;;;;;kCAFsB;AAE5B,MAAMA,QAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAW;AACtB;AACAE,IAAA,CAAAC,IAAI,CAACC,IAAI,CAAC,yCAAyC;EAAA;EAAAN,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAE,CAAA;EACjD,OAAOE,IAAA,CAAAI,YAAY,CAACC,IAAI,CAAC;IACvBC,EAAA,EAAI;IACJC,IAAA,EAAM;IACNC,IAAA,EAAM;IACNC,OAAA,EAAS,CACP;MACEF,IAAA,EAAM;MACNG,IAAA,EAAM;IACR,EACD;IACDC,KAAA,EAAO;IACPC,WAAA,EAAa;IACbC,aAAA,EAAe;IACfC,KAAA,EAAO;MACLC,YAAA,EAAc;MACdC,aAAA,EAAe;IACjB;EACF;AACF;AAEA;AACAhB,IAAA,CAAAC,IAAI,CAACC,IAAI,CAAC,uDAAuD;EAAA;EAAAN,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAE,CAAA;EAC/D,OAAOE,IAAA,CAAAI,YAAY,CAACC,IAAI,CAAC;IACvBY,aAAA,EAAe;EACjB;AACF,IAEAjB,IAAA,CAAAC,IAAI,CAACC,IAAI,CAAC,sDAAsD;EAAA;EAAAN,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAE,CAAA;EAC9D,OAAOE,IAAA,CAAAI,YAAY,CAACC,IAAI,CAAC;IACvBa,OAAA,EAAS,CACP;MACEZ,EAAA,EAAI;MACJa,KAAA,EAAO;MACPC,QAAA,EAAU;QACRV,IAAA,EAAM;QACNW,SAAA,EAAW;MACb;IACF;EAEJ;AACF;AAEA;AACArB,IAAA,CAAAC,IAAI,CAACC,IAAI,CAAC,8CAA8C;EAAA;EAAAN,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAE,CAAA;EACtD,OAAOE,IAAA,CAAAI,YAAY,CAACC,IAAI,CAAC;IACvBC,EAAA,EAAI;IACJgB,MAAA,EAAQ;IACRC,OAAA,EAAS;IACTZ,KAAA,EAAO;IACPa,OAAA,EAAS,CACP;MACEC,KAAA,EAAO;MACPC,OAAA,EAAS;QACPlB,IAAA,EAAM;QACNC,OAAA,EAAS;MACX;MACAkB,aAAA,EAAe;IACjB,EACD;IACDb,KAAA,EAAO;MACLc,aAAA,EAAe;MACfC,iBAAA,EAAmB;MACnBC,YAAA,EAAc;IAChB;EACF;AACF,GACD","ignoreList":[]}