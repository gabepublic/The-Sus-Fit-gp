{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/business-layer/providers/FeatureFlagProvider.test.tsx"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport React from 'react';\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { FeatureFlagProvider } from '../../../src/business-layer/providers/FeatureFlagProvider';\nimport { useFeatureFlagContext } from '../../../src/business-layer/providers/FeatureFlagContext';\nimport type { FeatureFlagConfig } from '../../../src/business-layer/types/featureFlag.types';\n\n// Mock the feature flag config functions\njest.mock('../../../src/business-layer/config/featureFlags.config', () => ({\n  loadFeatureFlagConfig: jest.fn(),\n  getCurrentEnvironment: jest.fn(() => 'test'),\n  loadEnvironmentFlags: jest.fn(() => ({})),\n}));\n\n// Test component that uses the feature flag context\nconst TestConsumer: React.FC<{ flagKey: string; defaultValue?: unknown }> = ({ \n  flagKey, \n  defaultValue \n}) => {\n  const context = useFeatureFlagContext();\n  const value = context.getValue(flagKey, defaultValue);\n  const isEnabled = context.isEnabled(flagKey);\n  \n  return (\n    <div>\n      <div data-testid=\"flag-value\">{JSON.stringify(value)}</div>\n      <div data-testid=\"flag-enabled\">{isEnabled.toString()}</div>\n      <div data-testid=\"loading\">{context.isLoading.toString()}</div>\n      <div data-testid=\"error\">{context.error?.message || 'none'}</div>\n    </div>\n  );\n};\n\n// Test component that uses multiple flags\nconst MultiFlagConsumer: React.FC = () => {\n  const context = useFeatureFlagContext();\n  const enabledFlags = ['flag1', 'flag2', 'flag3'].filter(key => context.isEnabled(key));\n  \n  return (\n    <div data-testid=\"enabled-flags\">\n      {enabledFlags.join(',')}\n    </div>\n  );\n};\n\n// Error throwing component for error boundary testing\nconst ErrorComponent: React.FC = () => {\n  throw new Error('Test error');\n};\n\ndescribe('FeatureFlagProvider', () => {\n  let queryClient: QueryClient;\n  \n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n          gcTime: 0,\n        },\n      },\n    });\n    \n    // Suppress console.error for error boundary tests\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n    queryClient.clear();\n  });\n\n  const renderWithProviders = (\n    children: React.ReactNode,\n    providerProps?: Parameters<typeof FeatureFlagProvider>[0]\n  ) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        <FeatureFlagProvider {...providerProps}>\n          {children}\n        </FeatureFlagProvider>\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Basic Provider Functionality', () => {\n    it('should provide default context values', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'testFlag',\n          description: 'Test flag',\n          category: 'experiment',\n          defaultValue: true,\n          type: 'boolean',\n        },\n      ];\n\n      renderWithProviders(\n        <TestConsumer flagKey=\"testFlag\" defaultValue={false} />,\n        { initialFlags: mockConfigs }\n      );\n\n      expect(screen.getByTestId('flag-value')).toHaveTextContent('true');\n      expect(screen.getByTestId('flag-enabled')).toHaveTextContent('true');\n      expect(screen.getByTestId('loading')).toHaveTextContent('false');\n      expect(screen.getByTestId('error')).toHaveTextContent('none');\n    });\n\n    it('should handle missing flags with default values', () => {\n      renderWithProviders(\n        <TestConsumer flagKey=\"nonexistentFlag\" defaultValue=\"fallback\" />,\n        { initialFlags: [] }\n      );\n\n      expect(screen.getByTestId('flag-value')).toHaveTextContent('\"fallback\"');\n      expect(screen.getByTestId('flag-enabled')).toHaveTextContent('false');\n    });\n\n    it('should handle environment-specific flag filtering', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'devOnlyFlag',\n          description: 'Development only flag',\n          category: 'debugging',\n          defaultValue: true,\n          type: 'boolean',\n          environment: ['development'],\n        },\n        {\n          key: 'globalFlag',\n          description: 'Global flag',\n          category: 'ui',\n          defaultValue: true,\n          type: 'boolean',\n        },\n      ];\n\n      renderWithProviders(\n        <div>\n          <TestConsumer flagKey=\"devOnlyFlag\" defaultValue={false} />\n          <TestConsumer flagKey=\"globalFlag\" defaultValue={false} />\n        </div>,\n        { \n          initialFlags: mockConfigs,\n          environment: 'test' // devOnlyFlag should be disabled\n        }\n      );\n\n      const flagValues = screen.getAllByTestId('flag-value');\n      const flagEnabled = screen.getAllByTestId('flag-enabled');\n      \n      // devOnlyFlag should be disabled in test environment\n      expect(flagValues[0]).toHaveTextContent('false'); // defaultValue used\n      expect(flagEnabled[0]).toHaveTextContent('false');\n      \n      // globalFlag should be enabled\n      expect(flagValues[1]).toHaveTextContent('true');\n      expect(flagEnabled[1]).toHaveTextContent('true');\n    });\n  });\n\n  describe('Environment Variable Override', () => {\n    beforeEach(() => {\n      // Mock environment variable parsing\n      const { loadEnvironmentFlags } = require('../../../src/business-layer/config/featureFlags.config');\n      loadEnvironmentFlags.mockReturnValue({\n        testFlag: false, // Override the default true value - match case with flag key\n      });\n    });\n\n    it('should override flag values with environment variables', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'testFlag',\n          description: 'Test flag',\n          category: 'experiment',\n          defaultValue: true, // This should be overridden\n          type: 'boolean',\n        },\n      ];\n\n      renderWithProviders(\n        <TestConsumer flagKey=\"testFlag\" defaultValue={true} />,\n        { initialFlags: mockConfigs }\n      );\n\n      expect(screen.getByTestId('flag-value')).toHaveTextContent('false');\n      expect(screen.getByTestId('flag-enabled')).toHaveTextContent('false');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle errors gracefully with fallback to defaults', () => {\n      const onError = jest.fn();\n\n      renderWithProviders(\n        <div>\n          <ErrorComponent />\n          <TestConsumer flagKey=\"testFlag\" defaultValue=\"fallback\" />\n        </div>,\n        { \n          onError,\n          fallbackToDefaults: true,\n          initialFlags: []\n        }\n      );\n\n      expect(onError).toHaveBeenCalled();\n      expect(screen.getByTestId('flag-value')).toHaveTextContent('\"fallback\"');\n    });\n\n    it('should show error UI when fallbackToDefaults is false', () => {\n      renderWithProviders(\n        <ErrorComponent />,\n        { \n          fallbackToDefaults: false,\n          initialFlags: []\n        }\n      );\n\n      expect(screen.getByText(/Feature Flag Error/)).toBeInTheDocument();\n      expect(screen.getByText('Test error')).toBeInTheDocument();\n      expect(screen.getByText('Retry')).toBeInTheDocument();\n    });\n  });\n\n  describe('Remote Configuration', () => {\n    it('should handle remote config loading states', async () => {\n      renderWithProviders(\n        <TestConsumer flagKey=\"remoteFlag\" defaultValue={false} />,\n        { \n          enableRemoteConfig: true,\n          config: { remoteConfigUrl: 'https://api.example.com/flags' },\n          initialFlags: []\n        }\n      );\n\n      // Initially should show loading state\n      expect(screen.getByTestId('loading')).toHaveTextContent('false'); // No remote config in test env\n    });\n\n    it('should disable remote config when enableRemoteConfig is false', () => {\n      renderWithProviders(\n        <TestConsumer flagKey=\"testFlag\" defaultValue={false} />,\n        { \n          enableRemoteConfig: false,\n          initialFlags: []\n        }\n      );\n\n      expect(screen.getByTestId('loading')).toHaveTextContent('false');\n    });\n  });\n\n  describe('Context Methods', () => {\n    it('should provide working getFlag method', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'testFlag',\n          description: 'Test flag',\n          category: 'experiment',\n          defaultValue: 'test-value',\n          type: 'string',\n        },\n      ];\n\n      const TestFlagGetter: React.FC = () => {\n        const context = useFeatureFlagContext();\n        const flag = context.getFlag('testFlag');\n        \n        return (\n          <div>\n            <div data-testid=\"flag-key\">{flag?.key || 'none'}</div>\n            <div data-testid=\"flag-description\">{flag?.description || 'none'}</div>\n            <div data-testid=\"flag-category\">{flag?.category || 'none'}</div>\n          </div>\n        );\n      };\n\n      renderWithProviders(\n        <TestFlagGetter />,\n        { initialFlags: mockConfigs }\n      );\n\n      expect(screen.getByTestId('flag-key')).toHaveTextContent('testFlag');\n      expect(screen.getByTestId('flag-description')).toHaveTextContent('Test flag');\n      expect(screen.getByTestId('flag-category')).toHaveTextContent('experiment');\n    });\n\n    it('should provide working updateFlag method', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'testFlag',\n          description: 'Test flag',\n          category: 'experiment',\n          defaultValue: false,\n          type: 'boolean',\n        },\n      ];\n\n      const TestFlagUpdater: React.FC = () => {\n        const context = useFeatureFlagContext();\n        const [updated, setUpdated] = React.useState(false);\n        \n        const handleUpdate = () => {\n          context.updateFlag('testFlag', true);\n          setUpdated(true);\n        };\n        \n        return (\n          <div>\n            <button onClick={handleUpdate} data-testid=\"update-button\">\n              Update Flag\n            </button>\n            <div data-testid=\"updated\">{updated.toString()}</div>\n            <div data-testid=\"flag-value\">{context.getValue('testFlag', false).toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProviders(\n        <TestFlagUpdater />,\n        { initialFlags: mockConfigs }\n      );\n\n      // Initial state\n      expect(screen.getByTestId('flag-value')).toHaveTextContent('false');\n      \n      // Update flag\n      act(() => {\n        screen.getByTestId('update-button').click();\n      });\n\n      expect(screen.getByTestId('updated')).toHaveTextContent('true');\n      // Note: updateFlag modifies the flag object directly, but doesn't trigger re-render\n      // In real usage, this would be combined with state management\n    });\n\n    it('should provide working refreshFlags method', async () => {\n      const TestFlagRefresher: React.FC = () => {\n        const context = useFeatureFlagContext();\n        const [refreshed, setRefreshed] = React.useState(false);\n        \n        const handleRefresh = async () => {\n          await context.refreshFlags();\n          setRefreshed(true);\n        };\n        \n        return (\n          <div>\n            <button onClick={handleRefresh} data-testid=\"refresh-button\">\n              Refresh Flags\n            </button>\n            <div data-testid=\"refreshed\">{refreshed.toString()}</div>\n          </div>\n        );\n      };\n\n      renderWithProviders(\n        <TestFlagRefresher />,\n        { enableRemoteConfig: false, initialFlags: [] }\n      );\n\n      await act(async () => {\n        screen.getByTestId('refresh-button').click();\n      });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('refreshed')).toHaveTextContent('true');\n      });\n    });\n  });\n\n  describe('Multiple Flag Operations', () => {\n    it('should handle multiple flags correctly', () => {\n      const mockConfigs: FeatureFlagConfig[] = [\n        {\n          key: 'flag1',\n          description: 'Flag 1',\n          category: 'ui',\n          defaultValue: true,\n          type: 'boolean',\n        },\n        {\n          key: 'flag2',\n          description: 'Flag 2',\n          category: 'ui',\n          defaultValue: false,\n          type: 'boolean',\n        },\n        {\n          key: 'flag3',\n          description: 'Flag 3',\n          category: 'ui',\n          defaultValue: true,\n          type: 'boolean',\n        },\n      ];\n\n      renderWithProviders(\n        <MultiFlagConsumer />,\n        { initialFlags: mockConfigs }\n      );\n\n      expect(screen.getByTestId('enabled-flags')).toHaveTextContent('flag1,flag3');\n    });\n  });\n\n  describe('Provider Configuration', () => {\n    it('should respect custom configuration', () => {\n      const customConfig = {\n        refreshInterval: 1000,\n        fallbackToDefaults: false,\n      };\n\n      renderWithProviders(\n        <TestConsumer flagKey=\"testFlag\" defaultValue={false} />,\n        { \n          config: customConfig,\n          initialFlags: []\n        }\n      );\n\n      // Provider should be configured with custom settings\n      expect(screen.getByTestId('flag-enabled')).toHaveTextContent('false');\n    });\n\n    it('should handle different environments', () => {\n      const environments = ['development', 'staging', 'production', 'test'] as const;\n      \n      environments.forEach(env => {\n        const { unmount } = renderWithProviders(\n          <TestConsumer flagKey=\"testFlag\" defaultValue={false} />,\n          { \n            environment: env,\n            initialFlags: []\n          }\n        );\n        \n        // Should render without errors for all environments\n        expect(screen.getByTestId('flag-enabled')).toHaveTextContent('false');\n        unmount();\n      });\n    });\n  });\n\n  describe('Error Boundary Integration', () => {\n    it('should catch and handle context errors', () => {\n      const onError = jest.fn();\n      \n      renderWithProviders(\n        <ErrorComponent />,\n        { \n          onError,\n          fallbackToDefaults: true,\n          initialFlags: []\n        }\n      );\n\n      expect(onError).toHaveBeenCalledWith(expect.any(Error));\n    });\n  });\n});"],"names":["jest","mock","loadFeatureFlagConfig","fn","getCurrentEnvironment","loadEnvironmentFlags","TestConsumer","flagKey","defaultValue","context","useFeatureFlagContext","value","getValue","isEnabled","div","data-testid","JSON","stringify","toString","isLoading","error","message","MultiFlagConsumer","enabledFlags","filter","key","join","ErrorComponent","Error","describe","queryClient","beforeEach","QueryClient","defaultOptions","queries","retry","gcTime","spyOn","console","mockImplementation","afterEach","restoreAllMocks","clear","renderWithProviders","children","providerProps","render","QueryClientProvider","client","FeatureFlagProvider","it","mockConfigs","description","category","type","initialFlags","expect","screen","getByTestId","toHaveTextContent","environment","flagValues","getAllByTestId","flagEnabled","require","mockReturnValue","testFlag","onError","fallbackToDefaults","toHaveBeenCalled","getByText","toBeInTheDocument","enableRemoteConfig","config","remoteConfigUrl","TestFlagGetter","flag","getFlag","TestFlagUpdater","updated","setUpdated","React","useState","handleUpdate","updateFlag","button","onClick","act","click","TestFlagRefresher","refreshed","setRefreshed","handleRefresh","refreshFlags","waitFor","customConfig","refreshInterval","environments","forEach","env","unmount","toHaveBeenCalledWith","any"],"mappings":"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"}