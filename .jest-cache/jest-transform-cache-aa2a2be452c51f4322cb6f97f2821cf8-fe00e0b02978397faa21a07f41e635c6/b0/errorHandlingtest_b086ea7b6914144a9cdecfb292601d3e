899f4f5d8ac4d3ee4a077714e7e3a5af
/**
 * @jest-environment jsdom
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _image = require("../../../src/utils/image");
const _imageProcessing = require("../../../src/business-layer/utils/imageProcessing");
const _errorHandling = require("../../../src/business-layer/utils/errorHandling");
describe('Error Handling System', ()=>{
    let mockLogger;
    beforeEach(()=>{
        mockLogger = {
            logError: jest.fn()
        };
        (0, _errorHandling.setErrorLogger)(mockLogger);
    });
    describe('Error Classification', ()=>{
        it('should classify FileTypeNotSupportedError correctly', ()=>{
            const error = new _image.FileTypeNotSupportedError('Invalid file type');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.VALIDATION);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.LOW);
            expect(classified.errorCode).toBe('INVALID_FILE_TYPE');
            expect(classified.retryable).toBe(false);
            expect(classified.userMessage).toContain('valid image file');
            expect(classified.recoveryActions).toHaveLength(1);
            expect(classified.recoveryActions[0].type).toBe('try_different_image');
        });
        it('should classify FileTooLargeError correctly', ()=>{
            const error = new _image.FileTooLargeError('File too large');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.VALIDATION);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('FILE_TOO_LARGE');
            expect(classified.retryable).toBe(false);
            expect(classified.userMessage).toContain('too large');
            expect(classified.recoveryActions).toHaveLength(2);
            expect(classified.recoveryActions[0].type).toBe('reduce_image_size');
        });
        it('should classify ImageDimensionError correctly', ()=>{
            const error = new _imageProcessing.ImageDimensionError('Invalid dimensions', 100, 100);
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.VALIDATION);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('INVALID_DIMENSIONS');
            expect(classified.retryable).toBe(false);
            expect(classified.userMessage).toContain('dimensions');
        });
        it('should classify ImageProcessingError correctly', ()=>{
            const error = new _imageProcessing.ImageProcessingError('Processing failed');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.IMAGE_PROCESSING);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('IMAGE_PROCESSING_FAILED');
            expect(classified.retryable).toBe(false);
            expect(classified.userMessage).toContain('process the image');
        });
        it('should classify CompressionFailedError correctly', ()=>{
            const error = new _image.CompressionFailedError('Compression failed');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.IMAGE_PROCESSING);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('IMAGE_PROCESSING_FAILED');
            expect(classified.retryable).toBe(false);
        });
        it('should classify rate limit errors correctly', ()=>{
            const error = {
                error: 'Rate limited',
                status: 429
            };
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.RATE_LIMIT);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('RATE_LIMITED');
            expect(classified.retryable).toBe(true);
            expect(classified.recoveryActions[0].type).toBe('wait_and_retry');
            expect(classified.recoveryActions[0].waitTime).toBe(60);
        });
        it('should classify server errors correctly', ()=>{
            const error = {
                error: 'Internal server error',
                status: 500
            };
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.API_SERVER);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.HIGH);
            expect(classified.errorCode).toBe('SERVER_ERROR');
            expect(classified.retryable).toBe(true);
            expect(classified.recoveryActions[0].type).toBe('retry');
        });
        it('should classify client errors correctly', ()=>{
            const error = {
                error: 'Bad request',
                status: 400
            };
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.VALIDATION);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('CLIENT_ERROR');
            expect(classified.retryable).toBe(false);
        });
        it('should classify timeout errors correctly', ()=>{
            const error = new Error('Request timeout');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.TIMEOUT);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('REQUEST_TIMEOUT');
            expect(classified.retryable).toBe(true);
            expect(classified.recoveryActions).toContainEqual(expect.objectContaining({
                type: 'check_connection'
            }));
        });
        it('should classify network errors correctly', ()=>{
            const error = new Error('Network connection failed');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.NETWORK);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.MEDIUM);
            expect(classified.errorCode).toBe('NETWORK_ERROR');
            expect(classified.retryable).toBe(true);
        });
        it('should classify unknown errors correctly', ()=>{
            const error = new Error('Something unexpected happened');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.UNKNOWN);
            expect(classified.severity).toBe(_errorHandling.ErrorSeverity.HIGH);
            expect(classified.errorCode).toBe('UNKNOWN_ERROR');
            expect(classified.retryable).toBe(true);
            expect(classified.userMessage).toContain('unexpected error');
        });
    });
    describe('Error Logging', ()=>{
        it('should log errors with classification', ()=>{
            const error = new Error('Test error');
            const context = {
                test: 'context'
            };
            const classified = (0, _errorHandling.logAndClassifyError)(error, context);
            expect(mockLogger.logError).toHaveBeenCalledWith(classified, context);
        });
        it('should use default console logger when no custom logger set', ()=>{
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
            const consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation();
            const logger = new _errorHandling.ConsoleErrorLogger();
            (0, _errorHandling.setErrorLogger)(logger);
            // Test critical error
            const criticalError = (0, _errorHandling.classifyTryonError)(new Error('Critical'));
            criticalError.severity = _errorHandling.ErrorSeverity.CRITICAL;
            logger.logError(criticalError);
            expect(consoleErrorSpy).toHaveBeenCalled();
            // Test medium error
            const mediumError = (0, _errorHandling.classifyTryonError)(new Error('Medium'));
            mediumError.severity = _errorHandling.ErrorSeverity.MEDIUM;
            logger.logError(mediumError);
            expect(consoleWarnSpy).toHaveBeenCalled();
            // Test low error
            const lowError = (0, _errorHandling.classifyTryonError)(new Error('Low'));
            lowError.severity = _errorHandling.ErrorSeverity.LOW;
            logger.logError(lowError);
            expect(consoleInfoSpy).toHaveBeenCalled();
            consoleErrorSpy.mockRestore();
            consoleWarnSpy.mockRestore();
            consoleInfoSpy.mockRestore();
        });
    });
    describe('Utility Functions', ()=>{
        it('should get user-friendly error messages', ()=>{
            const error = new _image.FileTypeNotSupportedError('Invalid type');
            const message = (0, _errorHandling.getUserFriendlyErrorMessage)(error);
            expect(message).toContain('valid image file');
            expect(message).not.toContain('Invalid type'); // Should not expose technical message
        });
        it('should determine if errors are retryable', ()=>{
            const retryableError = new Error('Network error');
            const nonRetryableError = new _image.FileTypeNotSupportedError('Invalid type');
            expect((0, _errorHandling.isErrorRetryable)(retryableError)).toBe(true);
            expect((0, _errorHandling.isErrorRetryable)(nonRetryableError)).toBe(false);
        });
        it('should get recovery actions for errors', ()=>{
            const error = new _image.FileTooLargeError('Too large');
            const actions = (0, _errorHandling.getErrorRecoveryActions)(error);
            expect(actions).toHaveLength(2);
            expect(actions[0].type).toBe('reduce_image_size');
            expect(actions[1].type).toBe('try_different_image');
        });
        it('should format errors for display', ()=>{
            const error = new Error('Network connection failed');
            const formatted = (0, _errorHandling.formatErrorForDisplay)(error);
            expect(formatted.title).toBe('Connection Issue');
            expect(formatted.message).toContain('Network connection');
            expect(formatted.canRetry).toBe(true);
            expect(formatted.actions.length).toBeGreaterThan(0);
        });
    });
    describe('Recovery Actions', ()=>{
        it('should provide appropriate recovery actions for validation errors', ()=>{
            const error = new _image.FileTypeNotSupportedError('Invalid type');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.recoveryActions).toContainEqual(expect.objectContaining({
                type: 'try_different_image',
                description: expect.stringContaining('JPEG, PNG, WebP, or GIF')
            }));
        });
        it('should provide automated recovery actions for network errors', ()=>{
            const error = new Error('Network error');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            const automatedAction = classified.recoveryActions.find((action)=>action.automated === true);
            expect(automatedAction).toBeDefined();
            expect(automatedAction?.type).toBe('retry');
            expect(automatedAction?.waitTime).toBeDefined();
        });
        it('should provide wait times for rate limiting', ()=>{
            const error = {
                error: 'Rate limited',
                status: 429
            };
            const classified = (0, _errorHandling.classifyTryonError)(error);
            const waitAction = classified.recoveryActions.find((action)=>action.type === 'wait_and_retry');
            expect(waitAction).toBeDefined();
            expect(waitAction?.waitTime).toBe(60);
        });
    });
    describe('Context Handling', ()=>{
        it('should include context in classified errors', ()=>{
            const error = new Error('Test error');
            const context = {
                userId: '123',
                imageCount: 2,
                timestamp: '2023-01-01T00:00:00Z'
            };
            const classified = (0, _errorHandling.classifyTryonError)(error, context);
            expect(classified.context).toEqual(context);
        });
        it('should handle undefined context gracefully', ()=>{
            const error = new Error('Test error');
            const classified = (0, _errorHandling.classifyTryonError)(error);
            expect(classified.context).toBeUndefined();
            expect(classified.originalError).toBe(error);
        });
    });
    describe('Error Chaining', ()=>{
        it('should preserve original error information', ()=>{
            const originalError = new Error('Original message');
            originalError.stack = 'Original stack trace';
            const classified = (0, _errorHandling.classifyTryonError)(originalError);
            expect(classified.originalError).toBe(originalError);
            expect(classified.technicalMessage).toContain('Original message');
        });
        it('should handle non-Error objects', ()=>{
            const errorObject = {
                message: 'Custom error',
                code: 'CUSTOM'
            };
            const classified = (0, _errorHandling.classifyTryonError)(errorObject);
            expect(classified.originalError).toBe(errorObject);
            expect(classified.category).toBe(_errorHandling.ErrorCategory.UNKNOWN);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,