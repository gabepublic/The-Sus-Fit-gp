{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/components/ToastProvider.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, act, waitFor } from '@testing-library/react';\nimport { ToastProvider, useToast } from '../../src/components/ToastProvider';\n\n// Test component that uses the toast\nconst TestComponent = () => {\n  const { showToast } = useToast();\n  \n  return (\n    <div>\n      <button onClick={() => showToast('Test message', 'success')}>\n        Show Success Toast\n      </button>\n      <button onClick={() => showToast('Error message', 'error')}>\n        Show Error Toast\n      </button>\n    </div>\n  );\n};\n\n// Wrapper component for testing\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <ToastProvider>\n    {children}\n  </ToastProvider>\n);\n\ndescribe('ToastProvider', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  it('renders without crashing', () => {\n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n    \n    expect(screen.getByText('Show Success Toast')).toBeInTheDocument();\n    expect(screen.getByText('Show Error Toast')).toBeInTheDocument();\n  });\n\n  it('shows toast when showToast is called', async () => {\n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n\n    const successButton = screen.getByText('Show Success Toast');\n    \n    act(() => {\n      successButton.click();\n    });\n\n    await waitFor(() => {\n      expect(screen.getByText('Test message')).toBeInTheDocument();\n    });\n  });\n\n  it('shows error toast with correct styling', async () => {\n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n\n    const errorButton = screen.getByText('Show Error Toast');\n    \n    act(() => {\n      errorButton.click();\n    });\n\n    await waitFor(() => {\n      const toast = screen.getByText('Error message');\n      expect(toast).toBeInTheDocument();\n      // Check if it has error styling (red background)\n      expect(toast.closest('[class*=\"bg-red-500\"]')).toBeInTheDocument();\n    });\n  });\n\n  it('shows success toast with correct styling', async () => {\n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n\n    const successButton = screen.getByText('Show Success Toast');\n    \n    act(() => {\n      successButton.click();\n    });\n\n    await waitFor(() => {\n      const toast = screen.getByText('Test message');\n      expect(toast).toBeInTheDocument();\n      // Check if it has success styling (green background)\n      expect(toast.closest('[class*=\"bg-green-500\"]')).toBeInTheDocument();\n    });\n  });\n\n  it('auto-dismisses toast after 5 seconds', async () => {\n    render(\n      <TestWrapper>\n        <TestComponent />\n      </TestWrapper>\n    );\n\n    const successButton = screen.getByText('Show Success Toast');\n    \n    act(() => {\n      successButton.click();\n    });\n\n    await waitFor(() => {\n      expect(screen.getByText('Test message')).toBeInTheDocument();\n    });\n\n    // Fast-forward time by 5 seconds\n    act(() => {\n      jest.advanceTimersByTime(5000);\n    });\n\n    await waitFor(() => {\n      expect(screen.queryByText('Test message')).not.toBeInTheDocument();\n    });\n  });\n\n  it('throws error when useToast is used outside provider', () => {\n    // Suppress console.error for this test\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    \n    expect(() => {\n      render(<TestComponent />);\n    }).toThrow('useToast must be used within a ToastProvider');\n    \n    consoleSpy.mockRestore();\n  });\n});\n"],"names":["TestComponent","showToast","useToast","div","button","onClick","TestWrapper","children","ToastProvider","describe","beforeEach","jest","useFakeTimers","afterEach","runOnlyPendingTimers","useRealTimers","it","render","expect","screen","getByText","toBeInTheDocument","successButton","act","click","waitFor","errorButton","toast","closest","advanceTimersByTime","queryByText","not","consoleSpy","spyOn","console","mockImplementation","toThrow","mockRestore"],"mappings":"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"}