{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useImageUpload.ts"],"sourcesContent":["'use client';\n\n// Image Upload Hooks\n// Specialized hooks for handling file upload operations with validation and preview management\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  useImageValidation,\n  useImageMetadata,\n  useImageThumbnail,\n  processImageForTryon,\n  type ImageProcessingResult,\n  type ImageMetadata\n} from '../business-layer';\nimport { fileToBase64 } from '../utils/image';\n\n/**\n * Upload state enum\n */\nexport enum UploadState {\n  IDLE = 'idle',\n  VALIDATING = 'validating',\n  PROCESSING = 'processing',\n  COMPLETE = 'complete',\n  ERROR = 'error'\n}\n\n/**\n * File validation result\n */\nexport interface FileValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  metadata?: ImageMetadata;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  stage: 'validation' | 'processing' | 'thumbnail' | 'complete';\n  percentage: number;\n  message: string;\n}\n\n/**\n * Upload configuration\n */\nexport interface UploadConfig {\n  /** Maximum file size in bytes */\n  maxSizeBytes?: number;\n  /** Allowed file types */\n  allowedTypes?: string[];\n  /** Auto-generate thumbnails */\n  generateThumbnails?: boolean;\n  /** Thumbnail sizes to generate */\n  thumbnailSizes?: number[];\n  /** Enable drag and drop */\n  enableDragDrop?: boolean;\n  /** Auto-process after upload */\n  autoProcess?: boolean;\n  /** Validation options */\n  validation?: {\n    minWidth?: number;\n    minHeight?: number;\n    maxWidth?: number;\n    maxHeight?: number;\n    aspectRatio?: number;\n    aspectRatioTolerance?: number;\n  };\n}\n\n/**\n * Uploaded file information\n */\nexport interface UploadedFile {\n  file: File;\n  preview: string;\n  thumbnails: Record<number, string>;\n  metadata?: ImageMetadata;\n  processedResult?: ImageProcessingResult;\n  uploadId: string;\n  uploadTime: number;\n}\n\n/**\n * Upload error\n */\nexport interface UploadError {\n  type: 'validation' | 'processing' | 'network' | 'unknown';\n  message: string;\n  code?: string;\n  originalError?: Error;\n}\n\n/**\n * Drag and drop state\n */\nexport interface DragDropState {\n  isDragActive: boolean;\n  isDragAccept: boolean;\n  isDragReject: boolean;\n  draggedFiles: File[];\n}\n\n/**\n * Default upload configuration\n */\nconst DEFAULT_CONFIG: Required<UploadConfig> = {\n  maxSizeBytes: 10 * 1024 * 1024, // 10MB\n  allowedTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\n  generateThumbnails: true,\n  thumbnailSizes: [150, 300, 600],\n  enableDragDrop: true,\n  autoProcess: false,\n  validation: {\n    minWidth: 256,\n    minHeight: 256,\n    maxWidth: 4096,\n    maxHeight: 4096,\n    aspectRatio: undefined,\n    aspectRatioTolerance: 0.1\n  }\n};\n\n/**\n * Main image upload hook\n */\nexport function useImageUpload(\n  config: UploadConfig = {},\n  onUpload?: (file: UploadedFile) => void,\n  onError?: (error: UploadError) => void\n) {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // State\n  const [uploadState, setUploadState] = useState<UploadState>(UploadState.IDLE);\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [currentFile, setCurrentFile] = useState<UploadedFile | null>(null);\n  const [progress, setProgress] = useState<UploadProgress | null>(null);\n  const [error, setError] = useState<UploadError | null>(null);\n  const [dragDropState, setDragDropState] = useState<DragDropState>({\n    isDragActive: false,\n    isDragAccept: false,\n    isDragReject: false,\n    draggedFiles: []\n  });\n\n  // Refs\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const uploadIdCounter = useRef(0);\n\n  // Business layer hooks\n  const { data: validationResult } = useImageValidation(currentFile?.file || null, false);\n  const { data: metadata } = useImageMetadata(currentFile?.file || null, false);\n  const { data: thumbnail } = useImageThumbnail(currentFile?.file || null, 150, false);\n\n  // Generate unique upload ID\n  const generateUploadId = useCallback(() => {\n    return `upload_${Date.now()}_${++uploadIdCounter.current}`;\n  }, []);\n\n  // Update progress\n  const updateProgress = useCallback((stage: UploadProgress['stage'], percentage: number, message: string) => {\n    setProgress({ stage, percentage, message });\n  }, []);\n\n  // Handle errors\n  const handleError = useCallback((error: unknown, type: UploadError['type'] = 'unknown') => {\n    const uploadError: UploadError = {\n      type,\n      message: error instanceof Error ? error.message : String(error),\n      originalError: error instanceof Error ? error : undefined\n    };\n\n    setError(uploadError);\n    setUploadState(UploadState.ERROR);\n    onError?.(uploadError);\n  }, [onError]);\n\n  // Validate file\n  const validateFile = useCallback(async (file: File): Promise<FileValidationResult> => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // File type validation\n    if (!finalConfig.allowedTypes.includes(file.type)) {\n      errors.push(`File type ${file.type} is not supported. Allowed types: ${finalConfig.allowedTypes.join(', ')}`);\n    }\n\n    // File size validation\n    if (file.size > finalConfig.maxSizeBytes) {\n      errors.push(`File size ${(file.size / 1024 / 1024).toFixed(2)}MB exceeds limit of ${(finalConfig.maxSizeBytes / 1024 / 1024).toFixed(2)}MB`);\n    }\n\n    // Image dimension validation (requires metadata)\n    try {\n      const imageMetadata = await new Promise<ImageMetadata>((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n          resolve({\n            dimensions: { width: img.naturalWidth, height: img.naturalHeight },\n            fileSize: file.size,\n            fileType: file.type,\n            lastModified: new Date(file.lastModified)\n          });\n        };\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n      });\n\n      const { width, height } = imageMetadata.dimensions;\n      const { validation } = finalConfig;\n\n      if (width < validation.minWidth || height < validation.minHeight) {\n        errors.push(`Image dimensions ${width}x${height} are too small. Minimum: ${validation.minWidth}x${validation.minHeight}`);\n      }\n\n      if (width > validation.maxWidth || height > validation.maxHeight) {\n        errors.push(`Image dimensions ${width}x${height} are too large. Maximum: ${validation.maxWidth}x${validation.maxHeight}`);\n      }\n\n      if (validation.aspectRatio) {\n        const aspectRatio = width / height;\n        const targetRatio = validation.aspectRatio;\n        const tolerance = validation.aspectRatioTolerance;\n        \n        if (Math.abs(aspectRatio - targetRatio) > tolerance) {\n          warnings.push(`Image aspect ratio ${aspectRatio.toFixed(2)} differs from recommended ${targetRatio.toFixed(2)}`);\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        metadata: imageMetadata\n      };\n    } catch (error) {\n      errors.push('Failed to validate image dimensions');\n      return { isValid: false, errors, warnings };\n    }\n  }, [finalConfig]);\n\n  // Generate thumbnails\n  const generateThumbnails = useCallback(async (file: File): Promise<Record<number, string>> => {\n    const thumbnails: Record<number, string> = {};\n\n    if (!finalConfig.generateThumbnails) {\n      return thumbnails;\n    }\n\n    try {\n      for (const size of finalConfig.thumbnailSizes) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) continue;\n\n        const img = new Image();\n        await new Promise((resolve, reject) => {\n          img.onload = resolve;\n          img.onerror = reject;\n          img.src = URL.createObjectURL(file);\n        });\n\n        // Calculate dimensions maintaining aspect ratio\n        const aspectRatio = img.width / img.height;\n        let width = size;\n        let height = size;\n\n        if (aspectRatio > 1) {\n          height = size / aspectRatio;\n        } else {\n          width = size * aspectRatio;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(img, 0, 0, width, height);\n\n        thumbnails[size] = canvas.toDataURL('image/jpeg', 0.8);\n        URL.revokeObjectURL(img.src);\n      }\n    } catch (error) {\n      console.warn('Failed to generate thumbnails:', error);\n    }\n\n    return thumbnails;\n  }, [finalConfig.generateThumbnails, finalConfig.thumbnailSizes]);\n\n  // Process uploaded file\n  const processFile = useCallback(async (file: File): Promise<UploadedFile> => {\n    const uploadId = generateUploadId();\n    \n    setUploadState(UploadState.VALIDATING);\n    updateProgress('validation', 10, 'Validating file...');\n\n    // Validate file\n    const validation = await validateFile(file);\n    if (!validation.isValid) {\n      throw new Error(validation.errors.join(', '));\n    }\n\n    updateProgress('processing', 30, 'Processing image...');\n\n    // Generate preview\n    const preview = URL.createObjectURL(file);\n\n    updateProgress('thumbnail', 60, 'Generating thumbnails...');\n\n    // Generate thumbnails\n    const thumbnails = await generateThumbnails(file);\n\n    updateProgress('complete', 80, 'Finalizing...');\n\n    // Auto-process if enabled\n    let processedResult: ImageProcessingResult | undefined;\n    if (finalConfig.autoProcess) {\n      try {\n        processedResult = await processImageForTryon(file);\n      } catch (error) {\n        console.warn('Auto-processing failed:', error);\n      }\n    }\n\n    const uploadedFile: UploadedFile = {\n      file,\n      preview,\n      thumbnails,\n      metadata: validation.metadata,\n      processedResult,\n      uploadId,\n      uploadTime: Date.now()\n    };\n\n    updateProgress('complete', 100, 'Upload complete');\n    setUploadState(UploadState.COMPLETE);\n\n    return uploadedFile;\n  }, [generateUploadId, updateProgress, validateFile, generateThumbnails, finalConfig.autoProcess]);\n\n  // Handle file upload\n  const uploadFile = useCallback(async (file: File) => {\n    try {\n      setError(null);\n      const uploadedFile = await processFile(file);\n      \n      setUploadedFiles(prev => [...prev, uploadedFile]);\n      setCurrentFile(uploadedFile);\n      onUpload?.(uploadedFile);\n      \n      return uploadedFile;\n    } catch (error) {\n      handleError(error, 'processing');\n      throw error;\n    }\n  }, [processFile, onUpload, handleError]);\n\n  // Handle multiple file uploads\n  const uploadFiles = useCallback(async (files: File[]) => {\n    const results: UploadedFile[] = [];\n    \n    for (const file of files) {\n      try {\n        const result = await uploadFile(file);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to upload file:', file.name, error);\n      }\n    }\n    \n    return results;\n  }, [uploadFile]);\n\n  // Remove uploaded file\n  const removeFile = useCallback((uploadId: string) => {\n    setUploadedFiles(prev => {\n      const updated = prev.filter(f => f.uploadId !== uploadId);\n      const removedFile = prev.find(f => f.uploadId === uploadId);\n      \n      if (removedFile) {\n        URL.revokeObjectURL(removedFile.preview);\n        Object.values(removedFile.thumbnails).forEach(url => {\n          if (url.startsWith('blob:')) {\n            URL.revokeObjectURL(url);\n          }\n        });\n      }\n      \n      return updated;\n    });\n    \n    if (currentFile?.uploadId === uploadId) {\n      setCurrentFile(null);\n    }\n  }, [currentFile]);\n\n  // Clear all files\n  const clearFiles = useCallback(() => {\n    uploadedFiles.forEach(file => {\n      URL.revokeObjectURL(file.preview);\n      Object.values(file.thumbnails).forEach(url => {\n        if (url.startsWith('blob:')) {\n          URL.revokeObjectURL(url);\n        }\n      });\n    });\n    \n    setUploadedFiles([]);\n    setCurrentFile(null);\n    setError(null);\n    setUploadState(UploadState.IDLE);\n    setProgress(null);\n  }, [uploadedFiles]);\n\n  // Trigger file picker\n  const openFilePicker = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  // Handle file input change\n  const handleFileInputChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length > 0) {\n      uploadFiles(files);\n    }\n    // Reset input to allow same file selection\n    event.target.value = '';\n  }, [uploadFiles]);\n\n  // Drag and drop handlers\n  const handleDragEnter = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const files = Array.from(event.dataTransfer.files);\n    const hasValidFiles = files.some(file => finalConfig.allowedTypes.includes(file.type));\n    \n    setDragDropState({\n      isDragActive: true,\n      isDragAccept: hasValidFiles,\n      isDragReject: !hasValidFiles,\n      draggedFiles: files\n    });\n  }, [finalConfig.allowedTypes]);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    setDragDropState({\n      isDragActive: false,\n      isDragAccept: false,\n      isDragReject: false,\n      draggedFiles: []\n    });\n  }, []);\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const files = Array.from(event.dataTransfer.files).filter(file => \n      finalConfig.allowedTypes.includes(file.type)\n    );\n    \n    setDragDropState({\n      isDragActive: false,\n      isDragAccept: false,\n      isDragReject: false,\n      draggedFiles: []\n    });\n    \n    if (files.length > 0) {\n      uploadFiles(files);\n    }\n  }, [finalConfig.allowedTypes, uploadFiles]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => {\n        URL.revokeObjectURL(file.preview);\n        Object.values(file.thumbnails).forEach(url => {\n          if (url.startsWith('blob:')) {\n            URL.revokeObjectURL(url);\n          }\n        });\n      });\n    };\n  }, []);\n\n  return {\n    // State\n    uploadState,\n    uploadedFiles,\n    currentFile,\n    progress,\n    error,\n    dragDropState,\n    \n    // Actions\n    uploadFile,\n    uploadFiles,\n    removeFile,\n    clearFiles,\n    openFilePicker,\n    \n    // File input props\n    fileInputProps: {\n      ref: fileInputRef,\n      type: 'file',\n      accept: finalConfig.allowedTypes.join(','),\n      multiple: true,\n      onChange: handleFileInputChange,\n      style: { display: 'none' }\n    },\n    \n    // Drag and drop props (only if enabled)\n    ...(finalConfig.enableDragDrop ? {\n      dragDropProps: {\n        onDragEnter: handleDragEnter,\n        onDragLeave: handleDragLeave,\n        onDragOver: handleDragOver,\n        onDrop: handleDrop\n      }\n    } : {}),\n    \n    // Utils\n    validateFile,\n    generateThumbnails\n  };\n}\n\n/**\n * Simplified hook for single file upload\n */\nexport function useSingleImageUpload(\n  config: UploadConfig = {},\n  onUpload?: (file: UploadedFile) => void,\n  onError?: (error: UploadError) => void\n) {\n  const upload = useImageUpload(config, onUpload, onError);\n  \n  const uploadSingleFile = useCallback(async (file: File) => {\n    upload.clearFiles(); // Clear previous files\n    return upload.uploadFile(file);\n  }, [upload]);\n  \n  return {\n    ...upload,\n    uploadFile: uploadSingleFile,\n    file: upload.currentFile\n  };\n}\n\n/**\n * Hook for drag and drop only upload\n */\nexport function useDropzoneUpload(\n  config: UploadConfig = {},\n  onUpload?: (files: UploadedFile[]) => void,\n  onError?: (error: UploadError) => void\n) {\n  const upload = useImageUpload(\n    { ...config, enableDragDrop: true },\n    undefined,\n    onError\n  );\n  \n  // Handle batch upload completion\n  useEffect(() => {\n    if (upload.uploadedFiles.length > 0 && upload.uploadState === UploadState.COMPLETE) {\n      onUpload?.(upload.uploadedFiles);\n    }\n  }, [upload.uploadedFiles, upload.uploadState, onUpload]);\n  \n  return {\n    dragDropState: upload.dragDropState,\n    dragDropProps: upload.dragDropProps,\n    uploadedFiles: upload.uploadedFiles,\n    progress: upload.progress,\n    error: upload.error,\n    clearFiles: upload.clearFiles,\n    removeFile: upload.removeFile\n  };\n}"],"names":["UploadState","useDropzoneUpload","useImageUpload","useSingleImageUpload","DEFAULT_CONFIG","maxSizeBytes","allowedTypes","generateThumbnails","thumbnailSizes","enableDragDrop","autoProcess","validation","minWidth","minHeight","maxWidth","maxHeight","aspectRatio","undefined","aspectRatioTolerance","config","onUpload","onError","finalConfig","uploadState","setUploadState","useState","uploadedFiles","setUploadedFiles","currentFile","setCurrentFile","progress","setProgress","error","setError","dragDropState","setDragDropState","isDragActive","isDragAccept","isDragReject","draggedFiles","fileInputRef","useRef","uploadIdCounter","data","validationResult","useImageValidation","file","metadata","useImageMetadata","thumbnail","useImageThumbnail","generateUploadId","useCallback","Date","now","current","updateProgress","stage","percentage","message","handleError","type","uploadError","Error","String","originalError","validateFile","errors","warnings","includes","push","join","size","toFixed","imageMetadata","Promise","resolve","reject","img","Image","onload","dimensions","width","naturalWidth","height","naturalHeight","fileSize","fileType","lastModified","onerror","src","URL","createObjectURL","targetRatio","tolerance","Math","abs","isValid","length","thumbnails","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","revokeObjectURL","console","warn","processFile","uploadId","preview","processedResult","processImageForTryon","uploadedFile","uploadTime","uploadFile","prev","uploadFiles","files","results","result","name","removeFile","updated","filter","f","removedFile","find","Object","values","forEach","url","startsWith","clearFiles","openFilePicker","click","handleFileInputChange","event","Array","from","target","value","handleDragEnter","preventDefault","stopPropagation","dataTransfer","hasValidFiles","some","handleDragLeave","handleDragOver","handleDrop","useEffect","fileInputProps","ref","accept","multiple","onChange","style","display","dragDropProps","onDragEnter","onDragLeave","onDragOver","onDrop","upload","uploadSingleFile"],"mappings":"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"}