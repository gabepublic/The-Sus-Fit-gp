ea6737b47a6a1e8116d8faf480386023
"use strict";
// Mock Next.js Image component
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, className, priority, fill, sizes }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            className: className,
            "data-priority": priority,
            "data-fill": fill,
            "data-sizes": sizes
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _heroimage = require("../../../src/components/ui/hero-image");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('HeroImage', ()=>{
    it('should render with required props', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toBeInTheDocument();
        expect(image).toHaveAttribute('src', '/test-image.jpg');
    });
    it('should render with custom className', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image",
            className: "custom-class"
        }));
        // Find the outer container div that has the custom className
        const container = _react1.screen.getByAltText('Test hero image').closest('div')?.parentElement;
        expect(container).toHaveClass('custom-class');
    });
    it('should render with priority prop', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image",
            priority: true
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toHaveAttribute('data-priority', 'true');
    });
    it('should render without priority by default', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toHaveAttribute('data-priority', 'true'); // default is true
    });
    it('should render with fill prop', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toHaveAttribute('data-fill', 'true');
    });
    it('should render with correct sizes prop', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toHaveAttribute('data-sizes', '(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw');
    });
    it('should have correct CSS classes', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        const image = _react1.screen.getByAltText('Test hero image');
        expect(image).toHaveClass('object-contain', 'drop-shadow-2xl');
    });
    it('should render container with correct classes', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_heroimage.HeroImage, {
            src: "/test-image.jpg",
            alt: "Test hero image"
        }));
        // Find the outer container div that has the main classes
        const container = _react1.screen.getByAltText('Test hero image').closest('div')?.parentElement;
        expect(container).toHaveClass('relative', 'w-full', 'flex', 'items-center', 'justify-center');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL2NvbXBvbmVudHMvdWkvaGVyby1pbWFnZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IEhlcm9JbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2hlcm8taW1hZ2UnO1xuXG4vLyBNb2NrIE5leHQuanMgSW1hZ2UgY29tcG9uZW50XG5qZXN0Lm1vY2soJ25leHQvaW1hZ2UnLCAoKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiBNb2NrSW1hZ2UoeyBzcmMsIGFsdCwgY2xhc3NOYW1lLCBwcmlvcml0eSwgZmlsbCwgc2l6ZXMgfTogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbWcgXG4gICAgICAgIHNyYz17c3JjfSBcbiAgICAgICAgYWx0PXthbHR9IFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgZGF0YS1wcmlvcml0eT17cHJpb3JpdHl9XG4gICAgICAgIGRhdGEtZmlsbD17ZmlsbH1cbiAgICAgICAgZGF0YS1zaXplcz17c2l6ZXN9XG4gICAgICAvPlxuICAgICk7XG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ0hlcm9JbWFnZScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCByZXF1aXJlZCBwcm9wcycsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8SGVyb0ltYWdlIFxuICAgICAgICBzcmM9XCIvdGVzdC1pbWFnZS5qcGdcIiBcbiAgICAgICAgYWx0PVwiVGVzdCBoZXJvIGltYWdlXCIgXG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdUZXN0IGhlcm8gaW1hZ2UnKTtcbiAgICBleHBlY3QoaW1hZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KGltYWdlKS50b0hhdmVBdHRyaWJ1dGUoJ3NyYycsICcvdGVzdC1pbWFnZS5qcGcnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCBjdXN0b20gY2xhc3NOYW1lJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxIZXJvSW1hZ2UgXG4gICAgICAgIHNyYz1cIi90ZXN0LWltYWdlLmpwZ1wiIFxuICAgICAgICBhbHQ9XCJUZXN0IGhlcm8gaW1hZ2VcIlxuICAgICAgICBjbGFzc05hbWU9XCJjdXN0b20tY2xhc3NcIlxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIC8vIEZpbmQgdGhlIG91dGVyIGNvbnRhaW5lciBkaXYgdGhhdCBoYXMgdGhlIGN1c3RvbSBjbGFzc05hbWVcbiAgICBjb25zdCBjb250YWluZXIgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdUZXN0IGhlcm8gaW1hZ2UnKS5jbG9zZXN0KCdkaXYnKT8ucGFyZW50RWxlbWVudDtcbiAgICBleHBlY3QoY29udGFpbmVyKS50b0hhdmVDbGFzcygnY3VzdG9tLWNsYXNzJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggcHJpb3JpdHkgcHJvcCcsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8SGVyb0ltYWdlIFxuICAgICAgICBzcmM9XCIvdGVzdC1pbWFnZS5qcGdcIiBcbiAgICAgICAgYWx0PVwiVGVzdCBoZXJvIGltYWdlXCJcbiAgICAgICAgcHJpb3JpdHk9e3RydWV9XG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdUZXN0IGhlcm8gaW1hZ2UnKTtcbiAgICBleHBlY3QoaW1hZ2UpLnRvSGF2ZUF0dHJpYnV0ZSgnZGF0YS1wcmlvcml0eScsICd0cnVlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGhvdXQgcHJpb3JpdHkgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8SGVyb0ltYWdlIFxuICAgICAgICBzcmM9XCIvdGVzdC1pbWFnZS5qcGdcIiBcbiAgICAgICAgYWx0PVwiVGVzdCBoZXJvIGltYWdlXCJcbiAgICAgIC8+XG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBpbWFnZSA9IHNjcmVlbi5nZXRCeUFsdFRleHQoJ1Rlc3QgaGVybyBpbWFnZScpO1xuICAgIGV4cGVjdChpbWFnZSkudG9IYXZlQXR0cmlidXRlKCdkYXRhLXByaW9yaXR5JywgJ3RydWUnKTsgLy8gZGVmYXVsdCBpcyB0cnVlXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggZmlsbCBwcm9wJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxIZXJvSW1hZ2UgXG4gICAgICAgIHNyYz1cIi90ZXN0LWltYWdlLmpwZ1wiIFxuICAgICAgICBhbHQ9XCJUZXN0IGhlcm8gaW1hZ2VcIlxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIGNvbnN0IGltYWdlID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnVGVzdCBoZXJvIGltYWdlJyk7XG4gICAgZXhwZWN0KGltYWdlKS50b0hhdmVBdHRyaWJ1dGUoJ2RhdGEtZmlsbCcsICd0cnVlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggY29ycmVjdCBzaXplcyBwcm9wJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxIZXJvSW1hZ2UgXG4gICAgICAgIHNyYz1cIi90ZXN0LWltYWdlLmpwZ1wiIFxuICAgICAgICBhbHQ9XCJUZXN0IGhlcm8gaW1hZ2VcIlxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIGNvbnN0IGltYWdlID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnVGVzdCBoZXJvIGltYWdlJyk7XG4gICAgZXhwZWN0KGltYWdlKS50b0hhdmVBdHRyaWJ1dGUoJ2RhdGEtc2l6ZXMnLCAnKG1heC13aWR0aDogNzY4cHgpIDEwMHZ3LCAobWF4LXdpZHRoOiAxMjAwcHgpIDkwdncsIDgwdncnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGNvcnJlY3QgQ1NTIGNsYXNzZXMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPEhlcm9JbWFnZSBcbiAgICAgICAgc3JjPVwiL3Rlc3QtaW1hZ2UuanBnXCIgXG4gICAgICAgIGFsdD1cIlRlc3QgaGVybyBpbWFnZVwiXG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdUZXN0IGhlcm8gaW1hZ2UnKTtcbiAgICBleHBlY3QoaW1hZ2UpLnRvSGF2ZUNsYXNzKCdvYmplY3QtY29udGFpbicsICdkcm9wLXNoYWRvdy0yeGwnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgY29udGFpbmVyIHdpdGggY29ycmVjdCBjbGFzc2VzJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxIZXJvSW1hZ2UgXG4gICAgICAgIHNyYz1cIi90ZXN0LWltYWdlLmpwZ1wiIFxuICAgICAgICBhbHQ9XCJUZXN0IGhlcm8gaW1hZ2VcIlxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIC8vIEZpbmQgdGhlIG91dGVyIGNvbnRhaW5lciBkaXYgdGhhdCBoYXMgdGhlIG1haW4gY2xhc3Nlc1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHNjcmVlbi5nZXRCeUFsdFRleHQoJ1Rlc3QgaGVybyBpbWFnZScpLmNsb3Nlc3QoJ2RpdicpPy5wYXJlbnRFbGVtZW50O1xuICAgIGV4cGVjdChjb250YWluZXIpLnRvSGF2ZUNsYXNzKCdyZWxhdGl2ZScsICd3LWZ1bGwnLCAnZmxleCcsICdpdGVtcy1jZW50ZXInLCAnanVzdGlmeS1jZW50ZXInKTtcbiAgfSk7XG59KTsgIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiTW9ja0ltYWdlIiwic3JjIiwiYWx0IiwiY2xhc3NOYW1lIiwicHJpb3JpdHkiLCJmaWxsIiwic2l6ZXMiLCJpbWciLCJkYXRhLXByaW9yaXR5IiwiZGF0YS1maWxsIiwiZGF0YS1zaXplcyIsImRlc2NyaWJlIiwiaXQiLCJyZW5kZXIiLCJIZXJvSW1hZ2UiLCJpbWFnZSIsInNjcmVlbiIsImdldEJ5QWx0VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwidG9IYXZlQXR0cmlidXRlIiwiY29udGFpbmVyIiwiY2xvc2VzdCIsInBhcmVudEVsZW1lbnQiLCJ0b0hhdmVDbGFzcyJdLCJtYXBwaW5ncyI6IjtBQUlBLCtCQUErQjtBQUMvQkEsS0FBS0MsSUFBSSxDQUFDLGNBQWM7SUFDdEIsT0FBTyxTQUFTQyxVQUFVLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQU87UUFDM0UscUJBQ0UscUJBQUNDO1lBQ0NOLEtBQUtBO1lBQ0xDLEtBQUtBO1lBQ0xDLFdBQVdBO1lBQ1hLLGlCQUFlSjtZQUNmSyxhQUFXSjtZQUNYSyxjQUFZSjs7SUFHbEI7QUFDRjs7Ozs7OERBbEJrQjt3QkFDYTsyQkFDTDs7Ozs7O0FBa0IxQkssU0FBUyxhQUFhO0lBQ3BCQyxHQUFHLHFDQUFxQztRQUN0Q0MsSUFBQUEsY0FBTSxnQkFDSixxQkFBQ0Msb0JBQVM7WUFDUmIsS0FBSTtZQUNKQyxLQUFJOztRQUlSLE1BQU1hLFFBQVFDLGNBQU0sQ0FBQ0MsWUFBWSxDQUFDO1FBQ2xDQyxPQUFPSCxPQUFPSSxpQkFBaUI7UUFDL0JELE9BQU9ILE9BQU9LLGVBQWUsQ0FBQyxPQUFPO0lBQ3ZDO0lBRUFSLEdBQUcsdUNBQXVDO1FBQ3hDQyxJQUFBQSxjQUFNLGdCQUNKLHFCQUFDQyxvQkFBUztZQUNSYixLQUFJO1lBQ0pDLEtBQUk7WUFDSkMsV0FBVTs7UUFJZCw2REFBNkQ7UUFDN0QsTUFBTWtCLFlBQVlMLGNBQU0sQ0FBQ0MsWUFBWSxDQUFDLG1CQUFtQkssT0FBTyxDQUFDLFFBQVFDO1FBQ3pFTCxPQUFPRyxXQUFXRyxXQUFXLENBQUM7SUFDaEM7SUFFQVosR0FBRyxvQ0FBb0M7UUFDckNDLElBQUFBLGNBQU0sZ0JBQ0oscUJBQUNDLG9CQUFTO1lBQ1JiLEtBQUk7WUFDSkMsS0FBSTtZQUNKRSxVQUFVOztRQUlkLE1BQU1XLFFBQVFDLGNBQU0sQ0FBQ0MsWUFBWSxDQUFDO1FBQ2xDQyxPQUFPSCxPQUFPSyxlQUFlLENBQUMsaUJBQWlCO0lBQ2pEO0lBRUFSLEdBQUcsNkNBQTZDO1FBQzlDQyxJQUFBQSxjQUFNLGdCQUNKLHFCQUFDQyxvQkFBUztZQUNSYixLQUFJO1lBQ0pDLEtBQUk7O1FBSVIsTUFBTWEsUUFBUUMsY0FBTSxDQUFDQyxZQUFZLENBQUM7UUFDbENDLE9BQU9ILE9BQU9LLGVBQWUsQ0FBQyxpQkFBaUIsU0FBUyxrQkFBa0I7SUFDNUU7SUFFQVIsR0FBRyxnQ0FBZ0M7UUFDakNDLElBQUFBLGNBQU0sZ0JBQ0oscUJBQUNDLG9CQUFTO1lBQ1JiLEtBQUk7WUFDSkMsS0FBSTs7UUFJUixNQUFNYSxRQUFRQyxjQUFNLENBQUNDLFlBQVksQ0FBQztRQUNsQ0MsT0FBT0gsT0FBT0ssZUFBZSxDQUFDLGFBQWE7SUFDN0M7SUFFQVIsR0FBRyx5Q0FBeUM7UUFDMUNDLElBQUFBLGNBQU0sZ0JBQ0oscUJBQUNDLG9CQUFTO1lBQ1JiLEtBQUk7WUFDSkMsS0FBSTs7UUFJUixNQUFNYSxRQUFRQyxjQUFNLENBQUNDLFlBQVksQ0FBQztRQUNsQ0MsT0FBT0gsT0FBT0ssZUFBZSxDQUFDLGNBQWM7SUFDOUM7SUFFQVIsR0FBRyxtQ0FBbUM7UUFDcENDLElBQUFBLGNBQU0sZ0JBQ0oscUJBQUNDLG9CQUFTO1lBQ1JiLEtBQUk7WUFDSkMsS0FBSTs7UUFJUixNQUFNYSxRQUFRQyxjQUFNLENBQUNDLFlBQVksQ0FBQztRQUNsQ0MsT0FBT0gsT0FBT1MsV0FBVyxDQUFDLGtCQUFrQjtJQUM5QztJQUVBWixHQUFHLGdEQUFnRDtRQUNqREMsSUFBQUEsY0FBTSxnQkFDSixxQkFBQ0Msb0JBQVM7WUFDUmIsS0FBSTtZQUNKQyxLQUFJOztRQUlSLHlEQUF5RDtRQUN6RCxNQUFNbUIsWUFBWUwsY0FBTSxDQUFDQyxZQUFZLENBQUMsbUJBQW1CSyxPQUFPLENBQUMsUUFBUUM7UUFDekVMLE9BQU9HLFdBQVdHLFdBQVcsQ0FBQyxZQUFZLFVBQVUsUUFBUSxnQkFBZ0I7SUFDOUU7QUFDRiJ9