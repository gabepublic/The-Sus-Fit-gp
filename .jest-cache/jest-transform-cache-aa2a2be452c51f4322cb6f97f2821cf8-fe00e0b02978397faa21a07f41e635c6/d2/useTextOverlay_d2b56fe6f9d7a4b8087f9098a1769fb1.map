{"version":3,"names":["cov_2932cru4zt","actualCoverage","s","useInteractiveTextEditor","f","useTextOverlay","useTextPresets","canvasWidth","canvasHeight","canvasId","canvas","_CanvasProvider","useManagedCanvas","state","setState","_react","useState","overlays","activeOverlayId","isEditing","rendererRef","useRef","_textOverlay","createTextOverlayRenderer","generateId","useCallback","Date","now","Math","random","toString","substr","addTextOverlay","config","id","newOverlay","visible","locked","createdAt","updatedAt","prev","updateTextOverlay","configUpdate","map","overlay","b","removeTextOverlay","filter","setActiveOverlay","setOverlayVisibility","setOverlayLocked","renderAllOverlays","context","clearRect","width","height","visibleOverlays","sort","a","getTime","forEach","measurement","current","renderText","o","clearAllOverlays","getOverlayById","find","duplicateOverlay","newId","newConfig","position","x","y","duplicatedOverlay","moveOverlay","newPosition","exportOverlays","JSON","parse","stringify","importOverlays","startEditing","stopEditing","renderer","customPresets","setCustomPresets","presets","TextOverlayUtils","createPresets","calculateOptimalFontSize","text","maxWidth","maxHeight","style","createCustomPreset","name","getCustomPresets","removeCustomPreset","removed","rest","overlayId","onUpdate","setIsEditing","updateText","updateStyle","updatePosition"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTextOverlay.ts"],"sourcesContent":["'use client';\n\n// Text Overlay React Hooks\n// React hooks for managing text overlays on canvas\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas, type ManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  TextOverlayRenderer,\n  TextOverlayUtils,\n  createTextOverlayRenderer,\n  type TextOverlayConfig,\n  type TextMeasurement,\n  type TextStyle,\n  type TextPosition\n} from '../utils/textOverlay';\n\n/**\n * Text overlay item with unique ID\n */\nexport interface TextOverlayItem {\n  id: string;\n  config: TextOverlayConfig;\n  measurement?: TextMeasurement;\n  visible: boolean;\n  locked: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Text overlay manager state\n */\nexport interface TextOverlayState {\n  overlays: TextOverlayItem[];\n  activeOverlayId: string | null;\n  isEditing: boolean;\n}\n\n/**\n * Hook for managing text overlays on a canvas\n */\nexport function useTextOverlay(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: ManagedCanvas;\n  renderer: TextOverlayRenderer;\n  overlays: TextOverlayItem[];\n  activeOverlayId: string | null;\n  isEditing: boolean;\n  addTextOverlay: (config: Omit<TextOverlayConfig, 'text'> & { text: string }) => string;\n  updateTextOverlay: (id: string, config: Partial<TextOverlayConfig>) => void;\n  removeTextOverlay: (id: string) => void;\n  setActiveOverlay: (id: string | null) => void;\n  setOverlayVisibility: (id: string, visible: boolean) => void;\n  setOverlayLocked: (id: string, locked: boolean) => void;\n  renderAllOverlays: () => void;\n  clearAllOverlays: () => void;\n  getOverlayById: (id: string) => TextOverlayItem | undefined;\n  duplicateOverlay: (id: string) => string | null;\n  moveOverlay: (id: string, newPosition: Partial<TextPosition>) => void;\n  exportOverlays: () => TextOverlayItem[];\n  importOverlays: (overlays: TextOverlayItem[]) => void;\n  startEditing: () => void;\n  stopEditing: () => void;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const [state, setState] = useState<TextOverlayState>({\n    overlays: [],\n    activeOverlayId: null,\n    isEditing: false\n  });\n\n  const rendererRef = useRef<TextOverlayRenderer>(createTextOverlayRenderer(canvas));\n\n  const generateId = useCallback(() => {\n    return `text-overlay-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  const addTextOverlay = useCallback((config: Omit<TextOverlayConfig, 'text'> & { text: string }): string => {\n    const id = generateId();\n    const now = new Date();\n    \n    const newOverlay: TextOverlayItem = {\n      id,\n      config: config as TextOverlayConfig,\n      visible: true,\n      locked: false,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    setState(prev => ({\n      ...prev,\n      overlays: [...prev.overlays, newOverlay],\n      activeOverlayId: id\n    }));\n\n    return id;\n  }, [generateId]);\n\n  const updateTextOverlay = useCallback((id: string, configUpdate: Partial<TextOverlayConfig>) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay => \n        overlay.id === id \n          ? {\n              ...overlay,\n              config: { ...overlay.config, ...configUpdate },\n              updatedAt: new Date()\n            }\n          : overlay\n      )\n    }));\n  }, []);\n\n  const removeTextOverlay = useCallback((id: string) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.filter(overlay => overlay.id !== id),\n      activeOverlayId: prev.activeOverlayId === id ? null : prev.activeOverlayId\n    }));\n  }, []);\n\n  const setActiveOverlay = useCallback((id: string | null) => {\n    setState(prev => ({ ...prev, activeOverlayId: id }));\n  }, []);\n\n  const setOverlayVisibility = useCallback((id: string, visible: boolean) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id ? { ...overlay, visible, updatedAt: new Date() } : overlay\n      )\n    }));\n  }, []);\n\n  const setOverlayLocked = useCallback((id: string, locked: boolean) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id ? { ...overlay, locked, updatedAt: new Date() } : overlay\n      )\n    }));\n  }, []);\n\n  const renderAllOverlays = useCallback(() => {\n    // Clear previous overlays\n    canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n\n    // Render visible overlays in order\n    const visibleOverlays = state.overlays\n      .filter(overlay => overlay.visible)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n\n    visibleOverlays.forEach(overlay => {\n      const measurement = rendererRef.current.renderText(overlay.config);\n      \n      // Update overlay with measurement\n      setState(prev => ({\n        ...prev,\n        overlays: prev.overlays.map(o => \n          o.id === overlay.id ? { ...o, measurement } : o\n        )\n      }));\n    });\n  }, [canvas, state.overlays]);\n\n  const clearAllOverlays = useCallback(() => {\n    canvas.context.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n    setState(prev => ({ ...prev, overlays: [], activeOverlayId: null }));\n  }, [canvas]);\n\n  const getOverlayById = useCallback((id: string): TextOverlayItem | undefined => {\n    return state.overlays.find(overlay => overlay.id === id);\n  }, [state.overlays]);\n\n  const duplicateOverlay = useCallback((id: string): string | null => {\n    const overlay = getOverlayById(id);\n    if (!overlay) return null;\n\n    const newId = generateId();\n    const now = new Date();\n    \n    // Offset position slightly\n    const newConfig = {\n      ...overlay.config,\n      position: {\n        ...overlay.config.position,\n        x: overlay.config.position.x + 20,\n        y: overlay.config.position.y + 20\n      }\n    };\n\n    const duplicatedOverlay: TextOverlayItem = {\n      id: newId,\n      config: newConfig,\n      visible: true,\n      locked: false,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    setState(prev => ({\n      ...prev,\n      overlays: [...prev.overlays, duplicatedOverlay],\n      activeOverlayId: newId\n    }));\n\n    return newId;\n  }, [getOverlayById, generateId]);\n\n  const moveOverlay = useCallback((id: string, newPosition: Partial<TextPosition>) => {\n    setState(prev => ({\n      ...prev,\n      overlays: prev.overlays.map(overlay =>\n        overlay.id === id\n          ? {\n              ...overlay,\n              config: {\n                ...overlay.config,\n                position: { ...overlay.config.position, ...newPosition }\n              },\n              updatedAt: new Date()\n            }\n          : overlay\n      )\n    }));\n  }, []);\n\n  const exportOverlays = useCallback((): TextOverlayItem[] => {\n    return JSON.parse(JSON.stringify(state.overlays));\n  }, [state.overlays]);\n\n  const importOverlays = useCallback((overlays: TextOverlayItem[]) => {\n    setState(prev => ({\n      ...prev,\n      overlays: overlays.map(overlay => ({\n        ...overlay,\n        id: generateId(), // Generate new IDs to avoid conflicts\n        createdAt: new Date(overlay.createdAt),\n        updatedAt: new Date(overlay.updatedAt)\n      })),\n      activeOverlayId: null\n    }));\n  }, [generateId]);\n\n  const startEditing = useCallback(() => {\n    setState(prev => ({ ...prev, isEditing: true }));\n  }, []);\n\n  const stopEditing = useCallback(() => {\n    setState(prev => ({ ...prev, isEditing: false }));\n  }, []);\n\n  return {\n    canvas,\n    renderer: rendererRef.current,\n    overlays: state.overlays,\n    activeOverlayId: state.activeOverlayId,\n    isEditing: state.isEditing,\n    addTextOverlay,\n    updateTextOverlay,\n    removeTextOverlay,\n    setActiveOverlay,\n    setOverlayVisibility,\n    setOverlayLocked,\n    renderAllOverlays,\n    clearAllOverlays,\n    getOverlayById,\n    duplicateOverlay,\n    moveOverlay,\n    exportOverlays,\n    importOverlays,\n    startEditing,\n    stopEditing\n  };\n}\n\n/**\n * Hook for text style presets and utilities\n */\nexport function useTextPresets(): {\n  presets: ReturnType<typeof TextOverlayUtils.createPresets>;\n  calculateOptimalFontSize: (\n    text: string,\n    maxWidth: number,\n    maxHeight: number,\n    style: TextStyle,\n    canvas: HTMLCanvasElement\n  ) => number;\n  createCustomPreset: (name: string, style: TextStyle) => void;\n  getCustomPresets: () => Record<string, { style: TextStyle }>;\n  removeCustomPreset: (name: string) => void;\n} {\n  const [customPresets, setCustomPresets] = useState<Record<string, { style: TextStyle }>>({});\n\n  const presets = TextOverlayUtils.createPresets();\n\n  const calculateOptimalFontSize = useCallback((\n    text: string,\n    maxWidth: number,\n    maxHeight: number,\n    style: TextStyle,\n    canvas: HTMLCanvasElement\n  ) => {\n    return TextOverlayUtils.calculateOptimalFontSize(text, maxWidth, maxHeight, style, canvas);\n  }, []);\n\n  const createCustomPreset = useCallback((name: string, style: TextStyle) => {\n    setCustomPresets(prev => ({\n      ...prev,\n      [name]: { style }\n    }));\n  }, []);\n\n  const getCustomPresets = useCallback(() => {\n    return customPresets;\n  }, [customPresets]);\n\n  const removeCustomPreset = useCallback((name: string) => {\n    setCustomPresets(prev => {\n      const { [name]: removed, ...rest } = prev;\n      return rest;\n    });\n  }, []);\n\n  return {\n    presets,\n    calculateOptimalFontSize,\n    createCustomPreset,\n    getCustomPresets,\n    removeCustomPreset\n  };\n}\n\n/**\n * Hook for interactive text editing\n */\nexport function useInteractiveTextEditor(\n  canvas: ManagedCanvas,\n  overlayId: string,\n  onUpdate: (config: Partial<TextOverlayConfig>) => void\n): {\n  isEditing: boolean;\n  startEditing: () => void;\n  stopEditing: () => void;\n  updateText: (text: string) => void;\n  updateStyle: (style: Partial<TextStyle>) => void;\n  updatePosition: (position: Partial<TextPosition>) => void;\n} {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n  }, []);\n\n  const stopEditing = useCallback(() => {\n    setIsEditing(false);\n  }, []);\n\n  const updateText = useCallback((text: string) => {\n    onUpdate({ text });\n  }, [onUpdate]);\n\n  const updateStyle = useCallback((style: Partial<TextStyle>) => {\n    onUpdate({ style });\n  }, [onUpdate]);\n\n  const updatePosition = useCallback((position: Partial<TextPosition>) => {\n    onUpdate({ position: { x: 0, y: 0, ...position } });\n  }, [onUpdate]);\n\n  return {\n    isEditing,\n    startEditing,\n    stopEditing,\n    updateText,\n    updateStyle,\n    updatePosition\n  };\n}"],"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","ignoreList":[]}