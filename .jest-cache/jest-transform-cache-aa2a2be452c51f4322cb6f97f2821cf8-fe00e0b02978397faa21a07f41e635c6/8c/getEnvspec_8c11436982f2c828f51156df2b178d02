608f06754ac6c24a29482655c12caf17
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _getEnv = require("../src/lib/getEnv");
describe('getEnv', ()=>{
    const originalEnv = process.env;
    beforeEach(()=>{
        // Reset process.env before each test
        process.env = {
            ...originalEnv
        };
    });
    afterAll(()=>{
        // Restore original process.env after all tests
        process.env = originalEnv;
    });
    describe('getEnv', ()=>{
        it('should return OpenAI environment variables when API key is present', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = 'test-api-key-123';
            process.env.OPENAI_MODEL = 'gpt-4';
            // Act
            const result = (0, _getEnv.getEnv)();
            // Assert
            expect(result).toEqual({
                key: 'test-api-key-123',
                model: 'gpt-4'
            });
        });
        it('should use default model when OPENAI_MODEL is not set', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = 'test-api-key-123';
            delete process.env.OPENAI_MODEL;
            // Act
            const result = (0, _getEnv.getEnv)();
            // Assert
            expect(result).toEqual({
                key: 'test-api-key-123',
                model: 'gpt-image-1'
            });
        });
        it('should use default model when OPENAI_MODEL is empty string', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = 'test-api-key-123';
            process.env.OPENAI_MODEL = '';
            // Act
            const result = (0, _getEnv.getEnv)();
            // Assert
            expect(result).toEqual({
                key: 'test-api-key-123',
                model: 'gpt-image-1'
            });
        });
        it('should throw error when OPENAI_API_KEY is not set', ()=>{
            // Arrange
            delete process.env.OPENAI_API_KEY;
            // Act & Assert
            expect(()=>(0, _getEnv.getEnv)()).toThrow('OPENAI_API_KEY not found');
        });
        it('should throw error when OPENAI_API_KEY is empty string', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = '';
            // Act & Assert
            expect(()=>(0, _getEnv.getEnv)()).toThrow('OPENAI_API_KEY not found');
        });
        it('should throw error when OPENAI_API_KEY is only whitespace', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = '   ';
            // Act & Assert
            expect(()=>(0, _getEnv.getEnv)()).toThrow('OPENAI_API_KEY not found');
        });
    });
    describe('getEnvOptional', ()=>{
        it('should return OpenAI environment variables when API key is present', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = 'test-api-key-123';
            process.env.OPENAI_MODEL = 'gpt-4';
            // Act
            const result = (0, _getEnv.getEnvOptional)();
            // Assert
            expect(result).toEqual({
                key: 'test-api-key-123',
                model: 'gpt-4'
            });
        });
        it('should use default model when OPENAI_MODEL is not set', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = 'test-api-key-123';
            delete process.env.OPENAI_MODEL;
            // Act
            const result = (0, _getEnv.getEnvOptional)();
            // Assert
            expect(result).toEqual({
                key: 'test-api-key-123',
                model: 'gpt-image-1'
            });
        });
        it('should return undefined when OPENAI_API_KEY is not set', ()=>{
            // Arrange
            delete process.env.OPENAI_API_KEY;
            // Act
            const result = (0, _getEnv.getEnvOptional)();
            // Assert
            expect(result).toBeUndefined();
        });
        it('should return undefined when OPENAI_API_KEY is empty string', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = '';
            // Act
            const result = (0, _getEnv.getEnvOptional)();
            // Assert
            expect(result).toBeUndefined();
        });
        it('should return undefined when OPENAI_API_KEY is only whitespace', ()=>{
            // Arrange
            process.env.OPENAI_API_KEY = '   ';
            // Act
            const result = (0, _getEnv.getEnvOptional)();
            // Assert
            expect(result).toBeUndefined();
        });
    });
    describe('TypeScript interface', ()=>{
        it('should have correct OpenAIEnv interface', ()=>{
            // Arrange
            const mockEnv = {
                key: 'test-key',
                model: 'test-model'
            };
            // Act & Assert
            expect(mockEnv).toHaveProperty('key');
            expect(mockEnv).toHaveProperty('model');
            expect(typeof mockEnv.key).toBe('string');
            expect(typeof mockEnv.model).toBe('string');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL2dldEVudi5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVudiwgZ2V0RW52T3B0aW9uYWwsIE9wZW5BSUVudiB9IGZyb20gJy4uL3NyYy9saWIvZ2V0RW52JztcblxuZGVzY3JpYmUoJ2dldEVudicsICgpID0+IHtcbiAgY29uc3Qgb3JpZ2luYWxFbnYgPSBwcm9jZXNzLmVudjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBSZXNldCBwcm9jZXNzLmVudiBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgcHJvY2Vzcy5lbnYgPSB7IC4uLm9yaWdpbmFsRW52IH07XG4gIH0pO1xuXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIHByb2Nlc3MuZW52IGFmdGVyIGFsbCB0ZXN0c1xuICAgIHByb2Nlc3MuZW52ID0gb3JpZ2luYWxFbnY7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRFbnYnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gT3BlbkFJIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aGVuIEFQSSBrZXkgaXMgcHJlc2VudCcsICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZID0gJ3Rlc3QtYXBpLWtleS0xMjMnO1xuICAgICAgcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMID0gJ2dwdC00JztcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRFbnYoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAga2V5OiAndGVzdC1hcGkta2V5LTEyMycsXG4gICAgICAgIG1vZGVsOiAnZ3B0LTQnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBkZWZhdWx0IG1vZGVsIHdoZW4gT1BFTkFJX01PREVMIGlzIG5vdCBzZXQnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSA9ICd0ZXN0LWFwaS1rZXktMTIzJztcbiAgICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUw7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RW52KCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIGtleTogJ3Rlc3QtYXBpLWtleS0xMjMnLFxuICAgICAgICBtb2RlbDogJ2dwdC1pbWFnZS0xJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1c2UgZGVmYXVsdCBtb2RlbCB3aGVuIE9QRU5BSV9NT0RFTCBpcyBlbXB0eSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSA9ICd0ZXN0LWFwaS1rZXktMTIzJztcbiAgICAgIHByb2Nlc3MuZW52Lk9QRU5BSV9NT0RFTCA9ICcnO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldEVudigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICBrZXk6ICd0ZXN0LWFwaS1rZXktMTIzJyxcbiAgICAgICAgbW9kZWw6ICdncHQtaW1hZ2UtMScsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBPUEVOQUlfQVBJX0tFWSBpcyBub3Qgc2V0JywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGV4cGVjdCgoKSA9PiBnZXRFbnYoKSkudG9UaHJvdygnT1BFTkFJX0FQSV9LRVkgbm90IGZvdW5kJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIHdoZW4gT1BFTkFJX0FQSV9LRVkgaXMgZW1wdHkgc3RyaW5nJywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkgPSAnJztcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBleHBlY3QoKCkgPT4gZ2V0RW52KCkpLnRvVGhyb3coJ09QRU5BSV9BUElfS0VZIG5vdCBmb3VuZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIE9QRU5BSV9BUElfS0VZIGlzIG9ubHkgd2hpdGVzcGFjZScsICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZID0gJyAgICc7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgZXhwZWN0KCgpID0+IGdldEVudigpKS50b1Rocm93KCdPUEVOQUlfQVBJX0tFWSBub3QgZm91bmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEVudk9wdGlvbmFsJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIE9wZW5BSSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgd2hlbiBBUEkga2V5IGlzIHByZXNlbnQnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSA9ICd0ZXN0LWFwaS1rZXktMTIzJztcbiAgICAgIHByb2Nlc3MuZW52Lk9QRU5BSV9NT0RFTCA9ICdncHQtNCc7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RW52T3B0aW9uYWwoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAga2V5OiAndGVzdC1hcGkta2V5LTEyMycsXG4gICAgICAgIG1vZGVsOiAnZ3B0LTQnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBkZWZhdWx0IG1vZGVsIHdoZW4gT1BFTkFJX01PREVMIGlzIG5vdCBzZXQnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSA9ICd0ZXN0LWFwaS1rZXktMTIzJztcbiAgICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUw7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RW52T3B0aW9uYWwoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAga2V5OiAndGVzdC1hcGkta2V5LTEyMycsXG4gICAgICAgIG1vZGVsOiAnZ3B0LWltYWdlLTEnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2hlbiBPUEVOQUlfQVBJX0tFWSBpcyBub3Qgc2V0JywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldEVudk9wdGlvbmFsKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdW5kZWZpbmVkIHdoZW4gT1BFTkFJX0FQSV9LRVkgaXMgZW1wdHkgc3RyaW5nJywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkgPSAnJztcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRFbnZPcHRpb25hbCgpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCB3aGVuIE9QRU5BSV9BUElfS0VZIGlzIG9ubHkgd2hpdGVzcGFjZScsICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZID0gJyAgICc7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RW52T3B0aW9uYWwoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUeXBlU2NyaXB0IGludGVyZmFjZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhdmUgY29ycmVjdCBPcGVuQUlFbnYgaW50ZXJmYWNlJywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja0VudjogT3BlbkFJRW52ID0ge1xuICAgICAgICBrZXk6ICd0ZXN0LWtleScsXG4gICAgICAgIG1vZGVsOiAndGVzdC1tb2RlbCcsXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGV4cGVjdChtb2NrRW52KS50b0hhdmVQcm9wZXJ0eSgna2V5Jyk7XG4gICAgICBleHBlY3QobW9ja0VudikudG9IYXZlUHJvcGVydHkoJ21vZGVsJyk7XG4gICAgICBleHBlY3QodHlwZW9mIG1vY2tFbnYua2V5KS50b0JlKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgbW9ja0Vudi5tb2RlbCkudG9CZSgnc3RyaW5nJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7ICJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIm9yaWdpbmFsRW52IiwicHJvY2VzcyIsImVudiIsImJlZm9yZUVhY2giLCJhZnRlckFsbCIsIml0IiwiT1BFTkFJX0FQSV9LRVkiLCJPUEVOQUlfTU9ERUwiLCJyZXN1bHQiLCJnZXRFbnYiLCJleHBlY3QiLCJ0b0VxdWFsIiwia2V5IiwibW9kZWwiLCJ0b1Rocm93IiwiZ2V0RW52T3B0aW9uYWwiLCJ0b0JlVW5kZWZpbmVkIiwibW9ja0VudiIsInRvSGF2ZVByb3BlcnR5IiwidG9CZSJdLCJtYXBwaW5ncyI6Ijs7Ozt3QkFBa0Q7QUFFbERBLFNBQVMsVUFBVTtJQUNqQixNQUFNQyxjQUFjQyxRQUFRQyxHQUFHO0lBRS9CQyxXQUFXO1FBQ1QscUNBQXFDO1FBQ3JDRixRQUFRQyxHQUFHLEdBQUc7WUFBRSxHQUFHRixXQUFXO1FBQUM7SUFDakM7SUFFQUksU0FBUztRQUNQLCtDQUErQztRQUMvQ0gsUUFBUUMsR0FBRyxHQUFHRjtJQUNoQjtJQUVBRCxTQUFTLFVBQVU7UUFDakJNLEdBQUcsc0VBQXNFO1lBQ3ZFLFVBQVU7WUFDVkosUUFBUUMsR0FBRyxDQUFDSSxjQUFjLEdBQUc7WUFDN0JMLFFBQVFDLEdBQUcsQ0FBQ0ssWUFBWSxHQUFHO1lBRTNCLE1BQU07WUFDTixNQUFNQyxTQUFTQyxJQUFBQSxjQUFNO1lBRXJCLFNBQVM7WUFDVEMsT0FBT0YsUUFBUUcsT0FBTyxDQUFDO2dCQUNyQkMsS0FBSztnQkFDTEMsT0FBTztZQUNUO1FBQ0Y7UUFFQVIsR0FBRyx5REFBeUQ7WUFDMUQsVUFBVTtZQUNWSixRQUFRQyxHQUFHLENBQUNJLGNBQWMsR0FBRztZQUM3QixPQUFPTCxRQUFRQyxHQUFHLENBQUNLLFlBQVk7WUFFL0IsTUFBTTtZQUNOLE1BQU1DLFNBQVNDLElBQUFBLGNBQU07WUFFckIsU0FBUztZQUNUQyxPQUFPRixRQUFRRyxPQUFPLENBQUM7Z0JBQ3JCQyxLQUFLO2dCQUNMQyxPQUFPO1lBQ1Q7UUFDRjtRQUVBUixHQUFHLDhEQUE4RDtZQUMvRCxVQUFVO1lBQ1ZKLFFBQVFDLEdBQUcsQ0FBQ0ksY0FBYyxHQUFHO1lB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