{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/components/ToastProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport * as Toast from '@radix-ui/react-toast';\n\n// Toast item interface\ninterface ToastItem {\n  id: string;\n  message: string;\n  variant: 'error' | 'success' | 'info' | 'warning';\n}\n\n// Context interface\ninterface ToastContextType {\n  showToast: (message: string, variant?: ToastItem['variant']) => void;\n}\n\n// Create context\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\n// Hook to use toast context\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n// ToastProvider component\ninterface ToastProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastItem[]>([]);\n\n  const showToast = useCallback((message: string, variant: ToastItem['variant'] = 'error') => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newToast: ToastItem = { id, message, variant };\n    \n    setToasts(prev => [...prev, newToast]);\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  // Get variant-specific styles\n  const getVariantStyles = (variant: ToastItem['variant']) => {\n    switch (variant) {\n      case 'success':\n        return 'bg-green-500 text-white border-green-600';\n      case 'warning':\n        return 'bg-yellow-500 text-white border-yellow-600';\n      case 'info':\n        return 'bg-blue-500 text-white border-blue-600';\n      case 'error':\n      default:\n        return 'bg-red-500 text-white border-red-600';\n    }\n  };\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      <Toast.Provider\n        swipeDirection=\"right\"\n        duration={5000}\n      >\n        {children}\n        \n        {/* Toast viewport */}\n        <Toast.Viewport className=\"fixed top-4 right-4 z-50 flex flex-col gap-2 w-full max-w-sm\" />\n        \n        {/* Render toasts */}\n        {toasts.map((toast) => (\n          <Toast.Root\n            key={toast.id}\n            className={`\n              flex items-center justify-between p-4 rounded-lg shadow-lg border\n              ${getVariantStyles(toast.variant)}\n              data-[state=open]:animate-slideDown\n              data-[state=closed]:animate-slideUp\n              data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)]\n              data-[swipe=cancel]:translate-x-0\n              data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]\n            `}\n            onOpenChange={(open) => {\n              if (!open) {\n                removeToast(toast.id);\n              }\n            }}\n          >\n            <div className=\"flex-1\">\n              <Toast.Title className=\"text-sm font-medium\">\n                {toast.message}\n              </Toast.Title>\n            </div>\n            \n            <Toast.Close className=\"ml-4 text-white/80 hover:text-white transition-colors\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                <path\n                  d=\"M12 4L4 12M4 4L12 12\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n            </Toast.Close>\n          </Toast.Root>\n        ))}\n      </Toast.Provider>\n    </ToastContext.Provider>\n  );\n};\n"],"names":["ToastProvider","useToast","ToastContext","createContext","undefined","context","useContext","Error","children","toasts","setToasts","useState","showToast","useCallback","message","variant","id","Math","random","toString","substr","newToast","prev","removeToast","filter","toast","getVariantStyles","Provider","value","Toast","swipeDirection","duration","Viewport","className","map","Root","onOpenChange","open","div","Title","Close","svg","width","height","viewBox","fill","path","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin"],"mappings":"AAAA;;;;;;;;;;;;IAkCaA,aAAa;eAAbA;;IAbAC,QAAQ;eAARA;;;;+DAnB2D;oEACjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcvB,iBAAiB;AACjB,MAAMC,6BAAeC,IAAAA,oBAAa,EAA+BC;AAG1D,MAAMH,WAAW;IACtB,MAAMI,UAAUC,IAAAA,iBAAU,EAACJ;IAC3B,IAAI,CAACG,SAAS;QACZ,MAAM,IAAIE,MAAM;IAClB;IACA,OAAOF;AACT;AAOO,MAAML,gBAA8C,CAAC,EAAEQ,QAAQ,EAAE;IACtE,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAc,EAAE;IAEpD,MAAMC,YAAYC,IAAAA,kBAAW,EAAC,CAACC,SAAiBC,UAAgC,OAAO;QACrF,MAAMC,KAAKC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG;QAChD,MAAMC,WAAsB;YAAEL;YAAIF;YAASC;QAAQ;QAEnDL,UAAUY,CAAAA,OAAQ;mBAAIA;gBAAMD;aAAS;IACvC,GAAG,EAAE;IAEL,MAAME,cAAcV,IAAAA,kBAAW,EAAC,CAACG;QAC/BN,UAAUY,CAAAA,OAAQA,KAAKE,MAAM,CAACC,CAAAA,QAASA,MAAMT,EAAE,KAAKA;IACtD,GAAG,EAAE;IAEL,8BAA8B;IAC9B,MAAMU,mBAAmB,CAACX;QACxB,OAAQA;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;YACL;gBACE,OAAO;QACX;IACF;IAEA,qBACE,qBAACb,aAAayB,QAAQ;QAACC,OAAO;YAAEhB;QAAU;kBACxC,cAAA,sBAACiB,YAAMF,QAAQ;YACbG,gBAAe;YACfC,UAAU;;gBAETvB;8BAGD,qBAACqB,YAAMG,QAAQ;oBAACC,WAAU;;gBAGzBxB,OAAOyB,GAAG,CAAC,CAACT,sBACX,sBAACI,YAAMM,IAAI;wBAETF,WAAW,CAAC;;cAEV,EAAEP,iBAAiBD,MAAMV,OAAO,EAAE;;;;;;YAMpC,CAAC;wBACDqB,cAAc,CAACC;4BACb,IAAI,CAACA,MAAM;gCACTd,YAAYE,MAAMT,EAAE;4BACtB;wBACF;;0CAEA,qBAACsB;gCAAIL,WAAU;0CACb,cAAA,qBAACJ,YAAMU,KAAK;oCAACN,WAAU;8CACpBR,MAAMX,OAAO;;;0CAIlB,qBAACe,YAAMW,KAAK;gCAACP,WAAU;0CACrB,cAAA,qBAACQ;oCAAIC,OAAM;oCAAKC,QAAO;oCAAKC,SAAQ;oCAAYC,MAAK;8CACnD,cAAA,qBAACC;wCACCC,GAAE;wCACFC,QAAO;wCACPC,aAAY;wCACZC,eAAc;wCACdC,gBAAe;;;;;uBA7BhB1B,MAAMT,EAAE;;;;AAsCzB"}