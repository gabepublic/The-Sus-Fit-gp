1bb421867ef862967a79f55548b52482
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UploadState: function() {
        return UploadState;
    },
    useDropzoneUpload: function() {
        return useDropzoneUpload;
    },
    useImageUpload: function() {
        return useImageUpload;
    },
    useSingleImageUpload: function() {
        return useSingleImageUpload;
    }
});
const _react = require("react");
const _businesslayer = require("../business-layer");
var UploadState = /*#__PURE__*/ function(UploadState) {
    UploadState["IDLE"] = "idle";
    UploadState["VALIDATING"] = "validating";
    UploadState["PROCESSING"] = "processing";
    UploadState["COMPLETE"] = "complete";
    UploadState["ERROR"] = "error";
    return UploadState;
}({});
/**
 * Default upload configuration
 */ const DEFAULT_CONFIG = {
    maxSizeBytes: 10 * 1024 * 1024,
    allowedTypes: [
        'image/jpeg',
        'image/png',
        'image/webp',
        'image/gif'
    ],
    generateThumbnails: true,
    thumbnailSizes: [
        150,
        300,
        600
    ],
    enableDragDrop: true,
    autoProcess: false,
    validation: {
        minWidth: 256,
        minHeight: 256,
        maxWidth: 4096,
        maxHeight: 4096,
        aspectRatio: undefined,
        aspectRatioTolerance: 0.1
    }
};
function useImageUpload(config = {}, onUpload, onError) {
    const finalConfig = {
        ...DEFAULT_CONFIG,
        ...config
    };
    // State
    const [uploadState, setUploadState] = (0, _react.useState)("idle");
    const [uploadedFiles, setUploadedFiles] = (0, _react.useState)([]);
    const [currentFile, setCurrentFile] = (0, _react.useState)(null);
    const [progress, setProgress] = (0, _react.useState)(null);
    const [error, setError] = (0, _react.useState)(null);
    const [dragDropState, setDragDropState] = (0, _react.useState)({
        isDragActive: false,
        isDragAccept: false,
        isDragReject: false,
        draggedFiles: []
    });
    // Refs
    const fileInputRef = (0, _react.useRef)(null);
    const uploadIdCounter = (0, _react.useRef)(0);
    // Business layer hooks
    const { data: validationResult } = (0, _businesslayer.useImageValidation)(currentFile?.file || null, false);
    const { data: metadata } = (0, _businesslayer.useImageMetadata)(currentFile?.file || null, false);
    const { data: thumbnail } = (0, _businesslayer.useImageThumbnail)(currentFile?.file || null, 150, false);
    // Generate unique upload ID
    const generateUploadId = (0, _react.useCallback)(()=>{
        return `upload_${Date.now()}_${++uploadIdCounter.current}`;
    }, []);
    // Update progress
    const updateProgress = (0, _react.useCallback)((stage, percentage, message)=>{
        setProgress({
            stage,
            percentage,
            message
        });
    }, []);
    // Handle errors
    const handleError = (0, _react.useCallback)((error, type = 'unknown')=>{
        const uploadError = {
            type,
            message: error instanceof Error ? error.message : String(error),
            originalError: error instanceof Error ? error : undefined
        };
        setError(uploadError);
        setUploadState("error");
        onError?.(uploadError);
    }, [
        onError
    ]);
    // Validate file
    const validateFile = (0, _react.useCallback)(async (file)=>{
        const errors = [];
        const warnings = [];
        // File type validation
        if (!finalConfig.allowedTypes.includes(file.type)) {
            errors.push(`File type ${file.type} is not supported. Allowed types: ${finalConfig.allowedTypes.join(', ')}`);
        }
        // File size validation
        if (file.size > finalConfig.maxSizeBytes) {
            errors.push(`File size ${(file.size / 1024 / 1024).toFixed(2)}MB exceeds limit of ${(finalConfig.maxSizeBytes / 1024 / 1024).toFixed(2)}MB`);
        }
        // Image dimension validation (requires metadata)
        try {
            const imageMetadata = await new Promise((resolve, reject)=>{
                const img = new Image();
                img.onload = ()=>{
                    resolve({
                        dimensions: {
                            width: img.naturalWidth,
                            height: img.naturalHeight
                        },
                        format: file.type,
                        size: file.size
                    });
                };
                img.onerror = reject;
                img.src = URL.createObjectURL(file);
            });
            const { width, height } = imageMetadata.dimensions;
            const { validation } = finalConfig;
            if (validation.minWidth && width < validation.minWidth || validation.minHeight && height < validation.minHeight) {
                errors.push(`Image dimensions ${width}x${height} are too small. Minimum: ${validation.minWidth || 0}x${validation.minHeight || 0}`);
            }
            if (validation.maxWidth && width > validation.maxWidth || validation.maxHeight && height > validation.maxHeight) {
                errors.push(`Image dimensions ${width}x${height} are too large. Maximum: ${validation.maxWidth || 'unlimited'}x${validation.maxHeight || 'unlimited'}`);
            }
            if (validation.aspectRatio) {
                const aspectRatio = width / height;
                const targetRatio = validation.aspectRatio;
                const tolerance = validation.aspectRatioTolerance || 0.1;
                if (Math.abs(aspectRatio - targetRatio) > tolerance) {
                    warnings.push(`Image aspect ratio ${aspectRatio.toFixed(2)} differs from recommended ${targetRatio.toFixed(2)}`);
                }
            }
            return {
                isValid: errors.length === 0,
                errors,
                warnings,
                metadata: imageMetadata
            };
        } catch (error) {
            errors.push('Failed to validate image dimensions');
            return {
                isValid: false,
                errors,
                warnings
            };
        }
    }, [
        finalConfig
    ]);
    // Generate thumbnails
    const generateThumbnails = (0, _react.useCallback)(async (file)=>{
        const thumbnails = {};
        if (!finalConfig.generateThumbnails) {
            return thumbnails;
        }
        try {
            for (const size of finalConfig.thumbnailSizes){
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                if (!ctx) continue;
                const img = new Image();
                await new Promise((resolve, reject)=>{
                    img.onload = resolve;
                    img.onerror = reject;
                    img.src = URL.createObjectURL(file);
                });
                // Calculate dimensions maintaining aspect ratio
                const aspectRatio = img.width / img.height;
                let width = size;
                let height = size;
                if (aspectRatio > 1) {
                    height = size / aspectRatio;
                } else {
                    width = size * aspectRatio;
                }
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                thumbnails[size] = canvas.toDataURL('image/jpeg', 0.8);
                URL.revokeObjectURL(img.src);
            }
        } catch (error) {
            console.warn('Failed to generate thumbnails:', error);
        }
        return thumbnails;
    }, [
        finalConfig.generateThumbnails,
        finalConfig.thumbnailSizes
    ]);
    // Process uploaded file
    const processFile = (0, _react.useCallback)(async (file)=>{
        const uploadId = generateUploadId();
        setUploadState("validating");
        updateProgress('validation', 10, 'Validating file...');
        // Validate file
        const validation = await validateFile(file);
        if (!validation.isValid) {
            throw new Error(validation.errors.join(', '));
        }
        updateProgress('processing', 30, 'Processing image...');
        // Generate preview
        const preview = URL.createObjectURL(file);
        updateProgress('thumbnail', 60, 'Generating thumbnails...');
        // Generate thumbnails
        const thumbnails = await generateThumbnails(file);
        updateProgress('complete', 80, 'Finalizing...');
        // Auto-process if enabled
        let processedResult;
        if (finalConfig.autoProcess) {
            try {
                processedResult = await (0, _businesslayer.processImageForTryon)(file);
            } catch (error) {
                console.warn('Auto-processing failed:', error);
            }
        }
        const uploadedFile = {
            file,
            preview,
            thumbnails,
            metadata: validation.metadata,
            processedResult,
            uploadId,
            uploadTime: Date.now()
        };
        updateProgress('complete', 100, 'Upload complete');
        setUploadState("complete");
        return uploadedFile;
    }, [
        generateUploadId,
        updateProgress,
        validateFile,
        generateThumbnails,
        finalConfig.autoProcess
    ]);
    // Handle file upload
    const uploadFile = (0, _react.useCallback)(async (file)=>{
        try {
            setError(null);
            const uploadedFile = await processFile(file);
            setUploadedFiles((prev)=>[
                    ...prev,
                    uploadedFile
                ]);
            setCurrentFile(uploadedFile);
            onUpload?.(uploadedFile);
            return uploadedFile;
        } catch (error) {
            handleError(error, 'processing');
            throw error;
        }
    }, [
        processFile,
        onUpload,
        handleError
    ]);
    // Handle multiple file uploads
    const uploadFiles = (0, _react.useCallback)(async (files)=>{
        const results = [];
        for (const file of files){
            try {
                const result = await uploadFile(file);
                results.push(result);
            } catch (error) {
                console.error('Failed to upload file:', file.name, error);
            }
        }
        return results;
    }, [
        uploadFile
    ]);
    // Remove uploaded file
    const removeFile = (0, _react.useCallback)((uploadId)=>{
        setUploadedFiles((prev)=>{
            const updated = prev.filter((f)=>f.uploadId !== uploadId);
            const removedFile = prev.find((f)=>f.uploadId === uploadId);
            if (removedFile) {
                URL.revokeObjectURL(removedFile.preview);
                Object.values(removedFile.thumbnails).forEach((url)=>{
                    if (url.startsWith('blob:')) {
                        URL.revokeObjectURL(url);
                    }
                });
            }
            return updated;
        });
        if (currentFile?.uploadId === uploadId) {
            setCurrentFile(null);
        }
    }, [
        currentFile
    ]);
    // Clear all files
    const clearFiles = (0, _react.useCallback)(()=>{
        uploadedFiles.forEach((file)=>{
            URL.revokeObjectURL(file.preview);
            Object.values(file.thumbnails).forEach((url)=>{
                if (url.startsWith('blob:')) {
                    URL.revokeObjectURL(url);
                }
            });
        });
        setUploadedFiles([]);
        setCurrentFile(null);
        setError(null);
        setUploadState("idle");
        setProgress(null);
    }, [
        uploadedFiles
    ]);
    // Trigger file picker
    const openFilePicker = (0, _react.useCallback)(()=>{
        fileInputRef.current?.click();
    }, []);
    // Handle file input change
    const handleFileInputChange = (0, _react.useCallback)((event)=>{
        const files = Array.from(event.target.files || []);
        if (files.length > 0) {
            uploadFiles(files);
        }
        // Reset input to allow same file selection
        event.target.value = '';
    }, [
        uploadFiles
    ]);
    // Drag and drop handlers
    const handleDragEnter = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        event.stopPropagation();
        const files = Array.from(event.dataTransfer.files);
        const hasValidFiles = files.some((file)=>finalConfig.allowedTypes.includes(file.type));
        setDragDropState({
            isDragActive: true,
            isDragAccept: hasValidFiles,
            isDragReject: !hasValidFiles,
            draggedFiles: files
        });
    }, [
        finalConfig.allowedTypes
    ]);
    const handleDragLeave = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        event.stopPropagation();
        setDragDropState({
            isDragActive: false,
            isDragAccept: false,
            isDragReject: false,
            draggedFiles: []
        });
    }, []);
    const handleDragOver = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        event.stopPropagation();
    }, []);
    const handleDrop = (0, _react.useCallback)((event)=>{
        event.preventDefault();
        event.stopPropagation();
        const files = Array.from(event.dataTransfer.files).filter((file)=>finalConfig.allowedTypes.includes(file.type));
        setDragDropState({
            isDragActive: false,
            isDragAccept: false,
            isDragReject: false,
            draggedFiles: []
        });
        if (files.length > 0) {
            uploadFiles(files);
        }
    }, [
        finalConfig.allowedTypes,
        uploadFiles
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            uploadedFiles.forEach((file)=>{
                URL.revokeObjectURL(file.preview);
                Object.values(file.thumbnails).forEach((url)=>{
                    if (url.startsWith('blob:')) {
                        URL.revokeObjectURL(url);
                    }
                });
            });
        };
    }, []);
    return {
        // State
        uploadState,
        uploadedFiles,
        currentFile,
        progress,
        error,
        dragDropState,
        // Actions
        uploadFile,
        uploadFiles,
        removeFile,
        clearFiles,
        openFilePicker,
        // File input props
        fileInputProps: {
            ref: fileInputRef,
            type: 'file',
            accept: finalConfig.allowedTypes.join(','),
            multiple: true,
            onChange: handleFileInputChange,
            style: {
                display: 'none'
            }
        },
        // Drag and drop props (only if enabled)
        ...finalConfig.enableDragDrop ? {
            dragDropProps: {
                onDragEnter: handleDragEnter,
                onDragLeave: handleDragLeave,
                onDragOver: handleDragOver,
                onDrop: handleDrop
            }
        } : {},
        // Utils
        validateFile,
        generateThumbnails
    };
}
function useSingleImageUpload(config = {}, onUpload, onError) {
    const upload = useImageUpload(config, onUpload, onError);
    const uploadSingleFile = (0, _react.useCallback)(async (file)=>{
        upload.clearFiles(); // Clear previous files
        return upload.uploadFile(file);
    }, [
        upload
    ]);
    return {
        ...upload,
        uploadFile: uploadSingleFile,
        file: upload.currentFile
    };
}
function useDropzoneUpload(config = {}, onUpload, onError) {
    const upload = useImageUpload({
        ...config,
        enableDragDrop: true
    }, undefined, onError);
    // Handle batch upload completion
    (0, _react.useEffect)(()=>{
        if (upload.uploadedFiles.length > 0 && upload.uploadState === "complete") {
            onUpload?.(upload.uploadedFiles);
        }
    }, [
        upload.uploadedFiles,
        upload.uploadState,
        onUpload
    ]);
    return {
        dragDropState: upload.dragDropState,
        dragDropProps: upload.dragDropProps,
        uploadedFiles: upload.uploadedFiles,
        progress: upload.progress,
        error: upload.error,
        clearFiles: upload.clearFiles,
        removeFile: upload.removeFile
    };
}

//# sourceMappingURL=data:application/json;base64,