{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonHistory.ts"],"sourcesContent":["// Try-On History React Query Hooks\n// Provides React Query integration for history management with caching and synchronization\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport type {\n  TryonHistoryEntry,\n  TryonHistoryCollection,\n  TryonHistoryQueryOptions,\n  CreateTryonHistoryEntryOptions,\n  UseTryonHistoryReturn,\n  TryonHistoryService\n} from '../types/history.types';\nimport { defaultHistoryService } from '../services/tryonHistoryService';\n\n/**\n * Query keys for history-related React Query operations\n */\nexport const HISTORY_QUERY_KEYS = {\n  all: ['tryon-history'] as const,\n  entries: (options?: TryonHistoryQueryOptions) => ['tryon-history', 'entries', options] as const,\n  entry: (id: string) => ['tryon-history', 'entry', id] as const,\n  stats: () => ['tryon-history', 'stats'] as const\n} as const;\n\n/**\n * Configuration for history hooks\n */\ninterface UseTryonHistoryConfig {\n  /** History service instance to use */\n  historyService?: TryonHistoryService;\n  /** Default query options */\n  defaultQueryOptions?: TryonHistoryQueryOptions;\n  /** Enable automatic refetch */\n  enableRefetch?: boolean;\n  /** Refetch interval in milliseconds */\n  refetchInterval?: number;\n  /** Stale time in milliseconds */\n  staleTime?: number;\n  /** Cache time in milliseconds */\n  cacheTime?: number;\n}\n\n/**\n * Default hook configuration\n */\nconst DEFAULT_CONFIG: Required<UseTryonHistoryConfig> = {\n  historyService: defaultHistoryService,\n  defaultQueryOptions: {\n    page: 0,\n    pageSize: 20,\n    sortBy: 'timestamp',\n    sortDirection: 'desc'\n  },\n  enableRefetch: false,\n  refetchInterval: 0,\n  staleTime: 5 * 60 * 1000, // 5 minutes\n  cacheTime: 10 * 60 * 1000 // 10 minutes\n};\n\n/**\n * Hook for managing try-on history with React Query\n */\nexport function useTryonHistory(\n  queryOptions: TryonHistoryQueryOptions = {},\n  config: UseTryonHistoryConfig = {}\n): UseTryonHistoryReturn {\n  const queryClient = useQueryClient();\n  \n  // Merge configuration with defaults\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config\n  }), [config]);\n\n  // Merge query options with defaults\n  const mergedQueryOptions = useMemo(() => ({\n    ...mergedConfig.defaultQueryOptions,\n    ...queryOptions\n  }), [mergedConfig.defaultQueryOptions, queryOptions]);\n\n  // Query for history entries\n  const historyQuery = useQuery<TryonHistoryCollection>({\n    queryKey: HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n    queryFn: () => mergedConfig.historyService.getEntries(mergedQueryOptions),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    refetchInterval: mergedConfig.enableRefetch ? mergedConfig.refetchInterval : false,\n    refetchOnWindowFocus: false,\n    retry: 2\n  });\n\n  // Mutation for adding new entries\n  const addEntryMutation = useMutation({\n    mutationFn: (options: CreateTryonHistoryEntryOptions) => \n      mergedConfig.historyService.addEntry(options),\n    onSuccess: (newEntry) => {\n      // Invalidate and refetch history entries\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.all });\n      \n      // Optimistically update the cache\n      queryClient.setQueryData<TryonHistoryCollection>(\n        HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n        (oldData) => {\n          if (!oldData) return oldData;\n          \n          return {\n            ...oldData,\n            entries: [newEntry, ...oldData.entries],\n            totalCount: oldData.totalCount + 1,\n            lastUpdated: new Date().toISOString()\n          };\n        }\n      );\n    }\n  });\n\n  // Mutation for updating entries\n  const updateEntryMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<TryonHistoryEntry> }) =>\n      mergedConfig.historyService.updateEntry(id, updates),\n    onSuccess: (updatedEntry) => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entry(updatedEntry.id) });\n      queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries() });\n      \n      // Update the entry in all relevant caches\n      queryClient.setQueryData(HISTORY_QUERY_KEYS.entry(updatedEntry.id), updatedEntry);\n      \n      // Update the entry in the entries list cache\n      queryClient.setQueryData<TryonHistoryCollection>(\n        HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n        (oldData) => {\n          if (!oldData) return oldData;\n          \n          return {\n            ...oldData,\n            entries: oldData.entries.map(entry => \n              entry.id === updatedEntry.id ? updatedEntry : entry\n            ),\n            lastUpdated: new Date().toISOString()\n          };\n        }\n      );\n    }\n  });\n\n  // Mutation for deleting entries\n  const deleteEntryMutation = useMutation({\n    mutationFn: (id: string) => mergedConfig.historyService.deleteEntry(id),\n    onSuccess: (success, deletedId) => {\n      if (success) {\n        // Remove from all caches\n        queryClient.removeQueries({ queryKey: HISTORY_QUERY_KEYS.entry(deletedId) });\n        queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries() });\n        \n        // Optimistically remove from entries list\n        queryClient.setQueryData<TryonHistoryCollection>(\n          HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n          (oldData) => {\n            if (!oldData) return oldData;\n            \n            return {\n              ...oldData,\n              entries: oldData.entries.filter(entry => entry.id !== deletedId),\n              totalCount: Math.max(0, oldData.totalCount - 1),\n              lastUpdated: new Date().toISOString()\n            };\n          }\n        );\n      }\n    }\n  });\n\n  // Mutation for clearing all entries\n  const clearAllMutation = useMutation({\n    mutationFn: () => mergedConfig.historyService.clearAll(),\n    onSuccess: (success) => {\n      if (success) {\n        // Clear all history-related caches\n        queryClient.removeQueries({ queryKey: HISTORY_QUERY_KEYS.all });\n        \n        // Set empty state\n        queryClient.setQueryData<TryonHistoryCollection>(\n          HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n          {\n            entries: [],\n            totalCount: 0,\n            currentPage: 0,\n            pageSize: mergedQueryOptions.pageSize!,\n            hasMore: false,\n            lastUpdated: new Date().toISOString()\n          }\n        );\n      }\n    }\n  });\n\n  // Memoized callback functions\n  const addEntry = useCallback(async (options: CreateTryonHistoryEntryOptions) => {\n    return addEntryMutation.mutateAsync(options);\n  }, [addEntryMutation]);\n\n  const updateEntry = useCallback(async (id: string, updates: Partial<TryonHistoryEntry>) => {\n    await updateEntryMutation.mutateAsync({ id, updates });\n  }, [updateEntryMutation]);\n\n  const deleteEntry = useCallback(async (id: string) => {\n    await deleteEntryMutation.mutateAsync(id);\n  }, [deleteEntryMutation]);\n\n  const loadMore = useCallback(async () => {\n    if (!historyQuery.data?.hasMore || historyQuery.isFetching) return;\n    \n    const nextPage = historyQuery.data.currentPage + 1;\n    const nextPageOptions = { ...mergedQueryOptions, page: nextPage };\n    \n    // Fetch next page\n    const nextPageData = await queryClient.fetchQuery({\n      queryKey: HISTORY_QUERY_KEYS.entries(nextPageOptions),\n      queryFn: () => mergedConfig.historyService.getEntries(nextPageOptions),\n      staleTime: mergedConfig.staleTime\n    });\n    \n    // Merge with current data\n    queryClient.setQueryData<TryonHistoryCollection>(\n      HISTORY_QUERY_KEYS.entries(mergedQueryOptions),\n      (oldData) => {\n        if (!oldData) return nextPageData;\n        \n        return {\n          ...nextPageData,\n          entries: [...oldData.entries, ...nextPageData.entries],\n          currentPage: nextPage\n        };\n      }\n    );\n  }, [historyQuery.data, historyQuery.isFetching, mergedQueryOptions, queryClient, mergedConfig.historyService, mergedConfig.staleTime]);\n\n  const refresh = useCallback(async () => {\n    await queryClient.invalidateQueries({ queryKey: HISTORY_QUERY_KEYS.entries(mergedQueryOptions) });\n  }, [queryClient, mergedQueryOptions]);\n\n  const clearAll = useCallback(async () => {\n    await clearAllMutation.mutateAsync();\n  }, [clearAllMutation]);\n\n  // Return hook interface\n  return useMemo<UseTryonHistoryReturn>(() => ({\n    entries: historyQuery.data?.entries || [],\n    isLoading: historyQuery.isLoading || historyQuery.isFetching,\n    error: historyQuery.error,\n    hasMore: historyQuery.data?.hasMore || false,\n    currentPage: historyQuery.data?.currentPage || 0,\n    totalCount: historyQuery.data?.totalCount || 0,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    loadMore,\n    refresh,\n    clearAll\n  }), [\n    historyQuery.data,\n    historyQuery.isLoading,\n    historyQuery.isFetching,\n    historyQuery.error,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    loadMore,\n    refresh,\n    clearAll\n  ]);\n}\n\n/**\n * Hook for getting a single history entry by ID\n */\nexport function useTryonHistoryEntry(\n  id: string,\n  config: Pick<UseTryonHistoryConfig, 'historyService' | 'staleTime' | 'cacheTime'> = {}\n) {\n  const mergedConfig = useMemo(() => ({\n    historyService: defaultHistoryService,\n    staleTime: 5 * 60 * 1000,\n    cacheTime: 10 * 60 * 1000,\n    ...config\n  }), [config]);\n\n  return useQuery({\n    queryKey: HISTORY_QUERY_KEYS.entry(id),\n    queryFn: () => mergedConfig.historyService.getEntry(id),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    enabled: Boolean(id),\n    retry: 2\n  });\n}\n\n/**\n * Hook for getting storage statistics\n */\nexport function useTryonHistoryStats(\n  config: Pick<UseTryonHistoryConfig, 'historyService' | 'staleTime' | 'cacheTime'> = {}\n) {\n  const mergedConfig = useMemo(() => ({\n    historyService: defaultHistoryService,\n    staleTime: 60 * 1000, // 1 minute\n    cacheTime: 5 * 60 * 1000, // 5 minutes\n    ...config\n  }), [config]);\n\n  return useQuery({\n    queryKey: HISTORY_QUERY_KEYS.stats(),\n    queryFn: () => mergedConfig.historyService.getStorageStats(),\n    staleTime: mergedConfig.staleTime,\n    gcTime: mergedConfig.cacheTime,\n    refetchOnWindowFocus: false\n  });\n}"],"names":["HISTORY_QUERY_KEYS","useTryonHistory","useTryonHistoryEntry","useTryonHistoryStats","all","entries","options","entry","id","stats","DEFAULT_CONFIG","historyService","defaultHistoryService","defaultQueryOptions","page","pageSize","sortBy","sortDirection","enableRefetch","refetchInterval","staleTime","cacheTime","queryOptions","config","queryClient","useQueryClient","mergedConfig","useMemo","mergedQueryOptions","historyQuery","useQuery","queryKey","queryFn","getEntries","gcTime","refetchOnWindowFocus","retry","addEntryMutation","useMutation","mutationFn","addEntry","onSuccess","newEntry","invalidateQueries","setQueryData","oldData","totalCount","lastUpdated","Date","toISOString","updateEntryMutation","updates","updateEntry","updatedEntry","map","deleteEntryMutation","deleteEntry","success","deletedId","removeQueries","filter","Math","max","clearAllMutation","clearAll","currentPage","hasMore","useCallback","mutateAsync","loadMore","data","isFetching","nextPage","nextPageOptions","nextPageData","fetchQuery","refresh","isLoading","error","getEntry","enabled","Boolean","getStorageStats"],"mappings":"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"}