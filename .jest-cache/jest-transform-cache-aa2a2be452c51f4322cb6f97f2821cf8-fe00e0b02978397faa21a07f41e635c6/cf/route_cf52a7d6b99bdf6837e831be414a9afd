745a1101f974f0a1f7f97ca4070273ed
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    OPTIONS: function() {
        return OPTIONS;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _schema = require("./schema");
const _openaiClient = require("../../../lib/openaiClient");
// TODO: Implement try-on functionality
// - ✅ Add request validation (subtask 3.2) - COMPLETED
// - ✅ Add request parsing & payload validation (subtask 3.3) - COMPLETED
// - ✅ Add image processing logic (subtask 3.4) - COMPLETED
// - ✅ Add error handling (subtask 3.5) - COMPLETED
// Helper function to create CORS headers
function createCorsHeaders(origin) {
    return {
        'Access-Control-Allow-Origin': origin,
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
    };
}
async function OPTIONS(request) {
    const origin = request.headers.get('origin') ?? process.env.NEXT_PUBLIC_BASE_URL ?? '';
    return new _server.NextResponse(null, {
        status: 200,
        headers: createCorsHeaders(origin)
    });
}
async function POST(request) {
    const origin = request.headers.get('origin') ?? process.env.NEXT_PUBLIC_BASE_URL ?? '';
    const corsHeaders = createCorsHeaders(origin);
    try {
        // Parse request body
        const body = await request.json();
        // Validate payload against schema
        const { modelImage, apparelImages } = _schema.TryonSchema.parse(body);
        // Generate try-on image using OpenAI
        const img_generated = await (0, _openaiClient.generateTryOn)({
            modelImage,
            apparelImages
        });
        // Return generated image with CORS headers
        return _server.NextResponse.json({
            img_generated
        }, {
            status: 200,
            headers: corsHeaders
        });
    } catch (error) {
        // Handle Zod validation errors
        if (error instanceof _zod.ZodError) {
            return _server.NextResponse.json({
                error: 'Validation failed',
                details: error.errors.map((err)=>({
                        field: err.path.join('.'),
                        message: err.message
                    }))
            }, {
                status: 400,
                headers: corsHeaders
            });
        }
        // Handle generateTryOn errors and other internal errors
        console.error('Try-on API error:', error);
        const errorMessage = process.env.NODE_ENV === 'development' ? error instanceof Error ? error.message : 'Unknown error occurred' : 'Internal Server Error';
        return _server.NextResponse.json({
            error: errorMessage
        }, {
            status: 500,
            headers: corsHeaders
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2FwcC9hcGkvdHJ5b24vcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IFpvZEVycm9yIH0gZnJvbSAnem9kJztcbmltcG9ydCB7IFRyeW9uU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUcnlPbiB9IGZyb20gJy4uLy4uLy4uL2xpYi9vcGVuYWlDbGllbnQnO1xuXG4vLyBUT0RPOiBJbXBsZW1lbnQgdHJ5LW9uIGZ1bmN0aW9uYWxpdHlcbi8vIC0g4pyFIEFkZCByZXF1ZXN0IHZhbGlkYXRpb24gKHN1YnRhc2sgMy4yKSAtIENPTVBMRVRFRFxuLy8gLSDinIUgQWRkIHJlcXVlc3QgcGFyc2luZyAmIHBheWxvYWQgdmFsaWRhdGlvbiAoc3VidGFzayAzLjMpIC0gQ09NUExFVEVEXG4vLyAtIOKchSBBZGQgaW1hZ2UgcHJvY2Vzc2luZyBsb2dpYyAoc3VidGFzayAzLjQpIC0gQ09NUExFVEVEXG4vLyAtIOKchSBBZGQgZXJyb3IgaGFuZGxpbmcgKHN1YnRhc2sgMy41KSAtIENPTVBMRVRFRFxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIENPUlMgaGVhZGVyc1xuZnVuY3Rpb24gY3JlYXRlQ29yc0hlYWRlcnMob3JpZ2luOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogb3JpZ2luLFxuICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJzogJ1BPU1QsIE9QVElPTlMnLFxuICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ0NvbnRlbnQtVHlwZSdcbiAgfTtcbn1cblxuLy8gSGFuZGxlIE9QVElPTlMgcHJlZmxpZ2h0IHJlcXVlc3RzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gT1BUSU9OUyhyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIGNvbnN0IG9yaWdpbiA9IHJlcXVlc3QuaGVhZGVycy5nZXQoJ29yaWdpbicpID8/IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMID8/ICcnO1xuICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShudWxsLCB7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgaGVhZGVyczogY3JlYXRlQ29yc0hlYWRlcnMob3JpZ2luKVxuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpOiBQcm9taXNlPE5leHRSZXNwb25zZT4ge1xuICBjb25zdCBvcmlnaW4gPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdvcmlnaW4nKSA/PyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19CQVNFX1VSTCA/PyAnJztcbiAgY29uc3QgY29yc0hlYWRlcnMgPSBjcmVhdGVDb3JzSGVhZGVycyhvcmlnaW4pO1xuXG4gIHRyeSB7XG4gICAgLy8gUGFyc2UgcmVxdWVzdCBib2R5XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHBheWxvYWQgYWdhaW5zdCBzY2hlbWFcbiAgICBjb25zdCB7IG1vZGVsSW1hZ2UsIGFwcGFyZWxJbWFnZXMgfSA9IFRyeW9uU2NoZW1hLnBhcnNlKGJvZHkpO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIHRyeS1vbiBpbWFnZSB1c2luZyBPcGVuQUlcbiAgICBjb25zdCBpbWdfZ2VuZXJhdGVkID0gYXdhaXQgZ2VuZXJhdGVUcnlPbih7IG1vZGVsSW1hZ2UsIGFwcGFyZWxJbWFnZXMgfSk7XG4gICAgXG4gICAgLy8gUmV0dXJuIGdlbmVyYXRlZCBpbWFnZSB3aXRoIENPUlMgaGVhZGVyc1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgaW1nX2dlbmVyYXRlZCBcbiAgICB9LCB7IFxuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBoZWFkZXJzOiBjb3JzSGVhZGVyc1xuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIEhhbmRsZSBab2QgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBab2RFcnJvcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICBkZXRhaWxzOiBlcnJvci5lcnJvcnMubWFwKGVyciA9PiAoe1xuICAgICAgICAgIGZpZWxkOiBlcnIucGF0aC5qb2luKCcuJyksXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSkpXG4gICAgICB9LCB7IFxuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgaGVhZGVyczogY29yc0hlYWRlcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBIYW5kbGUgZ2VuZXJhdGVUcnlPbiBlcnJvcnMgYW5kIG90aGVyIGludGVybmFsIGVycm9yc1xuICAgIGNvbnNvbGUuZXJyb3IoJ1RyeS1vbiBBUEkgZXJyb3I6JywgZXJyb3IpO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIFxuICAgICAgPyAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCcpXG4gICAgICA6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZVxuICAgIH0sIHsgXG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIGhlYWRlcnM6IGNvcnNIZWFkZXJzXG4gICAgfSk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIk9QVElPTlMiLCJQT1NUIiwiY3JlYXRlQ29yc0hlYWRlcnMiLCJvcmlnaW4iLCJyZXF1ZXN0IiwiaGVhZGVycyIsImdldCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19CQVNFX1VSTCIsIk5leHRSZXNwb25zZSIsInN0YXR1cyIsImNvcnNIZWFkZXJzIiwiYm9keSIsImpzb24iLCJtb2RlbEltYWdlIiwiYXBwYXJlbEltYWdlcyIsIlRyeW9uU2NoZW1hIiwicGFyc2UiLCJpbWdfZ2VuZXJhdGVkIiwiZ2VuZXJhdGVUcnlPbiIsImVycm9yIiwiWm9kRXJyb3IiLCJkZXRhaWxzIiwiZXJyb3JzIiwibWFwIiwiZXJyIiwiZmllbGQiLCJwYXRoIiwiam9pbiIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3JNZXNzYWdlIiwiTk9ERV9FTlYiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFxQnNCQSxPQUFPO2VBQVBBOztJQVFBQyxJQUFJO2VBQUpBOzs7d0JBN0JvQjtxQkFDakI7d0JBQ0c7OEJBQ0U7QUFFOUIsdUNBQXVDO0FBQ3ZDLHVEQUF1RDtBQUN2RCx5RUFBeUU7QUFDekUsMkRBQTJEO0FBQzNELG1EQUFtRDtBQUVuRCx5Q0FBeUM7QUFDekMsU0FBU0Msa0JBQWtCQyxNQUFjO0lBQ3ZDLE9BQU87UUFDTCwrQkFBK0JBO1FBQy9CLGdDQUFnQztRQUNoQyxnQ0FBZ0M7SUFDbEM7QUFDRjtBQUdPLGVBQWVILFFBQVFJLE9BQW9CO0lBQ2hELE1BQU1ELFNBQVNDLFFBQVFDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWFDLFFBQVFDLEdBQUcsQ0FBQ0Msb0JBQW9CLElBQUk7SUFDcEYsT0FBTyxJQUFJQyxvQkFBWSxDQUFDLE1BQU07UUFDNUJDLFFBQVE7UUFDUk4sU0FBU0gsa0JBQWtCQztJQUM3QjtBQUNGO0FBRU8sZUFBZUYsS0FBS0csT0FBb0I7SUFDN0MsTUFBTUQsU0FBU0MsUUFBUUMsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYUMsUUFBUUMsR0FBRyxDQUFDQyxvQkFBb0IsSUFBSTtJQUNwRixNQUFNRyxjQUFjVixrQkFBa0JDO0lBRXRDLElBQUk7UUFDRixxQkFBcUI7UUFDckIsTUFBTVUsT0FBTyxNQUFNVCxRQUFRVSxJQUFJO1FBRS9CLGtDQUFrQztRQUNsQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFLEdBQUdDLG1CQUFXLENBQUNDLEtBQUssQ0FBQ0w7UUFFeEQscUNBQXFDO1FBQ3JDLE1BQU1NLGdCQUFnQixNQUFNQyxJQUFBQSwyQkFBYSxFQUFDO1lBQUVMO1lBQVlDO1FBQWM7UUFFdEUsMkNBQTJDO1FBQzNDLE9BQU9OLG9CQUFZLENBQUNJLElBQUksQ0FBQztZQUN2Qks7UUFDRixHQUFHO1lBQ0RSLFFBQVE7WUFDUk4sU0FBU087UUFDWDtJQUVGLEVBQUUsT0FBT1MsT0FBTztRQUNkLCtCQUErQjtRQUMvQixJQUFJQSxpQkFBaUJDLGFBQVEsRUFBRTtZQUM3QixPQUFPWixvQkFBWSxDQUFDSSxJQUFJLENBQUM7Z0JBQ3ZCTyxPQUFPO2dCQUNQRSxTQUFTRixNQUFNRyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBUSxDQUFBO3dCQUNoQ0MsT0FBT0QsSUFBSUUsSUFBSSxDQUFDQyxJQUFJLENBQUM7d0JBQ3JCQyxTQUFTSixJQUFJSSxPQUFPO29CQUN0QixDQUFBO1lBQ0YsR0FBRztnQkFDRG5CLFFBQVE7Z0JBQ1JOLFNBQVNPO1lBQ1g7UUFDRjtRQUVBLHdEQUF3RDtRQUN4RG1CLFFBQVFWLEtBQUssQ0FBQyxxQkFBcUJBO1FBQ25DLE1BQU1XLGVBQWV6QixRQUFRQyxHQUFHLENBQUN5QixRQUFRLEtBQUssZ0JBQ3pDWixpQkFBaUJhLFFBQVFiLE1BQU1TLE9BQU8sR0FBRywyQkFDMUM7UUFFSixPQUFPcEIsb0JBQVksQ0FBQ0ksSUFBSSxDQUFDO1lBQ3ZCTyxPQUFPVztRQUNULEdBQUc7WUFDRHJCLFFBQVE7WUFDUk4sU0FBU087UUFDWDtJQUNGO0FBQ0YifQ==