67d6fa5b2c22d4462280b3dc9e288508
// Undo/Redo Stack Management for Image Editing
// Immutable state management for tracking and reverting image editing operations
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_UNDO_REDO_CONFIG: function() {
        return DEFAULT_UNDO_REDO_CONFIG;
    },
    OperationType: function() {
        return OperationType;
    },
    UndoRedoManager: function() {
        return UndoRedoManager;
    },
    createUndoRedoManager: function() {
        return createUndoRedoManager;
    }
});
var OperationType = /*#__PURE__*/ function(OperationType) {
    OperationType["IMAGE_LOAD"] = "image_load";
    OperationType["IMAGE_RESIZE"] = "image_resize";
    OperationType["FILTER_APPLY"] = "filter_apply";
    OperationType["TEXT_ADD"] = "text_add";
    OperationType["TEXT_EDIT"] = "text_edit";
    OperationType["TEXT_REMOVE"] = "text_remove";
    OperationType["STICKER_ADD"] = "sticker_add";
    OperationType["STICKER_MOVE"] = "sticker_move";
    OperationType["STICKER_SCALE"] = "sticker_scale";
    OperationType["STICKER_ROTATE"] = "sticker_rotate";
    OperationType["STICKER_REMOVE"] = "sticker_remove";
    OperationType["CANVAS_CLEAR"] = "canvas_clear";
    OperationType["COMPOSITE_OPERATION"] = "composite_operation";
    return OperationType;
}({});
const DEFAULT_UNDO_REDO_CONFIG = {
    maxHistorySize: 50,
    enableCompression: true,
    compressionQuality: 0.8,
    memoryLimit: 100,
    autoCleanupThreshold: 30,
    enablePerfMonitoring: true
};
class UndoRedoManager {
    constructor(managedCanvas, config = {}){
        this.currentComposite = null;
        this.lastSnapshot = null;
        this.canvas = managedCanvas.canvas;
        this.ctx = managedCanvas.context;
        this.config = {
            ...DEFAULT_UNDO_REDO_CONFIG,
            ...config
        };
        this.state = {
            currentIndex: -1,
            operations: [],
            canUndo: false,
            canRedo: false,
            memoryUsage: 0,
            stats: {
                totalOperations: 0,
                undoCount: 0,
                redoCount: 0,
                memoryPeakUsage: 0,
                lastCleanup: Date.now()
            }
        };
        // Setup automatic cleanup
        if (this.config.autoCleanupThreshold > 0) {
            this.setupAutoCleanup();
        }
    }
    /**
   * Create canvas snapshot
   */ createSnapshot(compress = this.config.enableCompression) {
        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        let snapshot = {
            imageData,
            width: this.canvas.width,
            height: this.canvas.height,
            timestamp: Date.now()
        };
        if (compress) {
            snapshot = this.compressSnapshot(snapshot);
        }
        return snapshot;
    }
    /**
   * Compress snapshot to reduce memory usage
   */ compressSnapshot(snapshot) {
        const startTime = performance.now();
        try {
            // Create temporary canvas for compression
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = snapshot.width;
            tempCanvas.height = snapshot.height;
            const tempCtx = tempCanvas.getContext('2d');
            if (!tempCtx) {
                return snapshot; // Return uncompressed if context unavailable
            }
            // Draw image data to temporary canvas
            tempCtx.putImageData(snapshot.imageData, 0, 0);
            // Convert to compressed data URL
            const dataUrl = tempCanvas.toDataURL('image/jpeg', this.config.compressionQuality);
            // Convert back to image data (this simulates compression)
            const img = new Image();
            return new Promise((resolve)=>{
                img.onload = ()=>{
                    tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
                    tempCtx.drawImage(img, 0, 0);
                    const compressedImageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
                    const compressionTime = performance.now() - startTime;
                    const originalSize = snapshot.imageData.data.length;
                    const compressedSize = compressedImageData.data.length;
                    resolve({
                        ...snapshot,
                        imageData: compressedImageData,
                        compressed: true,
                        compressionLevel: this.config.compressionQuality
                    });
                };
                img.src = dataUrl;
            });
        } catch (error) {
            console.warn('Snapshot compression failed, using uncompressed:', error);
            return snapshot;
        }
    }
    /**
   * Calculate memory usage of snapshot
   */ calculateSnapshotMemory(snapshot) {
        const imageDataSize = snapshot.imageData.data.length * 4; // 4 bytes per pixel (RGBA)
        const metadataSize = 100; // Approximate metadata size
        return imageDataSize + metadataSize;
    }
    /**
   * Apply snapshot to canvas
   */ applySnapshot(snapshot) {
        // Resize canvas if needed
        if (this.canvas.width !== snapshot.width || this.canvas.height !== snapshot.height) {
            this.canvas.width = snapshot.width;
            this.canvas.height = snapshot.height;
        }
        // Apply image data
        this.ctx.putImageData(snapshot.imageData, 0, 0);
    }
    /**
   * Generate unique operation ID
   */ generateOperationId() {
        return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * Update stack state
   */ updateState() {
        this.state.canUndo = this.state.currentIndex >= 0;
        this.state.canRedo = this.state.currentIndex < this.state.operations.length - 1;
        // Calculate total memory usage
        this.state.memoryUsage = this.state.operations.reduce((total, op)=>{
            if ('operations' in op) {
                // Composite operation
                return total + this.calculateSnapshotMemory(op.beforeState) + this.calculateSnapshotMemory(op.afterState);
            } else {
                // Regular operation
                return total + this.calculateSnapshotMemory(op.beforeState) + this.calculateSnapshotMemory(op.afterState);
            }
        }, 0);
        // Update peak memory usage
        if (this.state.memoryUsage > this.state.stats.memoryPeakUsage) {
            this.state.stats.memoryPeakUsage = this.state.memoryUsage;
        }
        // Check memory limit
        if (this.state.memoryUsage > this.config.memoryLimit * 1024 * 1024) {
            this.cleanup();
        }
    }
    /**
   * Start composite operation
   */ startCompositeOperation(description, metadata) {
        if (this.currentComposite) {
            throw new Error('Composite operation already in progress');
        }
        const id = this.generateOperationId();
        this.currentComposite = {
            id,
            type: "composite_operation",
            timestamp: Date.now(),
            description,
            metadata,
            operations: [],
            beforeState: this.createSnapshot(),
            afterState: this.createSnapshot() // Will be updated when completed
        };
        return id;
    }
    /**
   * End composite operation
   */ endCompositeOperation() {
        if (!this.currentComposite) {
            throw new Error('No composite operation in progress');
        }
        // Update after state
        this.currentComposite.afterState = this.createSnapshot();
        // Add to operations stack if it contains sub-operations
        if (this.currentComposite.operations.length > 0) {
            this.addOperationToStack(this.currentComposite);
        }
        this.currentComposite = null;
    }
    /**
   * Add operation to stack
   */ addOperationToStack(operation) {
        // Remove any operations after current index (for redo scenarios)
        this.state.operations = this.state.operations.slice(0, this.state.currentIndex + 1);
        // Add new operation
        this.state.operations.push(operation);
        this.state.currentIndex = this.state.operations.length - 1;
        // Enforce history size limit
        if (this.state.operations.length > this.config.maxHistorySize) {
            const removeCount = this.state.operations.length - this.config.maxHistorySize;
            this.state.operations.splice(0, removeCount);
            this.state.currentIndex -= removeCount;
        }
        this.state.stats.totalOperations++;
        this.updateState();
    }
    /**
   * Execute operation with automatic state tracking
   */ executeOperation(type, description, operationFn, operationData, metadata) {
        return new Promise(async (resolve, reject)=>{
            const startTime = performance.now();
            const memoryBefore = this.state.memoryUsage;
            try {
                // Capture before state
                const beforeState = this.createSnapshot();
                // Execute the operation
                await operationFn();
                // Capture after state
                const afterState = this.createSnapshot();
                // Create operation record
                const operation = {
                    id: this.generateOperationId(),
                    type,
                    timestamp: Date.now(),
                    description,
                    beforeState,
                    afterState,
                    operationData,
                    metadata
                };
                // Calculate memory usage
                operation.memoryUsage = this.calculateSnapshotMemory(beforeState) + this.calculateSnapshotMemory(afterState);
                // Add to current composite or directly to stack
                if (this.currentComposite) {
                    this.currentComposite.operations.push(operation);
                } else {
                    this.addOperationToStack(operation);
                }
                // Record performance metrics
                if (this.config.enablePerfMonitoring) {
                    const performance1 = {
                        executionTime: Date.now() - startTime,
                        memoryBefore,
                        memoryAfter: this.state.memoryUsage,
                        snapshotTime: 0 // Would be calculated in real implementation
                    };
                    if (metadata) {
                        metadata.performance = performance1;
                    }
                }
                resolve(operation.id);
            } catch (error) {
                reject(error);
            }
        });
    }
    /**
   * Undo last operation
   */ undo() {
        if (!this.state.canUndo) {
            return false;
        }
        const operation = this.state.operations[this.state.currentIndex];
        this.applySnapshot(operation.beforeState);
        this.state.currentIndex--;
        this.state.stats.undoCount++;
        this.updateState();
        return true;
    }
    /**
   * Redo next operation
   */ redo() {
        if (!this.state.canRedo) {
            return false;
        }
        this.state.currentIndex++;
        const operation = this.state.operations[this.state.currentIndex];
        this.applySnapshot(operation.afterState);
        this.state.stats.redoCount++;
        this.updateState();
        return true;
    }
    /**
   * Jump to specific operation in history
   */ jumpToOperation(index) {
        if (index < -1 || index >= this.state.operations.length) {
            return false;
        }
        if (index === -1) {
            // Jump to initial state (before any operations)
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        } else {
            const operation = this.state.operations[index];
            this.applySnapshot(operation.afterState);
        }
        this.state.currentIndex = index;
        this.updateState();
        return true;
    }
    /**
   * Clear entire history
   */ clearHistory() {
        this.state.operations = [];
        this.state.currentIndex = -1;
        this.state.memoryUsage = 0;
        this.currentComposite = null;
        this.updateState();
    }
    /**
   * Cleanup old operations to free memory
   */ cleanup(targetMemoryMB) {
        const targetMemory = (targetMemoryMB || this.config.memoryLimit * 0.7) * 1024 * 1024;
        while(this.state.memoryUsage > targetMemory && this.state.operations.length > 10){
            // Remove oldest operation
            this.state.operations.shift();
            if (this.state.currentIndex > 0) {
                this.state.currentIndex--;
            }
        }
        this.state.stats.lastCleanup = Date.now();
        this.updateState();
    }
    /**
   * Setup automatic cleanup
   */ setupAutoCleanup() {
        setInterval(()=>{
            const now = Date.now();
            const timeSinceLastCleanup = now - this.state.stats.lastCleanup;
            const thresholdMs = this.config.autoCleanupThreshold * 60 * 1000;
            if (timeSinceLastCleanup > thresholdMs) {
                this.cleanup();
            }
        }, 60 * 1000); // Check every minute
    }
    /**
   * Get operation history
   */ getHistory() {
        return [
            ...this.state.operations
        ];
    }
    /**
   * Get operation by ID
   */ getOperation(id) {
        return this.state.operations.find((op)=>op.id === id) || null;
    }
    /**
   * Get current state
   */ getState() {
        return {
            ...this.state
        };
    }
    /**
   * Get configuration
   */ getConfig() {
        return {
            ...this.config
        };
    }
    /**
   * Update configuration
   */ updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
        // Apply new limits
        if (this.state.operations.length > this.config.maxHistorySize) {
            const removeCount = this.state.operations.length - this.config.maxHistorySize;
            this.state.operations.splice(0, removeCount);
            this.state.currentIndex = Math.max(-1, this.state.currentIndex - removeCount);
        }
        this.updateState();
    }
    /**
   * Export history for persistence
   */ exportHistory() {
        return JSON.stringify({
            operations: this.state.operations.map((op)=>({
                    ...op,
                    beforeState: {
                        ...op.beforeState,
                        imageData: null
                    },
                    afterState: {
                        ...op.afterState,
                        imageData: null
                    }
                })),
            currentIndex: this.state.currentIndex,
            stats: this.state.stats
        });
    }
    /**
   * Import history from persistence
   */ importHistory(historyData) {
        try {
            const data = JSON.parse(historyData);
            // Note: This is a simplified implementation
            // In practice, you'd need to restore the image data
            this.state.stats = data.stats || this.state.stats;
            return true;
        } catch (error) {
            console.error('Failed to import history:', error);
            return false;
        }
    }
}
function createUndoRedoManager(managedCanvas, config) {
    return new UndoRedoManager(managedCanvas, config);
}

//# sourceMappingURL=data:application/json;base64,