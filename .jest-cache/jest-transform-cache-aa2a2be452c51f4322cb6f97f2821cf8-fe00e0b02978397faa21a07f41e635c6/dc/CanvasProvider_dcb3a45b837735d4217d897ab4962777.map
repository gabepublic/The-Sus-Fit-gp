{"version":3,"names":["cov_1hd3wgvl7g","actualCoverage","s","CanvasProvider","f","useCanvas","useCanvasUtils","useManagedCanvas","CanvasContext","_react","createContext","children","maxPoolSize","b","enableHighDPI","canvasPoolRef","useRef","Map","devicePixelRatio","window","isSupported","useCallback","testCanvas","document","createElement","getContext","utils","createCanvas","width","height","canvas","style","ctx","scale","getContext2D","Error","loadImageToCanvas","imageUrl","Promise","resolve","reject","img","Image","crossOrigin","onload","clearRect","drawImage","error","onerror","src","canvasToDataURL","format","quality","toDataURL","clearCanvas","resizeCanvas","newWidth","newHeight","imageData","cloneCanvas","sourceCanvas","clone","cloneCtx","pool","getCanvas","id","canvasId","Date","now","Math","random","toString","substr","existing","current","get","inUse","dimensions","context","managedCanvas","pixelRatio","createdAt","size","oldestEntry","Array","from","entries","filter","sort","a","delete","set","releaseCanvas","clearPool","clear","getCanvasById","getActiveCanvases","values","useEffect","contextValue","_jsxruntime","jsx","Provider","value","useContext","canvasRef"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/providers/CanvasProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useRef, useCallback, useEffect } from 'react';\n\n/**\n * Canvas instance with metadata\n */\nexport interface ManagedCanvas {\n  /** Canvas element */\n  canvas: HTMLCanvasElement;\n  /** 2D rendering context */\n  context: CanvasRenderingContext2D;\n  /** Unique identifier for this canvas */\n  id: string;\n  /** Canvas dimensions */\n  dimensions: { width: number; height: number };\n  /** Device pixel ratio for high-DPI displays */\n  pixelRatio: number;\n  /** Whether the canvas is currently in use */\n  inUse: boolean;\n  /** Creation timestamp */\n  createdAt: number;\n}\n\n/**\n * Canvas pool for efficient canvas management\n */\nexport interface CanvasPool {\n  /** Get or create a canvas with specified dimensions */\n  getCanvas: (width: number, height: number, id?: string) => ManagedCanvas;\n  /** Return a canvas to the pool */\n  releaseCanvas: (id: string) => void;\n  /** Clear all canvases from the pool */\n  clearPool: () => void;\n  /** Get canvas by ID */\n  getCanvasById: (id: string) => ManagedCanvas | null;\n  /** Get all active canvases */\n  getActiveCanvases: () => ManagedCanvas[];\n}\n\n/**\n * Canvas utilities for common operations\n */\nexport interface CanvasUtils {\n  /** Create canvas with proper device pixel ratio setup */\n  createCanvas: (width: number, height: number) => HTMLCanvasElement;\n  /** Get 2D context with error handling */\n  getContext2D: (canvas: HTMLCanvasElement) => CanvasRenderingContext2D;\n  /** Load image onto canvas */\n  loadImageToCanvas: (canvas: HTMLCanvasElement, imageUrl: string) => Promise<void>;\n  /** Convert canvas to data URL with options */\n  canvasToDataURL: (canvas: HTMLCanvasElement, format?: string, quality?: number) => string;\n  /** Clear canvas */\n  clearCanvas: (canvas: HTMLCanvasElement) => void;\n  /** Resize canvas maintaining content */\n  resizeCanvas: (canvas: HTMLCanvasElement, newWidth: number, newHeight: number) => void;\n  /** Clone canvas content to new canvas */\n  cloneCanvas: (sourceCanvas: HTMLCanvasElement) => HTMLCanvasElement;\n}\n\n/**\n * Canvas context interface\n */\nexport interface CanvasContextValue {\n  /** Canvas pool for efficient management */\n  pool: CanvasPool;\n  /** Canvas utilities */\n  utils: CanvasUtils;\n  /** Current device pixel ratio */\n  devicePixelRatio: number;\n  /** Whether canvas is supported */\n  isSupported: boolean;\n}\n\nconst CanvasContext = createContext<CanvasContextValue | null>(null);\n\n/**\n * Canvas provider component props\n */\nexport interface CanvasProviderProps {\n  children: React.ReactNode;\n  /** Maximum number of canvases to keep in pool */\n  maxPoolSize?: number;\n  /** Whether to enable high-DPI support */\n  enableHighDPI?: boolean;\n}\n\n/**\n * Canvas provider component that manages canvas instances and utilities\n */\nexport function CanvasProvider({ \n  children, \n  maxPoolSize = 10,\n  enableHighDPI = true \n}: CanvasProviderProps): JSX.Element {\n  const canvasPoolRef = useRef<Map<string, ManagedCanvas>>(new Map());\n  const devicePixelRatio = enableHighDPI ? window.devicePixelRatio || 1 : 1;\n\n  // Check canvas support\n  const isSupported = useCallback(() => {\n    try {\n      const testCanvas = document.createElement('canvas');\n      return !!(testCanvas.getContext && testCanvas.getContext('2d'));\n    } catch {\n      return false;\n    }\n  }, []);\n\n  // Canvas utilities implementation\n  const utils: CanvasUtils = {\n    createCanvas: useCallback((width: number, height: number) => {\n      const canvas = document.createElement('canvas');\n      \n      // Set display size\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      \n      // Set actual size for high-DPI\n      canvas.width = width * devicePixelRatio;\n      canvas.height = height * devicePixelRatio;\n      \n      // Scale context for high-DPI\n      const ctx = canvas.getContext('2d');\n      if (ctx && devicePixelRatio !== 1) {\n        ctx.scale(devicePixelRatio, devicePixelRatio);\n      }\n      \n      return canvas;\n    }, [devicePixelRatio]),\n\n    getContext2D: useCallback((canvas: HTMLCanvasElement) => {\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        throw new Error('Could not get 2D context from canvas');\n      }\n      return ctx;\n    }, []),\n\n    loadImageToCanvas: useCallback((canvas: HTMLCanvasElement, imageUrl: string) => {\n      return new Promise<void>((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        \n        img.onload = () => {\n          try {\n            const ctx = utils.getContext2D(canvas);\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, canvas.width / devicePixelRatio, canvas.height / devicePixelRatio);\n            resolve();\n          } catch (error) {\n            reject(new Error(`Failed to draw image to canvas: ${error}`));\n          }\n        };\n        \n        img.onerror = () => {\n          reject(new Error('Failed to load image'));\n        };\n        \n        img.src = imageUrl;\n      });\n    }, [devicePixelRatio]),\n\n    canvasToDataURL: useCallback((canvas: HTMLCanvasElement, format = 'image/png', quality = 0.9) => {\n      return canvas.toDataURL(format, quality);\n    }, []),\n\n    clearCanvas: useCallback((canvas: HTMLCanvasElement) => {\n      const ctx = utils.getContext2D(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }, []),\n\n    resizeCanvas: useCallback((canvas: HTMLCanvasElement, newWidth: number, newHeight: number) => {\n      // Save current content\n      const imageData = canvas.toDataURL();\n      \n      // Resize canvas\n      canvas.style.width = `${newWidth}px`;\n      canvas.style.height = `${newHeight}px`;\n      canvas.width = newWidth * devicePixelRatio;\n      canvas.height = newHeight * devicePixelRatio;\n      \n      // Scale context for high-DPI\n      const ctx = utils.getContext2D(canvas);\n      if (devicePixelRatio !== 1) {\n        ctx.scale(devicePixelRatio, devicePixelRatio);\n      }\n      \n      // Restore content\n      const img = new Image();\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0, newWidth, newHeight);\n      };\n      img.src = imageData;\n    }, [devicePixelRatio]),\n\n    cloneCanvas: useCallback((sourceCanvas: HTMLCanvasElement) => {\n      const clone = utils.createCanvas(\n        sourceCanvas.width / devicePixelRatio,\n        sourceCanvas.height / devicePixelRatio\n      );\n      const cloneCtx = utils.getContext2D(clone);\n      cloneCtx.drawImage(sourceCanvas, 0, 0);\n      return clone;\n    }, [])\n  };\n\n  // Canvas pool implementation\n  const pool: CanvasPool = {\n    getCanvas: useCallback((width: number, height: number, id?: string) => {\n      const canvasId = id || `canvas_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Check if canvas with this ID already exists\n      const existing = canvasPoolRef.current.get(canvasId);\n      if (existing && !existing.inUse) {\n        // Resize existing canvas if dimensions don't match\n        if (existing.dimensions.width !== width || existing.dimensions.height !== height) {\n          utils.resizeCanvas(existing.canvas, width, height);\n          existing.dimensions = { width, height };\n        }\n        existing.inUse = true;\n        return existing;\n      }\n\n      // Create new canvas\n      const canvas = utils.createCanvas(width, height);\n      const context = utils.getContext2D(canvas);\n      \n      const managedCanvas: ManagedCanvas = {\n        canvas,\n        context,\n        id: canvasId,\n        dimensions: { width, height },\n        pixelRatio: devicePixelRatio,\n        inUse: true,\n        createdAt: Date.now()\n      };\n\n      // Add to pool, removing oldest if at capacity\n      if (canvasPoolRef.current.size >= maxPoolSize) {\n        const oldestEntry = Array.from(canvasPoolRef.current.entries())\n          .filter(([, canvas]) => !canvas.inUse)\n          .sort((a, b) => a[1].createdAt - b[1].createdAt)[0];\n        \n        if (oldestEntry) {\n          canvasPoolRef.current.delete(oldestEntry[0]);\n        }\n      }\n\n      canvasPoolRef.current.set(canvasId, managedCanvas);\n      return managedCanvas;\n    }, [maxPoolSize, devicePixelRatio]),\n\n    releaseCanvas: useCallback((id: string) => {\n      const canvas = canvasPoolRef.current.get(id);\n      if (canvas) {\n        canvas.inUse = false;\n        // Clear the canvas for reuse\n        utils.clearCanvas(canvas.canvas);\n      }\n    }, []),\n\n    clearPool: useCallback(() => {\n      canvasPoolRef.current.clear();\n    }, []),\n\n    getCanvasById: useCallback((id: string) => {\n      return canvasPoolRef.current.get(id) || null;\n    }, []),\n\n    getActiveCanvases: useCallback(() => {\n      return Array.from(canvasPoolRef.current.values()).filter(canvas => canvas.inUse);\n    }, [])\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      pool.clearPool();\n    };\n  }, []);\n\n  const contextValue: CanvasContextValue = {\n    pool,\n    utils,\n    devicePixelRatio,\n    isSupported: isSupported()\n  };\n\n  return (\n    <CanvasContext.Provider value={contextValue}>\n      {children}\n    </CanvasContext.Provider>\n  );\n}\n\n/**\n * Hook to access canvas context\n */\nexport function useCanvas(): CanvasContextValue {\n  const context = useContext(CanvasContext);\n  if (!context) {\n    throw new Error('useCanvas must be used within a CanvasProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to get a managed canvas instance\n */\nexport function useManagedCanvas(\n  width: number,\n  height: number,\n  id?: string\n): ManagedCanvas {\n  const { pool } = useCanvas();\n  \n  const canvasRef = useRef<ManagedCanvas | null>(null);\n  \n  useEffect(() => {\n    // Get canvas on mount\n    canvasRef.current = pool.getCanvas(width, height, id);\n    \n    // Release canvas on unmount\n    return () => {\n      if (canvasRef.current) {\n        pool.releaseCanvas(canvasRef.current.id);\n      }\n    };\n  }, [width, height, id, pool]);\n  \n  if (!canvasRef.current) {\n    throw new Error('Canvas not initialized');\n  }\n  \n  return canvasRef.current;\n}\n\n/**\n * Hook for canvas utilities\n */\nexport function useCanvasUtils(): CanvasUtils {\n  const { utils } = useCanvas();\n  return utils;\n}"],"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","ignoreList":[]}