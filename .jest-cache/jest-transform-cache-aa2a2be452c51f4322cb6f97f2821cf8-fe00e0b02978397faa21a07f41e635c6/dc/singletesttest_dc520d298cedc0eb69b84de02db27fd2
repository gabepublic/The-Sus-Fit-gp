07785d02c70d83b08aac18b7dcae07e1
"use strict";
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: ({ src, alt, className, onLoad, onError, fill, unoptimized, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                src: src,
                alt: alt,
                className: className,
                onLoad: onLoad,
                onError: onError,
                ...props
            })
    }));
// Mock the Button component
jest.mock('../src/components/ui/button', ()=>({
        Button: ({ children, onClick, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                className: className,
                ...props,
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock console methods
jest.spyOn(console, 'log').mockImplementation(()=>{});
jest.spyOn(console, 'error').mockImplementation(()=>{});
jest.spyOn(console, 'warn').mockImplementation(()=>{});
describe('Single Component Test', ()=>{
    it('should import and render PolaroidPhotoGenerator', ()=>{
        // Dynamic import to avoid issues
        const { PolaroidPhotoGenerator } = require('../src/components/ui/polaroid-photo-generator');
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(PolaroidPhotoGenerator, {}));
        // Should render the component
        expect(_react1.screen.getByTestId('polaroid-generator')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL3NpbmdsZS10ZXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcblxuLy8gTW9jayBOZXh0LmpzIEltYWdlIGNvbXBvbmVudFxuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4gKHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6ICh7IHNyYywgYWx0LCBjbGFzc05hbWUsIG9uTG9hZCwgb25FcnJvciwgZmlsbCwgdW5vcHRpbWl6ZWQsIC4uLnByb3BzIH06IGFueSkgPT4gKFxuICAgICAgICA8aW1nIFxuICAgICAgICAgICAgc3JjPXtzcmN9IFxuICAgICAgICAgICAgYWx0PXthbHR9IFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9IFxuICAgICAgICAgICAgb25Mb2FkPXtvbkxvYWR9XG4gICAgICAgICAgICBvbkVycm9yPXtvbkVycm9yfVxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAvPlxuICAgIClcbn0pKVxuXG4vLyBNb2NrIHRoZSBCdXR0b24gY29tcG9uZW50XG5qZXN0Lm1vY2soJy4uL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbicsICgpID0+ICh7XG4gICAgQnV0dG9uOiAoeyBjaGlsZHJlbiwgb25DbGljaywgY2xhc3NOYW1lLCAuLi5wcm9wcyB9OiBhbnkpID0+IChcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtvbkNsaWNrfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9idXR0b24+XG4gICAgKVxufSkpXG5cbi8vIE1vY2sgY29uc29sZSBtZXRob2RzXG5qZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pXG5qZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSlcbmplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pXG5cbmRlc2NyaWJlKCdTaW5nbGUgQ29tcG9uZW50IFRlc3QnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBpbXBvcnQgYW5kIHJlbmRlciBQb2xhcm9pZFBob3RvR2VuZXJhdG9yJywgKCkgPT4ge1xuICAgICAgICAvLyBEeW5hbWljIGltcG9ydCB0byBhdm9pZCBpc3N1ZXNcbiAgICAgICAgY29uc3QgeyBQb2xhcm9pZFBob3RvR2VuZXJhdG9yIH0gPSByZXF1aXJlKCcuLi9zcmMvY29tcG9uZW50cy91aS9wb2xhcm9pZC1waG90by1nZW5lcmF0b3InKVxuICAgICAgICBcbiAgICAgICAgcmVuZGVyKDxQb2xhcm9pZFBob3RvR2VuZXJhdG9yIC8+KVxuICAgICAgICBcbiAgICAgICAgLy8gU2hvdWxkIHJlbmRlciB0aGUgY29tcG9uZW50XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3BvbGFyb2lkLWdlbmVyYXRvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInNyYyIsImFsdCIsImNsYXNzTmFtZSIsIm9uTG9hZCIsIm9uRXJyb3IiLCJmaWxsIiwidW5vcHRpbWl6ZWQiLCJwcm9wcyIsImltZyIsIkJ1dHRvbiIsImNoaWxkcmVuIiwib25DbGljayIsImJ1dHRvbiIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJQb2xhcm9pZFBob3RvR2VuZXJhdG9yIiwicmVxdWlyZSIsInJlbmRlciIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZUluVGhlRG9jdW1lbnQiXSwibWFwcGluZ3MiOiI7QUFJQSwrQkFBK0I7QUFDL0JBLEtBQUtDLElBQUksQ0FBQyxjQUFjLElBQU8sQ0FBQTtRQUMzQkMsWUFBWTtRQUNaQyxTQUFTLENBQUMsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsV0FBVyxFQUFFLEdBQUdDLE9BQVksaUJBQ2hGLHFCQUFDQztnQkFDR1IsS0FBS0E7Z0JBQ0xDLEtBQUtBO2dCQUNMQyxXQUFXQTtnQkFDWEMsUUFBUUE7Z0JBQ1JDLFNBQVNBO2dCQUNSLEdBQUdHLEtBQUs7O0lBR3JCLENBQUE7QUFFQSw0QkFBNEI7QUFDNUJYLEtBQUtDLElBQUksQ0FBQywrQkFBK0IsSUFBTyxDQUFBO1FBQzVDWSxRQUFRLENBQUMsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVULFNBQVMsRUFBRSxHQUFHSyxPQUFZLGlCQUNwRCxxQkFBQ0s7Z0JBQU9ELFNBQVNBO2dCQUFTVCxXQUFXQTtnQkFBWSxHQUFHSyxLQUFLOzBCQUNwREc7O0lBR2IsQ0FBQTs7Ozs7OERBMUJrQjt3QkFDYTtRQUN4Qjs7Ozs7O0FBMEJQLHVCQUF1QjtBQUN2QmQsS0FBS2lCLEtBQUssQ0FBQ0MsU0FBUyxPQUFPQyxrQkFBa0IsQ0FBQyxLQUFPO0FBQ3JEbkIsS0FBS2lCLEtBQUssQ0FBQ0MsU0FBUyxTQUFTQyxrQkFBa0IsQ0FBQyxLQUFPO0FBQ3ZEbkIsS0FBS2lCLEtBQUssQ0FBQ0MsU0FBUyxRQUFRQyxrQkFBa0IsQ0FBQyxLQUFPO0FBRXREQyxTQUFTLHlCQUF5QjtJQUM5QkMsR0FBRyxtREFBbUQ7UUFDbEQsaUNBQWlDO1FBQ2pDLE1BQU0sRUFBRUMsc0JBQXNCLEVBQUUsR0FBR0MsUUFBUTtRQUUzQ0MsSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0Y7UUFFUiw4QkFBOEI7UUFDOUJHLE9BQU9DLGNBQU0sQ0FBQ0MsV0FBVyxDQUFDLHVCQUF1QkMsaUJBQWlCO0lBQ3RFO0FBQ0oifQ==