{"version":3,"names":["cov_23modmgz3d","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/types/history.types.ts"],"sourcesContent":["// Share History Management Types\n// TypeScript interfaces for try-on history tracking and persistence\n\n/**\n * Individual try-on history entry\n */\nexport interface TryonHistoryEntry {\n  /** Unique identifier for this history entry */\n  id: string;\n  /** Base64 encoded generated try-on result image */\n  generatedImage: string;\n  /** Base64 encoded original model/user image */\n  modelImage: string;\n  /** Array of base64 encoded apparel images used */\n  apparelImages: string[];\n  /** ISO timestamp when the try-on was created */\n  timestamp: string;\n  /** Processing time in milliseconds */\n  processingTime?: number;\n  /** Additional metadata from the API response */\n  metadata?: TryonHistoryMetadata;\n  /** User-provided tags or labels */\n  tags?: string[];\n  /** Whether this entry is marked as favorite */\n  isFavorite?: boolean;\n  /** Optional user notes about this try-on */\n  notes?: string;\n}\n\n/**\n * Metadata associated with a try-on history entry\n */\nexport interface TryonHistoryMetadata {\n  /** API model version used for generation */\n  modelVersion?: string;\n  /** Processing quality level applied */\n  appliedQuality?: string;\n  /** Processing configuration used */\n  processingConfig?: {\n    /** Image processing settings */\n    imageProcessing?: {\n      targetWidth?: number;\n      targetHeight?: number;\n      compressionQuality?: number;\n      maxSizeKB?: number;\n    };\n    /** API request options */\n    requestOptions?: {\n      timeout?: number;\n      quality?: string;\n    };\n  };\n  /** Error information if the generation initially failed but was retried */\n  errorHistory?: Array<{\n    error: string;\n    timestamp: string;\n    retryAttempt: number;\n  }>;\n  /** Image processing results */\n  imageProcessingResults?: {\n    /** Model image processing duration */\n    modelImageProcessingTime?: number;\n    /** Apparel images processing duration */\n    apparelImagesProcessingTime?: number;\n    /** Total processing time for all images */\n    totalProcessingTime: number;\n    /** Final image sizes after processing */\n    finalImageSizes?: {\n      modelImageSize: number;\n      apparelImageSizes: number[];\n    };\n  };\n}\n\n/**\n * Collection of try-on history entries with pagination\n */\nexport interface TryonHistoryCollection {\n  /** Array of history entries */\n  entries: TryonHistoryEntry[];\n  /** Total number of entries available */\n  totalCount: number;\n  /** Current page number (0-indexed) */\n  currentPage: number;\n  /** Number of entries per page */\n  pageSize: number;\n  /** Whether there are more entries available */\n  hasMore: boolean;\n  /** Timestamp of last update to this collection */\n  lastUpdated: string;\n}\n\n/**\n * Options for querying history entries\n */\nexport interface TryonHistoryQueryOptions {\n  /** Page number to retrieve (0-indexed) */\n  page?: number;\n  /** Number of entries per page */\n  pageSize?: number;\n  /** Sort order for entries */\n  sortBy?: 'timestamp' | 'processingTime' | 'isFavorite';\n  /** Sort direction */\n  sortDirection?: 'asc' | 'desc';\n  /** Filter to only favorites */\n  favoritesOnly?: boolean;\n  /** Search term to filter by tags or notes */\n  searchTerm?: string;\n  /** Date range filter */\n  dateRange?: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\n/**\n * Options for creating a new history entry\n */\nexport interface CreateTryonHistoryEntryOptions {\n  /** Base64 encoded generated image (required) */\n  generatedImage: string;\n  /** Base64 encoded model image (required) */\n  modelImage: string;\n  /** Array of base64 encoded apparel images (required) */\n  apparelImages: string[];\n  /** Processing time in milliseconds */\n  processingTime?: number;\n  /** Additional metadata */\n  metadata?: TryonHistoryMetadata;\n  /** User-provided tags */\n  tags?: string[];\n  /** User notes */\n  notes?: string;\n  /** Mark as favorite immediately */\n  isFavorite?: boolean;\n}\n\n/**\n * History storage configuration\n */\nexport interface TryonHistoryStorageConfig {\n  /** Storage backend type */\n  storageType: 'localStorage' | 'indexedDB' | 'memory';\n  /** Maximum number of entries to store */\n  maxEntries?: number;\n  /** Maximum size per entry in KB */\n  maxEntrySizeKB?: number;\n  /** Whether to compress stored images */\n  compressImages?: boolean;\n  /** Compression quality for stored images (0.1-1.0) */\n  compressionQuality?: number;\n  /** Auto-cleanup older entries when limit is reached */\n  autoCleanup?: boolean;\n  /** Encryption key for sensitive data (future enhancement) */\n  encryptionKey?: string;\n}\n\n/**\n * History service interface\n */\nexport interface TryonHistoryService {\n  /** Add a new history entry */\n  addEntry(options: CreateTryonHistoryEntryOptions): Promise<TryonHistoryEntry>;\n  \n  /** Get history entries with optional filtering and pagination */\n  getEntries(options?: TryonHistoryQueryOptions): Promise<TryonHistoryCollection>;\n  \n  /** Get a specific history entry by ID */\n  getEntry(id: string): Promise<TryonHistoryEntry | null>;\n  \n  /** Update an existing history entry */\n  updateEntry(id: string, updates: Partial<TryonHistoryEntry>): Promise<TryonHistoryEntry>;\n  \n  /** Delete a history entry */\n  deleteEntry(id: string): Promise<boolean>;\n  \n  /** Clear all history entries */\n  clearAll(): Promise<boolean>;\n  \n  /** Get storage statistics */\n  getStorageStats(): Promise<{\n    totalEntries: number;\n    totalSizeKB: number;\n    oldestEntry?: string;\n    newestEntry?: string;\n  }>;\n  \n  /** Export history data */\n  exportHistory(): Promise<TryonHistoryEntry[]>;\n  \n  /** Import history data */\n  importHistory(entries: TryonHistoryEntry[]): Promise<number>;\n}\n\n/**\n * History hooks return types\n */\nexport interface UseTryonHistoryReturn {\n  /** Current history entries */\n  entries: TryonHistoryEntry[];\n  /** Loading state */\n  isLoading: boolean;\n  /** Error state */\n  error: Error | null;\n  /** Whether there are more entries to load */\n  hasMore: boolean;\n  /** Current page number */\n  currentPage: number;\n  /** Total number of entries */\n  totalCount: number;\n  /** Add a new entry */\n  addEntry: (options: CreateTryonHistoryEntryOptions) => Promise<TryonHistoryEntry>;\n  /** Update an existing entry */\n  updateEntry: (id: string, updates: Partial<TryonHistoryEntry>) => Promise<void>;\n  /** Delete an entry */\n  deleteEntry: (id: string) => Promise<void>;\n  /** Load more entries */\n  loadMore: () => Promise<void>;\n  /** Refresh current entries */\n  refresh: () => Promise<void>;\n  /** Clear all entries */\n  clearAll: () => Promise<void>;\n}\n\n/**\n * History context value type\n */\nexport interface TryonHistoryContextValue {\n  /** History service instance */\n  historyService: TryonHistoryService;\n  /** Current configuration */\n  config: TryonHistoryStorageConfig;\n  /** Update configuration */\n  updateConfig: (config: Partial<TryonHistoryStorageConfig>) => void;\n}"],"mappings":"AAAA;AACA;AAEA;;GAEC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,KAAA;MAAAC,QAAA;IAAA;IAAAC,eAAA;IAAArB,IAAA;EAAA;EAAA,IAAAsB,QAAA,GAAArB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAmB,QAAA,CAAAvB,IAAA,KAAAuB,QAAA,CAAAvB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAsB,QAAA,CAAAvB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAmB,cAAA,GAAAD,QAAA,CAAAvB,IAAA;EAAA","ignoreList":[]}