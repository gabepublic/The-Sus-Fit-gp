b16041286347e5c0626bf956ad80e6e6
// Undo/Redo Stack Management for Image Editing
// Immutable state management for tracking and reverting image editing operations
"use strict";

/* istanbul ignore next */
function cov_1qr1h15i7w() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/undoRedoStack.ts";
  var hash = "2b69e696eafea9d864fb3e932101b8e11127b148";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/undoRedoStack.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 29
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "8": {
        start: {
          line: 27,
          column: 34
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "9": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "10": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 51
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 43
        }
      },
      "13": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 45
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "15": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 49
        }
      },
      "16": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 51
        }
      },
      "17": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "18": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "19": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 55
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 51
        }
      },
      "21": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "22": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "23": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 37
        }
      },
      "25": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 33
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 43
        }
      },
      "27": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "28": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "29": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "30": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "31": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 36
        }
      },
      "32": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 83,
          column: 92
        }
      },
      "33": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "35": {
        start: {
          line: 99,
          column: 26
        },
        end: {
          line: 99,
          column: 43
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "37": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 102,
          column: 63
        }
      },
      "38": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 46
        }
      },
      "39": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 48
        }
      },
      "40": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 55
        }
      },
      "41": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "42": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 32
        }
      },
      "43": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 59
        }
      },
      "44": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 94
        }
      },
      "45": {
        start: {
          line: 114,
          column: 24
        },
        end: {
          line: 114,
          column: 35
        }
      },
      "46": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "47": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 131,
          column: 18
        }
      },
      "48": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 81
        }
      },
      "49": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 49
        }
      },
      "50": {
        start: {
          line: 119,
          column: 48
        },
        end: {
          line: 119,
          column: 111
        }
      },
      "51": {
        start: {
          line: 120,
          column: 44
        },
        end: {
          line: 120,
          column: 73
        }
      },
      "52": {
        start: {
          line: 121,
          column: 41
        },
        end: {
          line: 121,
          column: 71
        }
      },
      "53": {
        start: {
          line: 122,
          column: 43
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "54": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 130,
          column: 23
        }
      },
      "55": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 34
        }
      },
      "56": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 84
        }
      },
      "57": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "58": {
        start: {
          line: 142,
          column: 30
        },
        end: {
          line: 142,
          column: 64
        }
      },
      "59": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 32
        }
      },
      "60": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 44
        }
      },
      "61": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "62": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 47
        }
      },
      "63": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "64": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 56
        }
      },
      "65": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 77
        }
      },
      "66": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 58
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 88
        }
      },
      "68": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 176,
          column: 14
        }
      },
      "69": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "70": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 122
        }
      },
      "71": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 122
        }
      },
      "72": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "73": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 70
        }
      },
      "74": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "75": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 27
        }
      },
      "76": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "77": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 71
        }
      },
      "78": {
        start: {
          line: 192,
          column: 19
        },
        end: {
          line: 192,
          column: 45
        }
      },
      "79": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "80": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 18
        }
      },
      "81": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "82": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 66
        }
      },
      "83": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 65
        }
      },
      "84": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "85": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 60
        }
      },
      "86": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 37
        }
      },
      "87": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 92
        }
      },
      "88": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 46
        }
      },
      "89": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 67
        }
      },
      "90": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "91": {
        start: {
          line: 229,
          column: 32
        },
        end: {
          line: 229,
          column: 89
        }
      },
      "92": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 57
        }
      },
      "93": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 51
        }
      },
      "94": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 43
        }
      },
      "95": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 27
        }
      },
      "96": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 284,
          column: 11
        }
      },
      "97": {
        start: {
          line: 240,
          column: 30
        },
        end: {
          line: 240,
          column: 47
        }
      },
      "98": {
        start: {
          line: 241,
          column: 33
        },
        end: {
          line: 241,
          column: 55
        }
      },
      "99": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "100": {
        start: {
          line: 244,
          column: 36
        },
        end: {
          line: 244,
          column: 57
        }
      },
      "101": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 36
        }
      },
      "102": {
        start: {
          line: 248,
          column: 35
        },
        end: {
          line: 248,
          column: 56
        }
      },
      "103": {
        start: {
          line: 250,
          column: 34
        },
        end: {
          line: 259,
          column: 17
        }
      },
      "104": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 125
        }
      },
      "105": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "106": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 264,
          column: 69
        }
      },
      "107": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 56
        }
      },
      "108": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "109": {
        start: {
          line: 270,
          column: 41
        },
        end: {
          line: 275,
          column: 21
        }
      },
      "110": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 278,
          column: 21
        }
      },
      "111": {
        start: {
          line: 277,
          column: 24
        },
        end: {
          line: 277,
          column: 60
        }
      },
      "112": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 38
        }
      },
      "113": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 30
        }
      },
      "114": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "115": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "116": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 292,
          column: 72
        }
      },
      "117": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 50
        }
      },
      "118": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 34
        }
      },
      "119": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 37
        }
      },
      "120": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 27
        }
      },
      "121": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 20
        }
      },
      "122": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "123": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 25
        }
      },
      "124": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 34
        }
      },
      "125": {
        start: {
          line: 306,
          column: 26
        },
        end: {
          line: 306,
          column: 72
        }
      },
      "126": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 49
        }
      },
      "127": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 37
        }
      },
      "128": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 27
        }
      },
      "129": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 20
        }
      },
      "130": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "131": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 25
        }
      },
      "132": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "133": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 76
        }
      },
      "134": {
        start: {
          line: 322,
          column: 30
        },
        end: {
          line: 322,
          column: 58
        }
      },
      "135": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 53
        }
      },
      "136": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 40
        }
      },
      "137": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 27
        }
      },
      "138": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 20
        }
      },
      "139": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 35
        }
      },
      "140": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 37
        }
      },
      "141": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 35
        }
      },
      "142": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 37
        }
      },
      "143": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 27
        }
      },
      "144": {
        start: {
          line: 341,
          column: 29
        },
        end: {
          line: 341,
          column: 92
        }
      },
      "145": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "146": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 42
        }
      },
      "147": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "148": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 42
        }
      },
      "149": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 50
        }
      },
      "150": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 27
        }
      },
      "151": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 362,
          column: 22
        }
      },
      "152": {
        start: {
          line: 356,
          column: 24
        },
        end: {
          line: 356,
          column: 34
        }
      },
      "153": {
        start: {
          line: 357,
          column: 41
        },
        end: {
          line: 357,
          column: 75
        }
      },
      "154": {
        start: {
          line: 358,
          column: 32
        },
        end: {
          line: 358,
          column: 76
        }
      },
      "155": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "156": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 31
        }
      },
      "157": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 369,
          column: 10
        }
      },
      "158": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 70
        }
      },
      "159": {
        start: {
          line: 374,
          column: 48
        },
        end: {
          line: 374,
          column: 60
        }
      },
      "160": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 381,
          column: 10
        }
      },
      "161": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 388,
          column: 10
        }
      },
      "162": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 396,
          column: 10
        }
      },
      "163": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "164": {
        start: {
          line: 399,
          column: 32
        },
        end: {
          line: 399,
          column: 89
        }
      },
      "165": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 57
        }
      },
      "166": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 90
        }
      },
      "167": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 403,
          column: 27
        }
      },
      "168": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 422,
          column: 11
        }
      },
      "169": {
        start: {
          line: 409,
          column: 57
        },
        end: {
          line: 419,
          column: 17
        }
      },
      "170": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "171": {
        start: {
          line: 428,
          column: 25
        },
        end: {
          line: 428,
          column: 48
        }
      },
      "172": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 62
        }
      },
      "173": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 24
        }
      },
      "174": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 62
        }
      },
      "175": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 25
        }
      },
      "176": {
        start: {
          line: 440,
          column: 4
        },
        end: {
          line: 440,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 31
          }
        },
        loc: {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 19
          },
          end: {
            line: 17,
            column: 20
          }
        },
        loc: {
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 22
          }
        },
        loc: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 28
          }
        },
        loc: {
          start: {
            line: 23,
            column: 38
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 27,
            column: 35
          }
        },
        loc: {
          start: {
            line: 27,
            column: 58
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 6
          },
          end: {
            line: 82,
            column: 7
          }
        },
        loc: {
          start: {
            line: 82,
            column: 39
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 98,
            column: 6
          },
          end: {
            line: 98,
            column: 7
          }
        },
        loc: {
          start: {
            line: 98,
            column: 39
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 98
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 115,
            column: 31
          },
          end: {
            line: 115,
            column: 32
          }
        },
        loc: {
          start: {
            line: 115,
            column: 42
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 115
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 116,
            column: 29
          },
          end: {
            line: 116,
            column: 30
          }
        },
        loc: {
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 131,
            column: 17
          }
        },
        line: 116
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 141,
            column: 6
          },
          end: {
            line: 141,
            column: 7
          }
        },
        loc: {
          start: {
            line: 141,
            column: 40
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 141
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 148,
            column: 6
          },
          end: {
            line: 148,
            column: 7
          }
        },
        loc: {
          start: {
            line: 148,
            column: 30
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 148
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 159,
            column: 6
          },
          end: {
            line: 159,
            column: 7
          }
        },
        loc: {
          start: {
            line: 159,
            column: 28
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 159
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 164,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 164
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 168,
            column: 62
          },
          end: {
            line: 168,
            column: 63
          }
        },
        loc: {
          start: {
            line: 168,
            column: 75
          },
          end: {
            line: 176,
            column: 9
          }
        },
        line: 168
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 188,
            column: 6
          },
          end: {
            line: 188,
            column: 7
          }
        },
        loc: {
          start: {
            line: 188,
            column: 53
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 188
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 207,
            column: 6
          },
          end: {
            line: 207,
            column: 7
          }
        },
        loc: {
          start: {
            line: 207,
            column: 30
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 207
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 221,
            column: 6
          },
          end: {
            line: 221,
            column: 7
          }
        },
        loc: {
          start: {
            line: 221,
            column: 37
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 221
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 238,
            column: 6
          },
          end: {
            line: 238,
            column: 7
          }
        },
        loc: {
          start: {
            line: 238,
            column: 80
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 238
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 239,
            column: 27
          },
          end: {
            line: 239,
            column: 28
          }
        },
        loc: {
          start: {
            line: 239,
            column: 52
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 239
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 288,
            column: 6
          },
          end: {
            line: 288,
            column: 7
          }
        },
        loc: {
          start: {
            line: 288,
            column: 13
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 288
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 301,
            column: 6
          },
          end: {
            line: 301,
            column: 7
          }
        },
        loc: {
          start: {
            line: 301,
            column: 13
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 301
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 314,
            column: 6
          },
          end: {
            line: 314,
            column: 7
          }
        },
        loc: {
          start: {
            line: 314,
            column: 29
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 314
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 331,
            column: 6
          },
          end: {
            line: 331,
            column: 7
          }
        },
        loc: {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 331
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 340,
            column: 6
          },
          end: {
            line: 340,
            column: 7
          }
        },
        loc: {
          start: {
            line: 340,
            column: 30
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 340
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 354,
            column: 6
          },
          end: {
            line: 354,
            column: 7
          }
        },
        loc: {
          start: {
            line: 354,
            column: 25
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 354
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 355,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        },
        loc: {
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 362,
            column: 9
          }
        },
        line: 355
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 366,
            column: 6
          },
          end: {
            line: 366,
            column: 7
          }
        },
        loc: {
          start: {
            line: 366,
            column: 19
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 366
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 373,
            column: 6
          },
          end: {
            line: 373,
            column: 7
          }
        },
        loc: {
          start: {
            line: 373,
            column: 23
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 373
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 374,
            column: 42
          },
          end: {
            line: 374,
            column: 43
          }
        },
        loc: {
          start: {
            line: 374,
            column: 48
          },
          end: {
            line: 374,
            column: 60
          }
        },
        line: 374
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 378,
            column: 6
          },
          end: {
            line: 378,
            column: 7
          }
        },
        loc: {
          start: {
            line: 378,
            column: 17
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 378
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 385,
            column: 6
          },
          end: {
            line: 385,
            column: 7
          }
        },
        loc: {
          start: {
            line: 385,
            column: 18
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 385
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 392,
            column: 6
          },
          end: {
            line: 392,
            column: 7
          }
        },
        loc: {
          start: {
            line: 392,
            column: 30
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 392
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 407,
            column: 6
          },
          end: {
            line: 407,
            column: 7
          }
        },
        loc: {
          start: {
            line: 407,
            column: 22
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 407
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 409,
            column: 50
          },
          end: {
            line: 409,
            column: 51
          }
        },
        loc: {
          start: {
            line: 409,
            column: 57
          },
          end: {
            line: 419,
            column: 17
          }
        },
        line: 409
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 426,
            column: 6
          },
          end: {
            line: 426,
            column: 7
          }
        },
        loc: {
          start: {
            line: 426,
            column: 33
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 426
      },
      "37": {
        name: "createUndoRedoManager",
        decl: {
          start: {
            line: 439,
            column: 9
          },
          end: {
            line: 439,
            column: 30
          }
        },
        loc: {
          start: {
            line: 439,
            column: 54
          },
          end: {
            line: 441,
            column: 1
          }
        },
        line: 439
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 31
          },
          end: {
            line: 52,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 40
          },
          end: {
            line: 52,
            column: 42
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 82,
            column: 37
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "5": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 48
          }
        }, {
          start: {
            line: 150,
            column: 52
          },
          end: {
            line: 150,
            column: 90
          }
        }],
        line: 150
      },
      "6": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: 172,
            column: 19
          },
          end: {
            line: 175,
            column: 13
          }
        }],
        line: 169
      },
      "7": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "8": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "9": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "10": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "11": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "12": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "13": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: 265,
            column: 23
          },
          end: {
            line: 267,
            column: 17
          }
        }],
        line: 263
      },
      "14": {
        loc: {
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "15": {
        loc: {
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 278,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 278,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "16": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "17": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "18": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "19": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 22
          }
        }, {
          start: {
            line: 315,
            column: 26
          },
          end: {
            line: 315,
            column: 63
          }
        }],
        line: 315
      },
      "20": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: 321,
            column: 15
          },
          end: {
            line: 324,
            column: 9
          }
        }],
        line: 318
      },
      "21": {
        loc: {
          start: {
            line: 341,
            column: 30
          },
          end: {
            line: 341,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 30
          },
          end: {
            line: 341,
            column: 44
          }
        }, {
          start: {
            line: 341,
            column: 48
          },
          end: {
            line: 341,
            column: 77
          }
        }],
        line: 341
      },
      "22": {
        loc: {
          start: {
            line: 342,
            column: 14
          },
          end: {
            line: 342,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 14
          },
          end: {
            line: 342,
            column: 51
          }
        }, {
          start: {
            line: 342,
            column: 55
          },
          end: {
            line: 342,
            column: 88
          }
        }],
        line: 342
      },
      "23": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "24": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "25": {
        loc: {
          start: {
            line: 374,
            column: 15
          },
          end: {
            line: 374,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 15
          },
          end: {
            line: 374,
            column: 61
          }
        }, {
          start: {
            line: 374,
            column: 65
          },
          end: {
            line: 374,
            column: 69
          }
        }],
        line: 374
      },
      "26": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "27": {
        loc: {
          start: {
            line: 431,
            column: 31
          },
          end: {
            line: 431,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 31
          },
          end: {
            line: 431,
            column: 41
          }
        }, {
          start: {
            line: 431,
            column: 45
          },
          end: {
            line: 431,
            column: 61
          }
        }],
        line: 431
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/undoRedoStack.ts"],
      sourcesContent: ["// Undo/Redo Stack Management for Image Editing\n// Immutable state management for tracking and reverting image editing operations\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\n\n/**\n * Operation types that can be undone/redone\n */\nexport enum OperationType {\n  IMAGE_LOAD = 'image_load',\n  IMAGE_RESIZE = 'image_resize',\n  FILTER_APPLY = 'filter_apply',\n  TEXT_ADD = 'text_add',\n  TEXT_EDIT = 'text_edit',\n  TEXT_REMOVE = 'text_remove',\n  STICKER_ADD = 'sticker_add',\n  STICKER_MOVE = 'sticker_move',\n  STICKER_SCALE = 'sticker_scale',\n  STICKER_ROTATE = 'sticker_rotate',\n  STICKER_REMOVE = 'sticker_remove',\n  CANVAS_CLEAR = 'canvas_clear',\n  COMPOSITE_OPERATION = 'composite_operation'\n}\n\n/**\n * Base operation interface\n */\nexport interface BaseOperation {\n  id: string;\n  type: OperationType;\n  timestamp: number;\n  description: string;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Canvas snapshot for state preservation\n */\nexport interface CanvasSnapshot {\n  imageData: ImageData;\n  width: number;\n  height: number;\n  timestamp: number;\n  compressed?: boolean;\n  compressionLevel?: number;\n}\n\n/**\n * Operation with state data\n */\nexport interface Operation extends BaseOperation {\n  /** State before the operation */\n  beforeState: CanvasSnapshot;\n  /** State after the operation */\n  afterState: CanvasSnapshot;\n  /** Additional operation-specific data */\n  operationData?: Record<string, unknown>;\n  /** Memory usage in bytes */\n  memoryUsage?: number;\n}\n\n/**\n * Composite operation containing multiple sub-operations\n */\nexport interface CompositeOperation extends BaseOperation {\n  operations: Operation[];\n  beforeState: CanvasSnapshot;\n  afterState: CanvasSnapshot;\n}\n\n/**\n * Undo/Redo stack configuration\n */\nexport interface UndoRedoConfig {\n  /** Maximum number of operations to keep in history */\n  maxHistorySize: number;\n  /** Enable automatic snapshot compression */\n  enableCompression: boolean;\n  /** Compression quality (0-1) */\n  compressionQuality: number;\n  /** Memory usage limit in MB */\n  memoryLimit: number;\n  /** Auto-cleanup threshold in minutes */\n  autoCleanupThreshold: number;\n  /** Enable performance monitoring */\n  enablePerfMonitoring: boolean;\n}\n\n/**\n * Undo/Redo stack state\n */\nexport interface UndoRedoState {\n  /** Current position in the stack */\n  currentIndex: number;\n  /** Operations stack */\n  operations: (Operation | CompositeOperation)[];\n  /** Can undo */\n  canUndo: boolean;\n  /** Can redo */\n  canRedo: boolean;\n  /** Total memory usage */\n  memoryUsage: number;\n  /** Stack statistics */\n  stats: {\n    totalOperations: number;\n    undoCount: number;\n    redoCount: number;\n    memoryPeakUsage: number;\n    lastCleanup: number;\n  };\n}\n\n/**\n * Performance metrics for operations\n */\nexport interface OperationPerformance {\n  executionTime: number;\n  memoryBefore: number;\n  memoryAfter: number;\n  snapshotTime: number;\n  compressionTime?: number;\n  compressionRatio?: number;\n}\n\n/**\n * Default configuration\n */\nexport const DEFAULT_UNDO_REDO_CONFIG: UndoRedoConfig = {\n  maxHistorySize: 50,\n  enableCompression: true,\n  compressionQuality: 0.8,\n  memoryLimit: 100, // 100MB\n  autoCleanupThreshold: 30, // 30 minutes\n  enablePerfMonitoring: true\n};\n\n/**\n * Undo/Redo stack manager\n */\nexport class UndoRedoManager {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private config: UndoRedoConfig;\n  private state: UndoRedoState;\n  private currentComposite: CompositeOperation | null = null;\n  private lastSnapshot: CanvasSnapshot | null = null;\n\n  constructor(managedCanvas: ManagedCanvas, config: Partial<UndoRedoConfig> = {}) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n    this.config = { ...DEFAULT_UNDO_REDO_CONFIG, ...config };\n    this.state = {\n      currentIndex: -1,\n      operations: [],\n      canUndo: false,\n      canRedo: false,\n      memoryUsage: 0,\n      stats: {\n        totalOperations: 0,\n        undoCount: 0,\n        redoCount: 0,\n        memoryPeakUsage: 0,\n        lastCleanup: Date.now()\n      }\n    };\n\n    // Setup automatic cleanup\n    if (this.config.autoCleanupThreshold > 0) {\n      this.setupAutoCleanup();\n    }\n  }\n\n  /**\n   * Create canvas snapshot\n   */\n  private createSnapshot(compress: boolean = false): CanvasSnapshot {\n    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    \n    const snapshot: CanvasSnapshot = {\n      imageData,\n      width: this.canvas.width,\n      height: this.canvas.height,\n      timestamp: Date.now()\n    };\n\n    // Note: Compression disabled for synchronous operation\n    // if (compress) {\n    //   snapshot = await this.compressSnapshot(snapshot);\n    // }\n\n    return snapshot;\n  }\n\n  /**\n   * Compress snapshot to reduce memory usage\n   */\n  private async compressSnapshot(snapshot: CanvasSnapshot): Promise<CanvasSnapshot> {\n    const startTime = performance.now();\n    \n    try {\n      // Create temporary canvas for compression\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = snapshot.width;\n      tempCanvas.height = snapshot.height;\n      const tempCtx = tempCanvas.getContext('2d');\n      \n      if (!tempCtx) {\n        return snapshot; // Return uncompressed if context unavailable\n      }\n      \n      // Draw image data to temporary canvas\n      tempCtx.putImageData(snapshot.imageData, 0, 0);\n      \n      // Convert to compressed data URL\n      const dataUrl = tempCanvas.toDataURL('image/jpeg', this.config.compressionQuality);\n      \n      // Convert back to image data (this simulates compression)\n      const img = new Image();\n      return new Promise<CanvasSnapshot>((resolve) => {\n        img.onload = () => {\n          tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);\n          tempCtx.drawImage(img, 0, 0);\n          const compressedImageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n          \n          const compressionTime = performance.now() - startTime;\n          const originalSize = snapshot.imageData.data.length;\n          const compressedSize = compressedImageData.data.length;\n          \n          resolve({\n            imageData: compressedImageData,\n            width: tempCanvas.width,\n            height: tempCanvas.height,\n            timestamp: snapshot.timestamp,\n            compressed: true,\n            compressionLevel: this.config.compressionQuality\n          });\n        };\n        img.src = dataUrl;\n      });\n    } catch (error) {\n      console.warn('Snapshot compression failed, using uncompressed:', error);\n      return snapshot;\n    }\n  }\n\n  /**\n   * Calculate memory usage of snapshot\n   */\n  private calculateSnapshotMemory(snapshot: CanvasSnapshot): number {\n    const imageDataSize = snapshot.imageData.data.length * 4; // 4 bytes per pixel (RGBA)\n    const metadataSize = 100; // Approximate metadata size\n    return imageDataSize + metadataSize;\n  }\n\n  /**\n   * Apply snapshot to canvas\n   */\n  private applySnapshot(snapshot: CanvasSnapshot): void {\n    // Resize canvas if needed\n    if (this.canvas.width !== snapshot.width || this.canvas.height !== snapshot.height) {\n      this.canvas.width = snapshot.width;\n      this.canvas.height = snapshot.height;\n    }\n\n    // Apply image data\n    this.ctx.putImageData(snapshot.imageData, 0, 0);\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Update stack state\n   */\n  private updateState(): void {\n    this.state.canUndo = this.state.currentIndex >= 0;\n    this.state.canRedo = this.state.currentIndex < this.state.operations.length - 1;\n    \n    // Calculate total memory usage\n    this.state.memoryUsage = this.state.operations.reduce((total, op) => {\n      if ('operations' in op) {\n        // Composite operation\n        return total + this.calculateSnapshotMemory(op.beforeState) + \n               this.calculateSnapshotMemory(op.afterState);\n      } else {\n        // Regular operation\n        return total + this.calculateSnapshotMemory(op.beforeState) + \n               this.calculateSnapshotMemory(op.afterState);\n      }\n    }, 0);\n\n    // Update peak memory usage\n    if (this.state.memoryUsage > this.state.stats.memoryPeakUsage) {\n      this.state.stats.memoryPeakUsage = this.state.memoryUsage;\n    }\n\n    // Check memory limit\n    if (this.state.memoryUsage > this.config.memoryLimit * 1024 * 1024) {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Start composite operation\n   */\n  startCompositeOperation(description: string, metadata?: Record<string, unknown>): string {\n    if (this.currentComposite) {\n      throw new Error('Composite operation already in progress');\n    }\n\n    const id = this.generateOperationId();\n    this.currentComposite = {\n      id,\n      type: OperationType.COMPOSITE_OPERATION,\n      timestamp: Date.now(),\n      description,\n      metadata,\n      operations: [],\n      beforeState: this.createSnapshot(),\n      afterState: this.createSnapshot() // Will be updated when completed\n    };\n\n    return id;\n  }\n\n  /**\n   * End composite operation\n   */\n  endCompositeOperation(): void {\n    if (!this.currentComposite) {\n      throw new Error('No composite operation in progress');\n    }\n\n    // Update after state\n    this.currentComposite.afterState = this.createSnapshot();\n\n    // Add to operations stack if it contains sub-operations\n    if (this.currentComposite.operations.length > 0) {\n      this.addOperationToStack(this.currentComposite);\n    }\n\n    this.currentComposite = null;\n  }\n\n  /**\n   * Add operation to stack\n   */\n  private addOperationToStack(operation: Operation | CompositeOperation): void {\n    // Remove any operations after current index (for redo scenarios)\n    this.state.operations = this.state.operations.slice(0, this.state.currentIndex + 1);\n\n    // Add new operation\n    this.state.operations.push(operation);\n    this.state.currentIndex = this.state.operations.length - 1;\n\n    // Enforce history size limit\n    if (this.state.operations.length > this.config.maxHistorySize) {\n      const removeCount = this.state.operations.length - this.config.maxHistorySize;\n      this.state.operations.splice(0, removeCount);\n      this.state.currentIndex -= removeCount;\n    }\n\n    this.state.stats.totalOperations++;\n    this.updateState();\n  }\n\n  /**\n   * Execute operation with automatic state tracking\n   */\n  executeOperation(\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>,\n    metadata?: Record<string, unknown>\n  ): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      const startTime = performance.now();\n      const memoryBefore = this.state.memoryUsage;\n      \n      try {\n        // Capture before state\n        const beforeState = this.createSnapshot();\n        \n        // Execute the operation\n        await operationFn();\n        \n        // Capture after state\n        const afterState = this.createSnapshot();\n        \n        // Create operation record\n        const operation: Operation = {\n          id: this.generateOperationId(),\n          type,\n          timestamp: Date.now(),\n          description,\n          beforeState,\n          afterState,\n          operationData,\n          metadata\n        };\n\n        // Calculate memory usage\n        operation.memoryUsage = this.calculateSnapshotMemory(beforeState) + \n                               this.calculateSnapshotMemory(afterState);\n\n        // Add to current composite or directly to stack\n        if (this.currentComposite) {\n          this.currentComposite.operations.push(operation);\n        } else {\n          this.addOperationToStack(operation);\n        }\n\n        // Record performance metrics\n        if (this.config.enablePerfMonitoring) {\n          const performance: OperationPerformance = {\n            executionTime: Date.now() - startTime,\n            memoryBefore,\n            memoryAfter: this.state.memoryUsage,\n            snapshotTime: 0 // Would be calculated in real implementation\n          };\n          \n          if (metadata) {\n            metadata.performance = performance;\n          }\n        }\n\n        resolve(operation.id);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Undo last operation\n   */\n  undo(): boolean {\n    if (!this.state.canUndo) {\n      return false;\n    }\n\n    const operation = this.state.operations[this.state.currentIndex];\n    this.applySnapshot(operation.beforeState);\n    \n    this.state.currentIndex--;\n    this.state.stats.undoCount++;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Redo next operation\n   */\n  redo(): boolean {\n    if (!this.state.canRedo) {\n      return false;\n    }\n\n    this.state.currentIndex++;\n    const operation = this.state.operations[this.state.currentIndex];\n    this.applySnapshot(operation.afterState);\n    \n    this.state.stats.redoCount++;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Jump to specific operation in history\n   */\n  jumpToOperation(index: number): boolean {\n    if (index < -1 || index >= this.state.operations.length) {\n      return false;\n    }\n\n    if (index === -1) {\n      // Jump to initial state (before any operations)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      const operation = this.state.operations[index];\n      this.applySnapshot(operation.afterState);\n    }\n\n    this.state.currentIndex = index;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Clear entire history\n   */\n  clearHistory(): void {\n    this.state.operations = [];\n    this.state.currentIndex = -1;\n    this.state.memoryUsage = 0;\n    this.currentComposite = null;\n    this.updateState();\n  }\n\n  /**\n   * Cleanup old operations to free memory\n   */\n  cleanup(targetMemoryMB?: number): void {\n    const targetMemory = (targetMemoryMB || this.config.memoryLimit * 0.7) * 1024 * 1024;\n    \n    while (this.state.memoryUsage > targetMemory && this.state.operations.length > 10) {\n      // Remove oldest operation\n      this.state.operations.shift();\n      if (this.state.currentIndex > 0) {\n        this.state.currentIndex--;\n      }\n    }\n\n    this.state.stats.lastCleanup = Date.now();\n    this.updateState();\n  }\n\n  /**\n   * Setup automatic cleanup\n   */\n  private setupAutoCleanup(): void {\n    setInterval(() => {\n      const now = Date.now();\n      const timeSinceLastCleanup = now - this.state.stats.lastCleanup;\n      const thresholdMs = this.config.autoCleanupThreshold * 60 * 1000;\n\n      if (timeSinceLastCleanup > thresholdMs) {\n        this.cleanup();\n      }\n    }, 60 * 1000); // Check every minute\n  }\n\n  /**\n   * Get operation history\n   */\n  getHistory(): (Operation | CompositeOperation)[] {\n    return [...this.state.operations];\n  }\n\n  /**\n   * Get operation by ID\n   */\n  getOperation(id: string): Operation | CompositeOperation | null {\n    return this.state.operations.find(op => op.id === id) || null;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): UndoRedoState {\n    return { ...this.state };\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): UndoRedoConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<UndoRedoConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Apply new limits\n    if (this.state.operations.length > this.config.maxHistorySize) {\n      const removeCount = this.state.operations.length - this.config.maxHistorySize;\n      this.state.operations.splice(0, removeCount);\n      this.state.currentIndex = Math.max(-1, this.state.currentIndex - removeCount);\n    }\n\n    this.updateState();\n  }\n\n  /**\n   * Export history for persistence\n   */\n  exportHistory(): string {\n    return JSON.stringify({\n      operations: this.state.operations.map(op => ({\n        ...op,\n        beforeState: { ...op.beforeState, imageData: null }, // Exclude image data\n        afterState: { ...op.afterState, imageData: null }\n      })),\n      currentIndex: this.state.currentIndex,\n      stats: this.state.stats\n    });\n  }\n\n  /**\n   * Import history from persistence\n   */\n  importHistory(historyData: string): boolean {\n    try {\n      const data = JSON.parse(historyData);\n      // Note: This is a simplified implementation\n      // In practice, you'd need to restore the image data\n      this.state.stats = data.stats || this.state.stats;\n      return true;\n    } catch (error) {\n      console.error('Failed to import history:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Factory function to create undo/redo manager\n */\nexport function createUndoRedoManager(\n  managedCanvas: ManagedCanvas, \n  config?: Partial<UndoRedoConfig>\n): UndoRedoManager {\n  return new UndoRedoManager(managedCanvas, config);\n}"],
      names: ["DEFAULT_UNDO_REDO_CONFIG", "OperationType", "UndoRedoManager", "createUndoRedoManager", "maxHistorySize", "enableCompression", "compressionQuality", "memoryLimit", "autoCleanupThreshold", "enablePerfMonitoring", "constructor", "managedCanvas", "config", "currentComposite", "lastSnapshot", "canvas", "ctx", "context", "state", "currentIndex", "operations", "canUndo", "canRedo", "memoryUsage", "stats", "totalOperations", "undoCount", "redoCount", "memoryPeakUsage", "lastCleanup", "Date", "now", "setupAutoCleanup", "createSnapshot", "compress", "imageData", "getImageData", "width", "height", "snapshot", "timestamp", "compressSnapshot", "startTime", "performance", "tempCanvas", "document", "createElement", "tempCtx", "getContext", "putImageData", "dataUrl", "toDataURL", "img", "Image", "Promise", "resolve", "onload", "clearRect", "drawImage", "compressedImageData", "compressionTime", "originalSize", "data", "length", "compressedSize", "compressed", "compressionLevel", "src", "error", "console", "warn", "calculateSnapshotMemory", "imageDataSize", "metadataSize", "applySnapshot", "generateOperationId", "Math", "random", "toString", "substr", "updateState", "reduce", "total", "op", "beforeState", "afterState", "cleanup", "startCompositeOperation", "description", "metadata", "Error", "id", "type", "endCompositeOperation", "addOperationToStack", "operation", "slice", "push", "removeCount", "splice", "executeOperation", "operationFn", "operationData", "reject", "memoryBefore", "executionTime", "memoryAfter", "snapshotTime", "undo", "redo", "jumpToOperation", "index", "clearHistory", "targetMemoryMB", "targetMemory", "shift", "setInterval", "timeSinceLastCleanup", "thresholdMs", "getHistory", "getOperation", "find", "getState", "getConfig", "updateConfig", "newConfig", "max", "exportHistory", "JSON", "stringify", "map", "importHistory", "historyData", "parse"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b69e696eafea9d864fb3e932101b8e11127b148"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qr1h15i7w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qr1h15i7w();
cov_1qr1h15i7w().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1qr1h15i7w().f[0]++;
  cov_1qr1h15i7w().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1qr1h15i7w().s[3]++;
_export(exports, {
  DEFAULT_UNDO_REDO_CONFIG: function () {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[1]++;
    cov_1qr1h15i7w().s[4]++;
    return DEFAULT_UNDO_REDO_CONFIG;
  },
  OperationType: function () {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[2]++;
    cov_1qr1h15i7w().s[5]++;
    return OperationType;
  },
  UndoRedoManager: function () {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[3]++;
    cov_1qr1h15i7w().s[6]++;
    return UndoRedoManager;
  },
  createUndoRedoManager: function () {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[4]++;
    cov_1qr1h15i7w().s[7]++;
    return createUndoRedoManager;
  }
});
var OperationType =
/* istanbul ignore next */
(/*#__PURE__*/cov_1qr1h15i7w().s[8]++, function (OperationType) {
  /* istanbul ignore next */
  cov_1qr1h15i7w().f[5]++;
  cov_1qr1h15i7w().s[9]++;
  OperationType["IMAGE_LOAD"] = "image_load";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[10]++;
  OperationType["IMAGE_RESIZE"] = "image_resize";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[11]++;
  OperationType["FILTER_APPLY"] = "filter_apply";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[12]++;
  OperationType["TEXT_ADD"] = "text_add";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[13]++;
  OperationType["TEXT_EDIT"] = "text_edit";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[14]++;
  OperationType["TEXT_REMOVE"] = "text_remove";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[15]++;
  OperationType["STICKER_ADD"] = "sticker_add";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[16]++;
  OperationType["STICKER_MOVE"] = "sticker_move";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[17]++;
  OperationType["STICKER_SCALE"] = "sticker_scale";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[18]++;
  OperationType["STICKER_ROTATE"] = "sticker_rotate";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[19]++;
  OperationType["STICKER_REMOVE"] = "sticker_remove";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[20]++;
  OperationType["CANVAS_CLEAR"] = "canvas_clear";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[21]++;
  OperationType["COMPOSITE_OPERATION"] = "composite_operation";
  /* istanbul ignore next */
  cov_1qr1h15i7w().s[22]++;
  return OperationType;
}({}));
const DEFAULT_UNDO_REDO_CONFIG =
/* istanbul ignore next */
(cov_1qr1h15i7w().s[23]++, {
  maxHistorySize: 50,
  enableCompression: true,
  compressionQuality: 0.8,
  memoryLimit: 100,
  autoCleanupThreshold: 30,
  enablePerfMonitoring: true
});
class UndoRedoManager {
  constructor(managedCanvas, config =
  /* istanbul ignore next */
  (cov_1qr1h15i7w().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[6]++;
    cov_1qr1h15i7w().s[24]++;
    this.currentComposite = null;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[25]++;
    this.lastSnapshot = null;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[26]++;
    this.canvas = managedCanvas.canvas;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[27]++;
    this.ctx = managedCanvas.context;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[28]++;
    this.config = {
      ...DEFAULT_UNDO_REDO_CONFIG,
      ...config
    };
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[29]++;
    this.state = {
      currentIndex: -1,
      operations: [],
      canUndo: false,
      canRedo: false,
      memoryUsage: 0,
      stats: {
        totalOperations: 0,
        undoCount: 0,
        redoCount: 0,
        memoryPeakUsage: 0,
        lastCleanup: Date.now()
      }
    };
    // Setup automatic cleanup
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[30]++;
    if (this.config.autoCleanupThreshold > 0) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[1][0]++;
      cov_1qr1h15i7w().s[31]++;
      this.setupAutoCleanup();
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[1][1]++;
    }
  }
  /**
  * Create canvas snapshot
  */
  createSnapshot(compress =
  /* istanbul ignore next */
  (cov_1qr1h15i7w().b[2][0]++, false)) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[7]++;
    const imageData =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[32]++, this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height));
    const snapshot =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[33]++, {
      imageData,
      width: this.canvas.width,
      height: this.canvas.height,
      timestamp: Date.now()
    });
    // Note: Compression disabled for synchronous operation
    // if (compress) {
    //   snapshot = await this.compressSnapshot(snapshot);
    // }
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[34]++;
    return snapshot;
  }
  /**
  * Compress snapshot to reduce memory usage
  */
  async compressSnapshot(snapshot) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[8]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[35]++, performance.now());
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[36]++;
    try {
      // Create temporary canvas for compression
      const tempCanvas =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[37]++, document.createElement('canvas'));
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[38]++;
      tempCanvas.width = snapshot.width;
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[39]++;
      tempCanvas.height = snapshot.height;
      const tempCtx =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[40]++, tempCanvas.getContext('2d'));
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[41]++;
      if (!tempCtx) {
        /* istanbul ignore next */
        cov_1qr1h15i7w().b[3][0]++;
        cov_1qr1h15i7w().s[42]++;
        return snapshot; // Return uncompressed if context unavailable
      } else
      /* istanbul ignore next */
      {
        cov_1qr1h15i7w().b[3][1]++;
      }
      // Draw image data to temporary canvas
      cov_1qr1h15i7w().s[43]++;
      tempCtx.putImageData(snapshot.imageData, 0, 0);
      // Convert to compressed data URL
      const dataUrl =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[44]++, tempCanvas.toDataURL('image/jpeg', this.config.compressionQuality));
      // Convert back to image data (this simulates compression)
      const img =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[45]++, new Image());
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[46]++;
      return new Promise(resolve => {
        /* istanbul ignore next */
        cov_1qr1h15i7w().f[9]++;
        cov_1qr1h15i7w().s[47]++;
        img.onload = () => {
          /* istanbul ignore next */
          cov_1qr1h15i7w().f[10]++;
          cov_1qr1h15i7w().s[48]++;
          tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
          /* istanbul ignore next */
          cov_1qr1h15i7w().s[49]++;
          tempCtx.drawImage(img, 0, 0);
          const compressedImageData =
          /* istanbul ignore next */
          (cov_1qr1h15i7w().s[50]++, tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height));
          const compressionTime =
          /* istanbul ignore next */
          (cov_1qr1h15i7w().s[51]++, performance.now() - startTime);
          const originalSize =
          /* istanbul ignore next */
          (cov_1qr1h15i7w().s[52]++, snapshot.imageData.data.length);
          const compressedSize =
          /* istanbul ignore next */
          (cov_1qr1h15i7w().s[53]++, compressedImageData.data.length);
          /* istanbul ignore next */
          cov_1qr1h15i7w().s[54]++;
          resolve({
            imageData: compressedImageData,
            width: tempCanvas.width,
            height: tempCanvas.height,
            timestamp: snapshot.timestamp,
            compressed: true,
            compressionLevel: this.config.compressionQuality
          });
        };
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[55]++;
        img.src = dataUrl;
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[56]++;
      console.warn('Snapshot compression failed, using uncompressed:', error);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[57]++;
      return snapshot;
    }
  }
  /**
  * Calculate memory usage of snapshot
  */
  calculateSnapshotMemory(snapshot) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[11]++;
    const imageDataSize =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[58]++, snapshot.imageData.data.length * 4); // 4 bytes per pixel (RGBA)
    const metadataSize =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[59]++, 100); // Approximate metadata size
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[60]++;
    return imageDataSize + metadataSize;
  }
  /**
  * Apply snapshot to canvas
  */
  applySnapshot(snapshot) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[12]++;
    cov_1qr1h15i7w().s[61]++;
    // Resize canvas if needed
    if (
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[5][0]++, this.canvas.width !== snapshot.width) ||
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[5][1]++, this.canvas.height !== snapshot.height)) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[4][0]++;
      cov_1qr1h15i7w().s[62]++;
      this.canvas.width = snapshot.width;
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[63]++;
      this.canvas.height = snapshot.height;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[4][1]++;
    }
    // Apply image data
    cov_1qr1h15i7w().s[64]++;
    this.ctx.putImageData(snapshot.imageData, 0, 0);
  }
  /**
  * Generate unique operation ID
  */
  generateOperationId() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[13]++;
    cov_1qr1h15i7w().s[65]++;
    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
  * Update stack state
  */
  updateState() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[14]++;
    cov_1qr1h15i7w().s[66]++;
    this.state.canUndo = this.state.currentIndex >= 0;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[67]++;
    this.state.canRedo = this.state.currentIndex < this.state.operations.length - 1;
    // Calculate total memory usage
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[68]++;
    this.state.memoryUsage = this.state.operations.reduce((total, op) => {
      /* istanbul ignore next */
      cov_1qr1h15i7w().f[15]++;
      cov_1qr1h15i7w().s[69]++;
      if ('operations' in op) {
        /* istanbul ignore next */
        cov_1qr1h15i7w().b[6][0]++;
        cov_1qr1h15i7w().s[70]++;
        // Composite operation
        return total + this.calculateSnapshotMemory(op.beforeState) + this.calculateSnapshotMemory(op.afterState);
      } else {
        /* istanbul ignore next */
        cov_1qr1h15i7w().b[6][1]++;
        cov_1qr1h15i7w().s[71]++;
        // Regular operation
        return total + this.calculateSnapshotMemory(op.beforeState) + this.calculateSnapshotMemory(op.afterState);
      }
    }, 0);
    // Update peak memory usage
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[72]++;
    if (this.state.memoryUsage > this.state.stats.memoryPeakUsage) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[7][0]++;
      cov_1qr1h15i7w().s[73]++;
      this.state.stats.memoryPeakUsage = this.state.memoryUsage;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[7][1]++;
    }
    // Check memory limit
    cov_1qr1h15i7w().s[74]++;
    if (this.state.memoryUsage > this.config.memoryLimit * 1024 * 1024) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[8][0]++;
      cov_1qr1h15i7w().s[75]++;
      this.cleanup();
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[8][1]++;
    }
  }
  /**
  * Start composite operation
  */
  startCompositeOperation(description, metadata) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[16]++;
    cov_1qr1h15i7w().s[76]++;
    if (this.currentComposite) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[9][0]++;
      cov_1qr1h15i7w().s[77]++;
      throw new Error('Composite operation already in progress');
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[9][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[78]++, this.generateOperationId());
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[79]++;
    this.currentComposite = {
      id,
      type: "composite_operation",
      timestamp: Date.now(),
      description,
      metadata,
      operations: [],
      beforeState: this.createSnapshot(),
      afterState: this.createSnapshot() // Will be updated when completed
    };
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[80]++;
    return id;
  }
  /**
  * End composite operation
  */
  endCompositeOperation() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[17]++;
    cov_1qr1h15i7w().s[81]++;
    if (!this.currentComposite) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[10][0]++;
      cov_1qr1h15i7w().s[82]++;
      throw new Error('No composite operation in progress');
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[10][1]++;
    }
    // Update after state
    cov_1qr1h15i7w().s[83]++;
    this.currentComposite.afterState = this.createSnapshot();
    // Add to operations stack if it contains sub-operations
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[84]++;
    if (this.currentComposite.operations.length > 0) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[11][0]++;
      cov_1qr1h15i7w().s[85]++;
      this.addOperationToStack(this.currentComposite);
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[11][1]++;
    }
    cov_1qr1h15i7w().s[86]++;
    this.currentComposite = null;
  }
  /**
  * Add operation to stack
  */
  addOperationToStack(operation) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[18]++;
    cov_1qr1h15i7w().s[87]++;
    // Remove any operations after current index (for redo scenarios)
    this.state.operations = this.state.operations.slice(0, this.state.currentIndex + 1);
    // Add new operation
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[88]++;
    this.state.operations.push(operation);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[89]++;
    this.state.currentIndex = this.state.operations.length - 1;
    // Enforce history size limit
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[90]++;
    if (this.state.operations.length > this.config.maxHistorySize) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[12][0]++;
      const removeCount =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[91]++, this.state.operations.length - this.config.maxHistorySize);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[92]++;
      this.state.operations.splice(0, removeCount);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[93]++;
      this.state.currentIndex -= removeCount;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[12][1]++;
    }
    cov_1qr1h15i7w().s[94]++;
    this.state.stats.totalOperations++;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[95]++;
    this.updateState();
  }
  /**
  * Execute operation with automatic state tracking
  */
  executeOperation(type, description, operationFn, operationData, metadata) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[19]++;
    cov_1qr1h15i7w().s[96]++;
    return new Promise(async (resolve, reject) => {
      /* istanbul ignore next */
      cov_1qr1h15i7w().f[20]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[97]++, performance.now());
      const memoryBefore =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[98]++, this.state.memoryUsage);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[99]++;
      try {
        // Capture before state
        const beforeState =
        /* istanbul ignore next */
        (cov_1qr1h15i7w().s[100]++, this.createSnapshot());
        // Execute the operation
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[101]++;
        await operationFn();
        // Capture after state
        const afterState =
        /* istanbul ignore next */
        (cov_1qr1h15i7w().s[102]++, this.createSnapshot());
        // Create operation record
        const operation =
        /* istanbul ignore next */
        (cov_1qr1h15i7w().s[103]++, {
          id: this.generateOperationId(),
          type,
          timestamp: Date.now(),
          description,
          beforeState,
          afterState,
          operationData,
          metadata
        });
        // Calculate memory usage
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[104]++;
        operation.memoryUsage = this.calculateSnapshotMemory(beforeState) + this.calculateSnapshotMemory(afterState);
        // Add to current composite or directly to stack
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[105]++;
        if (this.currentComposite) {
          /* istanbul ignore next */
          cov_1qr1h15i7w().b[13][0]++;
          cov_1qr1h15i7w().s[106]++;
          this.currentComposite.operations.push(operation);
        } else {
          /* istanbul ignore next */
          cov_1qr1h15i7w().b[13][1]++;
          cov_1qr1h15i7w().s[107]++;
          this.addOperationToStack(operation);
        }
        // Record performance metrics
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[108]++;
        if (this.config.enablePerfMonitoring) {
          /* istanbul ignore next */
          cov_1qr1h15i7w().b[14][0]++;
          const performance1 =
          /* istanbul ignore next */
          (cov_1qr1h15i7w().s[109]++, {
            executionTime: Date.now() - startTime,
            memoryBefore,
            memoryAfter: this.state.memoryUsage,
            snapshotTime: 0 // Would be calculated in real implementation
          });
          /* istanbul ignore next */
          cov_1qr1h15i7w().s[110]++;
          if (metadata) {
            /* istanbul ignore next */
            cov_1qr1h15i7w().b[15][0]++;
            cov_1qr1h15i7w().s[111]++;
            metadata.performance = performance1;
          } else
          /* istanbul ignore next */
          {
            cov_1qr1h15i7w().b[15][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1qr1h15i7w().b[14][1]++;
        }
        cov_1qr1h15i7w().s[112]++;
        resolve(operation.id);
      } catch (error) {
        /* istanbul ignore next */
        cov_1qr1h15i7w().s[113]++;
        reject(error);
      }
    });
  }
  /**
  * Undo last operation
  */
  undo() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[21]++;
    cov_1qr1h15i7w().s[114]++;
    if (!this.state.canUndo) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[16][0]++;
      cov_1qr1h15i7w().s[115]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[16][1]++;
    }
    const operation =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[116]++, this.state.operations[this.state.currentIndex]);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[117]++;
    this.applySnapshot(operation.beforeState);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[118]++;
    this.state.currentIndex--;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[119]++;
    this.state.stats.undoCount++;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[120]++;
    this.updateState();
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[121]++;
    return true;
  }
  /**
  * Redo next operation
  */
  redo() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[22]++;
    cov_1qr1h15i7w().s[122]++;
    if (!this.state.canRedo) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[17][0]++;
      cov_1qr1h15i7w().s[123]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[17][1]++;
    }
    cov_1qr1h15i7w().s[124]++;
    this.state.currentIndex++;
    const operation =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[125]++, this.state.operations[this.state.currentIndex]);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[126]++;
    this.applySnapshot(operation.afterState);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[127]++;
    this.state.stats.redoCount++;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[128]++;
    this.updateState();
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[129]++;
    return true;
  }
  /**
  * Jump to specific operation in history
  */
  jumpToOperation(index) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[23]++;
    cov_1qr1h15i7w().s[130]++;
    if (
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[19][0]++, index < -1) ||
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[19][1]++, index >= this.state.operations.length)) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[18][0]++;
      cov_1qr1h15i7w().s[131]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[18][1]++;
    }
    cov_1qr1h15i7w().s[132]++;
    if (index === -1) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[20][0]++;
      cov_1qr1h15i7w().s[133]++;
      // Jump to initial state (before any operations)
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    } else {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[20][1]++;
      const operation =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[134]++, this.state.operations[index]);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[135]++;
      this.applySnapshot(operation.afterState);
    }
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[136]++;
    this.state.currentIndex = index;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[137]++;
    this.updateState();
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[138]++;
    return true;
  }
  /**
  * Clear entire history
  */
  clearHistory() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[24]++;
    cov_1qr1h15i7w().s[139]++;
    this.state.operations = [];
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[140]++;
    this.state.currentIndex = -1;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[141]++;
    this.state.memoryUsage = 0;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[142]++;
    this.currentComposite = null;
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[143]++;
    this.updateState();
  }
  /**
  * Cleanup old operations to free memory
  */
  cleanup(targetMemoryMB) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[25]++;
    const targetMemory =
    /* istanbul ignore next */
    (cov_1qr1h15i7w().s[144]++, (
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[21][0]++, targetMemoryMB) ||
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[21][1]++, this.config.memoryLimit * 0.7)) * 1024 * 1024);
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[145]++;
    while (
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[22][0]++, this.state.memoryUsage > targetMemory) &&
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[22][1]++, this.state.operations.length > 10)) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[146]++;
      // Remove oldest operation
      this.state.operations.shift();
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[147]++;
      if (this.state.currentIndex > 0) {
        /* istanbul ignore next */
        cov_1qr1h15i7w().b[23][0]++;
        cov_1qr1h15i7w().s[148]++;
        this.state.currentIndex--;
      } else
      /* istanbul ignore next */
      {
        cov_1qr1h15i7w().b[23][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[149]++;
    this.state.stats.lastCleanup = Date.now();
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[150]++;
    this.updateState();
  }
  /**
  * Setup automatic cleanup
  */
  setupAutoCleanup() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[26]++;
    cov_1qr1h15i7w().s[151]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_1qr1h15i7w().f[27]++;
      const now =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[152]++, Date.now());
      const timeSinceLastCleanup =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[153]++, now - this.state.stats.lastCleanup);
      const thresholdMs =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[154]++, this.config.autoCleanupThreshold * 60 * 1000);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[155]++;
      if (timeSinceLastCleanup > thresholdMs) {
        /* istanbul ignore next */
        cov_1qr1h15i7w().b[24][0]++;
        cov_1qr1h15i7w().s[156]++;
        this.cleanup();
      } else
      /* istanbul ignore next */
      {
        cov_1qr1h15i7w().b[24][1]++;
      }
    }, 60 * 1000); // Check every minute
  }
  /**
  * Get operation history
  */
  getHistory() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[28]++;
    cov_1qr1h15i7w().s[157]++;
    return [...this.state.operations];
  }
  /**
  * Get operation by ID
  */
  getOperation(id) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[29]++;
    cov_1qr1h15i7w().s[158]++;
    return /* istanbul ignore next */(cov_1qr1h15i7w().b[25][0]++, this.state.operations.find(op => {
      /* istanbul ignore next */
      cov_1qr1h15i7w().f[30]++;
      cov_1qr1h15i7w().s[159]++;
      return op.id === id;
    })) ||
    /* istanbul ignore next */
    (cov_1qr1h15i7w().b[25][1]++, null);
  }
  /**
  * Get current state
  */
  getState() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[31]++;
    cov_1qr1h15i7w().s[160]++;
    return {
      ...this.state
    };
  }
  /**
  * Get configuration
  */
  getConfig() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[32]++;
    cov_1qr1h15i7w().s[161]++;
    return {
      ...this.config
    };
  }
  /**
  * Update configuration
  */
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[33]++;
    cov_1qr1h15i7w().s[162]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    // Apply new limits
    /* istanbul ignore next */
    cov_1qr1h15i7w().s[163]++;
    if (this.state.operations.length > this.config.maxHistorySize) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().b[26][0]++;
      const removeCount =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[164]++, this.state.operations.length - this.config.maxHistorySize);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[165]++;
      this.state.operations.splice(0, removeCount);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[166]++;
      this.state.currentIndex = Math.max(-1, this.state.currentIndex - removeCount);
    } else
    /* istanbul ignore next */
    {
      cov_1qr1h15i7w().b[26][1]++;
    }
    cov_1qr1h15i7w().s[167]++;
    this.updateState();
  }
  /**
  * Export history for persistence
  */
  exportHistory() {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[34]++;
    cov_1qr1h15i7w().s[168]++;
    return JSON.stringify({
      operations: this.state.operations.map(op => {
        /* istanbul ignore next */
        cov_1qr1h15i7w().f[35]++;
        cov_1qr1h15i7w().s[169]++;
        return {
          ...op,
          beforeState: {
            ...op.beforeState,
            imageData: null
          },
          afterState: {
            ...op.afterState,
            imageData: null
          }
        };
      }),
      currentIndex: this.state.currentIndex,
      stats: this.state.stats
    });
  }
  /**
  * Import history from persistence
  */
  importHistory(historyData) {
    /* istanbul ignore next */
    cov_1qr1h15i7w().f[36]++;
    cov_1qr1h15i7w().s[170]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().s[171]++, JSON.parse(historyData));
      // Note: This is a simplified implementation
      // In practice, you'd need to restore the image data
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[172]++;
      this.state.stats =
      /* istanbul ignore next */
      (cov_1qr1h15i7w().b[27][0]++, data.stats) ||
      /* istanbul ignore next */
      (cov_1qr1h15i7w().b[27][1]++, this.state.stats);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[173]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[174]++;
      console.error('Failed to import history:', error);
      /* istanbul ignore next */
      cov_1qr1h15i7w().s[175]++;
      return false;
    }
  }
}
function createUndoRedoManager(managedCanvas, config) {
  /* istanbul ignore next */
  cov_1qr1h15i7w().f[37]++;
  cov_1qr1h15i7w().s[176]++;
  return new UndoRedoManager(managedCanvas, config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,