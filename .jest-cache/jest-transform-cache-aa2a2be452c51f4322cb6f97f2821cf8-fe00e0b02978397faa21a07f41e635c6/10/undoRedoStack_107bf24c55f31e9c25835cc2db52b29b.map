{"version":3,"names":["DEFAULT_UNDO_REDO_CONFIG","cov_1qr1h15i7w","f","s","OperationType","UndoRedoManager","createUndoRedoManager","maxHistorySize","enableCompression","compressionQuality","memoryLimit","autoCleanupThreshold","enablePerfMonitoring","constructor","managedCanvas","config","b","currentComposite","lastSnapshot","canvas","ctx","context","state","currentIndex","operations","canUndo","canRedo","memoryUsage","stats","totalOperations","undoCount","redoCount","memoryPeakUsage","lastCleanup","Date","now","setupAutoCleanup","createSnapshot","compress","imageData","getImageData","width","height","snapshot","timestamp","compressSnapshot","startTime","performance","tempCanvas","document","createElement","tempCtx","getContext","putImageData","dataUrl","toDataURL","img","Image","Promise","resolve","onload","clearRect","drawImage","compressedImageData","compressionTime","originalSize","data","length","compressedSize","compressed","compressionLevel","src","error","console","warn","calculateSnapshotMemory","imageDataSize","metadataSize","applySnapshot","generateOperationId","Math","random","toString","substr","updateState","reduce","total","op","beforeState","afterState","cleanup","startCompositeOperation","description","metadata","Error","id","type","endCompositeOperation","addOperationToStack","operation","slice","push","removeCount","splice","executeOperation","operationFn","operationData","reject","memoryBefore","performance1","executionTime","memoryAfter","snapshotTime","undo","redo","jumpToOperation","index","clearHistory","targetMemoryMB","targetMemory","shift","setInterval","timeSinceLastCleanup","thresholdMs","getHistory","getOperation","find","getState","getConfig","updateConfig","newConfig","max","exportHistory","JSON","stringify","map","importHistory","historyData","parse"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/undoRedoStack.ts"],"sourcesContent":["// Undo/Redo Stack Management for Image Editing\n// Immutable state management for tracking and reverting image editing operations\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\n\n/**\n * Operation types that can be undone/redone\n */\nexport enum OperationType {\n  IMAGE_LOAD = 'image_load',\n  IMAGE_RESIZE = 'image_resize',\n  FILTER_APPLY = 'filter_apply',\n  TEXT_ADD = 'text_add',\n  TEXT_EDIT = 'text_edit',\n  TEXT_REMOVE = 'text_remove',\n  STICKER_ADD = 'sticker_add',\n  STICKER_MOVE = 'sticker_move',\n  STICKER_SCALE = 'sticker_scale',\n  STICKER_ROTATE = 'sticker_rotate',\n  STICKER_REMOVE = 'sticker_remove',\n  CANVAS_CLEAR = 'canvas_clear',\n  COMPOSITE_OPERATION = 'composite_operation'\n}\n\n/**\n * Base operation interface\n */\nexport interface BaseOperation {\n  id: string;\n  type: OperationType;\n  timestamp: number;\n  description: string;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Canvas snapshot for state preservation\n */\nexport interface CanvasSnapshot {\n  imageData: ImageData;\n  width: number;\n  height: number;\n  timestamp: number;\n  compressed?: boolean;\n  compressionLevel?: number;\n}\n\n/**\n * Operation with state data\n */\nexport interface Operation extends BaseOperation {\n  /** State before the operation */\n  beforeState: CanvasSnapshot;\n  /** State after the operation */\n  afterState: CanvasSnapshot;\n  /** Additional operation-specific data */\n  operationData?: Record<string, unknown>;\n  /** Memory usage in bytes */\n  memoryUsage?: number;\n}\n\n/**\n * Composite operation containing multiple sub-operations\n */\nexport interface CompositeOperation extends BaseOperation {\n  operations: Operation[];\n  beforeState: CanvasSnapshot;\n  afterState: CanvasSnapshot;\n}\n\n/**\n * Undo/Redo stack configuration\n */\nexport interface UndoRedoConfig {\n  /** Maximum number of operations to keep in history */\n  maxHistorySize: number;\n  /** Enable automatic snapshot compression */\n  enableCompression: boolean;\n  /** Compression quality (0-1) */\n  compressionQuality: number;\n  /** Memory usage limit in MB */\n  memoryLimit: number;\n  /** Auto-cleanup threshold in minutes */\n  autoCleanupThreshold: number;\n  /** Enable performance monitoring */\n  enablePerfMonitoring: boolean;\n}\n\n/**\n * Undo/Redo stack state\n */\nexport interface UndoRedoState {\n  /** Current position in the stack */\n  currentIndex: number;\n  /** Operations stack */\n  operations: (Operation | CompositeOperation)[];\n  /** Can undo */\n  canUndo: boolean;\n  /** Can redo */\n  canRedo: boolean;\n  /** Total memory usage */\n  memoryUsage: number;\n  /** Stack statistics */\n  stats: {\n    totalOperations: number;\n    undoCount: number;\n    redoCount: number;\n    memoryPeakUsage: number;\n    lastCleanup: number;\n  };\n}\n\n/**\n * Performance metrics for operations\n */\nexport interface OperationPerformance {\n  executionTime: number;\n  memoryBefore: number;\n  memoryAfter: number;\n  snapshotTime: number;\n  compressionTime?: number;\n  compressionRatio?: number;\n}\n\n/**\n * Default configuration\n */\nexport const DEFAULT_UNDO_REDO_CONFIG: UndoRedoConfig = {\n  maxHistorySize: 50,\n  enableCompression: true,\n  compressionQuality: 0.8,\n  memoryLimit: 100, // 100MB\n  autoCleanupThreshold: 30, // 30 minutes\n  enablePerfMonitoring: true\n};\n\n/**\n * Undo/Redo stack manager\n */\nexport class UndoRedoManager {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private config: UndoRedoConfig;\n  private state: UndoRedoState;\n  private currentComposite: CompositeOperation | null = null;\n  private lastSnapshot: CanvasSnapshot | null = null;\n\n  constructor(managedCanvas: ManagedCanvas, config: Partial<UndoRedoConfig> = {}) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n    this.config = { ...DEFAULT_UNDO_REDO_CONFIG, ...config };\n    this.state = {\n      currentIndex: -1,\n      operations: [],\n      canUndo: false,\n      canRedo: false,\n      memoryUsage: 0,\n      stats: {\n        totalOperations: 0,\n        undoCount: 0,\n        redoCount: 0,\n        memoryPeakUsage: 0,\n        lastCleanup: Date.now()\n      }\n    };\n\n    // Setup automatic cleanup\n    if (this.config.autoCleanupThreshold > 0) {\n      this.setupAutoCleanup();\n    }\n  }\n\n  /**\n   * Create canvas snapshot\n   */\n  private createSnapshot(compress: boolean = false): CanvasSnapshot {\n    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    \n    const snapshot: CanvasSnapshot = {\n      imageData,\n      width: this.canvas.width,\n      height: this.canvas.height,\n      timestamp: Date.now()\n    };\n\n    // Note: Compression disabled for synchronous operation\n    // if (compress) {\n    //   snapshot = await this.compressSnapshot(snapshot);\n    // }\n\n    return snapshot;\n  }\n\n  /**\n   * Compress snapshot to reduce memory usage\n   */\n  private async compressSnapshot(snapshot: CanvasSnapshot): Promise<CanvasSnapshot> {\n    const startTime = performance.now();\n    \n    try {\n      // Create temporary canvas for compression\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = snapshot.width;\n      tempCanvas.height = snapshot.height;\n      const tempCtx = tempCanvas.getContext('2d');\n      \n      if (!tempCtx) {\n        return snapshot; // Return uncompressed if context unavailable\n      }\n      \n      // Draw image data to temporary canvas\n      tempCtx.putImageData(snapshot.imageData, 0, 0);\n      \n      // Convert to compressed data URL\n      const dataUrl = tempCanvas.toDataURL('image/jpeg', this.config.compressionQuality);\n      \n      // Convert back to image data (this simulates compression)\n      const img = new Image();\n      return new Promise<CanvasSnapshot>((resolve) => {\n        img.onload = () => {\n          tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);\n          tempCtx.drawImage(img, 0, 0);\n          const compressedImageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n          \n          const compressionTime = performance.now() - startTime;\n          const originalSize = snapshot.imageData.data.length;\n          const compressedSize = compressedImageData.data.length;\n          \n          resolve({\n            imageData: compressedImageData,\n            width: tempCanvas.width,\n            height: tempCanvas.height,\n            timestamp: snapshot.timestamp,\n            compressed: true,\n            compressionLevel: this.config.compressionQuality\n          });\n        };\n        img.src = dataUrl;\n      });\n    } catch (error) {\n      console.warn('Snapshot compression failed, using uncompressed:', error);\n      return snapshot;\n    }\n  }\n\n  /**\n   * Calculate memory usage of snapshot\n   */\n  private calculateSnapshotMemory(snapshot: CanvasSnapshot): number {\n    const imageDataSize = snapshot.imageData.data.length * 4; // 4 bytes per pixel (RGBA)\n    const metadataSize = 100; // Approximate metadata size\n    return imageDataSize + metadataSize;\n  }\n\n  /**\n   * Apply snapshot to canvas\n   */\n  private applySnapshot(snapshot: CanvasSnapshot): void {\n    // Resize canvas if needed\n    if (this.canvas.width !== snapshot.width || this.canvas.height !== snapshot.height) {\n      this.canvas.width = snapshot.width;\n      this.canvas.height = snapshot.height;\n    }\n\n    // Apply image data\n    this.ctx.putImageData(snapshot.imageData, 0, 0);\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Update stack state\n   */\n  private updateState(): void {\n    this.state.canUndo = this.state.currentIndex >= 0;\n    this.state.canRedo = this.state.currentIndex < this.state.operations.length - 1;\n    \n    // Calculate total memory usage\n    this.state.memoryUsage = this.state.operations.reduce((total, op) => {\n      if ('operations' in op) {\n        // Composite operation\n        return total + this.calculateSnapshotMemory(op.beforeState) + \n               this.calculateSnapshotMemory(op.afterState);\n      } else {\n        // Regular operation\n        return total + this.calculateSnapshotMemory(op.beforeState) + \n               this.calculateSnapshotMemory(op.afterState);\n      }\n    }, 0);\n\n    // Update peak memory usage\n    if (this.state.memoryUsage > this.state.stats.memoryPeakUsage) {\n      this.state.stats.memoryPeakUsage = this.state.memoryUsage;\n    }\n\n    // Check memory limit\n    if (this.state.memoryUsage > this.config.memoryLimit * 1024 * 1024) {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Start composite operation\n   */\n  startCompositeOperation(description: string, metadata?: Record<string, unknown>): string {\n    if (this.currentComposite) {\n      throw new Error('Composite operation already in progress');\n    }\n\n    const id = this.generateOperationId();\n    this.currentComposite = {\n      id,\n      type: OperationType.COMPOSITE_OPERATION,\n      timestamp: Date.now(),\n      description,\n      metadata,\n      operations: [],\n      beforeState: this.createSnapshot(),\n      afterState: this.createSnapshot() // Will be updated when completed\n    };\n\n    return id;\n  }\n\n  /**\n   * End composite operation\n   */\n  endCompositeOperation(): void {\n    if (!this.currentComposite) {\n      throw new Error('No composite operation in progress');\n    }\n\n    // Update after state\n    this.currentComposite.afterState = this.createSnapshot();\n\n    // Add to operations stack if it contains sub-operations\n    if (this.currentComposite.operations.length > 0) {\n      this.addOperationToStack(this.currentComposite);\n    }\n\n    this.currentComposite = null;\n  }\n\n  /**\n   * Add operation to stack\n   */\n  private addOperationToStack(operation: Operation | CompositeOperation): void {\n    // Remove any operations after current index (for redo scenarios)\n    this.state.operations = this.state.operations.slice(0, this.state.currentIndex + 1);\n\n    // Add new operation\n    this.state.operations.push(operation);\n    this.state.currentIndex = this.state.operations.length - 1;\n\n    // Enforce history size limit\n    if (this.state.operations.length > this.config.maxHistorySize) {\n      const removeCount = this.state.operations.length - this.config.maxHistorySize;\n      this.state.operations.splice(0, removeCount);\n      this.state.currentIndex -= removeCount;\n    }\n\n    this.state.stats.totalOperations++;\n    this.updateState();\n  }\n\n  /**\n   * Execute operation with automatic state tracking\n   */\n  executeOperation(\n    type: OperationType,\n    description: string,\n    operationFn: () => void | Promise<void>,\n    operationData?: Record<string, unknown>,\n    metadata?: Record<string, unknown>\n  ): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      const startTime = performance.now();\n      const memoryBefore = this.state.memoryUsage;\n      \n      try {\n        // Capture before state\n        const beforeState = this.createSnapshot();\n        \n        // Execute the operation\n        await operationFn();\n        \n        // Capture after state\n        const afterState = this.createSnapshot();\n        \n        // Create operation record\n        const operation: Operation = {\n          id: this.generateOperationId(),\n          type,\n          timestamp: Date.now(),\n          description,\n          beforeState,\n          afterState,\n          operationData,\n          metadata\n        };\n\n        // Calculate memory usage\n        operation.memoryUsage = this.calculateSnapshotMemory(beforeState) + \n                               this.calculateSnapshotMemory(afterState);\n\n        // Add to current composite or directly to stack\n        if (this.currentComposite) {\n          this.currentComposite.operations.push(operation);\n        } else {\n          this.addOperationToStack(operation);\n        }\n\n        // Record performance metrics\n        if (this.config.enablePerfMonitoring) {\n          const performance: OperationPerformance = {\n            executionTime: Date.now() - startTime,\n            memoryBefore,\n            memoryAfter: this.state.memoryUsage,\n            snapshotTime: 0 // Would be calculated in real implementation\n          };\n          \n          if (metadata) {\n            metadata.performance = performance;\n          }\n        }\n\n        resolve(operation.id);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Undo last operation\n   */\n  undo(): boolean {\n    if (!this.state.canUndo) {\n      return false;\n    }\n\n    const operation = this.state.operations[this.state.currentIndex];\n    this.applySnapshot(operation.beforeState);\n    \n    this.state.currentIndex--;\n    this.state.stats.undoCount++;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Redo next operation\n   */\n  redo(): boolean {\n    if (!this.state.canRedo) {\n      return false;\n    }\n\n    this.state.currentIndex++;\n    const operation = this.state.operations[this.state.currentIndex];\n    this.applySnapshot(operation.afterState);\n    \n    this.state.stats.redoCount++;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Jump to specific operation in history\n   */\n  jumpToOperation(index: number): boolean {\n    if (index < -1 || index >= this.state.operations.length) {\n      return false;\n    }\n\n    if (index === -1) {\n      // Jump to initial state (before any operations)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      const operation = this.state.operations[index];\n      this.applySnapshot(operation.afterState);\n    }\n\n    this.state.currentIndex = index;\n    this.updateState();\n\n    return true;\n  }\n\n  /**\n   * Clear entire history\n   */\n  clearHistory(): void {\n    this.state.operations = [];\n    this.state.currentIndex = -1;\n    this.state.memoryUsage = 0;\n    this.currentComposite = null;\n    this.updateState();\n  }\n\n  /**\n   * Cleanup old operations to free memory\n   */\n  cleanup(targetMemoryMB?: number): void {\n    const targetMemory = (targetMemoryMB || this.config.memoryLimit * 0.7) * 1024 * 1024;\n    \n    while (this.state.memoryUsage > targetMemory && this.state.operations.length > 10) {\n      // Remove oldest operation\n      this.state.operations.shift();\n      if (this.state.currentIndex > 0) {\n        this.state.currentIndex--;\n      }\n    }\n\n    this.state.stats.lastCleanup = Date.now();\n    this.updateState();\n  }\n\n  /**\n   * Setup automatic cleanup\n   */\n  private setupAutoCleanup(): void {\n    setInterval(() => {\n      const now = Date.now();\n      const timeSinceLastCleanup = now - this.state.stats.lastCleanup;\n      const thresholdMs = this.config.autoCleanupThreshold * 60 * 1000;\n\n      if (timeSinceLastCleanup > thresholdMs) {\n        this.cleanup();\n      }\n    }, 60 * 1000); // Check every minute\n  }\n\n  /**\n   * Get operation history\n   */\n  getHistory(): (Operation | CompositeOperation)[] {\n    return [...this.state.operations];\n  }\n\n  /**\n   * Get operation by ID\n   */\n  getOperation(id: string): Operation | CompositeOperation | null {\n    return this.state.operations.find(op => op.id === id) || null;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): UndoRedoState {\n    return { ...this.state };\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): UndoRedoConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<UndoRedoConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Apply new limits\n    if (this.state.operations.length > this.config.maxHistorySize) {\n      const removeCount = this.state.operations.length - this.config.maxHistorySize;\n      this.state.operations.splice(0, removeCount);\n      this.state.currentIndex = Math.max(-1, this.state.currentIndex - removeCount);\n    }\n\n    this.updateState();\n  }\n\n  /**\n   * Export history for persistence\n   */\n  exportHistory(): string {\n    return JSON.stringify({\n      operations: this.state.operations.map(op => ({\n        ...op,\n        beforeState: { ...op.beforeState, imageData: null }, // Exclude image data\n        afterState: { ...op.afterState, imageData: null }\n      })),\n      currentIndex: this.state.currentIndex,\n      stats: this.state.stats\n    });\n  }\n\n  /**\n   * Import history from persistence\n   */\n  importHistory(historyData: string): boolean {\n    try {\n      const data = JSON.parse(historyData);\n      // Note: This is a simplified implementation\n      // In practice, you'd need to restore the image data\n      this.state.stats = data.stats || this.state.stats;\n      return true;\n    } catch (error) {\n      console.error('Failed to import history:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Factory function to create undo/redo manager\n */\nexport function createUndoRedoManager(\n  managedCanvas: ManagedCanvas, \n  config?: Partial<UndoRedoConfig>\n): UndoRedoManager {\n  return new UndoRedoManager(managedCanvas, config);\n}"],"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","ignoreList":[]}