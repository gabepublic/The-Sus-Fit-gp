d0eee6f95328095a2a31b8a218c885af
/**
 * Test Utilities Index
 * Central export point for all testing utilities
 */ // React Query testing utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    API_ENDPOINTS: function() {
        return _apimocks.API_ENDPOINTS;
    },
    BridgeLayerTestUtils: function() {
        return _bridgelayertestutils.BridgeLayerTestUtils;
    },
    BridgePerformanceUtils: function() {
        return _bridgelayertestutils.BridgePerformanceUtils;
    },
    DEFAULT_MOCK_RESPONSES: function() {
        return _apimocks.DEFAULT_MOCK_RESPONSES;
    },
    HookTestUtils: function() {
        return _reactquerytestutils.HookTestUtils;
    },
    MockAPI: function() {
        return _apimocks.MockAPIUtils;
    },
    MockAPIUtils: function() {
        return _apimocks.MockAPIUtils;
    },
    MockUtils: function() {
        return _reactquerytestutils.MockUtils;
    },
    MutationTestUtils: function() {
        return _reactquerytestutils.MutationTestUtils;
    },
    Providers: function() {
        return _reactquerytestutils.TestProviders;
    },
    TestProviders: function() {
        return _reactquerytestutils.TestProviders;
    },
    TestUtils: function() {
        return _bridgelayertestutils.BridgeLayerTestUtils;
    },
    TimeTestUtils: function() {
        return _reactquerytestutils.TimeTestUtils;
    },
    WorkflowTestUtils: function() {
        return _bridgelayertestutils.WorkflowTestUtils;
    },
    createQueryClient: function() {
        return _reactquerytestutils.createTestQueryClient;
    },
    createTestQueryClient: function() {
        return _reactquerytestutils.createTestQueryClient;
    },
    default: function() {
        return _default;
    },
    errorHandlers: function() {
        return _apimocks.errorHandlers;
    },
    handlers: function() {
        return _apimocks.handlers;
    },
    mockServer: function() {
        return _apimocks.server;
    },
    openAIMocks: function() {
        return _apimocks.openAIMocks;
    },
    performanceHandlers: function() {
        return _apimocks.performanceHandlers;
    },
    quickSetup: function() {
        return quickSetup;
    },
    render: function() {
        return _reactquerytestutils.renderWithProviders;
    },
    renderBridgeHook: function() {
        return _bridgelayertestutils.renderBridgeHook;
    },
    renderHook: function() {
        return _bridgelayertestutils.renderBridgeHook;
    },
    renderWithProviders: function() {
        return _reactquerytestutils.renderWithProviders;
    },
    server: function() {
        return _apimocks.server;
    },
    setupTestEnvironment: function() {
        return setupTestEnvironment;
    },
    testConfigs: function() {
        return testConfigs;
    }
});
const _reactquerytestutils = require("./react-query-test-utils");
const _bridgelayertestutils = require("./bridge-layer-test-utils");
const _apimocks = require("./api-mocks");
function setupTestEnvironment(options = {}) {
    const { enableApiMocks = true, enableQueryCache = false, enableConsoleSuppress = true } = options;
    // Setup API mocks
    if (enableApiMocks) {
        MockAPIUtils.setupServer();
    }
    // Suppress console logs in tests
    if (enableConsoleSuppress) {
        const originalConsole = {
            ...console
        };
        beforeEach(()=>{
            console.log = jest.fn();
            console.info = jest.fn();
            console.warn = jest.fn();
        // Keep console.error for debugging
        });
        afterEach(()=>{
            Object.assign(console, originalConsole);
        });
    }
    // Global test cleanup
    afterEach(()=>{
        // Clear all mocks
        jest.clearAllMocks();
        // Reset API mocks
        if (enableApiMocks) {
            MockAPIUtils.reset();
        }
    });
}
const testConfigs = {
    // Basic unit test configuration
    unit: {
        queryTestConfig: {
            disableRetries: true,
            disableCache: true
        },
        bridgeConfig: {
            mockToast: true,
            mockFileAPIs: true,
            mockFetch: false
        }
    },
    // Integration test configuration
    integration: {
        queryTestConfig: {
            disableRetries: false,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: true,
            mockFileAPIs: true,
            mockFetch: false
        }
    },
    // Performance test configuration
    performance: {
        queryTestConfig: {
            disableRetries: true,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: false,
            mockFileAPIs: false,
            mockFetch: false
        }
    },
    // End-to-end test configuration
    e2e: {
        queryTestConfig: {
            disableRetries: false,
            disableCache: false
        },
        bridgeConfig: {
            mockToast: false,
            mockFileAPIs: false,
            mockFetch: false
        }
    }
};
const quickSetup = {
    /**
   * Setup for testing business layer hooks
   */ businessLayer: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        return new HookTestUtils(testConfigs.unit.queryTestConfig);
    },
    /**
   * Setup for testing bridge layer hooks
   */ bridgeLayer: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        return new BridgeLayerTestUtils(testConfigs.integration.bridgeConfig);
    },
    /**
   * Setup for testing mutations
   */ mutations: ()=>{
        setupTestEnvironment({
            enableApiMocks: true
        });
        return new MutationTestUtils(testConfigs.unit.queryTestConfig);
    },
    /**
   * Setup for performance testing
   */ performance: ()=>{
        setupTestEnvironment({
            enableApiMocks: true,
            enableConsoleSuppress: false
        });
        return new BridgePerformanceUtils();
    }
};
/**
 * Default export with everything
 */ const defaultExport = {
    // Test utilities
    createQueryClient: createTestQueryClient,
    render: renderWithProviders,
    renderHook: renderBridgeHook,
    Providers: TestProviders,
    // Utility classes
    HookTestUtils,
    MutationTestUtils,
    BridgeLayerTestUtils,
    WorkflowTestUtils,
    BridgePerformanceUtils,
    MockUtils,
    TimeTestUtils,
    MockAPIUtils,
    // Setup functions
    setupTestEnvironment,
    quickSetup,
    testConfigs,
    // API mocks
    server,
    mockServer: server,
    MockAPI: MockAPIUtils,
    // Constants
    DEFAULT_MOCK_RESPONSES,
    API_ENDPOINTS
};
const _default = defaultExport;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3AvX190ZXN0c19fL3Rlc3QtdXRpbHMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0IFV0aWxpdGllcyBJbmRleFxuICogQ2VudHJhbCBleHBvcnQgcG9pbnQgZm9yIGFsbCB0ZXN0aW5nIHV0aWxpdGllc1xuICovXG5cbi8vIFJlYWN0IFF1ZXJ5IHRlc3RpbmcgdXRpbGl0aWVzXG5leHBvcnQge1xuICBjcmVhdGVUZXN0UXVlcnlDbGllbnQsXG4gIHJlbmRlcldpdGhQcm92aWRlcnMsXG4gIFRlc3RQcm92aWRlcnMsXG4gIEhvb2tUZXN0VXRpbHMsXG4gIE11dGF0aW9uVGVzdFV0aWxzLFxuICBNb2NrVXRpbHMsXG4gIFRpbWVUZXN0VXRpbHMsXG4gIHR5cGUgUXVlcnlUZXN0Q29uZmlnLFxuICB0eXBlIFRlc3RQcm92aWRlcnNQcm9wcyxcbiAgdHlwZSBDdXN0b21SZW5kZXJPcHRpb25zLFxufSBmcm9tICcuL3JlYWN0LXF1ZXJ5LXRlc3QtdXRpbHMnO1xuXG4vLyBCcmlkZ2UgbGF5ZXIgdGVzdGluZyB1dGlsaXRpZXNcbmV4cG9ydCB7XG4gIEJyaWRnZUxheWVyVGVzdFV0aWxzLFxuICBXb3JrZmxvd1Rlc3RVdGlscyxcbiAgQnJpZGdlUGVyZm9ybWFuY2VVdGlscyxcbiAgcmVuZGVyQnJpZGdlSG9vayxcbiAgdHlwZSBCcmlkZ2VMYXllclRlc3RDb25maWcsXG59IGZyb20gJy4vYnJpZGdlLWxheWVyLXRlc3QtdXRpbHMnO1xuXG4vLyBBUEkgbW9ja2luZyB1dGlsaXRpZXNcbmV4cG9ydCB7XG4gIHNlcnZlcixcbiAgaGFuZGxlcnMsXG4gIGVycm9ySGFuZGxlcnMsXG4gIHBlcmZvcm1hbmNlSGFuZGxlcnMsXG4gIE1vY2tBUElVdGlscyxcbiAgb3BlbkFJTW9ja3MsXG4gIERFRkFVTFRfTU9DS19SRVNQT05TRVMsXG4gIEFQSV9FTkRQT0lOVFMsXG4gIHR5cGUgTW9ja1RyeW9uUmVzcG9uc2UsXG4gIHR5cGUgTW9ja0Vycm9yUmVzcG9uc2UsXG59IGZyb20gJy4vYXBpLW1vY2tzJztcblxuLyoqXG4gKiBDb252ZW5pZW5jZSByZS1leHBvcnRzIHdpdGggc2hvcnRlciBuYW1lc1xuICovXG5leHBvcnQge1xuICByZW5kZXJXaXRoUHJvdmlkZXJzIGFzIHJlbmRlcixcbiAgY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50IGFzIGNyZWF0ZVF1ZXJ5Q2xpZW50LFxuICBUZXN0UHJvdmlkZXJzIGFzIFByb3ZpZGVycyxcbn0gZnJvbSAnLi9yZWFjdC1xdWVyeS10ZXN0LXV0aWxzJztcblxuZXhwb3J0IHtcbiAgcmVuZGVyQnJpZGdlSG9vayBhcyByZW5kZXJIb29rLFxuICBCcmlkZ2VMYXllclRlc3RVdGlscyBhcyBUZXN0VXRpbHMsXG59IGZyb20gJy4vYnJpZGdlLWxheWVyLXRlc3QtdXRpbHMnO1xuXG5leHBvcnQge1xuICBNb2NrQVBJVXRpbHMgYXMgTW9ja0FQSSxcbiAgc2VydmVyIGFzIG1vY2tTZXJ2ZXIsXG59IGZyb20gJy4vYXBpLW1vY2tzJztcblxuLyoqXG4gKiBDb21wbGV0ZSB0ZXN0IHNldHVwIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFRlc3RFbnZpcm9ubWVudChvcHRpb25zOiB7XG4gIGVuYWJsZUFwaU1vY2tzPzogYm9vbGVhbjtcbiAgZW5hYmxlUXVlcnlDYWNoZT86IGJvb2xlYW47XG4gIGVuYWJsZUNvbnNvbGVTdXBwcmVzcz86IGJvb2xlYW47XG59ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGVuYWJsZUFwaU1vY2tzID0gdHJ1ZSxcbiAgICBlbmFibGVRdWVyeUNhY2hlID0gZmFsc2UsXG4gICAgZW5hYmxlQ29uc29sZVN1cHByZXNzID0gdHJ1ZSxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgLy8gU2V0dXAgQVBJIG1vY2tzXG4gIGlmIChlbmFibGVBcGlNb2Nrcykge1xuICAgIE1vY2tBUElVdGlscy5zZXR1cFNlcnZlcigpO1xuICB9XG5cbiAgLy8gU3VwcHJlc3MgY29uc29sZSBsb2dzIGluIHRlc3RzXG4gIGlmIChlbmFibGVDb25zb2xlU3VwcHJlc3MpIHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnNvbGUgPSB7IC4uLmNvbnNvbGUgfTtcbiAgICBcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nID0gamVzdC5mbigpO1xuICAgICAgY29uc29sZS5pbmZvID0gamVzdC5mbigpO1xuICAgICAgY29uc29sZS53YXJuID0gamVzdC5mbigpO1xuICAgICAgLy8gS2VlcCBjb25zb2xlLmVycm9yIGZvciBkZWJ1Z2dpbmdcbiAgICB9KTtcbiAgICBcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgT2JqZWN0LmFzc2lnbihjb25zb2xlLCBvcmlnaW5hbENvbnNvbGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gR2xvYmFsIHRlc3QgY2xlYW51cFxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIC8vIENsZWFyIGFsbCBtb2Nrc1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIC8vIFJlc2V0IEFQSSBtb2Nrc1xuICAgIGlmIChlbmFibGVBcGlNb2Nrcykge1xuICAgICAgTW9ja0FQSVV0aWxzLnJlc2V0KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBFeHBvcnQgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIGNvbW1vbiB0ZXN0aW5nIHNjZW5hcmlvc1xuICovXG5leHBvcnQgY29uc3QgdGVzdENvbmZpZ3MgPSB7XG4gIC8vIEJhc2ljIHVuaXQgdGVzdCBjb25maWd1cmF0aW9uXG4gIHVuaXQ6IHtcbiAgICBxdWVyeVRlc3RDb25maWc6IHtcbiAgICAgIGRpc2FibGVSZXRyaWVzOiB0cnVlLFxuICAgICAgZGlzYWJsZUNhY2hlOiB0cnVlLFxuICAgIH0sXG4gICAgYnJpZGdlQ29uZmlnOiB7XG4gICAgICBtb2NrVG9hc3Q6IHRydWUsXG4gICAgICBtb2NrRmlsZUFQSXM6IHRydWUsXG4gICAgICBtb2NrRmV0Y2g6IGZhbHNlLCAvLyBVc2UgcmVhbCBmZXRjaCB3aXRoIE1TV1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gSW50ZWdyYXRpb24gdGVzdCBjb25maWd1cmF0aW9uXG4gIGludGVncmF0aW9uOiB7XG4gICAgcXVlcnlUZXN0Q29uZmlnOiB7XG4gICAgICBkaXNhYmxlUmV0cmllczogZmFsc2UsXG4gICAgICBkaXNhYmxlQ2FjaGU6IGZhbHNlLFxuICAgIH0sXG4gICAgYnJpZGdlQ29uZmlnOiB7XG4gICAgICBtb2NrVG9hc3Q6IHRydWUsXG4gICAgICBtb2NrRmlsZUFQSXM6IHRydWUsXG4gICAgICBtb2NrRmV0Y2g6IGZhbHNlLCAvLyBVc2UgTVNXIGZvciBBUEkgY2FsbHNcbiAgICB9LFxuICB9LFxuXG4gIC8vIFBlcmZvcm1hbmNlIHRlc3QgY29uZmlndXJhdGlvblxuICBwZXJmb3JtYW5jZToge1xuICAgIHF1ZXJ5VGVzdENvbmZpZzoge1xuICAgICAgZGlzYWJsZVJldHJpZXM6IHRydWUsXG4gICAgICBkaXNhYmxlQ2FjaGU6IGZhbHNlLCAvLyBFbmFibGUgY2FjaGUgZm9yIHJlYWxpc3RpYyBwZXJmb3JtYW5jZVxuICAgIH0sXG4gICAgYnJpZGdlQ29uZmlnOiB7XG4gICAgICBtb2NrVG9hc3Q6IGZhbHNlLCAvLyBEb24ndCBtb2NrIGZvciByZWFsaXN0aWMgcGVyZm9ybWFuY2VcbiAgICAgIG1vY2tGaWxlQVBJczogZmFsc2UsXG4gICAgICBtb2NrRmV0Y2g6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG5cbiAgLy8gRW5kLXRvLWVuZCB0ZXN0IGNvbmZpZ3VyYXRpb25cbiAgZTJlOiB7XG4gICAgcXVlcnlUZXN0Q29uZmlnOiB7XG4gICAgICBkaXNhYmxlUmV0cmllczogZmFsc2UsXG4gICAgICBkaXNhYmxlQ2FjaGU6IGZhbHNlLFxuICAgIH0sXG4gICAgYnJpZGdlQ29uZmlnOiB7XG4gICAgICBtb2NrVG9hc3Q6IGZhbHNlLFxuICAgICAgbW9ja0ZpbGVBUElzOiBmYWxzZSxcbiAgICAgIG1vY2tGZXRjaDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogUXVpY2sgc2V0dXAgZnVuY3Rpb25zIGZvciBjb21tb24gc2NlbmFyaW9zXG4gKi9cbmV4cG9ydCBjb25zdCBxdWlja1NldHVwID0ge1xuICAvKipcbiAgICogU2V0dXAgZm9yIHRlc3RpbmcgYnVzaW5lc3MgbGF5ZXIgaG9va3NcbiAgICovXG4gIGJ1c2luZXNzTGF5ZXI6ICgpID0+IHtcbiAgICBzZXR1cFRlc3RFbnZpcm9ubWVudCh7IGVuYWJsZUFwaU1vY2tzOiB0cnVlIH0pO1xuICAgIHJldHVybiBuZXcgSG9va1Rlc3RVdGlscyh0ZXN0Q29uZmlncy51bml0LnF1ZXJ5VGVzdENvbmZpZyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHVwIGZvciB0ZXN0aW5nIGJyaWRnZSBsYXllciBob29rc1xuICAgKi9cbiAgYnJpZGdlTGF5ZXI6ICgpID0+IHtcbiAgICBzZXR1cFRlc3RFbnZpcm9ubWVudCh7IGVuYWJsZUFwaU1vY2tzOiB0cnVlIH0pO1xuICAgIHJldHVybiBuZXcgQnJpZGdlTGF5ZXJUZXN0VXRpbHModGVzdENvbmZpZ3MuaW50ZWdyYXRpb24uYnJpZGdlQ29uZmlnKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgZm9yIHRlc3RpbmcgbXV0YXRpb25zXG4gICAqL1xuICBtdXRhdGlvbnM6ICgpID0+IHtcbiAgICBzZXR1cFRlc3RFbnZpcm9ubWVudCh7IGVuYWJsZUFwaU1vY2tzOiB0cnVlIH0pO1xuICAgIHJldHVybiBuZXcgTXV0YXRpb25UZXN0VXRpbHModGVzdENvbmZpZ3MudW5pdC5xdWVyeVRlc3RDb25maWcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXR1cCBmb3IgcGVyZm9ybWFuY2UgdGVzdGluZ1xuICAgKi9cbiAgcGVyZm9ybWFuY2U6ICgpID0+IHtcbiAgICBzZXR1cFRlc3RFbnZpcm9ubWVudCh7IGVuYWJsZUFwaU1vY2tzOiB0cnVlLCBlbmFibGVDb25zb2xlU3VwcHJlc3M6IGZhbHNlIH0pO1xuICAgIHJldHVybiBuZXcgQnJpZGdlUGVyZm9ybWFuY2VVdGlscygpO1xuICB9LFxufTtcblxuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydCB3aXRoIGV2ZXJ5dGhpbmdcbiAqL1xuY29uc3QgZGVmYXVsdEV4cG9ydCA9IHtcbiAgLy8gVGVzdCB1dGlsaXRpZXNcbiAgY3JlYXRlUXVlcnlDbGllbnQ6IGNyZWF0ZVRlc3RRdWVyeUNsaWVudCxcbiAgcmVuZGVyOiByZW5kZXJXaXRoUHJvdmlkZXJzLFxuICByZW5kZXJIb29rOiByZW5kZXJCcmlkZ2VIb29rLFxuICBQcm92aWRlcnM6IFRlc3RQcm92aWRlcnMsXG4gIFxuICAvLyBVdGlsaXR5IGNsYXNzZXNcbiAgSG9va1Rlc3RVdGlscyxcbiAgTXV0YXRpb25UZXN0VXRpbHMsXG4gIEJyaWRnZUxheWVyVGVzdFV0aWxzLFxuICBXb3JrZmxvd1Rlc3RVdGlscyxcbiAgQnJpZGdlUGVyZm9ybWFuY2VVdGlscyxcbiAgTW9ja1V0aWxzLFxuICBUaW1lVGVzdFV0aWxzLFxuICBNb2NrQVBJVXRpbHMsXG4gIFxuICAvLyBTZXR1cCBmdW5jdGlvbnNcbiAgc2V0dXBUZXN0RW52aXJvbm1lbnQsXG4gIHF1aWNrU2V0dXAsXG4gIHRlc3RDb25maWdzLFxuICBcbiAgLy8gQVBJIG1vY2tzXG4gIHNlcnZlcixcbiAgbW9ja1NlcnZlcjogc2VydmVyLFxuICBNb2NrQVBJOiBNb2NrQVBJVXRpbHMsXG4gIFxuICAvLyBDb25zdGFudHNcbiAgREVGQVVMVF9NT0NLX1JFU1BPTlNFUyxcbiAgQVBJX0VORFBPSU5UUyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRFeHBvcnQ7Il0sIm5hbWVzIjpbIkFQSV9FTkRQT0lOVFMiLCJCcmlkZ2VMYXllclRlc3RVdGlscyIsIkJyaWRnZVBlcmZvcm1hbmNlVXRpbHMiLCJERUZBVUxUX01PQ0tfUkVTUE9OU0VTIiwiSG9va1Rlc3RVdGlscyIsIk1vY2tBUEkiLCJNb2NrQVBJVXRpbHMiLCJNb2NrVXRpbHMiLCJNdXRhdGlvblRlc3RVdGlscyIsIlByb3ZpZGVycyIsIlRlc3RQcm92aWRlcnMiLCJUZXN0VXRpbHMiLCJUaW1lVGVzdFV0aWxzIiwiV29ya2Zsb3dUZXN0VXRpbHMiLCJjcmVhdGVRdWVyeUNsaWVudCIsImNyZWF0ZVRlc3RRdWVyeUNsaWVudCIsImVycm9ySGFuZGxlcnMiLCJoYW5kbGVycyIsIm1vY2tTZXJ2ZXIiLCJzZXJ2ZXIiLCJvcGVuQUlNb2NrcyIsInBlcmZvcm1hbmNlSGFuZGxlcnMiLCJxdWlja1NldHVwIiwicmVuZGVyIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsInJlbmRlckJyaWRnZUhvb2siLCJyZW5kZXJIb29rIiwic2V0dXBUZXN0RW52aXJvbm1lbnQiLCJ0ZXN0Q29uZmlncyIsIm9wdGlvbnMiLCJlbmFibGVBcGlNb2NrcyIsImVuYWJsZVF1ZXJ5Q2FjaGUiLCJlbmFibGVDb25zb2xlU3VwcHJlc3MiLCJzZXR1cFNlcnZlciIsIm9yaWdpbmFsQ29uc29sZSIsImNvbnNvbGUiLCJiZWZvcmVFYWNoIiwibG9nIiwiamVzdCIsImZuIiwiaW5mbyIsIndhcm4iLCJhZnRlckVhY2giLCJPYmplY3QiLCJhc3NpZ24iLCJjbGVhckFsbE1vY2tzIiwicmVzZXQiLCJ1bml0IiwicXVlcnlUZXN0Q29uZmlnIiwiZGlzYWJsZVJldHJpZXMiLCJkaXNhYmxlQ2FjaGUiLCJicmlkZ2VDb25maWciLCJtb2NrVG9hc3QiLCJtb2NrRmlsZUFQSXMiLCJtb2NrRmV0Y2giLCJpbnRlZ3JhdGlvbiIsInBlcmZvcm1hbmNlIiwiZTJlIiwiYnVzaW5lc3NMYXllciIsImJyaWRnZUxheWVyIiwibXV0YXRpb25zIiwiZGVmYXVsdEV4cG9ydCJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBRUQsZ0NBQWdDOzs7Ozs7Ozs7Ozs7SUFnQzlCQSxhQUFhO2VBQWJBLHVCQUFhOztJQWhCYkMs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