60067f718a9fd9866c7701a818567f7c
// Advanced Cache Invalidation Strategies
// Comprehensive cache management for try-on mutations and related queries
"use strict";

/* istanbul ignore next */
function cov_2j5zv2yk9j() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/cacheInvalidation.ts";
  var hash = "f8d2f0e6a644627a127917d6be4cf5136a4893f1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/cacheInvalidation.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 49
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "10": {
        start: {
          line: 35,
          column: 33
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "11": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 39
        }
      },
      "12": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "13": {
        start: {
          line: 55,
          column: 37
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "14": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 71
        }
      },
      "16": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "17": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 99
        }
      },
      "18": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "19": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "20": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 96
        }
      },
      "22": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "23": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 98
        }
      },
      "24": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 48
        }
      },
      "25": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "26": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 71
        }
      },
      "27": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "28": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "29": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 50
        }
      },
      "30": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "31": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "32": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "33": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 45
        }
      },
      "34": {
        start: {
          line: 176,
          column: 35
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "35": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 46
        }
      },
      "36": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "37": {
        start: {
          line: 211,
          column: 49
        },
        end: {
          line: 217,
          column: 14
        }
      },
      "38": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 224,
          column: 12
        }
      },
      "39": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 44
        }
      },
      "40": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "41": {
        start: {
          line: 230,
          column: 68
        },
        end: {
          line: 233,
          column: 14
        }
      },
      "42": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 47
        }
      },
      "43": {
        start: {
          line: 239,
          column: 32
        },
        end: {
          line: 239,
          column: 34
        }
      },
      "44": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 248,
          column: 12
        }
      },
      "45": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 257,
          column: 12
        }
      },
      "46": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "47": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 267,
          column: 16
        }
      },
      "48": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 276,
          column: 12
        }
      },
      "49": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 50
        }
      },
      "50": {
        start: {
          line: 282,
          column: 31
        },
        end: {
          line: 282,
          column: 33
        }
      },
      "51": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "52": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "53": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 295,
          column: 20
        }
      },
      "54": {
        start: {
          line: 292,
          column: 33
        },
        end: {
          line: 292,
          column: 54
        }
      },
      "55": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "56": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 307,
          column: 16
        }
      },
      "57": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "58": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 320,
          column: 15
        }
      },
      "59": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 319,
          column: 20
        }
      },
      "60": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 49
        }
      },
      "61": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 334,
          column: 11
        }
      },
      "62": {
        start: {
          line: 330,
          column: 37
        },
        end: {
          line: 330,
          column: 62
        }
      },
      "63": {
        start: {
          line: 331,
          column: 35
        },
        end: {
          line: 331,
          column: 62
        }
      },
      "64": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 49
        }
      },
      "65": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "66": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 347,
          column: 11
        }
      },
      "67": {
        start: {
          line: 350,
          column: 26
        },
        end: {
          line: 350,
          column: 30
        }
      },
      "68": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 352,
          column: 68
        }
      },
      "69": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 353,
          column: 31
        }
      },
      "70": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 358,
          column: 5
        }
      },
      "71": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 109
        }
      },
      "72": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 359,
          column: 31
        }
      },
      "73": {
        start: {
          line: 362,
          column: 25
        },
        end: {
          line: 362,
          column: 89
        }
      },
      "74": {
        start: {
          line: 363,
          column: 4
        },
        end: {
          line: 363,
          column: 80
        }
      },
      "75": {
        start: {
          line: 366,
          column: 25
        },
        end: {
          line: 366,
          column: 89
        }
      },
      "76": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 380,
          column: 6
        }
      },
      "77": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 88
        }
      },
      "78": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "79": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 377,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 31
          }
        },
        loc: {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 17,
            column: 40
          }
        },
        loc: {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 26
          }
        },
        loc: {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 23,
            column: 34
          }
        },
        loc: {
          start: {
            line: 23,
            column: 44
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 26,
            column: 34
          }
        },
        loc: {
          start: {
            line: 26,
            column: 44
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 34
          },
          end: {
            line: 29,
            column: 35
          }
        },
        loc: {
          start: {
            line: 29,
            column: 45
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 28
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 50,
            column: 7
          }
        },
        loc: {
          start: {
            line: 50,
            column: 74
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        loc: {
          start: {
            line: 85,
            column: 73
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 85
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 39
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 101
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 136,
            column: 6
          },
          end: {
            line: 136,
            column: 7
          }
        },
        loc: {
          start: {
            line: 136,
            column: 42
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 136
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 175,
            column: 7
          }
        },
        loc: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 175
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 210,
            column: 6
          },
          end: {
            line: 210,
            column: 7
          }
        },
        loc: {
          start: {
            line: 210,
            column: 39
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 210
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 211,
            column: 42
          },
          end: {
            line: 211,
            column: 43
          }
        },
        loc: {
          start: {
            line: 211,
            column: 49
          },
          end: {
            line: 217,
            column: 14
          }
        },
        line: 211
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        },
        loc: {
          start: {
            line: 229,
            column: 53
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 229
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 230,
            column: 56
          },
          end: {
            line: 230,
            column: 57
          }
        },
        loc: {
          start: {
            line: 230,
            column: 68
          },
          end: {
            line: 233,
            column: 14
          }
        },
        line: 230
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 238,
            column: 6
          },
          end: {
            line: 238,
            column: 7
          }
        },
        loc: {
          start: {
            line: 238,
            column: 52
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 238
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 281,
            column: 6
          },
          end: {
            line: 281,
            column: 7
          }
        },
        loc: {
          start: {
            line: 281,
            column: 36
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 281
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 285,
            column: 41
          },
          end: {
            line: 285,
            column: 42
          }
        },
        loc: {
          start: {
            line: 285,
            column: 56
          },
          end: {
            line: 296,
            column: 13
          }
        },
        line: 285
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 292,
            column: 29
          },
          end: {
            line: 292,
            column: 30
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 292,
            column: 54
          }
        },
        line: 292
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 311,
            column: 39
          },
          end: {
            line: 311,
            column: 40
          }
        },
        loc: {
          start: {
            line: 311,
            column: 46
          },
          end: {
            line: 320,
            column: 13
          }
        },
        line: 311
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 326,
            column: 6
          },
          end: {
            line: 326,
            column: 7
          }
        },
        loc: {
          start: {
            line: 326,
            column: 32
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 326
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 329,
            column: 23
          },
          end: {
            line: 329,
            column: 24
          }
        },
        loc: {
          start: {
            line: 329,
            column: 32
          },
          end: {
            line: 333,
            column: 13
          }
        },
        line: 329
      },
      "24": {
        name: "initializeCacheInvalidation",
        decl: {
          start: {
            line: 351,
            column: 9
          },
          end: {
            line: 351,
            column: 36
          }
        },
        loc: {
          start: {
            line: 351,
            column: 50
          },
          end: {
            line: 354,
            column: 1
          }
        },
        line: 351
      },
      "25": {
        name: "getCacheInvalidationManager",
        decl: {
          start: {
            line: 355,
            column: 9
          },
          end: {
            line: 355,
            column: 36
          }
        },
        loc: {
          start: {
            line: 355,
            column: 39
          },
          end: {
            line: 360,
            column: 1
          }
        },
        line: 355
      },
      "26": {
        name: "invalidateCacheAfterMutation",
        decl: {
          start: {
            line: 361,
            column: 15
          },
          end: {
            line: 361,
            column: 43
          }
        },
        loc: {
          start: {
            line: 361,
            column: 91
          },
          end: {
            line: 364,
            column: 1
          }
        },
        line: 361
      },
      "27": {
        name: "createCacheAwareMutationCallbacks",
        decl: {
          start: {
            line: 365,
            column: 9
          },
          end: {
            line: 365,
            column: 42
          }
        },
        loc: {
          start: {
            line: 365,
            column: 69
          },
          end: {
            line: 381,
            column: 1
          }
        },
        line: 365
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 368,
            column: 19
          },
          end: {
            line: 368,
            column: 20
          }
        },
        loc: {
          start: {
            line: 368,
            column: 53
          },
          end: {
            line: 370,
            column: 9
          }
        },
        line: 368
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 371,
            column: 17
          },
          end: {
            line: 371,
            column: 18
          }
        },
        loc: {
          start: {
            line: 371,
            column: 52
          },
          end: {
            line: 379,
            column: 9
          }
        },
        line: 371
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 61
          },
          end: {
            line: 50,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 50,
            column: 70
          },
          end: {
            line: 50,
            column: 72
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 43
          }
        }, {
          start: {
            line: 61,
            column: 47
          },
          end: {
            line: 61,
            column: 78
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 39
          }
        }, {
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 69,
            column: 80
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 60
          },
          end: {
            line: 85,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 85,
            column: 69
          },
          end: {
            line: 85,
            column: 71
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 238,
            column: 34
          },
          end: {
            line: 238,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 48
          },
          end: {
            line: 238,
            column: 50
          }
        }],
        line: 238
      },
      "12": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "13": {
        loc: {
          start: {
            line: 281,
            column: 22
          },
          end: {
            line: 281,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 281,
            column: 34
          }
        }],
        line: 281
      },
      "14": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "15": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "16": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "17": {
        loc: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "18": {
        loc: {
          start: {
            line: 362,
            column: 25
          },
          end: {
            line: 362,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 25
          },
          end: {
            line: 362,
            column: 44
          }
        }, {
          start: {
            line: 362,
            column: 48
          },
          end: {
            line: 362,
            column: 89
          }
        }],
        line: 362
      },
      "19": {
        loc: {
          start: {
            line: 365,
            column: 56
          },
          end: {
            line: 365,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 365,
            column: 65
          },
          end: {
            line: 365,
            column: 67
          }
        }],
        line: 365
      },
      "20": {
        loc: {
          start: {
            line: 366,
            column: 25
          },
          end: {
            line: 366,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 25
          },
          end: {
            line: 366,
            column: 44
          }
        }, {
          start: {
            line: 366,
            column: 48
          },
          end: {
            line: 366,
            column: 89
          }
        }],
        line: 366
      },
      "21": {
        loc: {
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/cacheInvalidation.ts"],
      sourcesContent: ["// Advanced Cache Invalidation Strategies\n// Comprehensive cache management for try-on mutations and related queries\n\nimport { QueryClient } from '@tanstack/react-query';\nimport type { TryonMutationVariables, TryonMutationResponse, TryonMutationContext } from '../types/tryon.types';\n\n/**\n * Configuration for cache invalidation strategies\n */\nexport interface CacheInvalidationConfig {\n  /** Whether to invalidate history-related queries */\n  invalidateHistory?: boolean;\n  /** Whether to invalidate user-specific data */\n  invalidateUserData?: boolean;\n  /** Whether to invalidate statistics and aggregations */\n  invalidateStats?: boolean;\n  /** Whether to invalidate tag-based queries */\n  invalidateTags?: boolean;\n  /** Whether to preload related queries after invalidation */\n  preloadRelated?: boolean;\n  /** Custom query keys to invalidate */\n  customQueryKeys?: string[][];\n  /** Context for user-specific invalidation */\n  userContext?: {\n    userId?: string;\n    tags?: string[];\n  };\n}\n\n/**\n * Default cache invalidation configuration\n */\nconst DEFAULT_CACHE_CONFIG: Required<CacheInvalidationConfig> = {\n  invalidateHistory: true,\n  invalidateUserData: true,\n  invalidateStats: true,\n  invalidateTags: true,\n  preloadRelated: true,\n  customQueryKeys: [],\n  userContext: {}\n};\n\n/**\n * Advanced cache invalidation manager\n */\nexport class CacheInvalidationManager {\n  private queryClient: QueryClient;\n\n  constructor(queryClient: QueryClient) {\n    this.queryClient = queryClient;\n  }\n\n  /**\n   * Invalidate caches after successful try-on mutation\n   */\n  async invalidateAfterSuccess(\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: CacheInvalidationConfig = {}\n  ): Promise<void> {\n    const mergedConfig = { ...DEFAULT_CACHE_CONFIG, ...config };\n    const invalidationPromises: Promise<void>[] = [];\n\n    // 1. Invalidate history queries\n    if (mergedConfig.invalidateHistory) {\n      invalidationPromises.push(this.invalidateHistoryQueries());\n    }\n\n    // 2. Invalidate user-specific data\n    if (mergedConfig.invalidateUserData && mergedConfig.userContext.userId) {\n      invalidationPromises.push(this.invalidateUserQueries(mergedConfig.userContext.userId));\n    }\n\n    // 3. Invalidate statistics and aggregations\n    if (mergedConfig.invalidateStats) {\n      invalidationPromises.push(this.invalidateStatsQueries());\n    }\n\n    // 4. Invalidate tag-based queries\n    if (mergedConfig.invalidateTags && mergedConfig.userContext.tags?.length) {\n      invalidationPromises.push(this.invalidateTagQueries(mergedConfig.userContext.tags));\n    }\n\n    // 5. Invalidate custom query keys\n    if (mergedConfig.customQueryKeys.length > 0) {\n      invalidationPromises.push(this.invalidateCustomQueries(mergedConfig.customQueryKeys));\n    }\n\n    // Execute all invalidations in parallel\n    await Promise.all(invalidationPromises);\n\n    // 6. Preload related queries if enabled\n    if (mergedConfig.preloadRelated) {\n      await this.preloadRelatedQueries(mergedConfig.userContext);\n    }\n  }\n\n  /**\n   * Selective cache invalidation after error (lighter touch)\n   */\n  async invalidateAfterError(\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: Partial<CacheInvalidationConfig> = {}\n  ): Promise<void> {\n    const lightConfig = {\n      invalidateHistory: false,\n      invalidateUserData: false,\n      invalidateStats: false,\n      invalidateTags: false,\n      preloadRelated: false,\n      ...config\n    };\n\n    // Only invalidate specific queries that might be affected by the error\n    if (lightConfig.invalidateHistory) {\n      await this.invalidateHistoryQueries();\n    }\n  }\n\n  /**\n   * Invalidate history-related queries\n   */\n  private async invalidateHistoryQueries(): Promise<void> {\n    const historyInvalidations = [\n      // Main history entries\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-history'],\n        exact: false \n      }),\n      \n      // History metadata\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-metadata'],\n        exact: false \n      }),\n      \n      // Recent activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['recent-activity'],\n        exact: false \n      }),\n      \n      // History search results\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-search'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(historyInvalidations);\n  }\n\n  /**\n   * Invalidate user-specific queries\n   */\n  private async invalidateUserQueries(userId: string): Promise<void> {\n    const userInvalidations = [\n      // User profile data\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-data', userId],\n        exact: false \n      }),\n      \n      // User preferences\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-preferences', userId],\n        exact: false \n      }),\n      \n      // User activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-activity', userId],\n        exact: false \n      }),\n      \n      // User statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-stats', userId],\n        exact: false \n      })\n    ];\n\n    await Promise.all(userInvalidations);\n  }\n\n  /**\n   * Invalidate statistics and aggregation queries\n   */\n  private async invalidateStatsQueries(): Promise<void> {\n    const statsInvalidations = [\n      // General try-on statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-stats'],\n        exact: false \n      }),\n      \n      // Usage analytics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['usage-analytics'],\n        exact: false \n      }),\n      \n      // Performance metrics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['performance-metrics'],\n        exact: false \n      }),\n      \n      // Popular items/combinations\n      this.queryClient.invalidateQueries({ \n        queryKey: ['popular-items'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(statsInvalidations);\n  }\n\n  /**\n   * Invalidate tag-based queries\n   */\n  private async invalidateTagQueries(tags: string[]): Promise<void> {\n    const tagInvalidations = tags.map(tag => \n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-by-tag', tag],\n        exact: false \n      })\n    );\n\n    // Also invalidate general tag queries\n    tagInvalidations.push(\n      this.queryClient.invalidateQueries({ \n        queryKey: ['available-tags'],\n        exact: false \n      })\n    );\n\n    await Promise.all(tagInvalidations);\n  }\n\n  /**\n   * Invalidate custom query keys\n   */\n  private async invalidateCustomQueries(customQueryKeys: string[][]): Promise<void> {\n    const customInvalidations = customQueryKeys.map(queryKey => \n      this.queryClient.invalidateQueries({ \n        queryKey,\n        exact: false \n      })\n    );\n\n    await Promise.all(customInvalidations);\n  }\n\n  /**\n   * Preload related queries that are likely to be accessed next\n   */\n  private async preloadRelatedQueries(\n    userContext: { userId?: string; tags?: string[] } = {}\n  ): Promise<void> {\n    const preloadPromises: Promise<unknown>[] = [];\n\n    // Preload history entries (most likely to be viewed)\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'entries'],\n        staleTime: 30000, // Fresh for 30 seconds\n        gcTime: 5 * 60 * 1000 // Keep in cache for 5 minutes\n      })\n    );\n\n    // Preload history stats\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'stats'],\n        staleTime: 60000, // Fresh for 1 minute\n        gcTime: 10 * 60 * 1000 // Keep in cache for 10 minutes\n      })\n    );\n\n    // Preload user data if userId available\n    if (userContext.userId) {\n      preloadPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-data', userContext.userId],\n          staleTime: 60000,\n          gcTime: 10 * 60 * 1000\n        })\n      );\n    }\n\n    // Preload popular items\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['popular-items'],\n        staleTime: 5 * 60 * 1000, // Fresh for 5 minutes\n        gcTime: 15 * 60 * 1000 // Keep in cache for 15 minutes\n      })\n    );\n\n    await Promise.allSettled(preloadPromises);\n  }\n\n  /**\n   * Smart cache warming based on usage patterns\n   */\n  async warmCache(\n    options: {\n      userId?: string;\n      recentTags?: string[];\n      popularItems?: unknown[];\n    } = {}\n  ): Promise<void> {\n    const warmupPromises: Promise<unknown>[] = [];\n\n    // Warm up frequently accessed data structures\n    if (options.popularItems?.length) {\n      options.popularItems.forEach((item, index) => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['warmup-cache', 'popular', index],\n            queryFn: () => Promise.resolve(item),\n            staleTime: 10 * 60 * 1000, // Fresh for 10 minutes\n            gcTime: 30 * 60 * 1000 // Keep in cache for 30 minutes\n          })\n        );\n      });\n    }\n\n    // Warm up user-specific frequently accessed queries\n    if (options.userId) {\n      warmupPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-favorites', options.userId],\n          staleTime: 5 * 60 * 1000,\n          gcTime: 20 * 60 * 1000\n        })\n      );\n    }\n\n    // Warm up recent tag queries\n    if (options.recentTags?.length) {\n      options.recentTags.forEach(tag => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['recent-by-tag', tag],\n            staleTime: 2 * 60 * 1000, // Fresh for 2 minutes\n            gcTime: 10 * 60 * 1000\n          })\n        );\n      });\n    }\n\n    await Promise.allSettled(warmupPromises);\n  }\n\n  /**\n   * Cleanup stale cache entries\n   */\n  async cleanupStaleCache(): Promise<void> {\n    // Remove queries that haven't been accessed in a while\n    this.queryClient.removeQueries({\n      predicate: (query) => {\n        const lastAccessed = query.state.dataUpdatedAt;\n        const oneHourAgo = Date.now() - 60 * 60 * 1000;\n        return lastAccessed < oneHourAgo;\n      }\n    });\n\n    // Cleanup specific temporary cache entries\n    this.queryClient.removeQueries({\n      queryKey: ['warmup-cache'],\n      exact: false\n    });\n\n    this.queryClient.removeQueries({\n      queryKey: ['temp'],\n      exact: false\n    });\n  }\n}\n\n/**\n * Default cache invalidation manager instance\n */\nexport let defaultCacheManager: CacheInvalidationManager | null = null;\n\n/**\n * Initialize the default cache invalidation manager\n */\nexport function initializeCacheInvalidation(queryClient: QueryClient): CacheInvalidationManager {\n  defaultCacheManager = new CacheInvalidationManager(queryClient);\n  return defaultCacheManager;\n}\n\n/**\n * Get the default cache invalidation manager\n */\nexport function getCacheInvalidationManager(): CacheInvalidationManager {\n  if (!defaultCacheManager) {\n    throw new Error('CacheInvalidationManager not initialized. Call initializeCacheInvalidation first.');\n  }\n  return defaultCacheManager;\n}\n\n/**\n * Utility function for post-mutation cache invalidation\n */\nexport async function invalidateCacheAfterMutation(\n  queryClient: QueryClient,\n  data: TryonMutationResponse,\n  variables: TryonMutationVariables,\n  context: TryonMutationContext,\n  config?: CacheInvalidationConfig\n): Promise<void> {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n  await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n}\n\n/**\n * Hook for creating cache-aware mutation callbacks\n */\nexport function createCacheAwareMutationCallbacks(\n  queryClient: QueryClient,\n  config: CacheInvalidationConfig = {}\n) {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n\n  return {\n    onSuccess: async (\n      data: TryonMutationResponse,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext\n    ) => {\n      await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n    },\n\n    onError: async (\n      error: unknown,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext | undefined\n    ) => {\n      if (context) {\n        await cacheManager.invalidateAfterError(error, variables, context, {\n          invalidateHistory: false, // Don't invalidate on error by default\n          invalidateUserData: false,\n          ...config\n        });\n      }\n    }\n  };\n}"],
      names: ["CacheInvalidationManager", "createCacheAwareMutationCallbacks", "defaultCacheManager", "getCacheInvalidationManager", "initializeCacheInvalidation", "invalidateCacheAfterMutation", "DEFAULT_CACHE_CONFIG", "invalidateHistory", "invalidateUserData", "invalidateStats", "invalidateTags", "preloadRelated", "customQueryKeys", "userContext", "constructor", "queryClient", "invalidateAfterSuccess", "data", "variables", "context", "config", "mergedConfig", "invalidationPromises", "push", "invalidateHistoryQueries", "userId", "invalidateUserQueries", "invalidateStatsQueries", "tags", "length", "invalidateTagQueries", "invalidateCustomQueries", "Promise", "all", "preloadRelatedQueries", "invalidateAfterError", "error", "lightConfig", "historyInvalidations", "invalidateQueries", "queryKey", "exact", "userInvalidations", "statsInvalidations", "tagInvalidations", "map", "tag", "customInvalidations", "preloadPromises", "prefetchQuery", "staleTime", "gcTime", "allSettled", "warmCache", "options", "warmupPromises", "popularItems", "forEach", "item", "index", "queryFn", "resolve", "recentTags", "cleanupStaleCache", "removeQueries", "predicate", "query", "lastAccessed", "state", "dataUpdatedAt", "oneHourAgo", "Date", "now", "Error", "cacheManager", "onSuccess", "onError"],
      mappings: "AAAA,yCAAyC;AACzC,0EAA0E;;;;;;;;;;;;IA4C7DA,wBAAwB;eAAxBA;;IA4XGC,iCAAiC;eAAjCA;;IArCLC,mBAAmB;eAAnBA;;IAaKC,2BAA2B;eAA3BA;;IARAC,2BAA2B;eAA3BA;;IAkBMC,4BAA4B;eAA5BA;;;AA9XtB;;CAEC,GACD,MAAMC,uBAA0D;IAC9DC,mBAAmB;IACnBC,oBAAoB;IACpBC,iBAAiB;IACjBC,gBAAgB;IAChBC,gBAAgB;IAChBC,iBAAiB,EAAE;IACnBC,aAAa,CAAC;AAChB;AAKO,MAAMb;IAGXc,YAAYC,WAAwB,CAAE;QACpC,IAAI,CAACA,WAAW,GAAGA;IACrB;IAEA;;GAEC,GACD,MAAMC,uBACJC,IAA2B,EAC3BC,SAAiC,EACjCC,OAA6B,EAC7BC,SAAkC,CAAC,CAAC,EACrB;QACf,MAAMC,eAAe;YAAE,GAAGf,oBAAoB;YAAE,GAAGc,MAAM;QAAC;QAC1D,MAAME,uBAAwC,EAAE;QAEhD,gCAAgC;QAChC,IAAID,aAAad,iBAAiB,EAAE;YAClCe,qBAAqBC,IAAI,CAAC,IAAI,CAACC,wBAAwB;QACzD;QAEA,mCAAmC;QACnC,IAAIH,aAAab,kBAAkB,IAAIa,aAAaR,WAAW,CAACY,MAAM,EAAE;YACtEH,qBAAqBC,IAAI,CAAC,IAAI,CAACG,qBAAqB,CAACL,aAAaR,WAAW,CAACY,MAAM;QACtF;QAEA,4CAA4C;QAC5C,IAAIJ,aAAaZ,eAAe,EAAE;YAChCa,qBAAqBC,IAAI,CAAC,IAAI,CAACI,sBAAsB;QACvD;QAEA,kCAAkC;QAClC,IAAIN,aAAaX,cAAc,IAAIW,aAAaR,WAAW,CAACe,IAAI,EAAEC,QAAQ;YACxEP,qBAAqBC,IAAI,CAAC,IAAI,CAACO,oBAAoB,CAACT,aAAaR,WAAW,CAACe,IAAI;QACnF;QAEA,kCAAkC;QAClC,IAAIP,aAAaT,eAAe,CAACiB,MAAM,GAAG,GAAG;YAC3CP,qBAAqBC,IAAI,CAAC,IAAI,CAACQ,uBAAuB,CAACV,aAAaT,eAAe;QACrF;QAEA,wCAAwC;QACxC,MAAMoB,QAAQC,GAAG,CAACX;QAElB,wCAAwC;QACxC,IAAID,aAAaV,cAAc,EAAE;YAC/B,MAAM,IAAI,CAACuB,qBAAqB,CAACb,aAAaR,WAAW;QAC3D;IACF;IAEA;;GAEC,GACD,MAAMsB,qBACJC,KAAc,EACdlB,SAAiC,EACjCC,OAA6B,EAC7BC,SAA2C,CAAC,CAAC,EAC9B;QACf,MAAMiB,cAAc;YAClB9B,mBAAmB;YACnBC,oBAAoB;YACpBC,iBAAiB;YACjBC,gBAAgB;YAChBC,gBAAgB;YAChB,GAAGS,MAAM;QACX;QAEA,uEAAuE;QACvE,IAAIiB,YAAY9B,iBAAiB,EAAE;YACjC,MAAM,IAAI,CAACiB,wBAAwB;QACrC;IACF;IAEA;;GAEC,GACD,MAAcA,2BAA0C;QACtD,MAAMc,uBAAuB;YAC3B,uBAAuB;YACvB,IAAI,CAACvB,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAgB;gBAC3BC,OAAO;YACT;YAEA,mBAAmB;YACnB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAmB;gBAC9BC,OAAO;YACT;YAEA,kBAAkB;YAClB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAkB;gBAC7BC,OAAO;YACT;YAEA,yBAAyB;YACzB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAiB;gBAC5BC,OAAO;YACT;SACD;QAED,MAAMT,QAAQC,GAAG,CAACK;IACpB;IAEA;;GAEC,GACD,MAAcZ,sBAAsBD,MAAc,EAAiB;QACjE,MAAMiB,oBAAoB;YACxB,oBAAoB;YACpB,IAAI,CAAC3B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;oBAAaf;iBAAO;gBAC/BgB,OAAO;YACT;YAEA,mBAAmB;YACnB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;oBAAoBf;iBAAO;gBACtCgB,OAAO;YACT;YAEA,gBAAgB;YAChB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;oBAAiBf;iBAAO;gBACnCgB,OAAO;YACT;YAEA,kBAAkB;YAClB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;oBAAcf;iBAAO;gBAChCgB,OAAO;YACT;SACD;QAED,MAAMT,QAAQC,GAAG,CAACS;IACpB;IAEA;;GAEC,GACD,MAAcf,yBAAwC;QACpD,MAAMgB,qBAAqB;YACzB,4BAA4B;YAC5B,IAAI,CAAC5B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAc;gBACzBC,OAAO;YACT;YAEA,kBAAkB;YAClB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAkB;gBAC7BC,OAAO;YACT;YAEA,sBAAsB;YACtB,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAsB;gBACjCC,OAAO;YACT;YAEA,6BAA6B;YAC7B,IAAI,CAAC1B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;iBAAgB;gBAC3BC,OAAO;YACT;SACD;QAED,MAAMT,QAAQC,GAAG,CAACU;IACpB;IAEA;;GAEC,GACD,MAAcb,qBAAqBF,IAAc,EAAiB;QAChE,MAAMgB,mBAAmBhB,KAAKiB,GAAG,CAACC,CAAAA,MAChC,IAAI,CAAC/B,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC,UAAU;oBAAC;oBAAgBM;iBAAI;gBAC/BL,OAAO;YACT;QAGF,sCAAsC;QACtCG,iBAAiBrB,IAAI,CACnB,IAAI,CAACR,WAAW,CAACwB,iBAAiB,CAAC;YACjCC,UAAU;gBAAC;aAAiB;YAC5BC,OAAO;QACT;QAGF,MAAMT,QAAQC,GAAG,CAACW;IACpB;IAEA;;GAEC,GACD,MAAcb,wBAAwBnB,eAA2B,EAAiB;QAChF,MAAMmC,sBAAsBnC,gBAAgBiC,GAAG,CAACL,CAAAA,WAC9C,IAAI,CAACzB,WAAW,CAACwB,iBAAiB,CAAC;gBACjCC;gBACAC,OAAO;YACT;QAGF,MAAMT,QAAQC,GAAG,CAACc;IACpB;IAEA;;GAEC,GACD,MAAcb,sBACZrB,cAAoD,CAAC,CAAC,EACvC;QACf,MAAMmC,kBAAsC,EAAE;QAE9C,qDAAqD;QACrDA,gBAAgBzB,IAAI,CAClB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;YAC7BT,UAAU;gBAAC;gBAAiB;aAAU;YACtCU,WAAW;YACXC,QAAQ,IAAI,KAAK,KAAK,8BAA8B;QACtD;QAGF,wBAAwB;QACxBH,gBAAgBzB,IAAI,CAClB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;YAC7BT,UAAU;gBAAC;gBAAiB;aAAQ;YACpCU,WAAW;YACXC,QAAQ,KAAK,KAAK,KAAK,+BAA+B;QACxD;QAGF,wCAAwC;QACxC,IAAItC,YAAYY,MAAM,EAAE;YACtBuB,gBAAgBzB,IAAI,CAClB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;gBAC7BT,UAAU;oBAAC;oBAAa3B,YAAYY,MAAM;iBAAC;gBAC3CyB,WAAW;gBACXC,QAAQ,KAAK,KAAK;YACpB;QAEJ;QAEA,wBAAwB;QACxBH,gBAAgBzB,IAAI,CAClB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;YAC7BT,UAAU;gBAAC;aAAgB;YAC3BU,WAAW,IAAI,KAAK;YACpBC,QAAQ,KAAK,KAAK,KAAK,+BAA+B;QACxD;QAGF,MAAMnB,QAAQoB,UAAU,CAACJ;IAC3B;IAEA;;GAEC,GACD,MAAMK,UACJC,UAII,CAAC,CAAC,EACS;QACf,MAAMC,iBAAqC,EAAE;QAE7C,8CAA8C;QAC9C,IAAID,QAAQE,YAAY,EAAE3B,QAAQ;YAChCyB,QAAQE,YAAY,CAACC,OAAO,CAAC,CAACC,MAAMC;gBAClCJ,eAAehC,IAAI,CACjB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;oBAC7BT,UAAU;wBAAC;wBAAgB;wBAAWmB;qBAAM;oBAC5CC,SAAS,IAAM5B,QAAQ6B,OAAO,CAACH;oBAC/BR,WAAW,KAAK,KAAK;oBACrBC,QAAQ,KAAK,KAAK,KAAK,+BAA+B;gBACxD;YAEJ;QACF;QAEA,oDAAoD;QACpD,IAAIG,QAAQ7B,MAAM,EAAE;YAClB8B,eAAehC,IAAI,CACjB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;gBAC7BT,UAAU;oBAAC;oBAAkBc,QAAQ7B,MAAM;iBAAC;gBAC5CyB,WAAW,IAAI,KAAK;gBACpBC,QAAQ,KAAK,KAAK;YACpB;QAEJ;QAEA,6BAA6B;QAC7B,IAAIG,QAAQQ,UAAU,EAAEjC,QAAQ;YAC9ByB,QAAQQ,UAAU,CAACL,OAAO,CAACX,CAAAA;gBACzBS,eAAehC,IAAI,CACjB,IAAI,CAACR,WAAW,CAACkC,aAAa,CAAC;oBAC7BT,UAAU;wBAAC;wBAAiBM;qBAAI;oBAChCI,WAAW,IAAI,KAAK;oBACpBC,QAAQ,KAAK,KAAK;gBACpB;YAEJ;QACF;QAEA,MAAMnB,QAAQoB,UAAU,CAACG;IAC3B;IAEA;;GAEC,GACD,MAAMQ,oBAAmC;QACvC,uDAAuD;QACvD,IAAI,CAAChD,WAAW,CAACiD,aAAa,CAAC;YAC7BC,WAAW,CAACC;gBACV,MAAMC,eAAeD,MAAME,KAAK,CAACC,aAAa;gBAC9C,MAAMC,aAAaC,KAAKC,GAAG,KAAK,KAAK,KAAK;gBAC1C,OAAOL,eAAeG;YACxB;QACF;QAEA,2CAA2C;QAC3C,IAAI,CAACvD,WAAW,CAACiD,aAAa,CAAC;YAC7BxB,UAAU;gBAAC;aAAe;YAC1BC,OAAO;QACT;QAEA,IAAI,CAAC1B,WAAW,CAACiD,aAAa,CAAC;YAC7BxB,UAAU;gBAAC;aAAO;YAClBC,OAAO;QACT;IACF;AACF;AAKO,IAAIvC,sBAAuD;AAK3D,SAASE,4BAA4BW,WAAwB;IAClEb,sBAAsB,IAAIF,yBAAyBe;IACnD,OAAOb;AACT;AAKO,SAASC;IACd,IAAI,CAACD,qBAAqB;QACxB,MAAM,IAAIuE,MAAM;IAClB;IACA,OAAOvE;AACT;AAKO,eAAeG,6BACpBU,WAAwB,EACxBE,IAA2B,EAC3BC,SAAiC,EACjCC,OAA6B,EAC7BC,MAAgC;IAEhC,MAAMsD,eAAexE,uBAAuB,IAAIF,yBAAyBe;IACzE,MAAM2D,aAAa1D,sBAAsB,CAACC,MAAMC,WAAWC,SAASC;AACtE;AAKO,SAASnB,kCACdc,WAAwB,EACxBK,SAAkC,CAAC,CAAC;IAEpC,MAAMsD,eAAexE,uBAAuB,IAAIF,yBAAyBe;IAEzE,OAAO;QACL4D,WAAW,OACT1D,MACAC,WACAC;YAEA,MAAMuD,aAAa1D,sBAAsB,CAACC,MAAMC,WAAWC,SAASC;QACtE;QAEAwD,SAAS,OACPxC,OACAlB,WACAC;YAEA,IAAIA,SAAS;gBACX,MAAMuD,aAAavC,oBAAoB,CAACC,OAAOlB,WAAWC,SAAS;oBACjEZ,mBAAmB;oBACnBC,oBAAoB;oBACpB,GAAGY,MAAM;gBACX;YACF;QACF;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f8d2f0e6a644627a127917d6be4cf5136a4893f1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2j5zv2yk9j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2j5zv2yk9j();
cov_2j5zv2yk9j().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2j5zv2yk9j().f[0]++;
  cov_2j5zv2yk9j().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2j5zv2yk9j().s[3]++;
_export(exports, {
  CacheInvalidationManager: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[1]++;
    cov_2j5zv2yk9j().s[4]++;
    return CacheInvalidationManager;
  },
  createCacheAwareMutationCallbacks: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[2]++;
    cov_2j5zv2yk9j().s[5]++;
    return createCacheAwareMutationCallbacks;
  },
  defaultCacheManager: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[3]++;
    cov_2j5zv2yk9j().s[6]++;
    return defaultCacheManager;
  },
  getCacheInvalidationManager: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[4]++;
    cov_2j5zv2yk9j().s[7]++;
    return getCacheInvalidationManager;
  },
  initializeCacheInvalidation: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[5]++;
    cov_2j5zv2yk9j().s[8]++;
    return initializeCacheInvalidation;
  },
  invalidateCacheAfterMutation: function () {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[6]++;
    cov_2j5zv2yk9j().s[9]++;
    return invalidateCacheAfterMutation;
  }
});
/**
 * Default cache invalidation configuration
 */
const DEFAULT_CACHE_CONFIG =
/* istanbul ignore next */
(cov_2j5zv2yk9j().s[10]++, {
  invalidateHistory: true,
  invalidateUserData: true,
  invalidateStats: true,
  invalidateTags: true,
  preloadRelated: true,
  customQueryKeys: [],
  userContext: {}
});
class CacheInvalidationManager {
  constructor(queryClient) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[7]++;
    cov_2j5zv2yk9j().s[11]++;
    this.queryClient = queryClient;
  }
  /**
  * Invalidate caches after successful try-on mutation
  */
  async invalidateAfterSuccess(data, variables, context, config =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[8]++;
    const mergedConfig =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[12]++, {
      ...DEFAULT_CACHE_CONFIG,
      ...config
    });
    const invalidationPromises =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[13]++, []);
    // 1. Invalidate history queries
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[14]++;
    if (mergedConfig.invalidateHistory) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[1][0]++;
      cov_2j5zv2yk9j().s[15]++;
      invalidationPromises.push(this.invalidateHistoryQueries());
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[1][1]++;
    }
    // 2. Invalidate user-specific data
    cov_2j5zv2yk9j().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().b[3][0]++, mergedConfig.invalidateUserData) &&
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().b[3][1]++, mergedConfig.userContext.userId)) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[2][0]++;
      cov_2j5zv2yk9j().s[17]++;
      invalidationPromises.push(this.invalidateUserQueries(mergedConfig.userContext.userId));
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[2][1]++;
    }
    // 3. Invalidate statistics and aggregations
    cov_2j5zv2yk9j().s[18]++;
    if (mergedConfig.invalidateStats) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[4][0]++;
      cov_2j5zv2yk9j().s[19]++;
      invalidationPromises.push(this.invalidateStatsQueries());
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[4][1]++;
    }
    // 4. Invalidate tag-based queries
    cov_2j5zv2yk9j().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().b[6][0]++, mergedConfig.invalidateTags) &&
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().b[6][1]++, mergedConfig.userContext.tags?.length)) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[5][0]++;
      cov_2j5zv2yk9j().s[21]++;
      invalidationPromises.push(this.invalidateTagQueries(mergedConfig.userContext.tags));
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[5][1]++;
    }
    // 5. Invalidate custom query keys
    cov_2j5zv2yk9j().s[22]++;
    if (mergedConfig.customQueryKeys.length > 0) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[7][0]++;
      cov_2j5zv2yk9j().s[23]++;
      invalidationPromises.push(this.invalidateCustomQueries(mergedConfig.customQueryKeys));
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[7][1]++;
    }
    // Execute all invalidations in parallel
    cov_2j5zv2yk9j().s[24]++;
    await Promise.all(invalidationPromises);
    // 6. Preload related queries if enabled
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[25]++;
    if (mergedConfig.preloadRelated) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[8][0]++;
      cov_2j5zv2yk9j().s[26]++;
      await this.preloadRelatedQueries(mergedConfig.userContext);
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[8][1]++;
    }
  }
  /**
  * Selective cache invalidation after error (lighter touch)
  */
  async invalidateAfterError(error, variables, context, config =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[9]++;
    const lightConfig =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[27]++, {
      invalidateHistory: false,
      invalidateUserData: false,
      invalidateStats: false,
      invalidateTags: false,
      preloadRelated: false,
      ...config
    });
    // Only invalidate specific queries that might be affected by the error
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[28]++;
    if (lightConfig.invalidateHistory) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[10][0]++;
      cov_2j5zv2yk9j().s[29]++;
      await this.invalidateHistoryQueries();
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[10][1]++;
    }
  }
  /**
  * Invalidate history-related queries
  */
  async invalidateHistoryQueries() {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[10]++;
    const historyInvalidations =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[30]++, [
    // Main history entries
    this.queryClient.invalidateQueries({
      queryKey: ['tryon-history'],
      exact: false
    }),
    // History metadata
    this.queryClient.invalidateQueries({
      queryKey: ['history-metadata'],
      exact: false
    }),
    // Recent activity
    this.queryClient.invalidateQueries({
      queryKey: ['recent-activity'],
      exact: false
    }),
    // History search results
    this.queryClient.invalidateQueries({
      queryKey: ['history-search'],
      exact: false
    })]);
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[31]++;
    await Promise.all(historyInvalidations);
  }
  /**
  * Invalidate user-specific queries
  */
  async invalidateUserQueries(userId) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[11]++;
    const userInvalidations =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[32]++, [
    // User profile data
    this.queryClient.invalidateQueries({
      queryKey: ['user-data', userId],
      exact: false
    }),
    // User preferences
    this.queryClient.invalidateQueries({
      queryKey: ['user-preferences', userId],
      exact: false
    }),
    // User activity
    this.queryClient.invalidateQueries({
      queryKey: ['user-activity', userId],
      exact: false
    }),
    // User statistics
    this.queryClient.invalidateQueries({
      queryKey: ['user-stats', userId],
      exact: false
    })]);
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[33]++;
    await Promise.all(userInvalidations);
  }
  /**
  * Invalidate statistics and aggregation queries
  */
  async invalidateStatsQueries() {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[12]++;
    const statsInvalidations =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[34]++, [
    // General try-on statistics
    this.queryClient.invalidateQueries({
      queryKey: ['tryon-stats'],
      exact: false
    }),
    // Usage analytics
    this.queryClient.invalidateQueries({
      queryKey: ['usage-analytics'],
      exact: false
    }),
    // Performance metrics
    this.queryClient.invalidateQueries({
      queryKey: ['performance-metrics'],
      exact: false
    }),
    // Popular items/combinations
    this.queryClient.invalidateQueries({
      queryKey: ['popular-items'],
      exact: false
    })]);
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[35]++;
    await Promise.all(statsInvalidations);
  }
  /**
  * Invalidate tag-based queries
  */
  async invalidateTagQueries(tags) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[13]++;
    const tagInvalidations =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[36]++, tags.map(tag => {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().f[14]++;
      cov_2j5zv2yk9j().s[37]++;
      return this.queryClient.invalidateQueries({
        queryKey: ['tryon-by-tag', tag],
        exact: false
      });
    }));
    // Also invalidate general tag queries
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[38]++;
    tagInvalidations.push(this.queryClient.invalidateQueries({
      queryKey: ['available-tags'],
      exact: false
    }));
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[39]++;
    await Promise.all(tagInvalidations);
  }
  /**
  * Invalidate custom query keys
  */
  async invalidateCustomQueries(customQueryKeys) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[15]++;
    const customInvalidations =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[40]++, customQueryKeys.map(queryKey => {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().f[16]++;
      cov_2j5zv2yk9j().s[41]++;
      return this.queryClient.invalidateQueries({
        queryKey,
        exact: false
      });
    }));
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[42]++;
    await Promise.all(customInvalidations);
  }
  /**
  * Preload related queries that are likely to be accessed next
  */
  async preloadRelatedQueries(userContext =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[17]++;
    const preloadPromises =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[43]++, []);
    // Preload history entries (most likely to be viewed)
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[44]++;
    preloadPromises.push(this.queryClient.prefetchQuery({
      queryKey: ['tryon-history', 'entries'],
      staleTime: 30000,
      gcTime: 5 * 60 * 1000 // Keep in cache for 5 minutes
    }));
    // Preload history stats
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[45]++;
    preloadPromises.push(this.queryClient.prefetchQuery({
      queryKey: ['tryon-history', 'stats'],
      staleTime: 60000,
      gcTime: 10 * 60 * 1000 // Keep in cache for 10 minutes
    }));
    // Preload user data if userId available
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[46]++;
    if (userContext.userId) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[12][0]++;
      cov_2j5zv2yk9j().s[47]++;
      preloadPromises.push(this.queryClient.prefetchQuery({
        queryKey: ['user-data', userContext.userId],
        staleTime: 60000,
        gcTime: 10 * 60 * 1000
      }));
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[12][1]++;
    }
    // Preload popular items
    cov_2j5zv2yk9j().s[48]++;
    preloadPromises.push(this.queryClient.prefetchQuery({
      queryKey: ['popular-items'],
      staleTime: 5 * 60 * 1000,
      gcTime: 15 * 60 * 1000 // Keep in cache for 15 minutes
    }));
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[49]++;
    await Promise.allSettled(preloadPromises);
  }
  /**
  * Smart cache warming based on usage patterns
  */
  async warmCache(options =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[13][0]++, {})) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[18]++;
    const warmupPromises =
    /* istanbul ignore next */
    (cov_2j5zv2yk9j().s[50]++, []);
    // Warm up frequently accessed data structures
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[51]++;
    if (options.popularItems?.length) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[14][0]++;
      cov_2j5zv2yk9j().s[52]++;
      options.popularItems.forEach((item, index) => {
        /* istanbul ignore next */
        cov_2j5zv2yk9j().f[19]++;
        cov_2j5zv2yk9j().s[53]++;
        warmupPromises.push(this.queryClient.prefetchQuery({
          queryKey: ['warmup-cache', 'popular', index],
          queryFn: () => {
            /* istanbul ignore next */
            cov_2j5zv2yk9j().f[20]++;
            cov_2j5zv2yk9j().s[54]++;
            return Promise.resolve(item);
          },
          staleTime: 10 * 60 * 1000,
          gcTime: 30 * 60 * 1000 // Keep in cache for 30 minutes
        }));
      });
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[14][1]++;
    }
    // Warm up user-specific frequently accessed queries
    cov_2j5zv2yk9j().s[55]++;
    if (options.userId) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[15][0]++;
      cov_2j5zv2yk9j().s[56]++;
      warmupPromises.push(this.queryClient.prefetchQuery({
        queryKey: ['user-favorites', options.userId],
        staleTime: 5 * 60 * 1000,
        gcTime: 20 * 60 * 1000
      }));
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[15][1]++;
    }
    // Warm up recent tag queries
    cov_2j5zv2yk9j().s[57]++;
    if (options.recentTags?.length) {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().b[16][0]++;
      cov_2j5zv2yk9j().s[58]++;
      options.recentTags.forEach(tag => {
        /* istanbul ignore next */
        cov_2j5zv2yk9j().f[21]++;
        cov_2j5zv2yk9j().s[59]++;
        warmupPromises.push(this.queryClient.prefetchQuery({
          queryKey: ['recent-by-tag', tag],
          staleTime: 2 * 60 * 1000,
          gcTime: 10 * 60 * 1000
        }));
      });
    } else
    /* istanbul ignore next */
    {
      cov_2j5zv2yk9j().b[16][1]++;
    }
    cov_2j5zv2yk9j().s[60]++;
    await Promise.allSettled(warmupPromises);
  }
  /**
  * Cleanup stale cache entries
  */
  async cleanupStaleCache() {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().f[22]++;
    cov_2j5zv2yk9j().s[61]++;
    // Remove queries that haven't been accessed in a while
    this.queryClient.removeQueries({
      predicate: query => {
        /* istanbul ignore next */
        cov_2j5zv2yk9j().f[23]++;
        const lastAccessed =
        /* istanbul ignore next */
        (cov_2j5zv2yk9j().s[62]++, query.state.dataUpdatedAt);
        const oneHourAgo =
        /* istanbul ignore next */
        (cov_2j5zv2yk9j().s[63]++, Date.now() - 60 * 60 * 1000);
        /* istanbul ignore next */
        cov_2j5zv2yk9j().s[64]++;
        return lastAccessed < oneHourAgo;
      }
    });
    // Cleanup specific temporary cache entries
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[65]++;
    this.queryClient.removeQueries({
      queryKey: ['warmup-cache'],
      exact: false
    });
    /* istanbul ignore next */
    cov_2j5zv2yk9j().s[66]++;
    this.queryClient.removeQueries({
      queryKey: ['temp'],
      exact: false
    });
  }
}
let defaultCacheManager =
/* istanbul ignore next */
(cov_2j5zv2yk9j().s[67]++, null);
function initializeCacheInvalidation(queryClient) {
  /* istanbul ignore next */
  cov_2j5zv2yk9j().f[24]++;
  cov_2j5zv2yk9j().s[68]++;
  defaultCacheManager = new CacheInvalidationManager(queryClient);
  /* istanbul ignore next */
  cov_2j5zv2yk9j().s[69]++;
  return defaultCacheManager;
}
function getCacheInvalidationManager() {
  /* istanbul ignore next */
  cov_2j5zv2yk9j().f[25]++;
  cov_2j5zv2yk9j().s[70]++;
  if (!defaultCacheManager) {
    /* istanbul ignore next */
    cov_2j5zv2yk9j().b[17][0]++;
    cov_2j5zv2yk9j().s[71]++;
    throw new Error('CacheInvalidationManager not initialized. Call initializeCacheInvalidation first.');
  } else
  /* istanbul ignore next */
  {
    cov_2j5zv2yk9j().b[17][1]++;
  }
  cov_2j5zv2yk9j().s[72]++;
  return defaultCacheManager;
}
async function invalidateCacheAfterMutation(queryClient, data, variables, context, config) {
  /* istanbul ignore next */
  cov_2j5zv2yk9j().f[26]++;
  const cacheManager =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().s[73]++,
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[18][0]++, defaultCacheManager) ||
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[18][1]++, new CacheInvalidationManager(queryClient)));
  /* istanbul ignore next */
  cov_2j5zv2yk9j().s[74]++;
  await cacheManager.invalidateAfterSuccess(data, variables, context, config);
}
function createCacheAwareMutationCallbacks(queryClient, config =
/* istanbul ignore next */
(cov_2j5zv2yk9j().b[19][0]++, {})) {
  /* istanbul ignore next */
  cov_2j5zv2yk9j().f[27]++;
  const cacheManager =
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().s[75]++,
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[20][0]++, defaultCacheManager) ||
  /* istanbul ignore next */
  (cov_2j5zv2yk9j().b[20][1]++, new CacheInvalidationManager(queryClient)));
  /* istanbul ignore next */
  cov_2j5zv2yk9j().s[76]++;
  return {
    onSuccess: async (data, variables, context) => {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().f[28]++;
      cov_2j5zv2yk9j().s[77]++;
      await cacheManager.invalidateAfterSuccess(data, variables, context, config);
    },
    onError: async (error, variables, context) => {
      /* istanbul ignore next */
      cov_2j5zv2yk9j().f[29]++;
      cov_2j5zv2yk9j().s[78]++;
      if (context) {
        /* istanbul ignore next */
        cov_2j5zv2yk9j().b[21][0]++;
        cov_2j5zv2yk9j().s[79]++;
        await cacheManager.invalidateAfterError(error, variables, context, {
          invalidateHistory: false,
          invalidateUserData: false,
          ...config
        });
      } else
      /* istanbul ignore next */
      {
        cov_2j5zv2yk9j().b[21][1]++;
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,