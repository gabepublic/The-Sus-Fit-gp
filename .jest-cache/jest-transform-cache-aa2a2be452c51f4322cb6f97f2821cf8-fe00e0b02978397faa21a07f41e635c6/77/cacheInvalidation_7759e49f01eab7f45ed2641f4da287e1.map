{"version":3,"names":["CacheInvalidationManager","cov_2j5zv2yk9j","f","s","createCacheAwareMutationCallbacks","defaultCacheManager","getCacheInvalidationManager","initializeCacheInvalidation","invalidateCacheAfterMutation","DEFAULT_CACHE_CONFIG","invalidateHistory","invalidateUserData","invalidateStats","invalidateTags","preloadRelated","customQueryKeys","userContext","constructor","queryClient","invalidateAfterSuccess","data","variables","context","config","b","mergedConfig","invalidationPromises","push","invalidateHistoryQueries","userId","invalidateUserQueries","invalidateStatsQueries","tags","length","invalidateTagQueries","invalidateCustomQueries","Promise","all","preloadRelatedQueries","invalidateAfterError","error","lightConfig","historyInvalidations","invalidateQueries","queryKey","exact","userInvalidations","statsInvalidations","tagInvalidations","map","tag","customInvalidations","preloadPromises","prefetchQuery","staleTime","gcTime","allSettled","warmCache","options","warmupPromises","popularItems","forEach","item","index","queryFn","resolve","recentTags","cleanupStaleCache","removeQueries","predicate","query","lastAccessed","state","dataUpdatedAt","oneHourAgo","Date","now","Error","cacheManager","onSuccess","onError"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/cacheInvalidation.ts"],"sourcesContent":["// Advanced Cache Invalidation Strategies\n// Comprehensive cache management for try-on mutations and related queries\n\nimport { QueryClient } from '@tanstack/react-query';\nimport type { TryonMutationVariables, TryonMutationResponse, TryonMutationContext } from '../types/tryon.types';\n\n/**\n * Configuration for cache invalidation strategies\n */\nexport interface CacheInvalidationConfig {\n  /** Whether to invalidate history-related queries */\n  invalidateHistory?: boolean;\n  /** Whether to invalidate user-specific data */\n  invalidateUserData?: boolean;\n  /** Whether to invalidate statistics and aggregations */\n  invalidateStats?: boolean;\n  /** Whether to invalidate tag-based queries */\n  invalidateTags?: boolean;\n  /** Whether to preload related queries after invalidation */\n  preloadRelated?: boolean;\n  /** Custom query keys to invalidate */\n  customQueryKeys?: string[][];\n  /** Context for user-specific invalidation */\n  userContext?: {\n    userId?: string;\n    tags?: string[];\n  };\n}\n\n/**\n * Default cache invalidation configuration\n */\nconst DEFAULT_CACHE_CONFIG: Required<CacheInvalidationConfig> = {\n  invalidateHistory: true,\n  invalidateUserData: true,\n  invalidateStats: true,\n  invalidateTags: true,\n  preloadRelated: true,\n  customQueryKeys: [],\n  userContext: {}\n};\n\n/**\n * Advanced cache invalidation manager\n */\nexport class CacheInvalidationManager {\n  private queryClient: QueryClient;\n\n  constructor(queryClient: QueryClient) {\n    this.queryClient = queryClient;\n  }\n\n  /**\n   * Invalidate caches after successful try-on mutation\n   */\n  async invalidateAfterSuccess(\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: CacheInvalidationConfig = {}\n  ): Promise<void> {\n    const mergedConfig = { ...DEFAULT_CACHE_CONFIG, ...config };\n    const invalidationPromises: Promise<void>[] = [];\n\n    // 1. Invalidate history queries\n    if (mergedConfig.invalidateHistory) {\n      invalidationPromises.push(this.invalidateHistoryQueries());\n    }\n\n    // 2. Invalidate user-specific data\n    if (mergedConfig.invalidateUserData && mergedConfig.userContext.userId) {\n      invalidationPromises.push(this.invalidateUserQueries(mergedConfig.userContext.userId));\n    }\n\n    // 3. Invalidate statistics and aggregations\n    if (mergedConfig.invalidateStats) {\n      invalidationPromises.push(this.invalidateStatsQueries());\n    }\n\n    // 4. Invalidate tag-based queries\n    if (mergedConfig.invalidateTags && mergedConfig.userContext.tags?.length) {\n      invalidationPromises.push(this.invalidateTagQueries(mergedConfig.userContext.tags));\n    }\n\n    // 5. Invalidate custom query keys\n    if (mergedConfig.customQueryKeys.length > 0) {\n      invalidationPromises.push(this.invalidateCustomQueries(mergedConfig.customQueryKeys));\n    }\n\n    // Execute all invalidations in parallel\n    await Promise.all(invalidationPromises);\n\n    // 6. Preload related queries if enabled\n    if (mergedConfig.preloadRelated) {\n      await this.preloadRelatedQueries(mergedConfig.userContext);\n    }\n  }\n\n  /**\n   * Selective cache invalidation after error (lighter touch)\n   */\n  async invalidateAfterError(\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext,\n    config: Partial<CacheInvalidationConfig> = {}\n  ): Promise<void> {\n    const lightConfig = {\n      invalidateHistory: false,\n      invalidateUserData: false,\n      invalidateStats: false,\n      invalidateTags: false,\n      preloadRelated: false,\n      ...config\n    };\n\n    // Only invalidate specific queries that might be affected by the error\n    if (lightConfig.invalidateHistory) {\n      await this.invalidateHistoryQueries();\n    }\n  }\n\n  /**\n   * Invalidate history-related queries\n   */\n  private async invalidateHistoryQueries(): Promise<void> {\n    const historyInvalidations = [\n      // Main history entries\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-history'],\n        exact: false \n      }),\n      \n      // History metadata\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-metadata'],\n        exact: false \n      }),\n      \n      // Recent activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['recent-activity'],\n        exact: false \n      }),\n      \n      // History search results\n      this.queryClient.invalidateQueries({ \n        queryKey: ['history-search'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(historyInvalidations);\n  }\n\n  /**\n   * Invalidate user-specific queries\n   */\n  private async invalidateUserQueries(userId: string): Promise<void> {\n    const userInvalidations = [\n      // User profile data\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-data', userId],\n        exact: false \n      }),\n      \n      // User preferences\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-preferences', userId],\n        exact: false \n      }),\n      \n      // User activity\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-activity', userId],\n        exact: false \n      }),\n      \n      // User statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['user-stats', userId],\n        exact: false \n      })\n    ];\n\n    await Promise.all(userInvalidations);\n  }\n\n  /**\n   * Invalidate statistics and aggregation queries\n   */\n  private async invalidateStatsQueries(): Promise<void> {\n    const statsInvalidations = [\n      // General try-on statistics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-stats'],\n        exact: false \n      }),\n      \n      // Usage analytics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['usage-analytics'],\n        exact: false \n      }),\n      \n      // Performance metrics\n      this.queryClient.invalidateQueries({ \n        queryKey: ['performance-metrics'],\n        exact: false \n      }),\n      \n      // Popular items/combinations\n      this.queryClient.invalidateQueries({ \n        queryKey: ['popular-items'],\n        exact: false \n      })\n    ];\n\n    await Promise.all(statsInvalidations);\n  }\n\n  /**\n   * Invalidate tag-based queries\n   */\n  private async invalidateTagQueries(tags: string[]): Promise<void> {\n    const tagInvalidations = tags.map(tag => \n      this.queryClient.invalidateQueries({ \n        queryKey: ['tryon-by-tag', tag],\n        exact: false \n      })\n    );\n\n    // Also invalidate general tag queries\n    tagInvalidations.push(\n      this.queryClient.invalidateQueries({ \n        queryKey: ['available-tags'],\n        exact: false \n      })\n    );\n\n    await Promise.all(tagInvalidations);\n  }\n\n  /**\n   * Invalidate custom query keys\n   */\n  private async invalidateCustomQueries(customQueryKeys: string[][]): Promise<void> {\n    const customInvalidations = customQueryKeys.map(queryKey => \n      this.queryClient.invalidateQueries({ \n        queryKey,\n        exact: false \n      })\n    );\n\n    await Promise.all(customInvalidations);\n  }\n\n  /**\n   * Preload related queries that are likely to be accessed next\n   */\n  private async preloadRelatedQueries(\n    userContext: { userId?: string; tags?: string[] } = {}\n  ): Promise<void> {\n    const preloadPromises: Promise<unknown>[] = [];\n\n    // Preload history entries (most likely to be viewed)\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'entries'],\n        staleTime: 30000, // Fresh for 30 seconds\n        gcTime: 5 * 60 * 1000 // Keep in cache for 5 minutes\n      })\n    );\n\n    // Preload history stats\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'stats'],\n        staleTime: 60000, // Fresh for 1 minute\n        gcTime: 10 * 60 * 1000 // Keep in cache for 10 minutes\n      })\n    );\n\n    // Preload user data if userId available\n    if (userContext.userId) {\n      preloadPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-data', userContext.userId],\n          staleTime: 60000,\n          gcTime: 10 * 60 * 1000\n        })\n      );\n    }\n\n    // Preload popular items\n    preloadPromises.push(\n      this.queryClient.prefetchQuery({\n        queryKey: ['popular-items'],\n        staleTime: 5 * 60 * 1000, // Fresh for 5 minutes\n        gcTime: 15 * 60 * 1000 // Keep in cache for 15 minutes\n      })\n    );\n\n    await Promise.allSettled(preloadPromises);\n  }\n\n  /**\n   * Smart cache warming based on usage patterns\n   */\n  async warmCache(\n    options: {\n      userId?: string;\n      recentTags?: string[];\n      popularItems?: unknown[];\n    } = {}\n  ): Promise<void> {\n    const warmupPromises: Promise<unknown>[] = [];\n\n    // Warm up frequently accessed data structures\n    if (options.popularItems?.length) {\n      options.popularItems.forEach((item, index) => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['warmup-cache', 'popular', index],\n            queryFn: () => Promise.resolve(item),\n            staleTime: 10 * 60 * 1000, // Fresh for 10 minutes\n            gcTime: 30 * 60 * 1000 // Keep in cache for 30 minutes\n          })\n        );\n      });\n    }\n\n    // Warm up user-specific frequently accessed queries\n    if (options.userId) {\n      warmupPromises.push(\n        this.queryClient.prefetchQuery({\n          queryKey: ['user-favorites', options.userId],\n          staleTime: 5 * 60 * 1000,\n          gcTime: 20 * 60 * 1000\n        })\n      );\n    }\n\n    // Warm up recent tag queries\n    if (options.recentTags?.length) {\n      options.recentTags.forEach(tag => {\n        warmupPromises.push(\n          this.queryClient.prefetchQuery({\n            queryKey: ['recent-by-tag', tag],\n            staleTime: 2 * 60 * 1000, // Fresh for 2 minutes\n            gcTime: 10 * 60 * 1000\n          })\n        );\n      });\n    }\n\n    await Promise.allSettled(warmupPromises);\n  }\n\n  /**\n   * Cleanup stale cache entries\n   */\n  async cleanupStaleCache(): Promise<void> {\n    // Remove queries that haven't been accessed in a while\n    this.queryClient.removeQueries({\n      predicate: (query) => {\n        const lastAccessed = query.state.dataUpdatedAt;\n        const oneHourAgo = Date.now() - 60 * 60 * 1000;\n        return lastAccessed < oneHourAgo;\n      }\n    });\n\n    // Cleanup specific temporary cache entries\n    this.queryClient.removeQueries({\n      queryKey: ['warmup-cache'],\n      exact: false\n    });\n\n    this.queryClient.removeQueries({\n      queryKey: ['temp'],\n      exact: false\n    });\n  }\n}\n\n/**\n * Default cache invalidation manager instance\n */\nexport let defaultCacheManager: CacheInvalidationManager | null = null;\n\n/**\n * Initialize the default cache invalidation manager\n */\nexport function initializeCacheInvalidation(queryClient: QueryClient): CacheInvalidationManager {\n  defaultCacheManager = new CacheInvalidationManager(queryClient);\n  return defaultCacheManager;\n}\n\n/**\n * Get the default cache invalidation manager\n */\nexport function getCacheInvalidationManager(): CacheInvalidationManager {\n  if (!defaultCacheManager) {\n    throw new Error('CacheInvalidationManager not initialized. Call initializeCacheInvalidation first.');\n  }\n  return defaultCacheManager;\n}\n\n/**\n * Utility function for post-mutation cache invalidation\n */\nexport async function invalidateCacheAfterMutation(\n  queryClient: QueryClient,\n  data: TryonMutationResponse,\n  variables: TryonMutationVariables,\n  context: TryonMutationContext,\n  config?: CacheInvalidationConfig\n): Promise<void> {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n  await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n}\n\n/**\n * Hook for creating cache-aware mutation callbacks\n */\nexport function createCacheAwareMutationCallbacks(\n  queryClient: QueryClient,\n  config: CacheInvalidationConfig = {}\n) {\n  const cacheManager = defaultCacheManager || new CacheInvalidationManager(queryClient);\n\n  return {\n    onSuccess: async (\n      data: TryonMutationResponse,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext\n    ) => {\n      await cacheManager.invalidateAfterSuccess(data, variables, context, config);\n    },\n\n    onError: async (\n      error: unknown,\n      variables: TryonMutationVariables,\n      context: TryonMutationContext | undefined\n    ) => {\n      if (context) {\n        await cacheManager.invalidateAfterError(error, variables, context, {\n          invalidateHistory: false, // Don't invalidate on error by default\n          invalidateUserData: false,\n          ...config\n        });\n      }\n    }\n  };\n}"],"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","ignoreList":[]}