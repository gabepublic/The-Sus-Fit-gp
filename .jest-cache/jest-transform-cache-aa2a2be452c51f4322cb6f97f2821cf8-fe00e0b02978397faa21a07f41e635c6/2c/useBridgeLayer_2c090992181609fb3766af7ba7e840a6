55c8021fe6ca566ba977687e41aceabe
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useBridgeLayer: function() {
        return useBridgeLayer;
    },
    useSimpleTryon: function() {
        return useSimpleTryon;
    },
    useTryonWithProgress: function() {
        return useTryonWithProgress;
    }
});
const _react = require("react");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _useImageUpload = require("./useImageUpload");
const _index = require("./index");
/**
 * Default bridge layer configuration
 */ const DEFAULT_BRIDGE_CONFIG = {
    workflow: {
        timeoutMs: 60000,
        compressionLimitKB: 2048,
        autoRetry: false,
        maxRetries: 3,
        debug: process.env.NODE_ENV === 'development'
    },
    upload: {
        maxSizeBytes: 10 * 1024 * 1024,
        allowedTypes: [
            'image/jpeg',
            'image/png',
            'image/webp'
        ],
        generateThumbnails: true,
        thumbnailSizes: [
            150,
            300
        ],
        enableDragDrop: true,
        autoProcess: false,
        validation: {
            minWidth: 256,
            minHeight: 256,
            maxWidth: 4096,
            maxHeight: 4096
        }
    },
    ui: {
        autoHideMessages: true,
        messageTimeoutMs: 5000,
        enableShare: true,
        enableDownload: true,
        showDetailedProgress: true
    },
    callbacks: {}
};
function useBridgeLayer(config = {}) {
    const finalConfig = {
        ...DEFAULT_BRIDGE_CONFIG,
        ...config
    };
    const { showToast } = (0, _index.useToast)();
    // Initialize underlying hooks
    const workflow = (0, _useTryonWorkflow.useTryonWorkflow)(finalConfig.workflow, showToast);
    const userUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleUserFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    const apparelUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleApparelFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    // Simplified state mapping
    const simplifiedState = {
        // Core UI state
        isLoading: workflow.isCapturing || userUpload.uploadState === 'processing' || apparelUpload.uploadState === 'processing',
        isReady: workflow.canGenerate(),
        showResult: workflow.showPolaroid,
        // User feedback
        resultImage: workflow.generatedImage,
        errorMessage: workflow.error?.message || null,
        successMessage: workflow.generatedImage ? 'Try-on generated successfully!' : null,
        // Upload state
        hasUserImage: !!workflow.userImageFile || !!userUpload.file,
        hasApparelImage: !!workflow.apparelImageFile || !!apparelUpload.file,
        userImagePreview: workflow.leftCardImage || userUpload.file?.preview || null,
        apparelImagePreview: workflow.rightCardImage || apparelUpload.file?.preview || null,
        // Progress
        progress: workflow.progress,
        progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),
        // Interaction state
        canGenerate: workflow.canGenerate(),
        canRetry: workflow.hasError && workflow.error?.retryable === true,
        canReset: workflow.workflowState !== 'idle' || !!userUpload.file || !!apparelUpload.file
    };
    // Simplified actions
    const simplifiedActions = {
        // File upload actions
        uploadUserImage: (0, _react.useCallback)(async (file)=>{
            try {
                await userUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('User image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload user image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            userUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        uploadApparelImage: (0, _react.useCallback)(async (file)=>{
            try {
                await apparelUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('Apparel image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload apparel image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            apparelUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        removeUserImage: (0, _react.useCallback)(()=>{
            userUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            userUpload,
            workflow
        ]),
        removeApparelImage: (0, _react.useCallback)(()=>{
            apparelUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            apparelUpload,
            workflow
        ]),
        // Generation actions
        generate: (0, _react.useCallback)(async ()=>{
            try {
                finalConfig.callbacks.onGenerationStart?.();
                await workflow.startGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to generate try-on';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        retry: (0, _react.useCallback)(async ()=>{
            try {
                await workflow.retryGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to retry generation';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        reset: (0, _react.useCallback)(()=>{
            workflow.resetWorkflow();
            userUpload.clearFiles();
            apparelUpload.clearFiles();
        }, [
            workflow,
            userUpload,
            apparelUpload
        ]),
        // UI actions
        hideResult: (0, _react.useCallback)(()=>{
            workflow.closePolaroid();
        }, [
            workflow
        ]),
        clearError: (0, _react.useCallback)(()=>{
            workflow.clearError();
        }, [
            workflow
        ]),
        downloadResult: (0, _react.useCallback)(()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableDownload) return;
            try {
                const link = document.createElement('a');
                link.href = workflow.generatedImage;
                link.download = `tryon-result-${Date.now()}.png`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showToast('Image downloaded successfully', 'success');
            } catch (error) {
                showToast('Failed to download image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableDownload,
            showToast
        ]),
        shareResult: (0, _react.useCallback)(async ()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableShare) return;
            try {
                if (navigator.share) {
                    // Use native share API if available
                    const response = await fetch(workflow.generatedImage);
                    const blob = await response.blob();
                    const file = new File([
                        blob
                    ], 'tryon-result.png', {
                        type: 'image/png'
                    });
                    await navigator.share({
                        title: 'My Try-On Result',
                        text: 'Check out my virtual try-on!',
                        files: [
                            file
                        ]
                    });
                } else {
                    // Fallback to copying URL
                    await navigator.clipboard.writeText(workflow.generatedImage);
                    showToast('Image URL copied to clipboard', 'success');
                }
            } catch (error) {
                showToast('Failed to share image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableShare,
            showToast
        ])
    };
    return {
        state: simplifiedState,
        actions: simplifiedActions,
        advanced: {
            workflow,
            uploads: {
                user: userUpload,
                apparel: apparelUpload
            }
        }
    };
}
/**
 * Helper function to generate user-friendly progress messages
 */ function getProgressMessage(workflowState, progress) {
    switch(workflowState){
        case 'idle':
            return 'Ready to generate';
        case 'uploading':
            return 'Uploading images...';
        case 'processing':
            return 'Processing images...';
        case 'generating':
            if (progress < 30) return 'Preparing images...';
            if (progress < 80) return 'Generating try-on...';
            return 'Finalizing result...';
        case 'complete':
            return 'Generation complete!';
        case 'error':
            return 'Generation failed';
        default:
            return `Processing... ${progress}%`;
    }
}
function useSimpleTryon(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        // Minimal state for simple components
        isLoading: state.isLoading,
        result: state.resultImage,
        error: state.errorMessage,
        canGenerate: state.canGenerate,
        // Essential actions
        uploadUserImage: actions.uploadUserImage,
        uploadApparelImage: actions.uploadApparelImage,
        generate: actions.generate,
        reset: actions.reset
    };
}
function useTryonWithProgress(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        ...state,
        ...actions,
        // Additional progress information
        uploadProgress: {
            user: state.hasUserImage ? 100 : 0,
            apparel: state.hasApparelImage ? 100 : 0
        },
        overallProgress: calculateOverallProgress(state)
    };
}
/**
 * Helper function to calculate overall progress
 */ function calculateOverallProgress(state) {
    let progress = 0;
    // Upload progress (40% of total)
    if (state.hasUserImage) progress += 20;
    if (state.hasApparelImage) progress += 20;
    // Generation progress (60% of total)
    if (state.isLoading || state.progress > 0) {
        progress += state.progress * 0.6;
    }
    if (state.resultImage) progress = 100;
    return Math.round(progress);
}

//# sourceMappingURL=data:application/json;base64,