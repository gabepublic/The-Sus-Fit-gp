{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts"],"sourcesContent":["'use client';\n\n// Image Export React Hooks\n// React hooks for managing image export operations with progress tracking and optimization\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  ImageExporter,\n  BatchExportManager,\n  createImageExporter,\n  createBatchExportManager,\n  ExportFormat,\n  QualityPreset,\n  type ExportConfig,\n  type ExportResult,\n  DEFAULT_EXPORT_CONFIG,\n  estimateFileSize\n} from '../utils/imageExport';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  type ClassifiedError\n} from '../utils/errorHandling';\n\n/**\n * Export hook options\n */\nexport interface UseImageExportOptions {\n  /** Default export configuration */\n  defaultConfig?: Partial<ExportConfig>;\n  /** Enable auto-download after export */\n  autoDownload?: boolean;\n  /** Callback when export completes */\n  onExportComplete?: (result: ExportResult) => void;\n  /** Callback when export fails */\n  onExportError?: (error: ClassifiedError) => void;\n  /** Callback for export progress */\n  onProgress?: (progress: number) => void;\n}\n\n/**\n * Export state\n */\nexport interface ExportState {\n  isExporting: boolean;\n  progress: number;\n  currentExport: string | null;\n  completedExports: ExportResult[];\n  failedExports: Array<{ config: Partial<ExportConfig>; error: ClassifiedError }>;\n  totalExports: number;\n}\n\n/**\n * Main image export hook\n */\nexport function useImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  options: UseImageExportOptions = {}\n): {\n  canvas: HTMLCanvasElement;\n  exporter: ImageExporter;\n  state: ExportState;\n  exportImage: (config?: Partial<ExportConfig>) => Promise<ExportResult>;\n  exportWithPreset: (preset: QualityPreset) => Promise<ExportResult>;\n  exportMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  downloadLastExport: () => void;\n  clearHistory: () => void;\n  getOptimalConfig: (useCase: 'web' | 'social' | 'print' | 'archive') => ExportConfig;\n  estimateSize: (config?: Partial<ExportConfig>) => number;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter | undefined>(undefined);\n  const [state, setState] = useState<ExportState>({\n    isExporting: false,\n    progress: 0,\n    currentExport: null,\n    completedExports: [],\n    failedExports: [],\n    totalExports: 0\n  });\n\n  // Initialize exporter\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n  }\n\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n    options.onProgress?.(progress);\n  }, [options]);\n\n  const exportImage = useCallback(async (config: Partial<ExportConfig> = {}): Promise<ExportResult> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    const finalConfig = { ...options.defaultConfig, ...config };\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      currentExport: exportId,\n      totalExports: prev.totalExports + 1\n    }));\n\n    try {\n      updateProgress(25);\n      \n      const result = await exporterRef.current.exportImage(finalConfig);\n      \n      updateProgress(75);\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100,\n        currentExport: null,\n        completedExports: [...prev.completedExports, result]\n      }));\n\n      updateProgress(100);\n\n      // Auto-download if enabled\n      if (options.autoDownload) {\n        exporterRef.current!.downloadImage(result);\n      }\n\n      options.onExportComplete?.(result);\n      return result;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        currentExport: null,\n        failedExports: [...prev.failedExports, { config: finalConfig, error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'image_export',\n        config: finalConfig,\n        exportId\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const exportWithPreset = useCallback(async (preset: QualityPreset): Promise<ExportResult> => {\n    return exportImage({ preset });\n  }, [exportImage]);\n\n  const exportMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      totalExports: prev.totalExports + configs.length\n    }));\n\n    const results: ExportResult[] = [];\n    const totalConfigs = configs.length;\n\n    try {\n      for (let i = 0; i < configs.length; i++) {\n        const config = { ...options.defaultConfig, ...configs[i] };\n        updateProgress((i / totalConfigs) * 100);\n        \n        const result = await exporterRef.current.exportImage(config);\n        results.push(result);\n        \n        setState(prev => ({\n          ...prev,\n          completedExports: [...prev.completedExports, result]\n        }));\n      }\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100\n      }));\n\n      updateProgress(100);\n      return results;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        failedExports: [...prev.failedExports, { config: configs[results.length], error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'batch_export',\n        completedCount: results.length,\n        totalCount: totalConfigs\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const downloadLastExport = useCallback(() => {\n    if (!exporterRef.current || state.completedExports.length === 0) return;\n    \n    const lastExport = state.completedExports[state.completedExports.length - 1];\n    exporterRef.current.downloadImage(lastExport);\n  }, [state.completedExports]);\n\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      completedExports: [],\n      failedExports: [],\n      totalExports: 0\n    }));\n  }, []);\n\n  const getOptimalConfig = useCallback((useCase: 'web' | 'social' | 'print' | 'archive'): ExportConfig => {\n    const baseConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig };\n\n    switch (useCase) {\n      case 'web':\n        return {\n          ...baseConfig,\n          format: ExportFormat.WEBP,\n          preset: QualityPreset.WEB,\n          quality: 0.8\n        };\n      case 'social':\n        return {\n          ...baseConfig,\n          format: ExportFormat.JPEG,\n          preset: QualityPreset.SOCIAL,\n          quality: 0.85,\n          width: 1080,\n          height: 1080\n        };\n      case 'print':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.PRINT,\n          quality: 1.0,\n          dpi: 300\n        };\n      case 'archive':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.MAXIMUM,\n          quality: 1.0\n        };\n      default:\n        return baseConfig;\n    }\n  }, [options.defaultConfig]);\n\n  const estimateSize = useCallback((config: Partial<ExportConfig> = {}): number => {\n    const finalConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig, ...config };\n    \n    return estimateFileSize(\n      finalConfig.width || canvasWidth,\n      finalConfig.height || canvasHeight,\n      finalConfig.format,\n      finalConfig.quality\n    );\n  }, [canvasWidth, canvasHeight, options.defaultConfig]);\n\n  return {\n    canvas,\n    exporter: exporterRef.current!,\n    state,\n    exportImage,\n    exportWithPreset,\n    exportMultiple,\n    downloadLastExport,\n    clearHistory,\n    getOptimalConfig,\n    estimateSize\n  };\n}\n\n/**\n * Batch export hook with queue management\n */\nexport function useBatchImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  concurrency: number = 2\n): {\n  canvas: HTMLCanvasElement;\n  batchManager: BatchExportManager;\n  queueExport: (config: Partial<ExportConfig>) => Promise<ExportResult>;\n  queueMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  clearQueue: () => void;\n  queueStatus: { pending: number; processing: boolean };\n  exportPresets: (presets: QualityPreset[]) => Promise<ExportResult[]>;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter | undefined>(undefined);\n  const batchManagerRef = useRef<BatchExportManager | undefined>(undefined);\n  const [queueStatus, setQueueStatus] = useState({ pending: 0, processing: false });\n\n  // Initialize exporter and batch manager\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n    batchManagerRef.current = createBatchExportManager(exporterRef.current, concurrency);\n  }\n\n  const updateQueueStatus = useCallback(() => {\n    if (batchManagerRef.current) {\n      setQueueStatus(batchManagerRef.current.getQueueStatus());\n    }\n  }, []);\n\n  const queueExport = useCallback(async (config: Partial<ExportConfig>): Promise<ExportResult> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    updateQueueStatus();\n    const result = await batchManagerRef.current.queueExport(config);\n    updateQueueStatus();\n    \n    return result;\n  }, [updateQueueStatus]);\n\n  const queueMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    const promises = configs.map(config => queueExport(config));\n    return Promise.all(promises);\n  }, [queueExport]);\n\n  const clearQueue = useCallback(() => {\n    if (batchManagerRef.current) {\n      batchManagerRef.current.clearQueue();\n      updateQueueStatus();\n    }\n  }, [updateQueueStatus]);\n\n  const exportPresets = useCallback(async (presets: QualityPreset[]): Promise<ExportResult[]> => {\n    const configs = presets.map(preset => ({ preset }));\n    return queueMultiple(configs);\n  }, [queueMultiple]);\n\n  return {\n    canvas,\n    batchManager: batchManagerRef.current!,\n    queueExport,\n    queueMultiple,\n    clearQueue,\n    queueStatus,\n    exportPresets\n  };\n}\n\n/**\n * Simple export hook with common presets\n */\nexport function useSimpleImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: HTMLCanvasElement;\n  exportForWeb: () => Promise<ExportResult>;\n  exportForSocial: () => Promise<ExportResult>;\n  exportForPrint: () => Promise<ExportResult>;\n  exportPNG: () => Promise<ExportResult>;\n  exportJPEG: (quality?: number) => Promise<ExportResult>;\n  isExporting: boolean;\n  lastExport: ExportResult | null;\n  downloadLast: () => void;\n} {\n  const {\n    canvas,\n    state,\n    exportImage,\n    downloadLastExport,\n    getOptimalConfig\n  } = useImageExport(canvasWidth, canvasHeight, canvasId, { autoDownload: true });\n\n  const exportForWeb = useCallback(() => {\n    return exportImage(getOptimalConfig('web'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForSocial = useCallback(() => {\n    return exportImage(getOptimalConfig('social'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForPrint = useCallback(() => {\n    return exportImage(getOptimalConfig('print'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportPNG = useCallback(() => {\n    return exportImage({ format: ExportFormat.PNG, quality: 1.0 });\n  }, [exportImage]);\n\n  const exportJPEG = useCallback((quality: number = 0.9) => {\n    return exportImage({ format: ExportFormat.JPEG, quality });\n  }, [exportImage]);\n\n  return {\n    canvas,\n    exportForWeb,\n    exportForSocial,\n    exportForPrint,\n    exportPNG,\n    exportJPEG,\n    isExporting: state.isExporting,\n    lastExport: state.completedExports[state.completedExports.length - 1] || null,\n    downloadLast: downloadLastExport\n  };\n}"],"names":["useBatchImageExport","useImageExport","useSimpleImageExport","canvasWidth","canvasHeight","canvasId","options","canvas","useManagedCanvas","exporterRef","useRef","undefined","state","setState","useState","isExporting","progress","currentExport","completedExports","failedExports","totalExports","current","createImageExporter","updateProgress","useCallback","prev","onProgress","exportImage","config","Error","finalConfig","defaultConfig","exportId","Date","now","Math","random","toString","substr","result","autoDownload","downloadImage","onExportComplete","error","classifiedError","classifyTryonError","logAndClassifyError","operation","onExportError","exportWithPreset","preset","exportMultiple","configs","length","results","totalConfigs","i","push","completedCount","totalCount","downloadLastExport","lastExport","clearHistory","getOptimalConfig","useCase","baseConfig","DEFAULT_EXPORT_CONFIG","format","ExportFormat","WEBP","QualityPreset","WEB","quality","JPEG","SOCIAL","width","height","PNG","PRINT","dpi","MAXIMUM","estimateSize","estimateFileSize","exporter","concurrency","batchManagerRef","queueStatus","setQueueStatus","pending","processing","createBatchExportManager","updateQueueStatus","getQueueStatus","queueExport","queueMultiple","promises","map","Promise","all","clearQueue","exportPresets","presets","batchManager","exportForWeb","exportForSocial","exportForPrint","exportPNG","exportJPEG","downloadLast"],"mappings":"AAAA;;;;;;;;;;;;IA0SgBA,mBAAmB;eAAnBA;;IAlPAC,cAAc;eAAdA;;IA4TAC,oBAAoB;eAApBA;;;uBA/W8B;gCACb;6BAY1B;+BAKA;AAiCA,SAASD,eACdE,WAAmB,EACnBC,YAAoB,EACpBC,QAAiB,EACjBC,UAAiC,CAAC,CAAC;IAanC,MAAMC,SAASC,IAAAA,gCAAgB,EAACL,aAAaC,cAAcC;IAC3D,MAAMI,cAAcC,IAAAA,aAAM,EAA4BC;IACtD,MAAM,CAACC,OAAOC,SAAS,GAAGC,IAAAA,eAAQ,EAAc;QAC9CC,aAAa;QACbC,UAAU;QACVC,eAAe;QACfC,kBAAkB,EAAE;QACpBC,eAAe,EAAE;QACjBC,cAAc;IAChB;IAEA,sBAAsB;IACtB,IAAI,CAACX,YAAYY,OAAO,EAAE;QACxBZ,YAAYY,OAAO,GAAGC,IAAAA,gCAAmB,EAACf;IAC5C;IAEA,MAAMgB,iBAAiBC,IAAAA,kBAAW,EAAC,CAACR;QAClCH,SAASY,CAAAA,OAAS,CAAA;gBAAE,GAAGA,IAAI;gBAAET;YAAS,CAAA;QACtCV,QAAQoB,UAAU,GAAGV;IACvB,GAAG;QAACV;KAAQ;IAEZ,MAAMqB,cAAcH,IAAAA,kBAAW,EAAC,OAAOI,SAAgC,CAAC,CAAC;QACvE,IAAI,CAACnB,YAAYY,OAAO,EAAE,MAAM,IAAIQ,MAAM;QAE1C,MAAMC,cAAc;YAAE,GAAGxB,QAAQyB,aAAa;YAAE,GAAGH,MAAM;QAAC;QAC1D,MAAMI,WAAW,CAAC,OAAO,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;QAElFzB,SAASY,CAAAA,OAAS,CAAA;gBAChB,GAAGA,IAAI;gBACPV,aAAa;gBACbC,UAAU;gBACVC,eAAee;gBACfZ,cAAcK,KAAKL,YAAY,GAAG;YACpC,CAAA;QAEA,IAAI;YACFG,eAAe;YAEf,MAAMgB,SAAS,MAAM9B,YAAYY,OAAO,CAACM,WAAW,CAACG;YAErDP,eAAe;YAEfV,SAASY,CAAAA,OAAS,CAAA;oBAChB,GAAGA,IAAI;oBACPV,aAAa;oBACbC,UAAU;oBACVC,eAAe;oBACfC,kBAAkB;2BAAIO,KAAKP,gBAAgB;wBAAEqB;qBAAO;gBACtD,CAAA;YAEAhB,eAAe;YAEf,2BAA2B;YAC3B,IAAIjB,QAAQkC,YAAY,EAAE;gBACxB/B,YAAYY,OAAO,CAAEoB,aAAa,CAACF;YACrC;YAEAjC,QAAQoC,gBAAgB,GAAGH;YAC3B,OAAOA;QACT,EAAE,OAAOI,OAAO;YACd,MAAMC,kBAAkBC,IAAAA,iCAAkB,EAACF;YAE3C9B,SAASY,CAAAA,OAAS,CAAA;oBAChB,GAAGA,IAAI;oBACPV,aAAa;oBACbC,UAAU;oBACVC,eAAe;oBACfE,eAAe;2BAAIM,KAAKN,aAAa;wBAAE;4BAAES,QAAQE;4BAAaa,OAAOC;wBAAgB;qBAAE;gBACzF,CAAA;YAEAE,IAAAA,kCAAmB,EAACH,OAAO;gBACzBI,WAAW;gBACXnB,QAAQE;gBACRE;YACF;YAEA1B,QAAQ0C,aAAa,GAAGJ;YACxB,MAAMA;QACR;IACF,GAAG;QAACtC;QAASiB;KAAe;IAE5B,MAAM0B,mBAAmBzB,IAAAA,kBAAW,EAAC,OAAO0B;QAC1C,OAAOvB,YAAY;YAAEuB;QAAO;IAC9B,GAAG;QAACvB;KAAY;IAEhB,MAAMwB,iBAAiB3B,IAAAA,kBAAW,EAAC,OAAO4B;QACxC,IAAI,CAAC3C,YAAYY,OAAO,EAAE,MAAM,IAAIQ,MAAM;QAE1ChB,SAASY,CAAAA,OAAS,CAAA;gBAChB,GAAGA,IAAI;gBACPV,aAAa;gBACbC,UAAU;gBACVI,cAAcK,KAAKL,YAAY,GAAGgC,QAAQC,MAAM;YAClD,CAAA;QAEA,MAAMC,UAA0B,EAAE;QAClC,MAAMC,eAAeH,QAAQC,MAAM;QAEnC,IAAI;YACF,IAAK,IAAIG,IAAI,GAAGA,IAAIJ,QAAQC,MAAM,EAAEG,IAAK;gBACvC,MAAM5B,SAAS;oBAAE,GAAGtB,QAAQyB,aAAa;oBAAE,GAAGqB,OAAO,CAACI,EAAE;gBAAC;gBACzDjC,eAAe,AAACiC,IAAID,eAAgB;gBAEpC,MAAMhB,SAAS,MAAM9B,YAAYY,OAAO,CAACM,WAAW,CAACC;gBACrD0B,QAAQG,IAAI,CAAClB;gBAEb1B,SAASY,CAAAA,OAAS,CAAA;wBAChB,GAAGA,IAAI;wBACPP,kBAAkB;+BAAIO,KAAKP,gBAAgB;4BAAEqB;yBAAO;oBACtD,CAAA;YACF;YAEA1B,SAASY,CAAAA,OAAS,CAAA;oBAChB,GAAGA,IAAI;oBACPV,aAAa;oBACbC,UAAU;gBACZ,CAAA;YAEAO,eAAe;YACf,OAAO+B;QACT,EAAE,OAAOX,OAAO;YACd,MAAMC,kBAAkBC,IAAAA,iCAAkB,EAACF;YAE3C9B,SAASY,CAAAA,OAAS,CAAA;oBAChB,GAAGA,IAAI;oBACPV,aAAa;oBACbC,UAAU;oBACVG,eAAe;2BAAIM,KAAKN,aAAa;wBAAE;4BAAES,QAAQwB,OAAO,CAACE,QAAQD,MAAM,CAAC;4BAAEV,OAAOC;wBAAgB;qBAAE;gBACrG,CAAA;YAEAE,IAAAA,kCAAmB,EAACH,OAAO;gBACzBI,WAAW;gBACXW,gBAAgBJ,QAAQD,MAAM;gBAC9BM,YAAYJ;YACd;YAEAjD,QAAQ0C,aAAa,GAAGJ;YACxB,MAAMA;QACR;IACF,GAAG;QAACtC;QAASiB;KAAe;IAE5B,MAAMqC,qBAAqBpC,IAAAA,kBAAW,EAAC;QACrC,IAAI,CAACf,YAAYY,OAAO,IAAIT,MAAMM,gBAAgB,CAACmC,MAAM,KAAK,GAAG;QAEjE,MAAMQ,aAAajD,MAAMM,gBAAgB,CAACN,MAAMM,gBAAgB,CAACmC,MAAM,GAAG,EAAE;QAC5E5C,YAAYY,OAAO,CAACoB,aAAa,CAACoB;IACpC,GAAG;QAACjD,MAAMM,gBAAgB;KAAC;IAE3B,MAAM4C,eAAetC,IAAAA,kBAAW,EAAC;QAC/BX,SAASY,CAAAA,OAAS,CAAA;gBAChB,GAAGA,IAAI;gBACPP,kBAAkB,EAAE;gBACpBC,eAAe,EAAE;gBACjBC,cAAc;YAChB,CAAA;IACF,GAAG,EAAE;IAEL,MAAM2C,mBAAmBvC,IAAAA,kBAAW,EAAC,CAACwC;QACpC,MAAMC,aAAa;YAAE,GAAGC,kCAAqB;YAAE,GAAG5D,QAAQyB,aAAa;QAAC;QAExE,OAAQiC;YACN,KAAK;gBACH,OAAO;oBACL,GAAGC,UAAU;oBACbE,QAAQC,yBAAY,CAACC,IAAI;oBACzBnB,QAAQoB,0BAAa,CAACC,GAAG;oBACzBC,SAAS;gBACX;YACF,KAAK;gBACH,OAAO;oBACL,GAAGP,UAAU;oBACbE,QAAQC,yBAAY,CAACK,IAAI;oBACzBvB,QAAQoB,0BAAa,CAACI,MAAM;oBAC5BF,SAAS;oBACTG,OAAO;oBACPC,QAAQ;gBACV;YACF,KAAK;gBACH,OAAO;oBACL,GAAGX,UAAU;oBACbE,QAAQC,yBAAY,CAACS,GAAG;oBACxB3B,QAAQoB,0BAAa,CAACQ,KAAK;oBAC3BN,SAAS;oBACTO,KAAK;gBACP;YACF,KAAK;gBACH,OAAO;oBACL,GAAGd,UAAU;oBACbE,QAAQC,yBAAY,CAACS,GAAG;oBACxB3B,QAAQoB,0BAAa,CAACU,OAAO;oBAC7BR,SAAS;gBACX;YACF;gBACE,OAAOP;QACX;IACF,GAAG;QAAC3D,QAAQyB,aAAa;KAAC;IAE1B,MAAMkD,eAAezD,IAAAA,kBAAW,EAAC,CAACI,SAAgC,CAAC,CAAC;QAClE,MAAME,cAAc;YAAE,GAAGoC,kCAAqB;YAAE,GAAG5D,QAAQyB,aAAa;YAAE,GAAGH,MAAM;QAAC;QAEpF,OAAOsD,IAAAA,6BAAgB,EACrBpD,YAAY6C,KAAK,IAAIxE,aACrB2B,YAAY8C,MAAM,IAAIxE,cACtB0B,YAAYqC,MAAM,EAClBrC,YAAY0C,OAAO;IAEvB,GAAG;QAACrE;QAAaC;QAAcE,QAAQyB,aAAa;KAAC;IAErD,OAAO;QACLxB;QACA4E,UAAU1E,YAAYY,OAAO;QAC7BT;QACAe;QACAsB;QACAE;QACAS;QACAE;QACAC;QACAkB;IACF;AACF;AAKO,SAASjF,oBACdG,WAAmB,EACnBC,YAAoB,EACpBC,QAAiB,EACjB+E,cAAsB,CAAC;IAUvB,MAAM7E,SAASC,IAAAA,gCAAgB,EAACL,aAAaC,cAAcC;IAC3D,MAAMI,cAAcC,IAAAA,aAAM,EAA4BC;IACtD,MAAM0E,kBAAkB3E,IAAAA,aAAM,EAAiCC;IAC/D,MAAM,CAAC2E,aAAaC,eAAe,GAAGzE,IAAAA,eAAQ,EAAC;QAAE0E,SAAS;QAAGC,YAAY;IAAM;IAE/E,wCAAwC;IACxC,IAAI,CAAChF,YAAYY,OAAO,EAAE;QACxBZ,YAAYY,OAAO,GAAGC,IAAAA,gCAAmB,EAACf;QAC1C8E,gBAAgBhE,OAAO,GAAGqE,IAAAA,qCAAwB,EAACjF,YAAYY,OAAO,EAAE+D;IAC1E;IAEA,MAAMO,oBAAoBnE,IAAAA,kBAAW,EAAC;QACpC,IAAI6D,gBAAgBhE,OAAO,EAAE;YAC3BkE,eAAeF,gBAAgBhE,OAAO,CAACuE,cAAc;QACvD;IACF,GAAG,EAAE;IAEL,MAAMC,cAAcrE,IAAAA,kBAAW,EAAC,OAAOI;QACrC,IAAI,CAACyD,gBAAgBhE,OAAO,EAAE,MAAM,IAAIQ,MAAM;QAE9C8D;QACA,MAAMpD,SAAS,MAAM8C,gBAAgBhE,OAAO,CAACwE,WAAW,CAACjE;QACzD+D;QAEA,OAAOpD;IACT,GAAG;QAACoD;KAAkB;IAEtB,MAAMG,gBAAgBtE,IAAAA,kBAAW,EAAC,OAAO4B;QACvC,IAAI,CAACiC,gBAAgBhE,OAAO,EAAE,MAAM,IAAIQ,MAAM;QAE9C,MAAMkE,WAAW3C,QAAQ4C,GAAG,CAACpE,CAAAA,SAAUiE,YAAYjE;QACnD,OAAOqE,QAAQC,GAAG,CAACH;IACrB,GAAG;QAACF;KAAY;IAEhB,MAAMM,aAAa3E,IAAAA,kBAAW,EAAC;QAC7B,IAAI6D,gBAAgBhE,OAAO,EAAE;YAC3BgE,gBAAgBhE,OAAO,CAAC8E,UAAU;YAClCR;QACF;IACF,GAAG;QAACA;KAAkB;IAEtB,MAAMS,gBAAgB5E,IAAAA,kBAAW,EAAC,OAAO6E;QACvC,MAAMjD,UAAUiD,QAAQL,GAAG,CAAC9C,CAAAA,SAAW,CAAA;gBAAEA;YAAO,CAAA;QAChD,OAAO4C,cAAc1C;IACvB,GAAG;QAAC0C;KAAc;IAElB,OAAO;QACLvF;QACA+F,cAAcjB,gBAAgBhE,OAAO;QACrCwE;QACAC;QACAK;QACAb;QACAc;IACF;AACF;AAKO,SAASlG,qBACdC,WAAmB,EACnBC,YAAoB,EACpBC,QAAiB;IAYjB,MAAM,EACJE,MAAM,EACNK,KAAK,EACLe,WAAW,EACXiC,kBAAkB,EAClBG,gBAAgB,EACjB,GAAG9D,eAAeE,aAAaC,cAAcC,UAAU;QAAEmC,cAAc;IAAK;IAE7E,MAAM+D,eAAe/E,IAAAA,kBAAW,EAAC;QAC/B,OAAOG,YAAYoC,iBAAiB;IACtC,GAAG;QAACpC;QAAaoC;KAAiB;IAElC,MAAMyC,kBAAkBhF,IAAAA,kBAAW,EAAC;QAClC,OAAOG,YAAYoC,iBAAiB;IACtC,GAAG;QAACpC;QAAaoC;KAAiB;IAElC,MAAM0C,iBAAiBjF,IAAAA,kBAAW,EAAC;QACjC,OAAOG,YAAYoC,iBAAiB;IACtC,GAAG;QAACpC;QAAaoC;KAAiB;IAElC,MAAM2C,YAAYlF,IAAAA,kBAAW,EAAC;QAC5B,OAAOG,YAAY;YAAEwC,QAAQC,yBAAY,CAACS,GAAG;YAAEL,SAAS;QAAI;IAC9D,GAAG;QAAC7C;KAAY;IAEhB,MAAMgF,aAAanF,IAAAA,kBAAW,EAAC,CAACgD,UAAkB,GAAG;QACnD,OAAO7C,YAAY;YAAEwC,QAAQC,yBAAY,CAACK,IAAI;YAAED;QAAQ;IAC1D,GAAG;QAAC7C;KAAY;IAEhB,OAAO;QACLpB;QACAgG;QACAC;QACAC;QACAC;QACAC;QACA5F,aAAaH,MAAMG,WAAW;QAC9B8C,YAAYjD,MAAMM,gBAAgB,CAACN,MAAMM,gBAAgB,CAACmC,MAAM,GAAG,EAAE,IAAI;QACzEuD,cAAchD;IAChB;AACF"}