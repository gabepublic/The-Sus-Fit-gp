63a716d677ee13f9656216c3c93a2e98
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useBridgeLayer: function() {
        return useBridgeLayer;
    },
    useSimpleTryon: function() {
        return useSimpleTryon;
    },
    useTryonWithProgress: function() {
        return useTryonWithProgress;
    }
});
const _react = require("react");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _useImageUpload = require("./useImageUpload");
const _index = require("./index");
/**
 * Default bridge layer configuration
 */ const DEFAULT_BRIDGE_CONFIG = {
    workflow: {
        timeoutMs: 60000,
        compressionLimitKB: 2048,
        autoRetry: false,
        maxRetries: 3,
        debug: process.env.NODE_ENV === 'development'
    },
    upload: {
        maxSizeBytes: 10 * 1024 * 1024,
        allowedTypes: [
            'image/jpeg',
            'image/png',
            'image/webp'
        ],
        generateThumbnails: true,
        thumbnailSizes: [
            150,
            300
        ],
        enableDragDrop: true,
        autoProcess: false,
        validation: {
            minWidth: 256,
            minHeight: 256,
            maxWidth: 4096,
            maxHeight: 4096
        }
    },
    ui: {
        autoHideMessages: true,
        messageTimeoutMs: 5000,
        enableShare: true,
        enableDownload: true,
        showDetailedProgress: true
    },
    callbacks: {}
};
function useBridgeLayer(config = {}) {
    const finalConfig = {
        ...DEFAULT_BRIDGE_CONFIG,
        ...config
    };
    const { showToast } = (0, _index.useToast)();
    // Initialize underlying hooks
    const workflow = (0, _useTryonWorkflow.useTryonWorkflow)(finalConfig.workflow, showToast);
    const userUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleUserFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    const apparelUpload = (0, _useImageUpload.useSingleImageUpload)(finalConfig.upload, (file)=>{
        workflow.handleApparelFileUpload(file.file);
    }, (error)=>{
        finalConfig.callbacks.onError?.(error.message);
        showToast(error.message, 'error');
    });
    // Simplified state mapping
    const simplifiedState = {
        // Core UI state
        isLoading: workflow.isCapturing || userUpload.uploadState === 'processing' || apparelUpload.uploadState === 'processing',
        isReady: workflow.canGenerate(),
        showResult: workflow.showPolaroid,
        // User feedback
        resultImage: workflow.generatedImage,
        errorMessage: workflow.error?.message || null,
        successMessage: workflow.generatedImage ? 'Try-on generated successfully!' : null,
        // Upload state
        hasUserImage: !!workflow.userImageFile || !!userUpload.file,
        hasApparelImage: !!workflow.apparelImageFile || !!apparelUpload.file,
        userImagePreview: workflow.leftCardImage || userUpload.file?.preview || null,
        apparelImagePreview: workflow.rightCardImage || apparelUpload.file?.preview || null,
        // Progress
        progress: workflow.progress,
        progressMessage: getProgressMessage(workflow.workflowState, workflow.progress),
        // Interaction state
        canGenerate: workflow.canGenerate(),
        canRetry: workflow.hasError && workflow.error?.retryable === true,
        canReset: workflow.workflowState !== 'idle' || simplifiedState.hasUserImage || simplifiedState.hasApparelImage
    };
    // Simplified actions
    const simplifiedActions = {
        // File upload actions
        uploadUserImage: (0, _react.useCallback)(async (file)=>{
            try {
                await userUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('User image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload user image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            userUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        uploadApparelImage: (0, _react.useCallback)(async (file)=>{
            try {
                await apparelUpload.uploadFile(file);
                if (finalConfig.ui.showDetailedProgress) {
                    showToast('Apparel image uploaded successfully', 'success');
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to upload apparel image';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            apparelUpload,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        removeUserImage: (0, _react.useCallback)(()=>{
            userUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            userUpload,
            workflow
        ]),
        removeApparelImage: (0, _react.useCallback)(()=>{
            apparelUpload.clearFiles();
            workflow.resetWorkflow();
        }, [
            apparelUpload,
            workflow
        ]),
        // Generation actions
        generate: (0, _react.useCallback)(async ()=>{
            try {
                finalConfig.callbacks.onGenerationStart?.();
                await workflow.startGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to generate try-on';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        retry: (0, _react.useCallback)(async ()=>{
            try {
                await workflow.retryGeneration();
                if (workflow.generatedImage) {
                    const message = 'Try-on generated successfully!';
                    finalConfig.callbacks.onGenerationComplete?.(workflow.generatedImage);
                    finalConfig.callbacks.onSuccess?.(message);
                    if (finalConfig.ui.showDetailedProgress) {
                        showToast(message, 'success');
                    }
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to retry generation';
                finalConfig.callbacks.onError?.(message);
                throw error;
            }
        }, [
            workflow,
            finalConfig.callbacks,
            finalConfig.ui.showDetailedProgress,
            showToast
        ]),
        reset: (0, _react.useCallback)(()=>{
            workflow.resetWorkflow();
            userUpload.clearFiles();
            apparelUpload.clearFiles();
        }, [
            workflow,
            userUpload,
            apparelUpload
        ]),
        // UI actions
        hideResult: (0, _react.useCallback)(()=>{
            workflow.closePolaroid();
        }, [
            workflow
        ]),
        clearError: (0, _react.useCallback)(()=>{
            workflow.clearError();
        }, [
            workflow
        ]),
        downloadResult: (0, _react.useCallback)(()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableDownload) return;
            try {
                const link = document.createElement('a');
                link.href = workflow.generatedImage;
                link.download = `tryon-result-${Date.now()}.png`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showToast('Image downloaded successfully', 'success');
            } catch (error) {
                showToast('Failed to download image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableDownload,
            showToast
        ]),
        shareResult: (0, _react.useCallback)(async ()=>{
            if (!workflow.generatedImage || !finalConfig.ui.enableShare) return;
            try {
                if (navigator.share) {
                    // Use native share API if available
                    const response = await fetch(workflow.generatedImage);
                    const blob = await response.blob();
                    const file = new File([
                        blob
                    ], 'tryon-result.png', {
                        type: 'image/png'
                    });
                    await navigator.share({
                        title: 'My Try-On Result',
                        text: 'Check out my virtual try-on!',
                        files: [
                            file
                        ]
                    });
                } else {
                    // Fallback to copying URL
                    await navigator.clipboard.writeText(workflow.generatedImage);
                    showToast('Image URL copied to clipboard', 'success');
                }
            } catch (error) {
                showToast('Failed to share image', 'error');
            }
        }, [
            workflow.generatedImage,
            finalConfig.ui.enableShare,
            showToast
        ])
    };
    return {
        state: simplifiedState,
        actions: simplifiedActions,
        advanced: {
            workflow,
            uploads: {
                user: userUpload,
                apparel: apparelUpload
            }
        }
    };
}
/**
 * Helper function to generate user-friendly progress messages
 */ function getProgressMessage(workflowState, progress) {
    switch(workflowState){
        case 'idle':
            return 'Ready to generate';
        case 'uploading':
            return 'Uploading images...';
        case 'processing':
            return 'Processing images...';
        case 'generating':
            if (progress < 30) return 'Preparing images...';
            if (progress < 80) return 'Generating try-on...';
            return 'Finalizing result...';
        case 'complete':
            return 'Generation complete!';
        case 'error':
            return 'Generation failed';
        default:
            return `Processing... ${progress}%`;
    }
}
function useSimpleTryon(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        // Minimal state for simple components
        isLoading: state.isLoading,
        result: state.resultImage,
        error: state.errorMessage,
        canGenerate: state.canGenerate,
        // Essential actions
        uploadUserImage: actions.uploadUserImage,
        uploadApparelImage: actions.uploadApparelImage,
        generate: actions.generate,
        reset: actions.reset
    };
}
function useTryonWithProgress(config = {}) {
    const { state, actions } = useBridgeLayer(config);
    return {
        ...state,
        ...actions,
        // Additional progress information
        uploadProgress: {
            user: state.hasUserImage ? 100 : 0,
            apparel: state.hasApparelImage ? 100 : 0
        },
        overallProgress: calculateOverallProgress(state)
    };
}
/**
 * Helper function to calculate overall progress
 */ function calculateOverallProgress(state) {
    let progress = 0;
    // Upload progress (40% of total)
    if (state.hasUserImage) progress += 20;
    if (state.hasApparelImage) progress += 20;
    // Generation progress (60% of total)
    if (state.isLoading || state.progress > 0) {
        progress += state.progress * 0.6;
    }
    if (state.resultImage) progress = 100;
    return Math.round(progress);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2hvb2tzL3VzZUJyaWRnZUxheWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuLy8gQnJpZGdlIExheWVyIENvbXBvbmVudCBJbnRlcmZhY2VzXG4vLyBDbGVhbiwgZGVjbGFyYXRpdmUgQVBJcyB0aGF0IGhpZGUgYnVzaW5lc3MgbG9naWMgY29tcGxleGl0eSBmcm9tIFJlYWN0IGNvbXBvbmVudHNcblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUcnlvbldvcmtmbG93LCB0eXBlIFdvcmtmbG93Q29uZmlnLCB0eXBlIFRyeW9uV29ya2Zsb3dTdGF0ZSwgdHlwZSBUcnlvbldvcmtmbG93QWN0aW9ucyB9IGZyb20gJy4vdXNlVHJ5b25Xb3JrZmxvdyc7XG5pbXBvcnQgeyB1c2VJbWFnZVVwbG9hZCwgdXNlU2luZ2xlSW1hZ2VVcGxvYWQsIHR5cGUgVXBsb2FkQ29uZmlnLCB0eXBlIFVwbG9hZGVkRmlsZSwgdHlwZSBVcGxvYWRFcnJvciB9IGZyb20gJy4vdXNlSW1hZ2VVcGxvYWQnO1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICcuL2luZGV4JztcblxuLyoqXG4gKiBTaW1wbGlmaWVkIGNvbXBvbmVudCBzdGF0ZSBpbnRlcmZhY2VcbiAqIEFic3RyYWN0cyBhd2F5IGNvbXBsZXggYnVzaW5lc3MgbG9naWMgYW5kIHByb3ZpZGVzIG9ubHkgd2hhdCBVSSBjb21wb25lbnRzIG5lZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaW1wbGlmaWVkVHJ5b25TdGF0ZSB7XG4gIC8vIENvcmUgVUkgc3RhdGVcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBpc1JlYWR5OiBib29sZWFuO1xuICBzaG93UmVzdWx0OiBib29sZWFuO1xuICBcbiAgLy8gVXNlciBmZWVkYmFja1xuICByZXN1bHRJbWFnZTogc3RyaW5nIHwgbnVsbDtcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xuICBzdWNjZXNzTWVzc2FnZTogc3RyaW5nIHwgbnVsbDtcbiAgXG4gIC8vIFVwbG9hZCBzdGF0ZVxuICBoYXNVc2VySW1hZ2U6IGJvb2xlYW47XG4gIGhhc0FwcGFyZWxJbWFnZTogYm9vbGVhbjtcbiAgdXNlckltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcbiAgYXBwYXJlbEltYWdlUHJldmlldzogc3RyaW5nIHwgbnVsbDtcbiAgXG4gIC8vIFByb2dyZXNzXG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIHByb2dyZXNzTWVzc2FnZTogc3RyaW5nO1xuICBcbiAgLy8gSW50ZXJhY3Rpb24gc3RhdGVcbiAgY2FuR2VuZXJhdGU6IGJvb2xlYW47XG4gIGNhblJldHJ5OiBib29sZWFuO1xuICBjYW5SZXNldDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBTaW1wbGlmaWVkIGNvbXBvbmVudCBhY3Rpb25zIGludGVyZmFjZVxuICogUHJvdmlkZXMgY2xlYW4sIHNlbWFudGljIGFjdGlvbnMgZm9yIFVJIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaW1wbGlmaWVkVHJ5b25BY3Rpb25zIHtcbiAgLy8gRmlsZSB1cGxvYWQgYWN0aW9uc1xuICB1cGxvYWRVc2VySW1hZ2U6IChmaWxlOiBGaWxlKSA9PiBQcm9taXNlPHZvaWQ+O1xuICB1cGxvYWRBcHBhcmVsSW1hZ2U6IChmaWxlOiBGaWxlKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZW1vdmVVc2VySW1hZ2U6ICgpID0+IHZvaWQ7XG4gIHJlbW92ZUFwcGFyZWxJbWFnZTogKCkgPT4gdm9pZDtcbiAgXG4gIC8vIEdlbmVyYXRpb24gYWN0aW9uc1xuICBnZW5lcmF0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgcmV0cnk6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHJlc2V0OiAoKSA9PiB2b2lkO1xuICBcbiAgLy8gVUkgYWN0aW9uc1xuICBoaWRlUmVzdWx0OiAoKSA9PiB2b2lkO1xuICBjbGVhckVycm9yOiAoKSA9PiB2b2lkO1xuICBkb3dubG9hZFJlc3VsdDogKCkgPT4gdm9pZDtcbiAgc2hhcmVSZXN1bHQ6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHNpbXBsaWZpZWQgYnJpZGdlIGxheWVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJpZGdlTGF5ZXJDb25maWcge1xuICAvLyBXb3JrZmxvdyBjb25maWd1cmF0aW9uXG4gIHdvcmtmbG93PzogV29ya2Zsb3dDb25maWc7XG4gIFxuICAvLyBVcGxvYWQgY29uZmlndXJhdGlvblxuICB1cGxvYWQ/OiBVcGxvYWRDb25maWc7XG4gIFxuICAvLyBVSSBiZWhhdmlvclxuICB1aT86IHtcbiAgICBhdXRvSGlkZU1lc3NhZ2VzPzogYm9vbGVhbjtcbiAgICBtZXNzYWdlVGltZW91dE1zPzogbnVtYmVyO1xuICAgIGVuYWJsZVNoYXJlPzogYm9vbGVhbjtcbiAgICBlbmFibGVEb3dubG9hZD86IGJvb2xlYW47XG4gICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M/OiBib29sZWFuO1xuICB9O1xuICBcbiAgLy8gQ2FsbGJhY2tzXG4gIGNhbGxiYWNrcz86IHtcbiAgICBvbkdlbmVyYXRpb25TdGFydD86ICgpID0+IHZvaWQ7XG4gICAgb25HZW5lcmF0aW9uQ29tcGxldGU/OiAoaW1hZ2VVcmw6IHN0cmluZykgPT4gdm9pZDtcbiAgICBvbkVycm9yPzogKGVycm9yOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgb25TdWNjZXNzPzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZWZhdWx0IGJyaWRnZSBsYXllciBjb25maWd1cmF0aW9uXG4gKi9cbmNvbnN0IERFRkFVTFRfQlJJREdFX0NPTkZJRzogUmVxdWlyZWQ8QnJpZGdlTGF5ZXJDb25maWc+ID0ge1xuICB3b3JrZmxvdzoge1xuICAgIHRpbWVvdXRNczogNjAwMDAsXG4gICAgY29tcHJlc3Npb25MaW1pdEtCOiAyMDQ4LFxuICAgIGF1dG9SZXRyeTogZmFsc2UsXG4gICAgbWF4UmV0cmllczogMyxcbiAgICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbiAgfSxcbiAgdXBsb2FkOiB7XG4gICAgbWF4U2l6ZUJ5dGVzOiAxMCAqIDEwMjQgKiAxMDI0LFxuICAgIGFsbG93ZWRUeXBlczogWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZycsICdpbWFnZS93ZWJwJ10sXG4gICAgZ2VuZXJhdGVUaHVtYm5haWxzOiB0cnVlLFxuICAgIHRodW1ibmFpbFNpemVzOiBbMTUwLCAzMDBdLFxuICAgIGVuYWJsZURyYWdEcm9wOiB0cnVlLFxuICAgIGF1dG9Qcm9jZXNzOiBmYWxzZSxcbiAgICB2YWxpZGF0aW9uOiB7XG4gICAgICBtaW5XaWR0aDogMjU2LFxuICAgICAgbWluSGVpZ2h0OiAyNTYsXG4gICAgICBtYXhXaWR0aDogNDA5NixcbiAgICAgIG1heEhlaWdodDogNDA5NlxuICAgIH1cbiAgfSxcbiAgdWk6IHtcbiAgICBhdXRvSGlkZU1lc3NhZ2VzOiB0cnVlLFxuICAgIG1lc3NhZ2VUaW1lb3V0TXM6IDUwMDAsXG4gICAgZW5hYmxlU2hhcmU6IHRydWUsXG4gICAgZW5hYmxlRG93bmxvYWQ6IHRydWUsXG4gICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M6IHRydWVcbiAgfSxcbiAgY2FsbGJhY2tzOiB7fVxufTtcblxuLyoqXG4gKiBNYWluIGJyaWRnZSBsYXllciBob29rIHRoYXQgcHJvdmlkZXMgc2ltcGxpZmllZCBpbnRlcmZhY2UgZm9yIFVJIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJyaWRnZUxheWVyKGNvbmZpZzogQnJpZGdlTGF5ZXJDb25maWcgPSB7fSk6IHtcbiAgc3RhdGU6IFNpbXBsaWZpZWRUcnlvblN0YXRlO1xuICBhY3Rpb25zOiBTaW1wbGlmaWVkVHJ5b25BY3Rpb25zO1xuICBhZHZhbmNlZDoge1xuICAgIHdvcmtmbG93OiBUcnlvbldvcmtmbG93U3RhdGUgJiBUcnlvbldvcmtmbG93QWN0aW9ucztcbiAgICB1cGxvYWRzOiB7XG4gICAgICB1c2VyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTaW5nbGVJbWFnZVVwbG9hZD47XG4gICAgICBhcHBhcmVsOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTaW5nbGVJbWFnZVVwbG9hZD47XG4gICAgfTtcbiAgfTtcbn0ge1xuICBjb25zdCBmaW5hbENvbmZpZyA9IHsgLi4uREVGQVVMVF9CUklER0VfQ09ORklHLCAuLi5jb25maWcgfTtcbiAgY29uc3QgeyBzaG93VG9hc3QgfSA9IHVzZVRvYXN0KCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB1bmRlcmx5aW5nIGhvb2tzXG4gIGNvbnN0IHdvcmtmbG93ID0gdXNlVHJ5b25Xb3JrZmxvdyhcbiAgICBmaW5hbENvbmZpZy53b3JrZmxvdyxcbiAgICBzaG93VG9hc3RcbiAgKTtcblxuICBjb25zdCB1c2VyVXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoXG4gICAgZmluYWxDb25maWcudXBsb2FkLFxuICAgIChmaWxlOiBVcGxvYWRlZEZpbGUpID0+IHtcbiAgICAgIHdvcmtmbG93LmhhbmRsZVVzZXJGaWxlVXBsb2FkKGZpbGUuZmlsZSk7XG4gICAgfSxcbiAgICAoZXJyb3I6IFVwbG9hZEVycm9yKSA9PiB7XG4gICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2hvd1RvYXN0KGVycm9yLm1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBhcHBhcmVsVXBsb2FkID0gdXNlU2luZ2xlSW1hZ2VVcGxvYWQoXG4gICAgZmluYWxDb25maWcudXBsb2FkLFxuICAgIChmaWxlOiBVcGxvYWRlZEZpbGUpID0+IHtcbiAgICAgIHdvcmtmbG93LmhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkKGZpbGUuZmlsZSk7XG4gICAgfSxcbiAgICAoZXJyb3I6IFVwbG9hZEVycm9yKSA9PiB7XG4gICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2hvd1RvYXN0KGVycm9yLm1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH1cbiAgKTtcblxuICAvLyBTaW1wbGlmaWVkIHN0YXRlIG1hcHBpbmdcbiAgY29uc3Qgc2ltcGxpZmllZFN0YXRlOiBTaW1wbGlmaWVkVHJ5b25TdGF0ZSA9IHtcbiAgICAvLyBDb3JlIFVJIHN0YXRlXG4gICAgaXNMb2FkaW5nOiB3b3JrZmxvdy5pc0NhcHR1cmluZyB8fCBcbiAgICAgICAgICAgICAgIHVzZXJVcGxvYWQudXBsb2FkU3RhdGUgPT09ICdwcm9jZXNzaW5nJyB8fCBcbiAgICAgICAgICAgICAgIGFwcGFyZWxVcGxvYWQudXBsb2FkU3RhdGUgPT09ICdwcm9jZXNzaW5nJyxcbiAgICBpc1JlYWR5OiB3b3JrZmxvdy5jYW5HZW5lcmF0ZSgpLFxuICAgIHNob3dSZXN1bHQ6IHdvcmtmbG93LnNob3dQb2xhcm9pZCxcbiAgICBcbiAgICAvLyBVc2VyIGZlZWRiYWNrXG4gICAgcmVzdWx0SW1hZ2U6IHdvcmtmbG93LmdlbmVyYXRlZEltYWdlLFxuICAgIGVycm9yTWVzc2FnZTogd29ya2Zsb3cuZXJyb3I/Lm1lc3NhZ2UgfHwgbnVsbCxcbiAgICBzdWNjZXNzTWVzc2FnZTogd29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UgPyAnVHJ5LW9uIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkhJyA6IG51bGwsXG4gICAgXG4gICAgLy8gVXBsb2FkIHN0YXRlXG4gICAgaGFzVXNlckltYWdlOiAhIXdvcmtmbG93LnVzZXJJbWFnZUZpbGUgfHwgISF1c2VyVXBsb2FkLmZpbGUsXG4gICAgaGFzQXBwYXJlbEltYWdlOiAhIXdvcmtmbG93LmFwcGFyZWxJbWFnZUZpbGUgfHwgISFhcHBhcmVsVXBsb2FkLmZpbGUsXG4gICAgdXNlckltYWdlUHJldmlldzogd29ya2Zsb3cubGVmdENhcmRJbWFnZSB8fCB1c2VyVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcbiAgICBhcHBhcmVsSW1hZ2VQcmV2aWV3OiB3b3JrZmxvdy5yaWdodENhcmRJbWFnZSB8fCBhcHBhcmVsVXBsb2FkLmZpbGU/LnByZXZpZXcgfHwgbnVsbCxcbiAgICBcbiAgICAvLyBQcm9ncmVzc1xuICAgIHByb2dyZXNzOiB3b3JrZmxvdy5wcm9ncmVzcyxcbiAgICBwcm9ncmVzc01lc3NhZ2U6IGdldFByb2dyZXNzTWVzc2FnZSh3b3JrZmxvdy53b3JrZmxvd1N0YXRlLCB3b3JrZmxvdy5wcm9ncmVzcyksXG4gICAgXG4gICAgLy8gSW50ZXJhY3Rpb24gc3RhdGVcbiAgICBjYW5HZW5lcmF0ZTogd29ya2Zsb3cuY2FuR2VuZXJhdGUoKSxcbiAgICBjYW5SZXRyeTogd29ya2Zsb3cuaGFzRXJyb3IgJiYgd29ya2Zsb3cuZXJyb3I/LnJldHJ5YWJsZSA9PT0gdHJ1ZSxcbiAgICBjYW5SZXNldDogd29ya2Zsb3cud29ya2Zsb3dTdGF0ZSAhPT0gJ2lkbGUnIHx8IHNpbXBsaWZpZWRTdGF0ZS5oYXNVc2VySW1hZ2UgfHwgc2ltcGxpZmllZFN0YXRlLmhhc0FwcGFyZWxJbWFnZVxuICB9O1xuXG4gIC8vIFNpbXBsaWZpZWQgYWN0aW9uc1xuICBjb25zdCBzaW1wbGlmaWVkQWN0aW9uczogU2ltcGxpZmllZFRyeW9uQWN0aW9ucyA9IHtcbiAgICAvLyBGaWxlIHVwbG9hZCBhY3Rpb25zXG4gICAgdXBsb2FkVXNlckltYWdlOiB1c2VDYWxsYmFjayhhc3luYyAoZmlsZTogRmlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdXNlclVwbG9hZC51cGxvYWRGaWxlKGZpbGUpO1xuICAgICAgICBpZiAoZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBzaG93VG9hc3QoJ1VzZXIgaW1hZ2UgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5JywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byB1cGxvYWQgdXNlciBpbWFnZSc7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkVycm9yPy4obWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sIFt1c2VyVXBsb2FkLCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHVwbG9hZEFwcGFyZWxJbWFnZTogdXNlQ2FsbGJhY2soYXN5bmMgKGZpbGU6IEZpbGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGFwcGFyZWxVcGxvYWQudXBsb2FkRmlsZShmaWxlKTtcbiAgICAgICAgaWYgKGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzKSB7XG4gICAgICAgICAgc2hvd1RvYXN0KCdBcHBhcmVsIGltYWdlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScsICdzdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gdXBsb2FkIGFwcGFyZWwgaW1hZ2UnO1xuICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25FcnJvcj8uKG1lc3NhZ2UpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LCBbYXBwYXJlbFVwbG9hZCwgZmluYWxDb25maWcuY2FsbGJhY2tzLCBmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcywgc2hvd1RvYXN0XSksXG5cbiAgICByZW1vdmVVc2VySW1hZ2U6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHVzZXJVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgICAgd29ya2Zsb3cucmVzZXRXb3JrZmxvdygpO1xuICAgIH0sIFt1c2VyVXBsb2FkLCB3b3JrZmxvd10pLFxuXG4gICAgcmVtb3ZlQXBwYXJlbEltYWdlOiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBhcHBhcmVsVXBsb2FkLmNsZWFyRmlsZXMoKTtcbiAgICAgIHdvcmtmbG93LnJlc2V0V29ya2Zsb3coKTtcbiAgICB9LCBbYXBwYXJlbFVwbG9hZCwgd29ya2Zsb3ddKSxcblxuICAgIC8vIEdlbmVyYXRpb24gYWN0aW9uc1xuICAgIGdlbmVyYXRlOiB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25HZW5lcmF0aW9uU3RhcnQ/LigpO1xuICAgICAgICBhd2FpdCB3b3JrZmxvdy5zdGFydEdlbmVyYXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSkge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnVHJ5LW9uIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkhJztcbiAgICAgICAgICBmaW5hbENvbmZpZy5jYWxsYmFja3Mub25HZW5lcmF0aW9uQ29tcGxldGU/Lih3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSk7XG4gICAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uU3VjY2Vzcz8uKG1lc3NhZ2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcykge1xuICAgICAgICAgICAgc2hvd1RvYXN0KG1lc3NhZ2UsICdzdWNjZXNzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGdlbmVyYXRlIHRyeS1vbic7XG4gICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vbkVycm9yPy4obWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sIFt3b3JrZmxvdywgZmluYWxDb25maWcuY2FsbGJhY2tzLCBmaW5hbENvbmZpZy51aS5zaG93RGV0YWlsZWRQcm9ncmVzcywgc2hvd1RvYXN0XSksXG5cbiAgICByZXRyeTogdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgd29ya2Zsb3cucmV0cnlHZW5lcmF0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAod29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1RyeS1vbiBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5ISc7XG4gICAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uR2VuZXJhdGlvbkNvbXBsZXRlPy4od29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpO1xuICAgICAgICAgIGZpbmFsQ29uZmlnLmNhbGxiYWNrcy5vblN1Y2Nlc3M/LihtZXNzYWdlKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoZmluYWxDb25maWcudWkuc2hvd0RldGFpbGVkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHNob3dUb2FzdChtZXNzYWdlLCAnc3VjY2VzcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byByZXRyeSBnZW5lcmF0aW9uJztcbiAgICAgICAgZmluYWxDb25maWcuY2FsbGJhY2tzLm9uRXJyb3I/LihtZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSwgW3dvcmtmbG93LCBmaW5hbENvbmZpZy5jYWxsYmFja3MsIGZpbmFsQ29uZmlnLnVpLnNob3dEZXRhaWxlZFByb2dyZXNzLCBzaG93VG9hc3RdKSxcblxuICAgIHJlc2V0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICB3b3JrZmxvdy5yZXNldFdvcmtmbG93KCk7XG4gICAgICB1c2VyVXBsb2FkLmNsZWFyRmlsZXMoKTtcbiAgICAgIGFwcGFyZWxVcGxvYWQuY2xlYXJGaWxlcygpO1xuICAgIH0sIFt3b3JrZmxvdywgdXNlclVwbG9hZCwgYXBwYXJlbFVwbG9hZF0pLFxuXG4gICAgLy8gVUkgYWN0aW9uc1xuICAgIGhpZGVSZXN1bHQ6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHdvcmtmbG93LmNsb3NlUG9sYXJvaWQoKTtcbiAgICB9LCBbd29ya2Zsb3ddKSxcblxuICAgIGNsZWFyRXJyb3I6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHdvcmtmbG93LmNsZWFyRXJyb3IoKTtcbiAgICB9LCBbd29ya2Zsb3ddKSxcblxuICAgIGRvd25sb2FkUmVzdWx0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBpZiAoIXdvcmtmbG93LmdlbmVyYXRlZEltYWdlIHx8ICFmaW5hbENvbmZpZy51aS5lbmFibGVEb3dubG9hZCkgcmV0dXJuO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBsaW5rLmhyZWYgPSB3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZTtcbiAgICAgICAgbGluay5kb3dubG9hZCA9IGB0cnlvbi1yZXN1bHQtJHtEYXRlLm5vdygpfS5wbmdgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgICAgIFxuICAgICAgICBzaG93VG9hc3QoJ0ltYWdlIGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5JywgJ3N1Y2Nlc3MnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNob3dUb2FzdCgnRmFpbGVkIHRvIGRvd25sb2FkIGltYWdlJywgJ2Vycm9yJyk7XG4gICAgICB9XG4gICAgfSwgW3dvcmtmbG93LmdlbmVyYXRlZEltYWdlLCBmaW5hbENvbmZpZy51aS5lbmFibGVEb3dubG9hZCwgc2hvd1RvYXN0XSksXG5cbiAgICBzaGFyZVJlc3VsdDogdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCF3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSB8fCAhZmluYWxDb25maWcudWkuZW5hYmxlU2hhcmUpIHJldHVybjtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKG5hdmlnYXRvci5zaGFyZSkge1xuICAgICAgICAgIC8vIFVzZSBuYXRpdmUgc2hhcmUgQVBJIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2god29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpO1xuICAgICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgICAgICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgJ3RyeW9uLXJlc3VsdC5wbmcnLCB7IHR5cGU6ICdpbWFnZS9wbmcnIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5zaGFyZSh7XG4gICAgICAgICAgICB0aXRsZTogJ015IFRyeS1PbiBSZXN1bHQnLFxuICAgICAgICAgICAgdGV4dDogJ0NoZWNrIG91dCBteSB2aXJ0dWFsIHRyeS1vbiEnLFxuICAgICAgICAgICAgZmlsZXM6IFtmaWxlXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvcHlpbmcgVVJMXG4gICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQod29ya2Zsb3cuZ2VuZXJhdGVkSW1hZ2UpO1xuICAgICAgICAgIHNob3dUb2FzdCgnSW1hZ2UgVVJMIGNvcGllZCB0byBjbGlwYm9hcmQnLCAnc3VjY2VzcycpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzaG93VG9hc3QoJ0ZhaWxlZCB0byBzaGFyZSBpbWFnZScsICdlcnJvcicpO1xuICAgICAgfVxuICAgIH0sIFt3b3JrZmxvdy5nZW5lcmF0ZWRJbWFnZSwgZmluYWxDb25maWcudWkuZW5hYmxlU2hhcmUsIHNob3dUb2FzdF0pXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogc2ltcGxpZmllZFN0YXRlLFxuICAgIGFjdGlvbnM6IHNpbXBsaWZpZWRBY3Rpb25zLFxuICAgIGFkdmFuY2VkOiB7XG4gICAgICB3b3JrZmxvdyxcbiAgICAgIHVwbG9hZHM6IHtcbiAgICAgICAgdXNlcjogdXNlclVwbG9hZCxcbiAgICAgICAgYXBwYXJlbDogYXBwYXJlbFVwbG9hZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgdXNlci1mcmllbmRseSBwcm9ncmVzcyBtZXNzYWdlc1xuICovXG5mdW5jdGlvbiBnZXRQcm9ncmVzc01lc3NhZ2Uod29ya2Zsb3dTdGF0ZTogc3RyaW5nLCBwcm9ncmVzczogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoICh3b3JrZmxvd1N0YXRlKSB7XG4gICAgY2FzZSAnaWRsZSc6XG4gICAgICByZXR1cm4gJ1JlYWR5IHRvIGdlbmVyYXRlJztcbiAgICBjYXNlICd1cGxvYWRpbmcnOlxuICAgICAgcmV0dXJuICdVcGxvYWRpbmcgaW1hZ2VzLi4uJztcbiAgICBjYXNlICdwcm9jZXNzaW5nJzpcbiAgICAgIHJldHVybiAnUHJvY2Vzc2luZyBpbWFnZXMuLi4nO1xuICAgIGNhc2UgJ2dlbmVyYXRpbmcnOlxuICAgICAgaWYgKHByb2dyZXNzIDwgMzApIHJldHVybiAnUHJlcGFyaW5nIGltYWdlcy4uLic7XG4gICAgICBpZiAocHJvZ3Jlc3MgPCA4MCkgcmV0dXJuICdHZW5lcmF0aW5nIHRyeS1vbi4uLic7XG4gICAgICByZXR1cm4gJ0ZpbmFsaXppbmcgcmVzdWx0Li4uJztcbiAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICByZXR1cm4gJ0dlbmVyYXRpb24gY29tcGxldGUhJztcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gJ0dlbmVyYXRpb24gZmFpbGVkJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGBQcm9jZXNzaW5nLi4uICR7cHJvZ3Jlc3N9JWA7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGVjaWFsaXplZCBob29rIGZvciBzaW1wbGUgdHJ5LW9uIGdlbmVyYXRpb24gKG1vc3QgYmFzaWMgdXNlIGNhc2UpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTaW1wbGVUcnlvbihjb25maWc6IEJyaWRnZUxheWVyQ29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBzdGF0ZSwgYWN0aW9ucyB9ID0gdXNlQnJpZGdlTGF5ZXIoY29uZmlnKTtcbiAgXG4gIHJldHVybiB7XG4gICAgLy8gTWluaW1hbCBzdGF0ZSBmb3Igc2ltcGxlIGNvbXBvbmVudHNcbiAgICBpc0xvYWRpbmc6IHN0YXRlLmlzTG9hZGluZyxcbiAgICByZXN1bHQ6IHN0YXRlLnJlc3VsdEltYWdlLFxuICAgIGVycm9yOiBzdGF0ZS5lcnJvck1lc3NhZ2UsXG4gICAgY2FuR2VuZXJhdGU6IHN0YXRlLmNhbkdlbmVyYXRlLFxuICAgIFxuICAgIC8vIEVzc2VudGlhbCBhY3Rpb25zXG4gICAgdXBsb2FkVXNlckltYWdlOiBhY3Rpb25zLnVwbG9hZFVzZXJJbWFnZSxcbiAgICB1cGxvYWRBcHBhcmVsSW1hZ2U6IGFjdGlvbnMudXBsb2FkQXBwYXJlbEltYWdlLFxuICAgIGdlbmVyYXRlOiBhY3Rpb25zLmdlbmVyYXRlLFxuICAgIHJlc2V0OiBhY3Rpb25zLnJlc2V0XG4gIH07XG59XG5cbi8qKlxuICogSG9vayBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdXBsb2FkIHByb2dyZXNzIHRyYWNraW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcnlvbldpdGhQcm9ncmVzcyhjb25maWc6IEJyaWRnZUxheWVyQ29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBzdGF0ZSwgYWN0aW9ucyB9ID0gdXNlQnJpZGdlTGF5ZXIoY29uZmlnKTtcbiAgXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgLi4uYWN0aW9ucyxcbiAgICBcbiAgICAvLyBBZGRpdGlvbmFsIHByb2dyZXNzIGluZm9ybWF0aW9uXG4gICAgdXBsb2FkUHJvZ3Jlc3M6IHtcbiAgICAgIHVzZXI6IHN0YXRlLmhhc1VzZXJJbWFnZSA/IDEwMCA6IDAsXG4gICAgICBhcHBhcmVsOiBzdGF0ZS5oYXNBcHBhcmVsSW1hZ2UgPyAxMDAgOiAwXG4gICAgfSxcbiAgICBcbiAgICBvdmVyYWxsUHJvZ3Jlc3M6IGNhbGN1bGF0ZU92ZXJhbGxQcm9ncmVzcyhzdGF0ZSlcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIG92ZXJhbGwgcHJvZ3Jlc3NcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlT3ZlcmFsbFByb2dyZXNzKHN0YXRlOiBTaW1wbGlmaWVkVHJ5b25TdGF0ZSk6IG51bWJlciB7XG4gIGxldCBwcm9ncmVzcyA9IDA7XG4gIFxuICAvLyBVcGxvYWQgcHJvZ3Jlc3MgKDQwJSBvZiB0b3RhbClcbiAgaWYgKHN0YXRlLmhhc1VzZXJJbWFnZSkgcHJvZ3Jlc3MgKz0gMjA7XG4gIGlmIChzdGF0ZS5oYXNBcHBhcmVsSW1hZ2UpIHByb2dyZXNzICs9IDIwO1xuICBcbiAgLy8gR2VuZXJhdGlvbiBwcm9ncmVzcyAoNjAlIG9mIHRvdGFsKVxuICBpZiAoc3RhdGUuaXNMb2FkaW5nIHx8IHN0YXRlLnByb2dyZXNzID4gMCkge1xuICAgIHByb2dyZXNzICs9IChzdGF0ZS5wcm9ncmVzcyAqIDAuNik7XG4gIH1cbiAgXG4gIGlmIChzdGF0ZS5yZXN1bHRJbWFnZSkgcHJvZ3Jlc3MgPSAxMDA7XG4gIFxuICByZXR1cm4gTWF0aC5yb3VuZChwcm9ncmVzcyk7XG59Il0sIm5hbWVzIjpbInVzZUJyaWRnZUxheWVyIiwidXNlU2ltcGxlVHJ5b24iLCJ1c2VUcnlvbldpdGhQcm9ncmVzcyIsIkRFRkFVTFRfQlJJREdFX0NPTkZJRyIsIndvcmtmbG93IiwidGltZW91dE1zIiwiY29tcHJlc3Npb25MaW1pdEtCIiwiYXV0b1JldHJ5IiwibWF4UmV0cmllcyIsImRlYnVnIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidXBsb2FkIiwibWF4U2l6ZUJ5dGVzIiwiYWxsb3dlZFR5cGVzIiwiZ2VuZXJhdGVUaHVtYm5haWxzIiwidGh1bWJuYWlsU2l6ZXMiLCJlbmFibGVEcmFnRHJvcCIsImF1dG9Qcm9jZXNzIiwidmFsaWRhdGlvbiIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ1aSIsImF1dG9IaWRlTWVzc2FnZXMiLCJtZXNzYWdlVGltZW91dE1zIiwiZW5hYmxlU2hhcmUiLCJlbmFibGVEb3dubG9hZCIsInNob3dEZXRhaWxlZFByb2dyZXNzIiwiY2FsbGJhY2tzIiwiY29uZmlnIiwiZmluYWxDb25maWciLCJzaG93VG9hc3QiLCJ1c2VUb2FzdCIsInVzZVRyeW9uV29ya2Zsb3ciLCJ1c2VyVXBsb2FkIiwidXNlU2luZ2xlSW1hZ2VVcGxvYWQiLCJmaWxlIiwiaGFuZGxlVXNlckZpbGVVcGxvYWQiLCJlcnJvciIsIm9uRXJyb3IiLCJtZXNzYWdlIiwiYXBwYXJlbFVwbG9hZCIsImhhbmRsZUFwcGFyZWxGaWxlVXBsb2FkIiwic2ltcGxpZmllZFN0YXRlIiwiaXNMb2FkaW5nIiwiaXNDYXB0dXJpbmciLCJ1cGxvYWRTdGF0ZSIsImlzUmVhZHkiLCJjYW5HZW5lcmF0ZSIsInNob3dSZXN1bHQiLCJzaG93UG9sYXJvaWQiLCJyZXN1bHRJbWFnZSIsImdlbmVyYXRlZEltYWdlIiwiZXJyb3JNZXNzYWdlIiwic3VjY2Vzc01lc3NhZ2UiLCJoYXNVc2VySW1hZ2UiLCJ1c2VySW1hZ2VGaWxlIiwiaGFzQXBwYXJlbEltYWdlIiwiYXBwYXJlbEltYWdlRmlsZSIsInVzZXJJbWFnZVByZXZpZXciLCJsZWZ0Q2FyZEltYWdlIiwicHJldmlldyIsImFwcGFyZWxJbWFnZVByZXZpZXciLCJyaWdodENhcmRJbWFnZSIsInByb2dyZXNzIiwicHJvZ3Jlc3NNZXNzYWdlIiwiZ2V0UHJvZ3Jlc3NNZXNzYWdlIiwid29ya2Zsb3dTdGF0ZSIsImNhblJldHJ5IiwiaGFzRXJyb3IiLCJyZXRyeWFibGUiLCJjYW5SZXNldCIsInNpbXBsaWZpZWRBY3Rpb25zIiwidXBsb2FkVXNlckltYWdlIiwidXNlQ2FsbGJhY2siLCJ1cGxvYWRGaWxlIiwiRXJyb3IiLCJ1cGxvYWRBcHBhcmVsSW1hZ2UiLCJyZW1vdmVVc2VySW1hZ2UiLCJjbGVhckZpbGVzIiwicmVzZXRXb3JrZmxvdyIsInJlbW92ZUFwcGFyZWxJbWFnZSIsImdlbmVyYXRlIiwib25HZW5lcmF0aW9uU3RhcnQiLCJzdGFydEdlbmVyYXRpb24iLCJvbkdlbmVyYXRpb25Db21wbGV0ZSIsIm9uU3VjY2VzcyIsInJldHJ5IiwicmV0cnlHZW5lcmF0aW9uIiwicmVzZXQiLCJoaWRlUmVzdWx0IiwiY2xvc2VQb2xhcm9pZCIsImNsZWFyRXJyb3IiLCJkb3dubG9hZFJlc3VsdCIsImxpbmsiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiZG93bmxvYWQiLCJEYXRlIiwibm93IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsInNoYXJlUmVzdWx0IiwibmF2aWdhdG9yIiwic2hhcmUiLCJyZXNwb25zZSIsImZldGNoIiwiYmxvYiIsIkZpbGUiLCJ0eXBlIiwidGl0bGUiLCJ0ZXh0IiwiZmlsZXMiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJzdGF0ZSIsImFjdGlvbnMiLCJhZHZhbmNlZCIsInVwbG9hZHMiLCJ1c2VyIiwiYXBwYXJlbCIsInJlc3VsdCIsInVwbG9hZFByb2dyZXNzIiwib3ZlcmFsbFByb2dyZXNzIiwiY2FsY3VsYXRlT3ZlcmFsbFByb2dyZXNzIiwiTWF0aCIsInJvdW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0lBa0lnQkEsY0FBYztlQUFkQTs7SUEyUEFDLGNBQWM7ZUFBZEE7O0lBcUJBQyxvQkFBb0I7ZUFBcEJBOzs7dUJBN1lZO2tDQUM4RTtnQ0FDRzt1QkFDcEY7QUFvRnpCOztDQUVDLEdBQ0QsTUFBTUMsd0JBQXFEO0lBQ3pEQyxVQUFVO1FBQ1JDLFdBQVc7UUFDWEMsb0JBQW9CO1FBQ3BCQyxXQUFXO1FBQ1hDLFlBQVk7UUFDWkMsT0FBT0MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUs7SUFDbEM7SUFDQUMsUUFBUTtRQUNOQyxjQUFjLEtBQUssT0FBTztRQUMxQkMsY0FBYztZQUFDO1lBQWM7WUFBYTtTQUFhO1FBQ3ZEQyxvQkFBb0I7UUFDcEJDLGdCQUFnQjtZQUFDO1lBQUs7U0FBSTtRQUMxQkMsZ0JBQWdCO1FBQ2hCQyxhQUFhO1FBQ2JDLFlBQVk7WUFDVkMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLFVBQVU7WUFDVkMsV0FBVztRQUNiO0lBQ0Y7SUFDQUMsSUFBSTtRQUNGQyxrQkFBa0I7UUFDbEJDLGtCQUFrQjtRQUNsQkMsYUFBYTtRQUNiQyxnQkFBZ0I7UUFDaEJDLHNCQUFzQjtJQUN4QjtJQUNBQyxXQUFXLENBQUM7QUFDZDtBQUtPLFNBQVMvQixlQUFlZ0MsU0FBNEIsQ0FBQyxDQUFDO0lBVzNELE1BQU1DLGNBQWM7UUFBRSxHQUFHOUIscUJBQXFCO1FBQUUsR0FBRzZCLE1BQU07SUFBQztJQUMxRCxNQUFNLEVBQUVFLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSxlQUFRO0lBRTlCLDhCQUE4QjtJQUM5QixNQUFNL0IsV0FBV2dDLElBQUFBLGtDQUFnQixF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