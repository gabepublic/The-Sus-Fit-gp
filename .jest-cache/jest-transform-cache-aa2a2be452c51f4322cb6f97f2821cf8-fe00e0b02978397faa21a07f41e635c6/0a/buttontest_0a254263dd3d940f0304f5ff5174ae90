2718bfa89485be379b3650cea4309a59
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _button = require("../../../src/components/ui/button");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Button', ()=>{
    describe('Button component', ()=>{
        it('should render with default props', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                children: "Click me"
            }));
            const button = _react1.screen.getByRole('button', {
                name: 'Click me'
            });
            expect(button).toBeInTheDocument();
            expect(button).toHaveAttribute('data-slot', 'button');
        });
        it('should render with custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                className: "custom-class",
                children: "Custom Button"
            }));
            const button = _react1.screen.getByRole('button', {
                name: 'Custom Button'
            });
            expect(button).toHaveClass('custom-class');
        });
        it('should render with all button variants', ()=>{
            const variants = [
                'default',
                'destructive',
                'outline',
                'secondary',
                'ghost',
                'link'
            ];
            variants.forEach((variant)=>{
                const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                    variant: variant,
                    "data-testid": `button-${variant}`,
                    children: [
                        variant,
                        " button"
                    ]
                }));
                const button = _react1.screen.getByTestId(`button-${variant}`);
                expect(button).toBeInTheDocument();
                expect(button).toHaveTextContent(`${variant} button`);
                unmount();
            });
        });
        it('should render with all button sizes', ()=>{
            const sizes = [
                'default',
                'sm',
                'lg',
                'icon'
            ];
            sizes.forEach((size)=>{
                const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                    size: size,
                    "data-testid": `button-${size}`,
                    children: [
                        size,
                        " button"
                    ]
                }));
                const button = _react1.screen.getByTestId(`button-${size}`);
                expect(button).toBeInTheDocument();
                expect(button).toHaveTextContent(`${size} button`);
                unmount();
            });
        });
        it('should render as child when asChild is true', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                asChild: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                    href: "/test",
                    children: "Link Button"
                })
            }));
            const link = _react1.screen.getByRole('link', {
                name: 'Link Button'
            });
            expect(link).toBeInTheDocument();
            expect(link).toHaveAttribute('href', '/test');
            expect(link).toHaveAttribute('data-slot', 'button');
        });
        it('should pass through additional props', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                "data-testid": "test-button",
                "aria-label": "Test button",
                disabled: true,
                children: "Test"
            }));
            const button = _react1.screen.getByTestId('test-button');
            expect(button).toHaveAttribute('aria-label', 'Test button');
            expect(button).toBeDisabled();
        });
        it('should handle click events', ()=>{
            const handleClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                onClick: handleClick,
                children: "Click me"
            }));
            const button = _react1.screen.getByRole('button', {
                name: 'Click me'
            });
            button.click();
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        it('should render with icon and text', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: "Icon"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                        "data-testid": "icon"
                    })
                ]
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveTextContent('Icon');
            expect(_react1.screen.getByTestId('icon')).toBeInTheDocument();
        });
    });
    describe('buttonVariants', ()=>{
        it('should generate correct class names for default variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'default'
            });
            expect(className).toContain('bg-primary');
            expect(className).toContain('text-primary-foreground');
        });
        it('should generate correct class names for destructive variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'destructive'
            });
            expect(className).toContain('bg-destructive');
            expect(className).toContain('text-white');
        });
        it('should generate correct class names for outline variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'outline'
            });
            expect(className).toContain('border');
            expect(className).toContain('bg-background');
        });
        it('should generate correct class names for secondary variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'secondary'
            });
            expect(className).toContain('bg-secondary');
            expect(className).toContain('text-secondary-foreground');
        });
        it('should generate correct class names for ghost variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'ghost'
            });
            expect(className).toContain('hover:bg-accent');
            expect(className).toContain('hover:text-accent-foreground');
        });
        it('should generate correct class names for link variant', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'link'
            });
            expect(className).toContain('text-primary');
            expect(className).toContain('underline-offset-4');
        });
        it('should generate correct class names for default size', ()=>{
            const className = (0, _button.buttonVariants)({
                size: 'default'
            });
            expect(className).toContain('h-9');
            expect(className).toContain('px-4');
        });
        it('should generate correct class names for sm size', ()=>{
            const className = (0, _button.buttonVariants)({
                size: 'sm'
            });
            expect(className).toContain('h-8');
            expect(className).toContain('px-3');
        });
        it('should generate correct class names for lg size', ()=>{
            const className = (0, _button.buttonVariants)({
                size: 'lg'
            });
            expect(className).toContain('h-10');
            expect(className).toContain('px-6');
        });
        it('should generate correct class names for icon size', ()=>{
            const className = (0, _button.buttonVariants)({
                size: 'icon'
            });
            expect(className).toContain('size-9');
        });
        it('should combine variant and size classes', ()=>{
            const className = (0, _button.buttonVariants)({
                variant: 'destructive',
                size: 'lg'
            });
            expect(className).toContain('bg-destructive');
            expect(className).toContain('h-10');
        });
        it('should include custom className when provided', ()=>{
            const className = (0, _button.buttonVariants)({
                className: 'custom-class'
            });
            expect(className).toContain('custom-class');
        });
        it('should use default variants when none provided', ()=>{
            const className = (0, _button.buttonVariants)({});
            expect(className).toContain('bg-primary'); // default variant
            expect(className).toContain('h-9'); // default size
        });
    });
});

//# sourceMappingURL=data:application/json;base64,