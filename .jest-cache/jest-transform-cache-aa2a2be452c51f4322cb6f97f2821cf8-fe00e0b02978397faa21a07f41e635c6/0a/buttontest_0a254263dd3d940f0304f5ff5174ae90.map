{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/components/ui/button.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { Button, buttonVariants } from '../../../src/components/ui/button';\n\ndescribe('Button', () => {\n  describe('Button component', () => {\n    it('should render with default props', () => {\n      render(<Button>Click me</Button>);\n      \n      const button = screen.getByRole('button', { name: 'Click me' });\n      expect(button).toBeInTheDocument();\n      expect(button).toHaveAttribute('data-slot', 'button');\n    });\n\n    it('should render with custom className', () => {\n      render(<Button className=\"custom-class\">Custom Button</Button>);\n      \n      const button = screen.getByRole('button', { name: 'Custom Button' });\n      expect(button).toHaveClass('custom-class');\n    });\n\n    it('should render with all button variants', () => {\n      const variants = ['default', 'destructive', 'outline', 'secondary', 'ghost', 'link'] as const;\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <Button variant={variant} data-testid={`button-${variant}`}>\n            {variant} button\n          </Button>\n        );\n        \n        const button = screen.getByTestId(`button-${variant}`);\n        expect(button).toBeInTheDocument();\n        expect(button).toHaveTextContent(`${variant} button`);\n        \n        unmount();\n      });\n    });\n\n    it('should render with all button sizes', () => {\n      const sizes = ['default', 'sm', 'lg', 'icon'] as const;\n      \n      sizes.forEach(size => {\n        const { unmount } = render(\n          <Button size={size} data-testid={`button-${size}`}>\n            {size} button\n          </Button>\n        );\n        \n        const button = screen.getByTestId(`button-${size}`);\n        expect(button).toBeInTheDocument();\n        expect(button).toHaveTextContent(`${size} button`);\n        \n        unmount();\n      });\n    });\n\n    it('should render as child when asChild is true', () => {\n      render(\n        <Button asChild>\n          <a href=\"/test\">Link Button</a>\n        </Button>\n      );\n      \n      const link = screen.getByRole('link', { name: 'Link Button' });\n      expect(link).toBeInTheDocument();\n      expect(link).toHaveAttribute('href', '/test');\n      expect(link).toHaveAttribute('data-slot', 'button');\n    });\n\n    it('should pass through additional props', () => {\n      render(\n        <Button \n          data-testid=\"test-button\"\n          aria-label=\"Test button\"\n          disabled\n        >\n          Test\n        </Button>\n      );\n      \n      const button = screen.getByTestId('test-button');\n      expect(button).toHaveAttribute('aria-label', 'Test button');\n      expect(button).toBeDisabled();\n    });\n\n    it('should handle click events', () => {\n      const handleClick = jest.fn();\n      render(<Button onClick={handleClick}>Click me</Button>);\n      \n      const button = screen.getByRole('button', { name: 'Click me' });\n      button.click();\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('should render with icon and text', () => {\n      render(\n        <Button>\n          <span>Icon</span>\n          <svg data-testid=\"icon\" />\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveTextContent('Icon');\n      expect(screen.getByTestId('icon')).toBeInTheDocument();\n    });\n  });\n\n  describe('buttonVariants', () => {\n    it('should generate correct class names for default variant', () => {\n      const className = buttonVariants({ variant: 'default' });\n      expect(className).toContain('bg-primary');\n      expect(className).toContain('text-primary-foreground');\n    });\n\n    it('should generate correct class names for destructive variant', () => {\n      const className = buttonVariants({ variant: 'destructive' });\n      expect(className).toContain('bg-destructive');\n      expect(className).toContain('text-white');\n    });\n\n    it('should generate correct class names for outline variant', () => {\n      const className = buttonVariants({ variant: 'outline' });\n      expect(className).toContain('border');\n      expect(className).toContain('bg-background');\n    });\n\n    it('should generate correct class names for secondary variant', () => {\n      const className = buttonVariants({ variant: 'secondary' });\n      expect(className).toContain('bg-secondary');\n      expect(className).toContain('text-secondary-foreground');\n    });\n\n    it('should generate correct class names for ghost variant', () => {\n      const className = buttonVariants({ variant: 'ghost' });\n      expect(className).toContain('hover:bg-accent');\n      expect(className).toContain('hover:text-accent-foreground');\n    });\n\n    it('should generate correct class names for link variant', () => {\n      const className = buttonVariants({ variant: 'link' });\n      expect(className).toContain('text-primary');\n      expect(className).toContain('underline-offset-4');\n    });\n\n    it('should generate correct class names for default size', () => {\n      const className = buttonVariants({ size: 'default' });\n      expect(className).toContain('h-9');\n      expect(className).toContain('px-4');\n    });\n\n    it('should generate correct class names for sm size', () => {\n      const className = buttonVariants({ size: 'sm' });\n      expect(className).toContain('h-8');\n      expect(className).toContain('px-3');\n    });\n\n    it('should generate correct class names for lg size', () => {\n      const className = buttonVariants({ size: 'lg' });\n      expect(className).toContain('h-10');\n      expect(className).toContain('px-6');\n    });\n\n    it('should generate correct class names for icon size', () => {\n      const className = buttonVariants({ size: 'icon' });\n      expect(className).toContain('size-9');\n    });\n\n    it('should combine variant and size classes', () => {\n      const className = buttonVariants({ variant: 'destructive', size: 'lg' });\n      expect(className).toContain('bg-destructive');\n      expect(className).toContain('h-10');\n    });\n\n    it('should include custom className when provided', () => {\n      const className = buttonVariants({ className: 'custom-class' });\n      expect(className).toContain('custom-class');\n    });\n\n    it('should use default variants when none provided', () => {\n      const className = buttonVariants({});\n      expect(className).toContain('bg-primary'); // default variant\n      expect(className).toContain('h-9'); // default size\n    });\n  });\n}); "],"names":["describe","it","render","Button","button","screen","getByRole","name","expect","toBeInTheDocument","toHaveAttribute","className","toHaveClass","variants","forEach","variant","unmount","data-testid","getByTestId","toHaveTextContent","sizes","size","asChild","a","href","link","aria-label","disabled","toBeDisabled","handleClick","jest","fn","onClick","click","toHaveBeenCalledTimes","span","svg","buttonVariants","toContain"],"mappings":"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"}