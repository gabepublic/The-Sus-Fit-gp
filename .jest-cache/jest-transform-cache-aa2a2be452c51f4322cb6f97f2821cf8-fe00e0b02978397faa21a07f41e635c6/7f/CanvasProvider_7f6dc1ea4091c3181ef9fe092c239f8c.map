{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/providers/CanvasProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useRef, useCallback, useEffect } from 'react';\n\n/**\n * Canvas instance with metadata\n */\nexport interface ManagedCanvas {\n  /** Canvas element */\n  canvas: HTMLCanvasElement;\n  /** 2D rendering context */\n  context: CanvasRenderingContext2D;\n  /** Unique identifier for this canvas */\n  id: string;\n  /** Canvas dimensions */\n  dimensions: { width: number; height: number };\n  /** Device pixel ratio for high-DPI displays */\n  pixelRatio: number;\n  /** Whether the canvas is currently in use */\n  inUse: boolean;\n  /** Creation timestamp */\n  createdAt: number;\n}\n\n/**\n * Canvas pool for efficient canvas management\n */\nexport interface CanvasPool {\n  /** Get or create a canvas with specified dimensions */\n  getCanvas: (width: number, height: number, id?: string) => ManagedCanvas;\n  /** Return a canvas to the pool */\n  releaseCanvas: (id: string) => void;\n  /** Clear all canvases from the pool */\n  clearPool: () => void;\n  /** Get canvas by ID */\n  getCanvasById: (id: string) => ManagedCanvas | null;\n  /** Get all active canvases */\n  getActiveCanvases: () => ManagedCanvas[];\n}\n\n/**\n * Canvas utilities for common operations\n */\nexport interface CanvasUtils {\n  /** Create canvas with proper device pixel ratio setup */\n  createCanvas: (width: number, height: number) => HTMLCanvasElement;\n  /** Get 2D context with error handling */\n  getContext2D: (canvas: HTMLCanvasElement) => CanvasRenderingContext2D;\n  /** Load image onto canvas */\n  loadImageToCanvas: (canvas: HTMLCanvasElement, imageUrl: string) => Promise<void>;\n  /** Convert canvas to data URL with options */\n  canvasToDataURL: (canvas: HTMLCanvasElement, format?: string, quality?: number) => string;\n  /** Clear canvas */\n  clearCanvas: (canvas: HTMLCanvasElement) => void;\n  /** Resize canvas maintaining content */\n  resizeCanvas: (canvas: HTMLCanvasElement, newWidth: number, newHeight: number) => void;\n  /** Clone canvas content to new canvas */\n  cloneCanvas: (sourceCanvas: HTMLCanvasElement) => HTMLCanvasElement;\n}\n\n/**\n * Canvas context interface\n */\nexport interface CanvasContextValue {\n  /** Canvas pool for efficient management */\n  pool: CanvasPool;\n  /** Canvas utilities */\n  utils: CanvasUtils;\n  /** Current device pixel ratio */\n  devicePixelRatio: number;\n  /** Whether canvas is supported */\n  isSupported: boolean;\n}\n\nconst CanvasContext = createContext<CanvasContextValue | null>(null);\n\n/**\n * Canvas provider component props\n */\nexport interface CanvasProviderProps {\n  children: React.ReactNode;\n  /** Maximum number of canvases to keep in pool */\n  maxPoolSize?: number;\n  /** Whether to enable high-DPI support */\n  enableHighDPI?: boolean;\n}\n\n/**\n * Canvas provider component that manages canvas instances and utilities\n */\nexport function CanvasProvider({ \n  children, \n  maxPoolSize = 10,\n  enableHighDPI = true \n}: CanvasProviderProps): React.JSX.Element {\n  const canvasPoolRef = useRef<Map<string, ManagedCanvas>>(new Map());\n  const devicePixelRatio = enableHighDPI ? window.devicePixelRatio || 1 : 1;\n\n  // Check canvas support\n  const isSupported = useCallback(() => {\n    try {\n      const testCanvas = document.createElement('canvas');\n      return !!(testCanvas.getContext && testCanvas.getContext('2d'));\n    } catch {\n      return false;\n    }\n  }, []);\n\n  // Canvas utilities implementation\n  const utils: CanvasUtils = {\n    createCanvas: useCallback((width: number, height: number) => {\n      const canvas = document.createElement('canvas');\n      \n      // Set display size\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      \n      // Set actual size for high-DPI\n      canvas.width = width * devicePixelRatio;\n      canvas.height = height * devicePixelRatio;\n      \n      // Scale context for high-DPI\n      const ctx = canvas.getContext('2d');\n      if (ctx && devicePixelRatio !== 1) {\n        ctx.scale(devicePixelRatio, devicePixelRatio);\n      }\n      \n      return canvas;\n    }, [devicePixelRatio]),\n\n    getContext2D: useCallback((canvas: HTMLCanvasElement) => {\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        throw new Error('Could not get 2D context from canvas');\n      }\n      return ctx;\n    }, []),\n\n    loadImageToCanvas: useCallback((canvas: HTMLCanvasElement, imageUrl: string) => {\n      return new Promise<void>((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        \n        img.onload = () => {\n          try {\n            const ctx = utils.getContext2D(canvas);\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, canvas.width / devicePixelRatio, canvas.height / devicePixelRatio);\n            resolve();\n          } catch (error) {\n            reject(new Error(`Failed to draw image to canvas: ${error}`));\n          }\n        };\n        \n        img.onerror = () => {\n          reject(new Error('Failed to load image'));\n        };\n        \n        img.src = imageUrl;\n      });\n    }, [devicePixelRatio]),\n\n    canvasToDataURL: useCallback((canvas: HTMLCanvasElement, format = 'image/png', quality = 0.9) => {\n      return canvas.toDataURL(format, quality);\n    }, []),\n\n    clearCanvas: useCallback((canvas: HTMLCanvasElement) => {\n      const ctx = utils.getContext2D(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }, []),\n\n    resizeCanvas: useCallback((canvas: HTMLCanvasElement, newWidth: number, newHeight: number) => {\n      // Save current content\n      const imageData = canvas.toDataURL();\n      \n      // Resize canvas\n      canvas.style.width = `${newWidth}px`;\n      canvas.style.height = `${newHeight}px`;\n      canvas.width = newWidth * devicePixelRatio;\n      canvas.height = newHeight * devicePixelRatio;\n      \n      // Scale context for high-DPI\n      const ctx = utils.getContext2D(canvas);\n      if (devicePixelRatio !== 1) {\n        ctx.scale(devicePixelRatio, devicePixelRatio);\n      }\n      \n      // Restore content\n      const img = new Image();\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0, newWidth, newHeight);\n      };\n      img.src = imageData;\n    }, [devicePixelRatio]),\n\n    cloneCanvas: useCallback((sourceCanvas: HTMLCanvasElement) => {\n      const clone = utils.createCanvas(\n        sourceCanvas.width / devicePixelRatio,\n        sourceCanvas.height / devicePixelRatio\n      );\n      const cloneCtx = utils.getContext2D(clone);\n      cloneCtx.drawImage(sourceCanvas, 0, 0);\n      return clone;\n    }, [])\n  };\n\n  // Canvas pool implementation\n  const pool: CanvasPool = {\n    getCanvas: useCallback((width: number, height: number, id?: string) => {\n      const canvasId = id || `canvas_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Check if canvas with this ID already exists\n      const existing = canvasPoolRef.current.get(canvasId);\n      if (existing && !existing.inUse) {\n        // Resize existing canvas if dimensions don't match\n        if (existing.dimensions.width !== width || existing.dimensions.height !== height) {\n          utils.resizeCanvas(existing.canvas, width, height);\n          existing.dimensions = { width, height };\n        }\n        existing.inUse = true;\n        return existing;\n      }\n\n      // Create new canvas\n      const canvas = utils.createCanvas(width, height);\n      const context = utils.getContext2D(canvas);\n      \n      const managedCanvas: ManagedCanvas = {\n        canvas,\n        context,\n        id: canvasId,\n        dimensions: { width, height },\n        pixelRatio: devicePixelRatio,\n        inUse: true,\n        createdAt: Date.now()\n      };\n\n      // Add to pool, removing oldest if at capacity\n      if (canvasPoolRef.current.size >= maxPoolSize) {\n        const oldestEntry = Array.from(canvasPoolRef.current.entries())\n          .filter(([, canvas]) => !canvas.inUse)\n          .sort((a, b) => a[1].createdAt - b[1].createdAt)[0];\n        \n        if (oldestEntry) {\n          canvasPoolRef.current.delete(oldestEntry[0]);\n        }\n      }\n\n      canvasPoolRef.current.set(canvasId, managedCanvas);\n      return managedCanvas;\n    }, [maxPoolSize, devicePixelRatio]),\n\n    releaseCanvas: useCallback((id: string) => {\n      const canvas = canvasPoolRef.current.get(id);\n      if (canvas) {\n        canvas.inUse = false;\n        // Clear the canvas for reuse\n        utils.clearCanvas(canvas.canvas);\n      }\n    }, []),\n\n    clearPool: useCallback(() => {\n      canvasPoolRef.current.clear();\n    }, []),\n\n    getCanvasById: useCallback((id: string) => {\n      return canvasPoolRef.current.get(id) || null;\n    }, []),\n\n    getActiveCanvases: useCallback(() => {\n      return Array.from(canvasPoolRef.current.values()).filter(canvas => canvas.inUse);\n    }, [])\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      pool.clearPool();\n    };\n  }, []);\n\n  const contextValue: CanvasContextValue = {\n    pool,\n    utils,\n    devicePixelRatio,\n    isSupported: isSupported()\n  };\n\n  return (\n    <CanvasContext.Provider value={contextValue}>\n      {children}\n    </CanvasContext.Provider>\n  );\n}\n\n/**\n * Hook to access canvas context\n */\nexport function useCanvas(): CanvasContextValue {\n  const context = useContext(CanvasContext);\n  if (!context) {\n    throw new Error('useCanvas must be used within a CanvasProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to get a managed canvas instance\n */\nexport function useManagedCanvas(\n  width: number,\n  height: number,\n  id?: string\n): ManagedCanvas {\n  const { pool } = useCanvas();\n  \n  const canvasRef = useRef<ManagedCanvas | null>(null);\n  \n  useEffect(() => {\n    // Get canvas on mount\n    canvasRef.current = pool.getCanvas(width, height, id);\n    \n    // Release canvas on unmount\n    return () => {\n      if (canvasRef.current) {\n        pool.releaseCanvas(canvasRef.current.id);\n      }\n    };\n  }, [width, height, id, pool]);\n  \n  if (!canvasRef.current) {\n    throw new Error('Canvas not initialized');\n  }\n  \n  return canvasRef.current;\n}\n\n/**\n * Hook for canvas utilities\n */\nexport function useCanvasUtils(): CanvasUtils {\n  const { utils } = useCanvas();\n  return utils;\n}"],"names":["CanvasProvider","useCanvas","useCanvasUtils","useManagedCanvas","CanvasContext","createContext","children","maxPoolSize","enableHighDPI","canvasPoolRef","useRef","Map","devicePixelRatio","window","isSupported","useCallback","testCanvas","document","createElement","getContext","utils","createCanvas","width","height","canvas","style","ctx","scale","getContext2D","Error","loadImageToCanvas","imageUrl","Promise","resolve","reject","img","Image","crossOrigin","onload","clearRect","drawImage","error","onerror","src","canvasToDataURL","format","quality","toDataURL","clearCanvas","resizeCanvas","newWidth","newHeight","imageData","cloneCanvas","sourceCanvas","clone","cloneCtx","pool","getCanvas","id","canvasId","Date","now","Math","random","toString","substr","existing","current","get","inUse","dimensions","context","managedCanvas","pixelRatio","createdAt","size","oldestEntry","Array","from","entries","filter","sort","a","b","delete","set","releaseCanvas","clearPool","clear","getCanvasById","getActiveCanvases","values","useEffect","contextValue","Provider","value","useContext","canvasRef"],"mappings":"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"}