25394b14af3c13ca7f49ad351f6cf103
// Re-export hooks for convenient imports
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UploadState: function() {
        return _useImageUpload.UploadState;
    },
    WorkflowState: function() {
        return _useTryonWorkflow.WorkflowState;
    },
    useBridgeLayer: function() {
        return _useBridgeLayer.useBridgeLayer;
    },
    useDropzoneUpload: function() {
        return _useImageUpload.useDropzoneUpload;
    },
    useEnhancedPageState: function() {
        return _useBackwardCompatibility.useEnhancedPageState;
    },
    useImageUpload: function() {
        return _useImageUpload.useImageUpload;
    },
    useLegacyPageInterface: function() {
        return _useBackwardCompatibility.useLegacyPageInterface;
    },
    usePageComponentState: function() {
        return _useBackwardCompatibility.usePageComponentState;
    },
    useSimpleTryon: function() {
        return _useBridgeLayer.useSimpleTryon;
    },
    useSingleImageUpload: function() {
        return _useImageUpload.useSingleImageUpload;
    },
    useToast: function() {
        return _ToastProvider.useToast;
    },
    useTryonWithProgress: function() {
        return _useBridgeLayer.useTryonWithProgress;
    },
    useTryonWorkflow: function() {
        return _useTryonWorkflow.useTryonWorkflow;
    }
});
const _ToastProvider = require("../components/ToastProvider");
const _useBridgeLayer = require("./useBridgeLayer");
const _useTryonWorkflow = require("./useTryonWorkflow");
const _useImageUpload = require("./useImageUpload");
const _useBackwardCompatibility = require("./useBackwardCompatibility");

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2hvb2tzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFJlLWV4cG9ydCBob29rcyBmb3IgY29udmVuaWVudCBpbXBvcnRzXG5leHBvcnQgeyB1c2VUb2FzdCB9IGZyb20gJy4uL2NvbXBvbmVudHMvVG9hc3RQcm92aWRlcic7XG5cbi8vIEJyaWRnZSBMYXllciBIb29rcyAtIE1haW4gaW50ZXJmYWNlIGZvciBVSSBjb21wb25lbnRzXG5leHBvcnQge1xuICB1c2VCcmlkZ2VMYXllcixcbiAgdXNlU2ltcGxlVHJ5b24sXG4gIHVzZVRyeW9uV2l0aFByb2dyZXNzLFxuICB0eXBlIEJyaWRnZUxheWVyQ29uZmlnLFxuICB0eXBlIFNpbXBsaWZpZWRUcnlvblN0YXRlLFxuICB0eXBlIFNpbXBsaWZpZWRUcnlvbkFjdGlvbnNcbn0gZnJvbSAnLi91c2VCcmlkZ2VMYXllcic7XG5cbi8vIFdvcmtmbG93IENvb3JkaW5hdGlvbiBIb29rXG5leHBvcnQge1xuICB1c2VUcnlvbldvcmtmbG93LFxuICBXb3JrZmxvd1N0YXRlLFxuICB0eXBlIFdvcmtmbG93Q29uZmlnLFxuICB0eXBlIFRyeW9uV29ya2Zsb3dTdGF0ZSxcbiAgdHlwZSBUcnlvbldvcmtmbG93QWN0aW9ucyxcbiAgdHlwZSBXb3JrZmxvd0Vycm9yXG59IGZyb20gJy4vdXNlVHJ5b25Xb3JrZmxvdyc7XG5cbi8vIEltYWdlIFVwbG9hZCBIb29rc1xuZXhwb3J0IHtcbiAgdXNlSW1hZ2VVcGxvYWQsXG4gIHVzZVNpbmdsZUltYWdlVXBsb2FkLFxuICB1c2VEcm9wem9uZVVwbG9hZCxcbiAgVXBsb2FkU3RhdGUsXG4gIHR5cGUgVXBsb2FkQ29uZmlnLFxuICB0eXBlIFVwbG9hZGVkRmlsZSxcbiAgdHlwZSBVcGxvYWRFcnJvcixcbiAgdHlwZSBGaWxlVmFsaWRhdGlvblJlc3VsdCxcbiAgdHlwZSBVcGxvYWRQcm9ncmVzcyxcbiAgdHlwZSBEcmFnRHJvcFN0YXRlXG59IGZyb20gJy4vdXNlSW1hZ2VVcGxvYWQnO1xuXG4vLyBCYWNrd2FyZCBDb21wYXRpYmlsaXR5IExheWVyXG5leHBvcnQge1xuICB1c2VMZWdhY3lQYWdlSW50ZXJmYWNlLFxuICB1c2VQYWdlQ29tcG9uZW50U3RhdGUsXG4gIHVzZUVuaGFuY2VkUGFnZVN0YXRlLFxuICB0eXBlIExlZ2FjeVBhZ2VTdGF0ZSxcbiAgdHlwZSBMZWdhY3lQYWdlSGFuZGxlcnMsXG4gIHR5cGUgTWlncmF0aW9uT3B0aW9uc1xufSBmcm9tICcuL3VzZUJhY2t3YXJkQ29tcGF0aWJpbGl0eSc7XG4iXSwibmFtZXMiOlsiVXBsb2FkU3RhdGUiLCJXb3JrZmxvd1N0YXRlIiwidXNlQnJpZGdlTGF5ZXIiLCJ1c2VEcm9wem9uZVVwbG9hZCIsInVzZUVuaGFuY2VkUGFnZVN0YXRlIiwidXNlSW1hZ2VVcGxvYWQiLCJ1c2VMZWdhY3lQYWdlSW50ZXJmYWNlIiwidXNlUGFnZUNvbXBvbmVudFN0YXRlIiwidXNlU2ltcGxlVHJ5b24iLCJ1c2VTaW5nbGVJbWFnZVVwbG9hZCIsInVzZVRvYXN0IiwidXNlVHJ5b25XaXRoUHJvZ3Jlc3MiLCJ1c2VUcnlvbldvcmtmbG93Il0sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUM7Ozs7Ozs7Ozs7OztJQTRCdkNBLFdBQVc7ZUFBWEEsMkJBQVc7O0lBWlhDLGFBQWE7ZUFBYkEsK0JBQWE7O0lBWGJDLGNBQWM7ZUFBZEEsOEJBQWM7O0lBc0JkQyxpQkFBaUI7ZUFBakJBLGlDQUFpQjs7SUFjakJDLG9CQUFvQjtlQUFwQkEsOENBQW9COztJQWhCcEJDLGNBQWM7ZUFBZEEsOEJBQWM7O0lBY2RDLHNCQUFzQjtlQUF0QkEsZ0RBQXNCOztJQUN0QkMscUJBQXFCO2VBQXJCQSwrQ0FBcUI7O0lBbENyQkMsY0FBYztlQUFkQSw4QkFBYzs7SUFvQmRDLG9CQUFvQjtlQUFwQkEsb0NBQW9COztJQXpCYkMsUUFBUTtlQUFSQSx1QkFBUTs7SUFNZkMsb0JBQW9CO2VBQXBCQSxvQ0FBb0I7O0lBUXBCQyxnQkFBZ0I7ZUFBaEJBLGtDQUFnQjs7OytCQWRPO2dDQVVsQjtrQ0FVQTtnQ0FjQTswQ0FVQSJ9