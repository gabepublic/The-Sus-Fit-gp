2be6efe542af927ac18da5ae196d4830
// History Integration Utilities
// Utilities for integrating try-on mutations with history tracking
"use strict";

/* istanbul ignore next */
function cov_19itmxf1mi() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/historyIntegration.ts";
  var hash = "ee9da3068ed267f455fa15c45b3f53a4d9f3f7c5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/historyIntegration.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 46
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 48
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 50
        }
      },
      "8": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 52
        }
      },
      "9": {
        start: {
          line: 28,
          column: 15
        },
        end: {
          line: 28,
          column: 31
        }
      },
      "10": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 29,
          column: 71
        }
      },
      "11": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "12": {
        start: {
          line: 33,
          column: 35
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "13": {
        start: {
          line: 38,
          column: 32
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "14": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "15": {
        start: {
          line: 45,
          column: 22
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "16": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "17": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "18": {
        start: {
          line: 50,
          column: 39
        },
        end: {
          line: 50,
          column: 101
        }
      },
      "19": {
        start: {
          line: 52,
          column: 41
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "20": {
        start: {
          line: 75,
          column: 39
        },
        end: {
          line: 75,
          column: 100
        }
      },
      "21": {
        start: {
          line: 76,
          column: 42
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "22": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 79
        }
      },
      "23": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 75
        }
      },
      "24": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 81
        }
      },
      "25": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "26": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "27": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "28": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "30": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "31": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 58
        }
      },
      "32": {
        start: {
          line: 108,
          column: 22
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "33": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "34": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 66
        }
      },
      "35": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 120,
          column: 6
        }
      },
      "36": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 57
        }
      },
      "37": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 88
        }
      },
      "38": {
        start: {
          line: 127,
          column: 30
        },
        end: {
          line: 140,
          column: 6
        }
      },
      "39": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "40": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "41": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 65
        }
      },
      "42": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 146,
          column: 6
        }
      },
      "43": {
        start: {
          line: 149,
          column: 27
        },
        end: {
          line: 149,
          column: 95
        }
      },
      "44": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 89
        }
      },
      "45": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 171,
          column: 5
        }
      },
      "46": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 172,
          column: 48
        }
      },
      "47": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 189,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 36
          },
          end: {
            line: 14,
            column: 37
          }
        },
        loc: {
          start: {
            line: 14,
            column: 47
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 39
          }
        },
        loc: {
          start: {
            line: 17,
            column: 49
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 34
          }
        },
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 23,
            column: 41
          }
        },
        loc: {
          start: {
            line: 23,
            column: 51
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 27
          },
          end: {
            line: 38,
            column: 28
          }
        },
        loc: {
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 34
          }
        },
        line: 38
      },
      "6": {
        name: "createHistoryIntegratedCallbacks",
        decl: {
          start: {
            line: 40,
            column: 9
          },
          end: {
            line: 40,
            column: 41
          }
        },
        loc: {
          start: {
            line: 40,
            column: 67
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 40
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 23
          }
        },
        loc: {
          start: {
            line: 45,
            column: 56
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 45
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 93,
            column: 21
          }
        },
        loc: {
          start: {
            line: 93,
            column: 49
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 93
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 23
          }
        },
        loc: {
          start: {
            line: 108,
            column: 57
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 108
      },
      "10": {
        name: "useHistoryIntegratedMutationConfig",
        decl: {
          start: {
            line: 122,
            column: 9
          },
          end: {
            line: 122,
            column: 43
          }
        },
        loc: {
          start: {
            line: 122,
            column: 81
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 122
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 127,
            column: 54
          },
          end: {
            line: 127,
            column: 55
          }
        },
        loc: {
          start: {
            line: 127,
            column: 82
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 127
      },
      "12": {
        name: "createHistoryEntryFromMutation",
        decl: {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 148,
            column: 45
          }
        },
        loc: {
          start: {
            line: 148,
            column: 86
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 148
      },
      "13": {
        name: "createShareableHistoryEntry",
        decl: {
          start: {
            line: 174,
            column: 9
          },
          end: {
            line: 174,
            column: 36
          }
        },
        loc: {
          start: {
            line: 174,
            column: 44
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 174
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 42
          },
          end: {
            line: 40,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 51
          },
          end: {
            line: 40,
            column: 53
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 50,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 59
          },
          end: {
            line: 50,
            column: 89
          }
        }, {
          start: {
            line: 50,
            column: 92
          },
          end: {
            line: 50,
            column: 101
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 37
          }
        }, {
          start: {
            line: 95,
            column: 41
          },
          end: {
            line: 95,
            column: 62
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 98,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 98,
            column: 35
          }
        }, {
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 98,
            column: 94
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 98,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 65
          },
          end: {
            line: 98,
            column: 78
          }
        }, {
          start: {
            line: 98,
            column: 81
          },
          end: {
            line: 98,
            column: 94
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 44
          },
          end: {
            line: 122,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 122,
            column: 60
          },
          end: {
            line: 122,
            column: 62
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 64
          },
          end: {
            line: 122,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 122,
            column: 77
          },
          end: {
            line: 122,
            column: 79
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "13": {
        loc: {
          start: {
            line: 148,
            column: 72
          },
          end: {
            line: 148,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 148,
            column: 82
          },
          end: {
            line: 148,
            column: 84
          }
        }],
        line: 148
      },
      "14": {
        loc: {
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 149,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 149,
            column: 49
          }
        }, {
          start: {
            line: 149,
            column: 53
          },
          end: {
            line: 149,
            column: 95
          }
        }],
        line: 149
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 150,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 47
          },
          end: {
            line: 150,
            column: 77
          }
        }, {
          start: {
            line: 150,
            column: 80
          },
          end: {
            line: 150,
            column: 89
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 168,
            column: 14
          },
          end: {
            line: 168,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 14
          },
          end: {
            line: 168,
            column: 36
          }
        }, {
          start: {
            line: 168,
            column: 40
          },
          end: {
            line: 168,
            column: 42
          }
        }],
        line: 168
      },
      "17": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 170,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 170,
            column: 38
          }
        }, {
          start: {
            line: 170,
            column: 42
          },
          end: {
            line: 170,
            column: 47
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/historyIntegration.ts"],
      sourcesContent: ["// History Integration Utilities\n// Utilities for integrating try-on mutations with history tracking\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useCallback } from 'react';\nimport type {\n  TryonMutationResponse,\n  TryonMutationVariables,\n  TryonMutationContext,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\nimport type {\n  CreateTryonHistoryEntryOptions,\n  TryonHistoryService,\n  TryonHistoryEntry\n} from '../types/history.types';\nimport { defaultHistoryService } from '../services/tryonHistoryService';\nimport { HISTORY_QUERY_KEYS } from '../hooks/useTryonHistory';\n\n/**\n * Configuration for history integration\n */\nexport interface HistoryIntegrationConfig {\n  /** History service to use (defaults to defaultHistoryService) */\n  historyService?: TryonHistoryService;\n  /** Whether to automatically save successful try-ons to history */\n  autoSave?: boolean;\n  /** Whether to track errors in history metadata */\n  trackErrors?: boolean;\n  /** Additional tags to add to history entries */\n  defaultTags?: string[];\n  /** Transform function for customizing history entry creation */\n  transformHistoryEntry?: (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => Partial<CreateTryonHistoryEntryOptions>;\n}\n\n/**\n * Default configuration for history integration\n */\nconst DEFAULT_HISTORY_CONFIG: Required<HistoryIntegrationConfig> = {\n  historyService: defaultHistoryService,\n  autoSave: true,\n  trackErrors: true,\n  defaultTags: [],\n  transformHistoryEntry: () => ({})\n};\n\n/**\n * Create enhanced mutation callbacks that integrate with history tracking\n */\nexport function createHistoryIntegratedCallbacks(\n  config: HistoryIntegrationConfig = {},\n  userConfig?: UseTryonMutationConfig\n): Pick<UseTryonMutationConfig, 'onSuccess' | 'onError' | 'onSettled'> {\n  const historyConfig = { ...DEFAULT_HISTORY_CONFIG, ...config };\n\n  const onSuccess = async (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Auto-save to history if enabled\n    if (historyConfig.autoSave) {\n      try {\n        // Calculate processing time\n        const processingTime = context.startTime ? Date.now() - context.startTime : undefined;\n        \n        // Create base history entry options\n        const baseHistoryEntry: CreateTryonHistoryEntryOptions = {\n          generatedImage: data.img_generated,\n          modelImage: variables.modelImage,\n          apparelImages: variables.apparelImages,\n          processingTime,\n          metadata: {\n            modelVersion: data.metadata?.modelVersion,\n            appliedQuality: data.metadata?.appliedQuality,\n            processingConfig: {\n              imageProcessing: variables.options?.imageProcessing,\n              requestOptions: {\n                timeout: variables.options?.timeout,\n                quality: variables.options?.quality\n              }\n            },\n            imageProcessingResults: context.imageProcessingResults\n          },\n          tags: [...historyConfig.defaultTags],\n          isFavorite: false\n        };\n\n        // Apply custom transformation if provided\n        const customizations = historyConfig.transformHistoryEntry(data, variables, context);\n        const finalHistoryEntry = { ...baseHistoryEntry, ...customizations };\n\n        // Save to history\n        await historyConfig.historyService.addEntry(finalHistoryEntry);\n        \n        console.log('Successfully saved try-on result to history');\n      } catch (error) {\n        console.error('Failed to save try-on result to history:', error);\n        // Don't throw - history saving shouldn't break the main flow\n      }\n    }\n\n    // Call user-provided onSuccess callback\n    if (userConfig?.onSuccess) {\n      userConfig.onSuccess(data, variables, context);\n    }\n  };\n\n  const onError = (\n    error: unknown, // Using unknown for better type safety\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Track errors in history metadata if enabled\n    if (historyConfig.trackErrors && context.previousError) {\n      // This could be enhanced to create error-only history entries or update metadata\n      console.log('Error tracked for history integration:', {\n        error: (error as Record<string, unknown>)?.error || (error instanceof Error ? error.message : String(error)),\n        timestamp: new Date().toISOString(),\n        retryAttempt: context.retryCount\n      });\n    }\n\n    // Call user-provided onError callback\n    if (userConfig?.onError) {\n      userConfig.onError(error, variables, context);\n    }\n  };\n\n  const onSettled = (\n    data: TryonMutationResponse | undefined,\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Additional settled handling could go here\n    // For example, updating analytics or logging\n\n    // Call user-provided onSettled callback\n    if (userConfig?.onSettled) {\n      userConfig.onSettled(data, error, variables, context);\n    }\n  };\n\n  return {\n    onSuccess,\n    onError,\n    onSettled\n  };\n}\n\n/**\n * Hook for creating history-integrated mutation configuration\n */\nexport function useHistoryIntegratedMutationConfig(\n  historyConfig: HistoryIntegrationConfig = {},\n  userConfig: UseTryonMutationConfig = {}\n): UseTryonMutationConfig {\n  const queryClient = useQueryClient();\n\n  // Create history-integrated callbacks\n  const historyCallbacks = createHistoryIntegratedCallbacks(historyConfig, userConfig);\n\n  // Enhanced onSuccess that also invalidates history queries\n  const enhancedOnSuccess = useCallback((\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Invalidate history queries to ensure fresh data\n    queryClient.invalidateQueries({ \n      queryKey: HISTORY_QUERY_KEYS.all,\n      exact: false \n    });\n\n    // Call the history-integrated onSuccess\n    if (historyCallbacks.onSuccess) {\n      historyCallbacks.onSuccess(data, variables, context);\n    }\n  }, [queryClient, historyCallbacks]);\n\n  return {\n    ...userConfig,\n    onSuccess: enhancedOnSuccess,\n    onError: historyCallbacks.onError,\n    onSettled: historyCallbacks.onSettled\n  };\n}\n\n/**\n * Utility function to create a history entry from mutation results\n * Can be used for manual history entry creation\n */\nexport async function createHistoryEntryFromMutation(\n  data: TryonMutationResponse,\n  variables: TryonMutationVariables,\n  context: TryonMutationContext,\n  options: {\n    historyService?: TryonHistoryService;\n    additionalTags?: string[];\n    notes?: string;\n    isFavorite?: boolean;\n  } = {}\n): Promise<void> {\n  const historyService = options.historyService || defaultHistoryService;\n  \n  const processingTime = context.startTime ? Date.now() - context.startTime : undefined;\n  \n  const historyEntry: CreateTryonHistoryEntryOptions = {\n    generatedImage: data.img_generated,\n    modelImage: variables.modelImage,\n    apparelImages: variables.apparelImages,\n    processingTime,\n    metadata: {\n      modelVersion: data.metadata?.modelVersion,\n      appliedQuality: data.metadata?.appliedQuality,\n      processingConfig: {\n        imageProcessing: variables.options?.imageProcessing,\n        requestOptions: {\n          timeout: variables.options?.timeout,\n          quality: variables.options?.quality\n        }\n      },\n      imageProcessingResults: context.imageProcessingResults\n    },\n    tags: options.additionalTags || [],\n    notes: options.notes,\n    isFavorite: options.isFavorite || false\n  };\n\n  await historyService.addEntry(historyEntry);\n}\n\n/**\n * Utility function to extract shareable data from a history entry\n */\nexport function createShareableHistoryEntry(entry: TryonHistoryEntry) {\n  return {\n    id: entry.id,\n    timestamp: entry.timestamp,\n    generatedImage: entry.generatedImage,\n    processingTime: entry.processingTime,\n    tags: entry.tags,\n    isFavorite: entry.isFavorite,\n    notes: entry.notes,\n    // Don't include original images for privacy in sharing\n    metadata: {\n      modelVersion: entry.metadata?.modelVersion,\n      appliedQuality: entry.metadata?.appliedQuality,\n      processingTime: entry.processingTime\n    }\n  };\n}"],
      names: ["createHistoryEntryFromMutation", "createHistoryIntegratedCallbacks", "createShareableHistoryEntry", "useHistoryIntegratedMutationConfig", "DEFAULT_HISTORY_CONFIG", "historyService", "defaultHistoryService", "autoSave", "trackErrors", "defaultTags", "transformHistoryEntry", "config", "userConfig", "historyConfig", "onSuccess", "data", "variables", "context", "processingTime", "startTime", "Date", "now", "undefined", "baseHistoryEntry", "generatedImage", "img_generated", "modelImage", "apparelImages", "metadata", "modelVersion", "appliedQuality", "processingConfig", "imageProcessing", "options", "requestOptions", "timeout", "quality", "imageProcessingResults", "tags", "isFavorite", "customizations", "finalHistoryEntry", "addEntry", "console", "log", "error", "onError", "previousError", "Error", "message", "String", "timestamp", "toISOString", "retryAttempt", "retryCount", "onSettled", "queryClient", "useQueryClient", "historyCallbacks", "enhancedOnSuccess", "useCallback", "invalidateQueries", "queryKey", "HISTORY_QUERY_KEYS", "all", "exact", "historyEntry", "additionalTags", "notes", "entry", "id"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ee9da3068ed267f455fa15c45b3f53a4d9f3f7c5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19itmxf1mi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19itmxf1mi();
cov_19itmxf1mi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_19itmxf1mi().f[0]++;
  cov_19itmxf1mi().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_19itmxf1mi().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_19itmxf1mi().s[3]++;
_export(exports, {
  createHistoryEntryFromMutation: function () {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[1]++;
    cov_19itmxf1mi().s[4]++;
    return createHistoryEntryFromMutation;
  },
  createHistoryIntegratedCallbacks: function () {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[2]++;
    cov_19itmxf1mi().s[5]++;
    return createHistoryIntegratedCallbacks;
  },
  createShareableHistoryEntry: function () {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[3]++;
    cov_19itmxf1mi().s[6]++;
    return createShareableHistoryEntry;
  },
  useHistoryIntegratedMutationConfig: function () {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[4]++;
    cov_19itmxf1mi().s[7]++;
    return useHistoryIntegratedMutationConfig;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_19itmxf1mi().s[8]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_19itmxf1mi().s[9]++, require("react"));
const _tryonHistoryService =
/* istanbul ignore next */
(cov_19itmxf1mi().s[10]++, require("../services/tryonHistoryService"));
const _useTryonHistory =
/* istanbul ignore next */
(cov_19itmxf1mi().s[11]++, require("../hooks/useTryonHistory"));
/**
 * Default configuration for history integration
 */
const DEFAULT_HISTORY_CONFIG =
/* istanbul ignore next */
(cov_19itmxf1mi().s[12]++, {
  historyService: _tryonHistoryService.defaultHistoryService,
  autoSave: true,
  trackErrors: true,
  defaultTags: [],
  transformHistoryEntry: () => {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[5]++;
    cov_19itmxf1mi().s[13]++;
    return {};
  }
});
function createHistoryIntegratedCallbacks(config =
/* istanbul ignore next */
(cov_19itmxf1mi().b[0][0]++, {}), userConfig) {
  /* istanbul ignore next */
  cov_19itmxf1mi().f[6]++;
  const historyConfig =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[14]++, {
    ...DEFAULT_HISTORY_CONFIG,
    ...config
  });
  /* istanbul ignore next */
  cov_19itmxf1mi().s[15]++;
  const onSuccess = async (data, variables, context) => {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[7]++;
    cov_19itmxf1mi().s[16]++;
    // Auto-save to history if enabled
    if (historyConfig.autoSave) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[1][0]++;
      cov_19itmxf1mi().s[17]++;
      try {
        // Calculate processing time
        const processingTime =
        /* istanbul ignore next */
        (cov_19itmxf1mi().s[18]++, context.startTime ?
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[2][0]++, Date.now() - context.startTime) :
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[2][1]++, undefined));
        // Create base history entry options
        const baseHistoryEntry =
        /* istanbul ignore next */
        (cov_19itmxf1mi().s[19]++, {
          generatedImage: data.img_generated,
          modelImage: variables.modelImage,
          apparelImages: variables.apparelImages,
          processingTime,
          metadata: {
            modelVersion: data.metadata?.modelVersion,
            appliedQuality: data.metadata?.appliedQuality,
            processingConfig: {
              imageProcessing: variables.options?.imageProcessing,
              requestOptions: {
                timeout: variables.options?.timeout,
                quality: variables.options?.quality
              }
            },
            imageProcessingResults: context.imageProcessingResults
          },
          tags: [...historyConfig.defaultTags],
          isFavorite: false
        });
        // Apply custom transformation if provided
        const customizations =
        /* istanbul ignore next */
        (cov_19itmxf1mi().s[20]++, historyConfig.transformHistoryEntry(data, variables, context));
        const finalHistoryEntry =
        /* istanbul ignore next */
        (cov_19itmxf1mi().s[21]++, {
          ...baseHistoryEntry,
          ...customizations
        });
        // Save to history
        /* istanbul ignore next */
        cov_19itmxf1mi().s[22]++;
        await historyConfig.historyService.addEntry(finalHistoryEntry);
        /* istanbul ignore next */
        cov_19itmxf1mi().s[23]++;
        console.log('Successfully saved try-on result to history');
      } catch (error) {
        /* istanbul ignore next */
        cov_19itmxf1mi().s[24]++;
        console.error('Failed to save try-on result to history:', error);
        // Don't throw - history saving shouldn't break the main flow
      }
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[1][1]++;
    }
    // Call user-provided onSuccess callback
    cov_19itmxf1mi().s[25]++;
    if (userConfig?.onSuccess) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[3][0]++;
      cov_19itmxf1mi().s[26]++;
      userConfig.onSuccess(data, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[3][1]++;
    }
  };
  /* istanbul ignore next */
  cov_19itmxf1mi().s[27]++;
  const onError = (error, variables, context) => {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[8]++;
    cov_19itmxf1mi().s[28]++;
    // Track errors in history metadata if enabled
    if (
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[5][0]++, historyConfig.trackErrors) &&
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[5][1]++, context.previousError)) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[4][0]++;
      cov_19itmxf1mi().s[29]++;
      // This could be enhanced to create error-only history entries or update metadata
      console.log('Error tracked for history integration:', {
        error:
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[6][0]++, error?.error) ||
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[6][1]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_19itmxf1mi().b[7][1]++, String(error))),
        timestamp: new Date().toISOString(),
        retryAttempt: context.retryCount
      });
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[4][1]++;
    }
    // Call user-provided onError callback
    cov_19itmxf1mi().s[30]++;
    if (userConfig?.onError) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[8][0]++;
      cov_19itmxf1mi().s[31]++;
      userConfig.onError(error, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[8][1]++;
    }
  };
  /* istanbul ignore next */
  cov_19itmxf1mi().s[32]++;
  const onSettled = (data, error, variables, context) => {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[9]++;
    cov_19itmxf1mi().s[33]++;
    // Additional settled handling could go here
    // For example, updating analytics or logging
    // Call user-provided onSettled callback
    if (userConfig?.onSettled) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[9][0]++;
      cov_19itmxf1mi().s[34]++;
      userConfig.onSettled(data, error, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[9][1]++;
    }
  };
  /* istanbul ignore next */
  cov_19itmxf1mi().s[35]++;
  return {
    onSuccess,
    onError,
    onSettled
  };
}
function useHistoryIntegratedMutationConfig(historyConfig =
/* istanbul ignore next */
(cov_19itmxf1mi().b[10][0]++, {}), userConfig =
/* istanbul ignore next */
(cov_19itmxf1mi().b[11][0]++, {})) {
  /* istanbul ignore next */
  cov_19itmxf1mi().f[10]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[36]++, (0, _reactquery.useQueryClient)());
  // Create history-integrated callbacks
  const historyCallbacks =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[37]++, createHistoryIntegratedCallbacks(historyConfig, userConfig));
  // Enhanced onSuccess that also invalidates history queries
  const enhancedOnSuccess =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[38]++, (0, _react.useCallback)((data, variables, context) => {
    /* istanbul ignore next */
    cov_19itmxf1mi().f[11]++;
    cov_19itmxf1mi().s[39]++;
    // Invalidate history queries to ensure fresh data
    queryClient.invalidateQueries({
      queryKey: _useTryonHistory.HISTORY_QUERY_KEYS.all,
      exact: false
    });
    // Call the history-integrated onSuccess
    /* istanbul ignore next */
    cov_19itmxf1mi().s[40]++;
    if (historyCallbacks.onSuccess) {
      /* istanbul ignore next */
      cov_19itmxf1mi().b[12][0]++;
      cov_19itmxf1mi().s[41]++;
      historyCallbacks.onSuccess(data, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_19itmxf1mi().b[12][1]++;
    }
  }, [queryClient, historyCallbacks]));
  /* istanbul ignore next */
  cov_19itmxf1mi().s[42]++;
  return {
    ...userConfig,
    onSuccess: enhancedOnSuccess,
    onError: historyCallbacks.onError,
    onSettled: historyCallbacks.onSettled
  };
}
async function createHistoryEntryFromMutation(data, variables, context, options =
/* istanbul ignore next */
(cov_19itmxf1mi().b[13][0]++, {})) {
  /* istanbul ignore next */
  cov_19itmxf1mi().f[12]++;
  const historyService =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[43]++,
  /* istanbul ignore next */
  (cov_19itmxf1mi().b[14][0]++, options.historyService) ||
  /* istanbul ignore next */
  (cov_19itmxf1mi().b[14][1]++, _tryonHistoryService.defaultHistoryService));
  const processingTime =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[44]++, context.startTime ?
  /* istanbul ignore next */
  (cov_19itmxf1mi().b[15][0]++, Date.now() - context.startTime) :
  /* istanbul ignore next */
  (cov_19itmxf1mi().b[15][1]++, undefined));
  const historyEntry =
  /* istanbul ignore next */
  (cov_19itmxf1mi().s[45]++, {
    generatedImage: data.img_generated,
    modelImage: variables.modelImage,
    apparelImages: variables.apparelImages,
    processingTime,
    metadata: {
      modelVersion: data.metadata?.modelVersion,
      appliedQuality: data.metadata?.appliedQuality,
      processingConfig: {
        imageProcessing: variables.options?.imageProcessing,
        requestOptions: {
          timeout: variables.options?.timeout,
          quality: variables.options?.quality
        }
      },
      imageProcessingResults: context.imageProcessingResults
    },
    tags:
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[16][0]++, options.additionalTags) ||
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[16][1]++, []),
    notes: options.notes,
    isFavorite:
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[17][0]++, options.isFavorite) ||
    /* istanbul ignore next */
    (cov_19itmxf1mi().b[17][1]++, false)
  });
  /* istanbul ignore next */
  cov_19itmxf1mi().s[46]++;
  await historyService.addEntry(historyEntry);
}
function createShareableHistoryEntry(entry) {
  /* istanbul ignore next */
  cov_19itmxf1mi().f[13]++;
  cov_19itmxf1mi().s[47]++;
  return {
    id: entry.id,
    timestamp: entry.timestamp,
    generatedImage: entry.generatedImage,
    processingTime: entry.processingTime,
    tags: entry.tags,
    isFavorite: entry.isFavorite,
    notes: entry.notes,
    // Don't include original images for privacy in sharing
    metadata: {
      modelVersion: entry.metadata?.modelVersion,
      appliedQuality: entry.metadata?.appliedQuality,
      processingTime: entry.processingTime
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,