22b3d6df599d2be4156e252853aaced7
// Text Overlay System for Canvas
// Comprehensive text rendering with styling, positioning, and measurement
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_TEXT_STYLE: function() {
        return DEFAULT_TEXT_STYLE;
    },
    TextAlign: function() {
        return TextAlign;
    },
    TextBaseline: function() {
        return TextBaseline;
    },
    TextOverlayRenderer: function() {
        return TextOverlayRenderer;
    },
    TextOverlayUtils: function() {
        return TextOverlayUtils;
    },
    createTextOverlayRenderer: function() {
        return createTextOverlayRenderer;
    }
});
var TextAlign = /*#__PURE__*/ function(TextAlign) {
    TextAlign["Left"] = "left";
    TextAlign["Center"] = "center";
    TextAlign["Right"] = "right";
    TextAlign["Start"] = "start";
    TextAlign["End"] = "end";
    return TextAlign;
}({});
var TextBaseline = /*#__PURE__*/ function(TextBaseline) {
    TextBaseline["Top"] = "top";
    TextBaseline["Hanging"] = "hanging";
    TextBaseline["Middle"] = "middle";
    TextBaseline["Alphabetic"] = "alphabetic";
    TextBaseline["Ideographic"] = "ideographic";
    TextBaseline["Bottom"] = "bottom";
    return TextBaseline;
}({});
const DEFAULT_TEXT_STYLE = {
    fontFamily: 'Arial, sans-serif',
    fontSize: 16,
    fontWeight: 'normal',
    fontStyle: 'normal',
    color: '#000000',
    textAlign: "left",
    textBaseline: "top",
    lineHeight: 1.2,
    letterSpacing: 0,
    opacity: 1,
    textTransform: 'none'
};
class TextOverlayRenderer {
    constructor(managedCanvas){
        this.canvas = managedCanvas.canvas;
        this.ctx = managedCanvas.context;
    }
    /**
   * Apply text transform
   */ applyTextTransform(text, transform) {
        switch(transform){
            case 'uppercase':
                return text.toUpperCase();
            case 'lowercase':
                return text.toLowerCase();
            case 'capitalize':
                return text.replace(/\b\w/g, (l)=>l.toUpperCase());
            default:
                return text;
        }
    }
    /**
   * Build font string from style
   */ buildFontString(style) {
        const fontStyle = style.fontStyle || DEFAULT_TEXT_STYLE.fontStyle;
        const fontWeight = style.fontWeight || DEFAULT_TEXT_STYLE.fontWeight;
        const fontSize = style.fontSize || DEFAULT_TEXT_STYLE.fontSize;
        const fontFamily = style.fontFamily || DEFAULT_TEXT_STYLE.fontFamily;
        return `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;
    }
    /**
   * Apply text styling to context
   */ applyTextStyle(style) {
        this.ctx.font = this.buildFontString(style);
        this.ctx.textAlign = style.textAlign || DEFAULT_TEXT_STYLE.textAlign;
        this.ctx.textBaseline = style.textBaseline || DEFAULT_TEXT_STYLE.textBaseline;
        this.ctx.globalAlpha = style.opacity || DEFAULT_TEXT_STYLE.opacity;
        // Handle gradient fill
        if (style.gradient) {
            this.ctx.fillStyle = this.createTextGradient(style.gradient);
        } else {
            this.ctx.fillStyle = style.color || DEFAULT_TEXT_STYLE.color;
        }
        // Handle outline
        if (style.outline) {
            this.ctx.strokeStyle = style.outline.color;
            this.ctx.lineWidth = style.outline.width;
        }
    }
    /**
   * Create gradient for text
   */ createTextGradient(gradient) {
        let canvasGradient;
        if (gradient.type === 'linear') {
            canvasGradient = this.ctx.createLinearGradient(gradient.x1 || 0, gradient.y1 || 0, gradient.x2 || 100, gradient.y2 || 0);
        } else {
            canvasGradient = this.ctx.createRadialGradient(gradient.x1 || 0, gradient.y1 || 0, gradient.r1 || 0, gradient.x2 || 0, gradient.y2 || 0, gradient.r2 || 100);
        }
        gradient.colors.forEach((stop)=>{
            canvasGradient.addColorStop(stop.offset, stop.color);
        });
        return canvasGradient;
    }
    /**
   * Wrap text to fit within specified width
   */ wrapText(text, maxWidth, style, wrapOptions) {
        if (!wrapOptions?.enabled || !maxWidth) {
            return [
                text
            ];
        }
        this.applyTextStyle(style);
        const words = text.split(' ');
        const lines = [];
        let currentLine = '';
        for (const word of words){
            const testLine = currentLine + (currentLine ? ' ' : '') + word;
            const metrics = this.ctx.measureText(testLine);
            if (metrics.width > maxWidth && currentLine) {
                lines.push(currentLine);
                currentLine = word;
                // Handle long words
                if (wrapOptions.breakWords && this.ctx.measureText(currentLine).width > maxWidth) {
                    const chars = currentLine.split('');
                    let charLine = '';
                    for (const char of chars){
                        const testCharLine = charLine + char;
                        if (this.ctx.measureText(testCharLine).width > maxWidth && charLine) {
                            lines.push(charLine);
                            charLine = char;
                        } else {
                            charLine = testCharLine;
                        }
                    }
                    currentLine = charLine;
                }
            } else {
                currentLine = testLine;
            }
        }
        if (currentLine) {
            lines.push(currentLine);
        }
        return lines;
    }
    /**
   * Measure text dimensions
   */ measureText(text, style, position, wrapOptions) {
        this.applyTextStyle(style);
        const transformedText = this.applyTextTransform(text, style.textTransform);
        const lines = this.wrapText(transformedText, position.maxWidth || 0, style, wrapOptions);
        const lineHeight = (style.fontSize || DEFAULT_TEXT_STYLE.fontSize) * (style.lineHeight || DEFAULT_TEXT_STYLE.lineHeight);
        let maxWidth = 0;
        const lineData = lines.map((line, index)=>{
            const metrics = this.ctx.measureText(line);
            maxWidth = Math.max(maxWidth, metrics.width);
            return {
                text: line,
                width: metrics.width,
                y: index * lineHeight
            };
        });
        const totalHeight = lines.length * lineHeight;
        // Calculate bounding box based on anchor
        const anchor = position.anchor || {
            x: 'left',
            y: 'top'
        };
        let boundingX = position.x;
        let boundingY = position.y;
        if (anchor.x === 'center') {
            boundingX -= maxWidth / 2;
        } else if (anchor.x === 'right') {
            boundingX -= maxWidth;
        }
        if (anchor.y === 'middle') {
            boundingY -= totalHeight / 2;
        } else if (anchor.y === 'bottom') {
            boundingY -= totalHeight;
        }
        return {
            width: maxWidth,
            height: totalHeight,
            lineHeight,
            lineCount: lines.length,
            lines: lineData,
            boundingBox: {
                x: boundingX,
                y: boundingY,
                width: maxWidth,
                height: totalHeight
            }
        };
    }
    /**
   * Draw text shadow
   */ drawTextShadow(text, x, y, shadow) {
        this.ctx.save();
        this.ctx.shadowColor = shadow.color;
        this.ctx.shadowOffsetX = shadow.offsetX;
        this.ctx.shadowOffsetY = shadow.offsetY;
        this.ctx.shadowBlur = shadow.blur;
        this.ctx.fillText(text, x, y);
        this.ctx.restore();
    }
    /**
   * Draw text decoration (underline, overline, strikethrough)
   */ drawTextDecoration(text, x, y, width, style) {
        if (!style.decoration) return;
        const fontSize = style.fontSize || DEFAULT_TEXT_STYLE.fontSize;
        const thickness = style.decoration.thickness || 1;
        const color = style.decoration.color || style.color || DEFAULT_TEXT_STYLE.color;
        this.ctx.save();
        this.ctx.strokeStyle = color;
        this.ctx.lineWidth = thickness;
        this.ctx.beginPath();
        if (style.decoration.underline) {
            const underlineY = y + fontSize * 0.1;
            this.ctx.moveTo(x, underlineY);
            this.ctx.lineTo(x + width, underlineY);
        }
        if (style.decoration.overline) {
            const overlineY = y - fontSize * 0.8;
            this.ctx.moveTo(x, overlineY);
            this.ctx.lineTo(x + width, overlineY);
        }
        if (style.decoration.lineThrough) {
            const lineThroughY = y - fontSize * 0.3;
            this.ctx.moveTo(x, lineThroughY);
            this.ctx.lineTo(x + width, lineThroughY);
        }
        this.ctx.stroke();
        this.ctx.restore();
    }
    /**
   * Draw background for text
   */ drawTextBackground(measurement, background) {
        const padding = background.padding || 0;
        const x = measurement.boundingBox.x - padding;
        const y = measurement.boundingBox.y - padding;
        const width = measurement.boundingBox.width + padding * 2;
        const height = measurement.boundingBox.height + padding * 2;
        this.ctx.save();
        this.ctx.globalAlpha = background.opacity || 1;
        if (background.gradient) {
            this.ctx.fillStyle = this.createTextGradient(background.gradient);
        } else {
            this.ctx.fillStyle = background.color || 'rgba(255, 255, 255, 0.8)';
        }
        if (background.borderRadius) {
            this.drawRoundedRect(x, y, width, height, background.borderRadius);
            this.ctx.fill();
        } else {
            this.ctx.fillRect(x, y, width, height);
        }
        this.ctx.restore();
    }
    /**
   * Draw rounded rectangle
   */ drawRoundedRect(x, y, width, height, radius) {
        this.ctx.beginPath();
        this.ctx.moveTo(x + radius, y);
        this.ctx.lineTo(x + width - radius, y);
        this.ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        this.ctx.lineTo(x + width, y + height - radius);
        this.ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        this.ctx.lineTo(x + radius, y + height);
        this.ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        this.ctx.lineTo(x, y + radius);
        this.ctx.quadraticCurveTo(x, y, x + radius, y);
        this.ctx.closePath();
    }
    /**
   * Render text overlay
   */ renderText(config) {
        const { text, style, position, wrap, background } = config;
        this.ctx.save();
        // Apply rotation if specified
        if (position.rotation) {
            this.ctx.translate(position.x, position.y);
            this.ctx.rotate(position.rotation);
            this.ctx.translate(-position.x, -position.y);
        }
        // Measure text
        const measurement = this.measureText(text, style, position, wrap);
        // Draw background if specified
        if (background) {
            this.drawTextBackground(measurement, background);
        }
        // Apply text styling
        this.applyTextStyle(style);
        // Calculate starting position based on anchor
        const anchor = position.anchor || {
            x: 'left',
            y: 'top'
        };
        let startX = position.x;
        let startY = position.y;
        if (anchor.x === 'center') {
            startX -= measurement.width / 2;
        } else if (anchor.x === 'right') {
            startX -= measurement.width;
        }
        if (anchor.y === 'middle') {
            startY -= measurement.height / 2;
        } else if (anchor.y === 'bottom') {
            startY -= measurement.height;
        }
        // Draw each line
        measurement.lines.forEach((line, index)=>{
            const lineX = startX;
            const lineY = startY + line.y;
            // Adjust line position based on text alignment
            let adjustedX = lineX;
            if (style.textAlign === "center") {
                adjustedX = startX + (measurement.width - line.width) / 2;
            } else if (style.textAlign === "right") {
                adjustedX = startX + measurement.width - line.width;
            }
            // Draw shadow first if specified
            if (style.shadow) {
                this.drawTextShadow(line.text, adjustedX, lineY, style.shadow);
            }
            // Draw text outline if specified
            if (style.outline) {
                this.ctx.strokeText(line.text, adjustedX, lineY);
            }
            // Draw main text
            this.ctx.fillText(line.text, adjustedX, lineY);
            // Draw text decoration if specified
            if (style.decoration) {
                this.drawTextDecoration(line.text, adjustedX, lineY, line.width, style);
            }
        });
        this.ctx.restore();
        return measurement;
    }
    /**
   * Clear text from specific area
   */ clearText(measurement, padding = 0) {
        const { x, y, width, height } = measurement.boundingBox;
        this.ctx.clearRect(x - padding, y - padding, width + padding * 2, height + padding * 2);
    }
}
class TextOverlayUtils {
    /**
   * Calculate optimal font size to fit text in area
   */ static calculateOptimalFontSize(text, maxWidth, maxHeight, style, canvas) {
        const ctx = canvas.getContext('2d');
        if (!ctx) throw new Error('Could not get canvas context');
        let fontSize = style.fontSize || 16;
        let testStyle = {
            ...style,
            fontSize
        };
        // Binary search for optimal font size
        let minSize = 1;
        let maxSize = 200;
        while(minSize < maxSize - 1){
            fontSize = Math.floor((minSize + maxSize) / 2);
            testStyle.fontSize = fontSize;
            ctx.font = `${testStyle.fontStyle || 'normal'} ${testStyle.fontWeight || 'normal'} ${fontSize}px ${testStyle.fontFamily || 'Arial'}`;
            const metrics = ctx.measureText(text);
            const textHeight = fontSize * (testStyle.lineHeight || 1.2);
            if (metrics.width <= maxWidth && textHeight <= maxHeight) {
                minSize = fontSize;
            } else {
                maxSize = fontSize;
            }
        }
        return minSize;
    }
    /**
   * Create text preset configurations
   */ static createPresets() {
        return {
            title: {
                style: {
                    ...DEFAULT_TEXT_STYLE,
                    fontSize: 32,
                    fontWeight: 'bold',
                    color: '#2c3e50'
                }
            },
            subtitle: {
                style: {
                    ...DEFAULT_TEXT_STYLE,
                    fontSize: 24,
                    fontWeight: '600',
                    color: '#34495e'
                }
            },
            body: {
                style: {
                    ...DEFAULT_TEXT_STYLE,
                    fontSize: 16,
                    color: '#2c3e50',
                    lineHeight: 1.5
                }
            },
            caption: {
                style: {
                    ...DEFAULT_TEXT_STYLE,
                    fontSize: 12,
                    color: '#7f8c8d',
                    fontStyle: 'italic'
                }
            },
            watermark: {
                style: {
                    ...DEFAULT_TEXT_STYLE,
                    fontSize: 14,
                    color: 'rgba(255, 255, 255, 0.7)',
                    shadow: {
                        color: 'rgba(0, 0, 0, 0.3)',
                        offsetX: 1,
                        offsetY: 1,
                        blur: 2
                    }
                }
            }
        };
    }
}
function createTextOverlayRenderer(managedCanvas) {
    return new TextOverlayRenderer(managedCanvas);
}

//# sourceMappingURL=data:application/json;base64,