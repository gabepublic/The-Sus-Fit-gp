819f349d35387f18135f487d4ac92142
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BrutalismCard", {
    enumerable: true,
    get: function() {
        return BrutalismCard;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _utils = require("../../lib/utils");
const _react = require("react");
function BrutalismCard({ className, title = "Upload Your Angle", children, buttonPosition = "left", backgroundImage = '/images/zestyVogueColor.jpg', shadowRotation = "rotate-0", onImageUpload, onFileUpload }) {
    const [uploadedImage, setUploadedImage] = (0, _react.useState)(null);
    const [isDragging, setIsDragging] = (0, _react.useState)(false);
    const fileInputId = (0, _react.useId)();
    const handleFileChange = (event)=>{
        const file = event.target.files?.[0];
        if (file) {
            // Basic validation
            if (!file.type.startsWith('image/')) {
                console.error('Selected file is not an image');
                return;
            }
            if (file.size > 5 * 1024 * 1024) {
                console.error('Image file is too large (max 5MB)');
                return;
            }
            // Call onFileUpload callback if provided
            if (onFileUpload) {
                onFileUpload(file);
            }
            const reader = new FileReader();
            reader.onload = (e)=>{
                const imageUrl = e.target?.result;
                setUploadedImage(imageUrl);
                if (onImageUpload) {
                    onImageUpload(imageUrl);
                }
            };
            reader.readAsDataURL(file);
        }
    };
    const handleDragOver = (e)=>{
        e.preventDefault();
        setIsDragging(true);
    };
    const handleDragLeave = ()=>{
        setIsDragging(false);
    };
    const handleDrop = (e)=>{
        e.preventDefault();
        setIsDragging(false);
        const file = e.dataTransfer.files?.[0];
        if (file && file.type.startsWith('image/')) {
            // Basic validation
            if (file.size > 5 * 1024 * 1024) {
                console.error('Image file is too large (max 5MB)');
                return;
            }
            // Call onFileUpload callback if provided
            if (onFileUpload) {
                onFileUpload(file);
            }
            const reader = new FileReader();
            reader.onload = (e)=>{
                const imageUrl = e.target?.result;
                setUploadedImage(imageUrl);
                if (onImageUpload) {
                    onImageUpload(imageUrl);
                }
            };
            reader.readAsDataURL(file);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("relative group p-10", className),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)("absolute top-8 left-[9%] w-[91%] h-[93%] bg-[var(--color-susfit-teal)] rounded-sm transform border-2 border-black", shadowRotation)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: (0, _utils.cn)("relative bg-[#7BB3D9] border-2 border-black rounded-md p-4 transform transition-transform group-hover:translate-x-1 group-hover:translate-y-1 h-full before:absolute before:inset-0", isDragging ? "border-dashed border-4 border-[var(--color-susfit-green)]" : "", !uploadedImage ? "before:bg-gradient-to-t before:from-white/30 before:via-black/10 before:to-white/20 before:backdrop-blur-[2px] before:rounded-md before:pointer-events-none" : ""),
                style: {
                    backgroundImage: uploadedImage ? `url('${uploadedImage}')` : `url('${backgroundImage}')`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center'
                },
                onDragOver: handleDragOver,
                onDragLeave: handleDragLeave,
                onDrop: handleDrop,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "file",
                        id: fileInputId,
                        className: "hidden",
                        accept: "image/*",
                        onChange: handleFileChange,
                        "data-test": title === "Upload Your Angle" ? "model-upload" : "apparel-upload"
                    }),
                    !uploadedImage && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute top-[20%] left-1/2 transform -translate-x-1/2 z-10",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "text-[var(--color-susfit-green)] text-6xl",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("svg", {
                                width: "120",
                                height: "120",
                                viewBox: "0 0 24 24",
                                fill: "none",
                                stroke: "currentColor",
                                strokeWidth: "1",
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                className: "transform",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                        d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("polyline", {
                                        points: "7,10 12,15 17,10"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("line", {
                                        x1: "12",
                                        y1: "15",
                                        x2: "12",
                                        y2: "3"
                                    })
                                ]
                            })
                        })
                    }),
                    children,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: (0, _utils.cn)("absolute bottom-[15%] w-[calc(100%+16px)] transform", buttonPosition === "left" ? "-left-10" : "-right-14"),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "relative",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: (0, _utils.cn)("absolute w-full h-full bg-[var(--color-susfit-teal)] rounded-md border-2 border-black", buttonPosition === "left" ? "-bottom-2 -right-2" : "-bottom-2 -left-2")
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                    htmlFor: fileInputId,
                                    role: "button",
                                    className: "relative w-full bg-[var(--color-susfit-pink)] border-2 border-black px-4 py-2 rounded-md font-bold text-black text-lg block text-center cursor-pointer",
                                    children: title
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,