5b09ee010ac4c6e550174702105e5ac4
// Business Layer Main Export
// Public API for the business layer - only export what should be consumed by other layers
// Configuration and setup
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BatchExportManager: function() {
        return _imageExport.BatchExportManager;
    },
    ConsoleErrorLogger: function() {
        return _utils.ConsoleErrorLogger;
    },
    DEFAULT_EXPORT_CONFIG: function() {
        return _imageExport.DEFAULT_EXPORT_CONFIG;
    },
    DEFAULT_PROCESSING_OPTIONS: function() {
        return _utils.DEFAULT_PROCESSING_OPTIONS;
    },
    ErrorBoundary: function() {
        return _providers.ErrorBoundary;
    },
    ErrorCategory: function() {
        return _utils.ErrorCategory;
    },
    ErrorSeverity: function() {
        return _utils.ErrorSeverity;
    },
    ExportFormat: function() {
        return _imageExport.ExportFormat;
    },
    FeatureFlagContext: function() {
        return _providers.FeatureFlagContext;
    },
    FeatureFlagProvider: function() {
        return _providers.FeatureFlagProvider;
    },
    HISTORY_QUERY_KEYS: function() {
        return _useTryonHistory.HISTORY_QUERY_KEYS;
    },
    ImageDimensionError: function() {
        return _utils.ImageDimensionError;
    },
    ImageExporter: function() {
        return _imageExport.ImageExporter;
    },
    ImageProcessingError: function() {
        return _utils.ImageProcessingError;
    },
    ImageProcessingOperation: function() {
        return _queries.ImageProcessingOperation;
    },
    LocalStorageTryonHistoryService: function() {
        return _tryonHistoryService.LocalStorageTryonHistoryService;
    },
    QualityPreset: function() {
        return _imageExport.QualityPreset;
    },
    ReactQueryProvider: function() {
        return _providers.ReactQueryProvider;
    },
    classifyTryonError: function() {
        return _utils.classifyTryonError;
    },
    clearQueryCache: function() {
        return _config.clearQueryCache;
    },
    createApiError: function() {
        return _types.createApiError;
    },
    createApiQueryConfig: function() {
        return _config.createApiQueryConfig;
    },
    createBatchExportManager: function() {
        return _imageExport.createBatchExportManager;
    },
    createBusinessLayerError: function() {
        return _types.createBusinessLayerError;
    },
    createHistoryEntryFromMutation: function() {
        return _historyIntegration.createHistoryEntryFromMutation;
    },
    createHistoryIntegratedCallbacks: function() {
        return _historyIntegration.createHistoryIntegratedCallbacks;
    },
    createImageExporter: function() {
        return _imageExport.createImageExporter;
    },
    createImageProcessingQueryConfig: function() {
        return _config.createImageProcessingQueryConfig;
    },
    createMutationConfig: function() {
        return _config.createMutationConfig;
    },
    createNetworkError: function() {
        return _types.createNetworkError;
    },
    createShareableHistoryEntry: function() {
        return _historyIntegration.createShareableHistoryEntry;
    },
    createTimeoutError: function() {
        return _types.createTimeoutError;
    },
    createValidationError: function() {
        return _types.createValidationError;
    },
    defaultHistoryService: function() {
        return _tryonHistoryService.defaultHistoryService;
    },
    estimateFileSize: function() {
        return _imageExport.estimateFileSize;
    },
    formatErrorForDisplay: function() {
        return _utils.formatErrorForDisplay;
    },
    getBase64Size: function() {
        return _utils.getBase64Size;
    },
    getErrorLogger: function() {
        return _utils.getErrorLogger;
    },
    getErrorRecoveryActions: function() {
        return _utils.getErrorRecoveryActions;
    },
    getImageDimensions: function() {
        return _utils.getImageDimensions;
    },
    getOptimalFormat: function() {
        return _imageExport.getOptimalFormat;
    },
    getUserFriendlyErrorMessage: function() {
        return _utils.getUserFriendlyErrorMessage;
    },
    imageProcessingKeys: function() {
        return _queries.imageProcessingKeys;
    },
    invalidateQueries: function() {
        return _config.invalidateQueries;
    },
    isErrorRetryable: function() {
        return _utils.isErrorRetryable;
    },
    logAndClassifyError: function() {
        return _utils.logAndClassifyError;
    },
    processImageForTryon: function() {
        return _utils.processImageForTryon;
    },
    processTryonImages: function() {
        return _utils.processTryonImages;
    },
    queryClient: function() {
        return _config.queryClient;
    },
    resizeImageTo1024x1536: function() {
        return _utils.resizeImageTo1024x1536;
    },
    setErrorLogger: function() {
        return _utils.setErrorLogger;
    },
    useAllFeatureFlags: function() {
        return _hooks.useAllFeatureFlags;
    },
    useAllFeatureFlagsEnabled: function() {
        return _hooks.useAllFeatureFlagsEnabled;
    },
    useAnyFeatureFlagEnabled: function() {
        return _hooks.useAnyFeatureFlagEnabled;
    },
    useBatchImageExport: function() {
        return _useImageExport.useBatchImageExport;
    },
    useBatchImageProcessing: function() {
        return _queries.useBatchImageProcessing;
    },
    useExperimentVariant: function() {
        return _hooks.useExperimentVariant;
    },
    useFeatureFlag: function() {
        return _hooks.useFeatureFlag;
    },
    useFeatureFlagContext: function() {
        return _providers.useFeatureFlagContext;
    },
    useFeatureFlagContextOptional: function() {
        return _providers.useFeatureFlagContextOptional;
    },
    useFeatureFlagEnabled: function() {
        return _hooks.useFeatureFlagEnabled;
    },
    useFeatureFlagNumber: function() {
        return _hooks.useFeatureFlagNumber;
    },
    useFeatureFlagRefresh: function() {
        return _hooks.useFeatureFlagRefresh;
    },
    useFeatureFlagString: function() {
        return _hooks.useFeatureFlagString;
    },
    useFeatureFlagValue: function() {
        return _hooks.useFeatureFlagValue;
    },
    useFeatureFlags: function() {
        return _hooks.useFeatureFlags;
    },
    useFormatConversion: function() {
        return _queries.useFormatConversion;
    },
    useHistoryIntegratedMutationConfig: function() {
        return _historyIntegration.useHistoryIntegratedMutationConfig;
    },
    useImageExport: function() {
        return _useImageExport.useImageExport;
    },
    useImageMetadata: function() {
        return _queries.useImageMetadata;
    },
    useImageProcessing: function() {
        return _queries.useImageProcessing;
    },
    useImageProcessingCache: function() {
        return _queries.useImageProcessingCache;
    },
    useImageThumbnail: function() {
        return _queries.useImageThumbnail;
    },
    useImageValidation: function() {
        return _queries.useImageValidation;
    },
    useProcessingStats: function() {
        return _queries.useProcessingStats;
    },
    useSimpleImageExport: function() {
        return _useImageExport.useSimpleImageExport;
    },
    useTryonHistory: function() {
        return _useTryonHistory.useTryonHistory;
    },
    useTryonHistoryEntry: function() {
        return _useTryonHistory.useTryonHistoryEntry;
    },
    useTryonHistoryStats: function() {
        return _useTryonHistory.useTryonHistoryStats;
    },
    useTryonMutation: function() {
        return _mutations.useTryonMutation;
    },
    validateImageDimensions: function() {
        return _utils.validateImageDimensions;
    }
});
const _config = require("./config");
const _providers = require("./providers");
const _types = require("./types");
const _hooks = require("./hooks");
const _mutations = require("./mutations");
const _useTryonHistory = require("./hooks/useTryonHistory");
const _utils = require("./utils");
const _tryonHistoryService = require("./services/tryonHistoryService");
const _historyIntegration = require("./utils/historyIntegration");
const _queries = require("./queries");
const _imageExport = require("./utils/imageExport");
const _useImageExport = require("./hooks/useImageExport");

//# sourceMappingURL=data:application/json;base64,