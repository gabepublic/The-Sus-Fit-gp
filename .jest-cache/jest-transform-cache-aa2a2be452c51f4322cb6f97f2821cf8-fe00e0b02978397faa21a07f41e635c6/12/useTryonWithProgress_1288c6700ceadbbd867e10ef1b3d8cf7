907122e5bc54461dff1ddfadabbec51d
// Try-On Hook with Progress Tracking
// Combines mutation, optimistic updates, and progress tracking for easy component integration
"use strict";

/* istanbul ignore next */
function cov_1vd8yu499w() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonWithProgress.ts";
  var hash = "505ebd849da00f5b5ea444a162de67dffc1d44c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonWithProgress.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 36
        }
      },
      "7": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "8": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "10": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "11": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 54,
          column: 6
        }
      },
      "12": {
        start: {
          line: 33,
          column: 50
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "13": {
        start: {
          line: 55,
          column: 58
        },
        end: {
          line: 55,
          column: 84
        }
      },
      "14": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 57,
          column: 74
        }
      },
      "15": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 61,
          column: 6
        }
      },
      "16": {
        start: {
          line: 63,
          column: 25
        },
        end: {
          line: 91,
          column: 6
        }
      },
      "17": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "18": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "19": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "20": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 96
        }
      },
      "21": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "22": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "23": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "24": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 75
        }
      },
      "25": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 45
        }
      },
      "26": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 26
        }
      },
      "27": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "28": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 74
        }
      },
      "29": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 45
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 24
        }
      },
      "31": {
        start: {
          line: 93,
          column: 29
        },
        end: {
          line: 99,
          column: 6
        }
      },
      "32": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "33": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 61
        }
      },
      "34": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 108,
          column: 6
        }
      },
      "35": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 93
        }
      },
      "36": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 45
        }
      },
      "37": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 28
        }
      },
      "38": {
        start: {
          line: 109,
          column: 31
        },
        end: {
          line: 117,
          column: 6
        }
      },
      "39": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 67
        }
      },
      "40": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "41": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 41
        }
      },
      "42": {
        start: {
          line: 118,
          column: 31
        },
        end: {
          line: 126,
          column: 6
        }
      },
      "43": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 66
        }
      },
      "44": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "45": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 41
        }
      },
      "46": {
        start: {
          line: 128,
          column: 32
        },
        end: {
          line: 128,
          column: 106
        }
      },
      "47": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "48": {
        start: {
          line: 153,
          column: 19
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "49": {
        start: {
          line: 165,
          column: 74
        },
        end: {
          line: 165,
          column: 102
        }
      },
      "50": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 172,
          column: 6
        }
      },
      "51": {
        start: {
          line: 175,
          column: 48
        },
        end: {
          line: 175,
          column: 72
        }
      },
      "52": {
        start: {
          line: 176,
          column: 44
        },
        end: {
          line: 180,
          column: 6
        }
      },
      "53": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 181,
          column: 58
        }
      },
      "54": {
        start: {
          line: 182,
          column: 25
        },
        end: {
          line: 226,
          column: 6
        }
      },
      "55": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "56": {
        start: {
          line: 188,
          column: 25
        },
        end: {
          line: 188,
          column: 27
        }
      },
      "57": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "58": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "59": {
        start: {
          line: 191,
          column: 37
        },
        end: {
          line: 191,
          column: 81
        }
      },
      "60": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 44
        }
      },
      "61": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 196,
          column: 23
        }
      },
      "62": {
        start: {
          line: 193,
          column: 42
        },
        end: {
          line: 196,
          column: 21
        }
      },
      "63": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 212,
          column: 17
        }
      },
      "64": {
        start: {
          line: 198,
          column: 35
        },
        end: {
          line: 198,
          column: 82
        }
      },
      "65": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 202,
          column: 28
        }
      },
      "66": {
        start: {
          line: 199,
          column: 45
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "67": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 34
        }
      },
      "68": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 208,
          column: 28
        }
      },
      "69": {
        start: {
          line: 205,
          column: 45
        },
        end: {
          line: 208,
          column: 25
        }
      },
      "70": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 32
        }
      },
      "71": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 86
        }
      },
      "72": {
        start: {
          line: 211,
          column: 46
        },
        end: {
          line: 211,
          column: 84
        }
      },
      "73": {
        start: {
          line: 211,
          column: 64
        },
        end: {
          line: 211,
          column: 83
        }
      },
      "74": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "75": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 219,
          column: 17
        }
      },
      "76": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 40
        }
      },
      "77": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "78": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "79": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 240,
          column: 6
        }
      },
      "80": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 11
        }
      },
      "81": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 83
        }
      },
      "82": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 30
        }
      },
      "83": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      },
      "84": {
        start: {
          line: 241,
          column: 26
        },
        end: {
          line: 255,
          column: 6
        }
      },
      "85": {
        start: {
          line: 242,
          column: 43
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "86": {
        start: {
          line: 243,
          column: 26
        },
        end: {
          line: 243,
          column: 42
        }
      },
      "87": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 44
        }
      },
      "88": {
        start: {
          line: 245,
          column: 35
        },
        end: {
          line: 245,
          column: 74
        }
      },
      "89": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "90": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 261,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 32
          }
        },
        loc: {
          start: {
            line: 14,
            column: 42
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 43
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 20,
            column: 27
          }
        },
        loc: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "useTryonWithProgress",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 29
          }
        },
        loc: {
          start: {
            line: 32,
            column: 43
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 33,
            column: 45
          },
          end: {
            line: 33,
            column: 46
          }
        },
        loc: {
          start: {
            line: 33,
            column: 50
          },
          end: {
            line: 52,
            column: 9
          }
        },
        line: 33
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 49
          },
          end: {
            line: 63,
            column: 50
          }
        },
        loc: {
          start: {
            line: 63,
            column: 68
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 93,
            column: 53
          },
          end: {
            line: 93,
            column: 54
          }
        },
        loc: {
          start: {
            line: 93,
            column: 66
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 93
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 38
          },
          end: {
            line: 94,
            column: 39
          }
        },
        loc: {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 96,
            column: 9
          }
        },
        line: 94
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 52
          },
          end: {
            line: 101,
            column: 53
          }
        },
        loc: {
          start: {
            line: 101,
            column: 65
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 109,
            column: 55
          },
          end: {
            line: 109,
            column: 56
          }
        },
        loc: {
          start: {
            line: 109,
            column: 79
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 109
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 118,
            column: 55
          },
          end: {
            line: 118,
            column: 56
          }
        },
        loc: {
          start: {
            line: 118,
            column: 78
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 118
      },
      "12": {
        name: "useSimpleTryonWithProgress",
        decl: {
          start: {
            line: 152,
            column: 9
          },
          end: {
            line: 152,
            column: 35
          }
        },
        loc: {
          start: {
            line: 152,
            column: 50
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 152
      },
      "13": {
        name: "useBatchTryonWithProgress",
        decl: {
          start: {
            line: 174,
            column: 9
          },
          end: {
            line: 174,
            column: 34
          }
        },
        loc: {
          start: {
            line: 174,
            column: 48
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 174
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 182,
            column: 49
          },
          end: {
            line: 182,
            column: 50
          }
        },
        loc: {
          start: {
            line: 182,
            column: 72
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 182
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 71
          },
          end: {
            line: 190,
            column: 72
          }
        },
        loc: {
          start: {
            line: 190,
            column: 90
          },
          end: {
            line: 213,
            column: 13
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 35
          }
        },
        loc: {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 196,
            column: 21
          }
        },
        line: 193
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 199,
            column: 36
          },
          end: {
            line: 199,
            column: 37
          }
        },
        loc: {
          start: {
            line: 199,
            column: 45
          },
          end: {
            line: 202,
            column: 25
          }
        },
        line: 199
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 205,
            column: 36
          },
          end: {
            line: 205,
            column: 37
          }
        },
        loc: {
          start: {
            line: 205,
            column: 45
          },
          end: {
            line: 208,
            column: 25
          }
        },
        line: 205
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 211,
            column: 38
          },
          end: {
            line: 211,
            column: 39
          }
        },
        loc: {
          start: {
            line: 211,
            column: 46
          },
          end: {
            line: 211,
            column: 84
          }
        },
        line: 211
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 211,
            column: 58
          },
          end: {
            line: 211,
            column: 59
          }
        },
        loc: {
          start: {
            line: 211,
            column: 64
          },
          end: {
            line: 211,
            column: 83
          }
        },
        line: 211
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 214,
            column: 31
          },
          end: {
            line: 214,
            column: 32
          }
        },
        loc: {
          start: {
            line: 214,
            column: 41
          },
          end: {
            line: 220,
            column: 13
          }
        },
        line: 214
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 227,
            column: 48
          },
          end: {
            line: 227,
            column: 49
          }
        },
        loc: {
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 227
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 228,
            column: 31
          },
          end: {
            line: 228,
            column: 32
          }
        },
        loc: {
          start: {
            line: 228,
            column: 37
          },
          end: {
            line: 230,
            column: 9
          }
        },
        line: 228
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 241,
            column: 47
          }
        },
        loc: {
          start: {
            line: 241,
            column: 50
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 241
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 32,
            column: 41
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 74,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 74,
            column: 28
          }
        }, {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 68
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 28
          }
        }, {
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 81,
            column: 68
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 128,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 128,
            column: 60
          }
        }, {
          start: {
            line: 128,
            column: 64
          },
          end: {
            line: 128,
            column: 106
          }
        }],
        line: 128
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 36
          },
          end: {
            line: 152,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 152,
            column: 46
          },
          end: {
            line: 152,
            column: 48
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 156,
            column: 37
          },
          end: {
            line: 156,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 37
          },
          end: {
            line: 156,
            column: 68
          }
        }, {
          start: {
            line: 156,
            column: 72
          },
          end: {
            line: 156,
            column: 76
          }
        }],
        line: 156
      },
      "11": {
        loc: {
          start: {
            line: 174,
            column: 35
          },
          end: {
            line: 174,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 174,
            column: 44
          },
          end: {
            line: 174,
            column: 46
          }
        }],
        line: 174
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 219,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 219,
            column: 17
          }
        }, {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 219,
            column: 17
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 245,
            column: 35
          },
          end: {
            line: 245,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 47
          },
          end: {
            line: 245,
            column: 70
          }
        }, {
          start: {
            line: 245,
            column: 73
          },
          end: {
            line: 245,
            column: 74
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonWithProgress.ts"],
      sourcesContent: ["// Try-On Hook with Progress Tracking\n// Combines mutation, optimistic updates, and progress tracking for easy component integration\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { useTryonMutation } from '../mutations/useTryonMutation';\nimport { useOptimisticUpdates } from './useOptimisticUpdates';\nimport type {\n  TryonMutationVariables,\n  TryonMutationResponse,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\n\n/**\n * Configuration for the try-on with progress hook\n */\nexport interface UseTryonWithProgressConfig extends UseTryonMutationConfig {\n  /** Whether to automatically start optimistic updates */\n  autoOptimistic?: boolean;\n  /** Default optimistic configuration */\n  defaultOptimisticConfig?: {\n    showPreview?: boolean;\n    updateHistory?: boolean;\n    showProgress?: boolean;\n    previewPlaceholder?: string;\n    estimatedProcessingTime?: number;\n  };\n  /** Default cache invalidation configuration */\n  defaultCacheConfig?: {\n    invalidateHistory?: boolean;\n    invalidateUserData?: boolean;\n    invalidateStats?: boolean;\n    invalidateTags?: boolean;\n    preloadRelated?: boolean;\n    userContext?: {\n      userId?: string;\n      tags?: string[];\n    };\n  };\n}\n\n/**\n * Return type for the try-on with progress hook\n */\nexport interface UseTryonWithProgressReturn {\n  /** Execute try-on mutation with automatic progress tracking */\n  executeTryon: (variables: TryonMutationVariables) => Promise<TryonMutationResponse>;\n  /** Execute try-on mutation synchronously (fire and forget) */\n  executeTryonSync: (variables: TryonMutationVariables) => void;\n  /** Current mutation result */\n  data: TryonMutationResponse | undefined;\n  /** Current error */\n  error: unknown;\n  /** Whether mutation is loading */\n  isLoading: boolean;\n  /** Whether mutation succeeded */\n  isSuccess: boolean;\n  /** Whether mutation failed */\n  isError: boolean;\n  /** Whether mutation is idle */\n  isIdle: boolean;\n  /** Current mutation status */\n  status: 'idle' | 'loading' | 'error' | 'success';\n  /** Reset mutation state */\n  reset: () => void;\n  /** Current optimistic update ID */\n  currentOptimisticId: string | null;\n  /** Whether optimistic updates are active */\n  hasActiveOptimistic: boolean;\n  /** Start optimistic update manually */\n  startOptimistic: (variables: TryonMutationVariables) => string;\n  /** Complete optimistic update manually */\n  completeOptimistic: (optimisticId: string, result: TryonMutationResponse) => void;\n  /** Rollback optimistic update manually */\n  rollbackOptimistic: (optimisticId: string, error?: unknown) => void;\n  /** Active optimistic updates */\n  activeOptimisticUpdates: any[];\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_PROGRESS_CONFIG: Required<Pick<UseTryonWithProgressConfig, 'autoOptimistic'>> = {\n  autoOptimistic: true\n};\n\n/**\n * Hook that combines try-on mutation with progress tracking and optimistic updates\n */\nexport function useTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): UseTryonWithProgressReturn {\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_PROGRESS_CONFIG,\n    enableOptimisticUpdates: config.autoOptimistic !== false,\n    optimisticConfig: {\n      showPreview: true,\n      updateHistory: true,\n      showProgress: true,\n      estimatedProcessingTime: 8000,\n      ...config.defaultOptimisticConfig\n    },\n    cacheInvalidationConfig: {\n      invalidateHistory: true,\n      invalidateUserData: true,\n      invalidateStats: true,\n      invalidateTags: true,\n      preloadRelated: true,\n      ...config.defaultCacheConfig\n    },\n    ...config\n  }), [config]);\n\n  const [currentOptimisticId, setCurrentOptimisticId] = useState<string | null>(null);\n\n  // Initialize mutation hook with optimistic updates enabled\n  const mutation = useTryonMutation(mergedConfig);\n\n  // Initialize optimistic updates hook\n  const optimisticUpdates = useOptimisticUpdates({\n    enabled: mergedConfig.enableOptimisticUpdates\n  });\n\n  // Enhanced execute function with automatic progress tracking\n  const executeTryon = useCallback(async (variables: TryonMutationVariables): Promise<TryonMutationResponse> => {\n    let optimisticId: string | null = null;\n\n    try {\n      // Start optimistic updates if enabled\n      if (mergedConfig.enableOptimisticUpdates) {\n        optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n        setCurrentOptimisticId(optimisticId);\n      }\n\n      // Execute mutation\n      const result = await mutation.mutateAsync(variables);\n\n      // Complete optimistic updates if they were started\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.completeOptimistic(optimisticId, result);\n        setCurrentOptimisticId(null);\n      }\n\n      return result;\n    } catch (error) {\n      // Rollback optimistic updates on error\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.rollbackOptimistic(optimisticId, error);\n        setCurrentOptimisticId(null);\n      }\n      throw error;\n    }\n  }, [mutation, optimisticUpdates, mergedConfig]);\n\n  // Sync version that doesn't return a promise\n  const executeTryonSync = useCallback((variables: TryonMutationVariables): void => {\n    executeTryon(variables).catch(error => {\n      console.error('Try-on execution failed:', error);\n    });\n  }, [executeTryon]);\n\n  // Manual optimistic update controls\n  const startOptimistic = useCallback((variables: TryonMutationVariables): string => {\n    const optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n    setCurrentOptimisticId(optimisticId);\n    return optimisticId;\n  }, [optimisticUpdates, mergedConfig.optimisticConfig]);\n\n  const completeOptimistic = useCallback((optimisticId: string, result: TryonMutationResponse) => {\n    optimisticUpdates.completeOptimistic(optimisticId, result);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  const rollbackOptimistic = useCallback((optimisticId: string, error?: unknown) => {\n    optimisticUpdates.rollbackOptimistic(optimisticId, error);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  // Derived state\n  const hasActiveOptimistic = Boolean(currentOptimisticId) || optimisticUpdates.activeUpdates.length > 0;\n\n  return {\n    // Execution methods\n    executeTryon,\n    executeTryonSync,\n    \n    // Mutation state\n    data: mutation.data,\n    error: mutation.error,\n    isLoading: mutation.isLoading,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status,\n    reset: mutation.reset,\n    \n    // Optimistic updates state\n    currentOptimisticId,\n    hasActiveOptimistic,\n    activeOptimisticUpdates: optimisticUpdates.activeUpdates,\n    \n    // Manual optimistic controls\n    startOptimistic,\n    completeOptimistic,\n    rollbackOptimistic\n  };\n}\n\n/**\n * Simplified hook for basic try-on with progress (most common use case)\n */\nexport function useSimpleTryonWithProgress(\n  options: {\n    userId?: string;\n    tags?: string[];\n    estimatedProcessingTime?: number;\n    showProgress?: boolean;\n  } = {}\n): Pick<UseTryonWithProgressReturn, 'executeTryon' | 'isLoading' | 'currentOptimisticId' | 'error' | 'data'> {\n  const config: UseTryonWithProgressConfig = {\n    defaultOptimisticConfig: {\n      showProgress: options.showProgress !== false,\n      estimatedProcessingTime: options.estimatedProcessingTime || 8000\n    },\n    defaultCacheConfig: {\n      userContext: {\n        userId: options.userId,\n        tags: options.tags\n      }\n    }\n  };\n\n  const {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  } = useTryonWithProgress(config);\n\n  return {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  };\n}\n\n/**\n * Hook for batch try-on operations with progress tracking\n */\nexport function useBatchTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): {\n  executeBatch: (variablesList: TryonMutationVariables[]) => Promise<TryonMutationResponse[]>;\n  batchProgress: {\n    total: number;\n    completed: number;\n    failed: number;\n    inProgress: number;\n    progressPercentage: number;\n  };\n  activeBatchIds: string[];\n  cancelBatch: () => void;\n} {\n  const [activeBatchIds, setActiveBatchIds] = useState<string[]>([]);\n  const [batchResults, setBatchResults] = useState<{ success: number; failed: number; total: number }>({\n    success: 0,\n    failed: 0,\n    total: 0\n  });\n\n  const tryonWithProgress = useTryonWithProgress(config);\n\n  const executeBatch = useCallback(async (variablesList: TryonMutationVariables[]): Promise<TryonMutationResponse[]> => {\n    setBatchResults({ success: 0, failed: 0, total: variablesList.length });\n    const batchIds: string[] = [];\n\n    try {\n      const results = await Promise.allSettled(\n        variablesList.map(async (variables) => {\n          const optimisticId = tryonWithProgress.startOptimistic(variables);\n          batchIds.push(optimisticId);\n          setActiveBatchIds(prev => [...prev, optimisticId]);\n\n          try {\n            const result = await tryonWithProgress.executeTryon(variables);\n            setBatchResults(prev => ({ ...prev, success: prev.success + 1 }));\n            return result;\n          } catch (error) {\n            setBatchResults(prev => ({ ...prev, failed: prev.failed + 1 }));\n            throw error;\n          } finally {\n            setActiveBatchIds(prev => prev.filter(id => id !== optimisticId));\n          }\n        })\n      );\n\n      return results.map(result => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          throw result.reason;\n        }\n      });\n    } finally {\n      setActiveBatchIds([]);\n    }\n  }, [tryonWithProgress]);\n\n  const cancelBatch = useCallback(() => {\n    activeBatchIds.forEach(id => {\n      tryonWithProgress.rollbackOptimistic(id, new Error('Batch cancelled'));\n    });\n    setActiveBatchIds([]);\n    setBatchResults({ success: 0, failed: 0, total: 0 });\n  }, [activeBatchIds, tryonWithProgress]);\n\n  const batchProgress = useMemo(() => {\n    const { success, failed, total } = batchResults;\n    const completed = success + failed;\n    const inProgress = total - completed;\n    const progressPercentage = total > 0 ? (completed / total) * 100 : 0;\n\n    return {\n      total,\n      completed: success,\n      failed,\n      inProgress,\n      progressPercentage\n    };\n  }, [batchResults]);\n\n  return {\n    executeBatch,\n    batchProgress,\n    activeBatchIds,\n    cancelBatch\n  };\n}"],
      names: ["useBatchTryonWithProgress", "useSimpleTryonWithProgress", "useTryonWithProgress", "DEFAULT_PROGRESS_CONFIG", "autoOptimistic", "config", "mergedConfig", "useMemo", "enableOptimisticUpdates", "optimisticConfig", "showPreview", "updateHistory", "showProgress", "estimatedProcessingTime", "defaultOptimisticConfig", "cacheInvalidationConfig", "invalidateHistory", "invalidateUserData", "invalidateStats", "invalidateTags", "preloadRelated", "defaultCacheConfig", "currentOptimisticId", "setCurrentOptimisticId", "useState", "mutation", "useTryonMutation", "optimisticUpdates", "useOptimisticUpdates", "enabled", "executeTryon", "useCallback", "variables", "optimisticId", "startOptimistic", "result", "mutateAsync", "completeOptimistic", "error", "rollbackOptimistic", "executeTryonSync", "catch", "console", "hasActiveOptimistic", "Boolean", "activeUpdates", "length", "data", "isLoading", "isSuccess", "isError", "isIdle", "status", "reset", "activeOptimisticUpdates", "options", "userContext", "userId", "tags", "activeBatchIds", "setActiveBatchIds", "batchResults", "setBatchResults", "success", "failed", "total", "tryonWithProgress", "executeBatch", "variablesList", "batchIds", "results", "Promise", "allSettled", "map", "push", "prev", "filter", "id", "value", "reason", "cancelBatch", "forEach", "Error", "batchProgress", "completed", "inProgress", "progressPercentage"],
      mappings: "AAAA,qCAAqC;AACrC,8FAA8F;;;;;;;;;;;;IA8P9EA,yBAAyB;eAAzBA;;IAzCAC,0BAA0B;eAA1BA;;IA9HAC,oBAAoB;eAApBA;;;uBArF+B;kCACd;sCACI;AAyErC;;CAEC,GACD,MAAMC,0BAAwF;IAC5FC,gBAAgB;AAClB;AAKO,SAASF,qBACdG,SAAqC,CAAC,CAAC;IAEvC,MAAMC,eAAeC,IAAAA,cAAO,EAAC,IAAO,CAAA;YAClC,GAAGJ,uBAAuB;YAC1BK,yBAAyBH,OAAOD,cAAc,KAAK;YACnDK,kBAAkB;gBAChBC,aAAa;gBACbC,eAAe;gBACfC,cAAc;gBACdC,yBAAyB;gBACzB,GAAGR,OAAOS,uBAAuB;YACnC;YACAC,yBAAyB;gBACvBC,mBAAmB;gBACnBC,oBAAoB;gBACpBC,iBAAiB;gBACjBC,gBAAgB;gBAChBC,gBAAgB;gBAChB,GAAGf,OAAOgB,kBAAkB;YAC9B;YACA,GAAGhB,MAAM;QACX,CAAA,GAAI;QAACA;KAAO;IAEZ,MAAM,CAACiB,qBAAqBC,uBAAuB,GAAGC,IAAAA,eAAQ,EAAgB;IAE9E,2DAA2D;IAC3D,MAAMC,WAAWC,IAAAA,kCAAgB,EAACpB;IAElC,qCAAqC;IACrC,MAAMqB,oBAAoBC,IAAAA,0CAAoB,EAAC;QAC7CC,SAASvB,aAAaE,uBAAuB;IAC/C;IAEA,6DAA6D;IAC7D,MAAMsB,eAAeC,IAAAA,kBAAW,EAAC,OAAOC;QACtC,IAAIC,eAA8B;QAElC,IAAI;YACF,sCAAsC;YACtC,IAAI3B,aAAaE,uBAAuB,EAAE;gBACxCyB,eAAeN,kBAAkBO,eAAe,CAAC5B,aAAaG,gBAAgB;gBAC9Ec,uBAAuBU;YACzB;YAEA,mBAAmB;YACnB,MAAME,SAAS,MAAMV,SAASW,WAAW,CAACJ;YAE1C,mDAAmD;YACnD,IAAIC,gBAAgB3B,aAAaE,uBAAuB,EAAE;gBACxDmB,kBAAkBU,kBAAkB,CAACJ,cAAcE;gBACnDZ,uBAAuB;YACzB;YAEA,OAAOY;QACT,EAAE,OAAOG,OAAO;YACd,uCAAuC;YACvC,IAAIL,gBAAgB3B,aAAaE,uBAAuB,EAAE;gBACxDmB,kBAAkBY,kBAAkB,CAACN,cAAcK;gBACnDf,uBAAuB;YACzB;YACA,MAAMe;QACR;IACF,GAAG;QAACb;QAAUE;QAAmBrB;KAAa;IAE9C,6CAA6C;IAC7C,MAAMkC,mBAAmBT,IAAAA,kBAAW,EAAC,CAACC;QACpCF,aAAaE,WAAWS,KAAK,CAACH,CAAAA;YAC5BI,QAAQJ,KAAK,CAAC,4BAA4BA;QAC5C;IACF,GAAG;QAACR;KAAa;IAEjB,oCAAoC;IACpC,MAAMI,kBAAkBH,IAAAA,kBAAW,EAAC,CAACC;QACnC,MAAMC,eAAeN,kBAAkBO,eAAe,CAAC5B,aAAaG,gBAAgB;QACpFc,uBAAuBU;QACvB,OAAOA;IACT,GAAG;QAACN;QAAmBrB,aAAaG,gBAAgB;KAAC;IAErD,MAAM4B,qBAAqBN,IAAAA,kBAAW,EAAC,CAACE,cAAsBE;QAC5DR,kBAAkBU,kBAAkB,CAACJ,cAAcE;QACnD,IAAIb,wBAAwBW,cAAc;YACxCV,uBAAuB;QACzB;IACF,GAAG;QAACI;QAAmBL;KAAoB;IAE3C,MAAMiB,qBAAqBR,IAAAA,kBAAW,EAAC,CAACE,cAAsBK;QAC5DX,kBAAkBY,kBAAkB,CAACN,cAAcK;QACnD,IAAIhB,wBAAwBW,cAAc;YACxCV,uBAAuB;QACzB;IACF,GAAG;QAACI;QAAmBL;KAAoB;IAE3C,gBAAgB;IAChB,MAAMqB,sBAAsBC,QAAQtB,wBAAwBK,kBAAkBkB,aAAa,CAACC,MAAM,GAAG;IAErG,OAAO;QACL,oBAAoB;QACpBhB;QACAU;QAEA,iBAAiB;QACjBO,MAAMtB,SAASsB,IAAI;QACnBT,OAAOb,SAASa,KAAK;QACrBU,WAAWvB,SAASuB,SAAS;QAC7BC,WAAWxB,SAASwB,SAAS;QAC7BC,SAASzB,SAASyB,OAAO;QACzBC,QAAQ1B,SAAS0B,MAAM;QACvBC,QAAQ3B,SAAS2B,MAAM;QACvBC,OAAO5B,SAAS4B,KAAK;QAErB,2BAA2B;QAC3B/B;QACAqB;QACAW,yBAAyB3B,kBAAkBkB,aAAa;QAExD,6BAA6B;QAC7BX;QACAG;QACAE;IACF;AACF;AAKO,SAAStC,2BACdsD,UAKI,CAAC,CAAC;IAEN,MAAMlD,SAAqC;QACzCS,yBAAyB;YACvBF,cAAc2C,QAAQ3C,YAAY,KAAK;YACvCC,yBAAyB0C,QAAQ1C,uBAAuB,IAAI;QAC9D;QACAQ,oBAAoB;YAClBmC,aAAa;gBACXC,QAAQF,QAAQE,MAAM;gBACtBC,MAAMH,QAAQG,IAAI;YACpB;QACF;IACF;IAEA,MAAM,EACJ5B,YAAY,EACZkB,SAAS,EACT1B,mBAAmB,EACnBgB,KAAK,EACLS,IAAI,EACL,GAAG7C,qBAAqBG;IAEzB,OAAO;QACLyB;QACAkB;QACA1B;QACAgB;QACAS;IACF;AACF;AAKO,SAAS/C,0BACdK,SAAqC,CAAC,CAAC;IAavC,MAAM,CAACsD,gBAAgBC,kBAAkB,GAAGpC,IAAAA,eAAQ,EAAW,EAAE;IACjE,MAAM,CAACqC,cAAcC,gBAAgB,GAAGtC,IAAAA,eAAQ,EAAqD;QACnGuC,SAAS;QACTC,QAAQ;QACRC,OAAO;IACT;IAEA,MAAMC,oBAAoBhE,qBAAqBG;IAE/C,MAAM8D,eAAepC,IAAAA,kBAAW,EAAC,OAAOqC;QACtCN,gBAAgB;YAAEC,SAAS;YAAGC,QAAQ;YAAGC,OAAOG,cAActB,MAAM;QAAC;QACrE,MAAMuB,WAAqB,EAAE;QAE7B,IAAI;YACF,MAAMC,UAAU,MAAMC,QAAQC,UAAU,CACtCJ,cAAcK,GAAG,CAAC,OAAOzC;gBACvB,MAAMC,eAAeiC,kBAAkBhC,eAAe,CAACF;gBACvDqC,SAASK,IAAI,CAACzC;gBACd2B,kBAAkBe,CAAAA,OAAQ;2BAAIA;wBAAM1C;qBAAa;gBAEjD,IAAI;oBACF,MAAME,SAAS,MAAM+B,kBAAkBpC,YAAY,CAACE;oBACpD8B,gBAAgBa,CAAAA,OAAS,CAAA;4BAAE,GAAGA,IAAI;4BAAEZ,SAASY,KAAKZ,OAAO,GAAG;wBAAE,CAAA;oBAC9D,OAAO5B;gBACT,EAAE,OAAOG,OAAO;oBACdwB,gBAAgBa,CAAAA,OAAS,CAAA;4BAAE,GAAGA,IAAI;4BAAEX,QAAQW,KAAKX,MAAM,GAAG;wBAAE,CAAA;oBAC5D,MAAM1B;gBACR,SAAU;oBACRsB,kBAAkBe,CAAAA,OAAQA,KAAKC,MAAM,CAACC,CAAAA,KAAMA,OAAO5C;gBACrD;YACF;YAGF,OAAOqC,QAAQG,GAAG,CAACtC,CAAAA;gBACjB,IAAIA,OAAOiB,MAAM,KAAK,aAAa;oBACjC,OAAOjB,OAAO2C,KAAK;gBACrB,OAAO;oBACL,MAAM3C,OAAO4C,MAAM;gBACrB;YACF;QACF,SAAU;YACRnB,kBAAkB,EAAE;QACtB;IACF,GAAG;QAACM;KAAkB;IAEtB,MAAMc,cAAcjD,IAAAA,kBAAW,EAAC;QAC9B4B,eAAesB,OAAO,CAACJ,CAAAA;YACrBX,kBAAkB3B,kBAAkB,CAACsC,IAAI,IAAIK,MAAM;QACrD;QACAtB,kBAAkB,EAAE;QACpBE,gBAAgB;YAAEC,SAAS;YAAGC,QAAQ;YAAGC,OAAO;QAAE;IACpD,GAAG;QAACN;QAAgBO;KAAkB;IAEtC,MAAMiB,gBAAgB5E,IAAAA,cAAO,EAAC;QAC5B,MAAM,EAAEwD,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAE,GAAGJ;QACnC,MAAMuB,YAAYrB,UAAUC;QAC5B,MAAMqB,aAAapB,QAAQmB;QAC3B,MAAME,qBAAqBrB,QAAQ,IAAI,AAACmB,YAAYnB,QAAS,MAAM;QAEnE,OAAO;YACLA;YACAmB,WAAWrB;YACXC;YACAqB;YACAC;QACF;IACF,GAAG;QAACzB;KAAa;IAEjB,OAAO;QACLM;QACAgB;QACAxB;QACAqB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "505ebd849da00f5b5ea444a162de67dffc1d44c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vd8yu499w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vd8yu499w();
cov_1vd8yu499w().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vd8yu499w().f[0]++;
  cov_1vd8yu499w().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vd8yu499w().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1vd8yu499w().s[3]++;
_export(exports, {
  useBatchTryonWithProgress: function () {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[1]++;
    cov_1vd8yu499w().s[4]++;
    return useBatchTryonWithProgress;
  },
  useSimpleTryonWithProgress: function () {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[2]++;
    cov_1vd8yu499w().s[5]++;
    return useSimpleTryonWithProgress;
  },
  useTryonWithProgress: function () {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[3]++;
    cov_1vd8yu499w().s[6]++;
    return useTryonWithProgress;
  }
});
const _react =
/* istanbul ignore next */
(cov_1vd8yu499w().s[7]++, require("react"));
const _useTryonMutation =
/* istanbul ignore next */
(cov_1vd8yu499w().s[8]++, require("../mutations/useTryonMutation"));
const _useOptimisticUpdates =
/* istanbul ignore next */
(cov_1vd8yu499w().s[9]++, require("./useOptimisticUpdates"));
/**
 * Default configuration
 */
const DEFAULT_PROGRESS_CONFIG =
/* istanbul ignore next */
(cov_1vd8yu499w().s[10]++, {
  autoOptimistic: true
});
function useTryonWithProgress(config =
/* istanbul ignore next */
(cov_1vd8yu499w().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_1vd8yu499w().f[4]++;
  const mergedConfig =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[11]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[5]++;
    cov_1vd8yu499w().s[12]++;
    return {
      ...DEFAULT_PROGRESS_CONFIG,
      enableOptimisticUpdates: config.autoOptimistic !== false,
      optimisticConfig: {
        showPreview: true,
        updateHistory: true,
        showProgress: true,
        estimatedProcessingTime: 8000,
        ...config.defaultOptimisticConfig
      },
      cacheInvalidationConfig: {
        invalidateHistory: true,
        invalidateUserData: true,
        invalidateStats: true,
        invalidateTags: true,
        preloadRelated: true,
        ...config.defaultCacheConfig
      },
      ...config
    };
  }, [config]));
  const [currentOptimisticId, setCurrentOptimisticId] =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[13]++, (0, _react.useState)(null));
  // Initialize mutation hook with optimistic updates enabled
  const mutation =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[14]++, (0, _useTryonMutation.useTryonMutation)(mergedConfig));
  // Initialize optimistic updates hook
  const optimisticUpdates =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[15]++, (0, _useOptimisticUpdates.useOptimisticUpdates)({
    enabled: mergedConfig.enableOptimisticUpdates
  }));
  // Enhanced execute function with automatic progress tracking
  const executeTryon =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[16]++, (0, _react.useCallback)(async variables => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[6]++;
    let optimisticId =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[17]++, null);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1vd8yu499w().s[19]++;
      // Start optimistic updates if enabled
      if (mergedConfig.enableOptimisticUpdates) {
        /* istanbul ignore next */
        cov_1vd8yu499w().b[1][0]++;
        cov_1vd8yu499w().s[20]++;
        optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);
        /* istanbul ignore next */
        cov_1vd8yu499w().s[21]++;
        setCurrentOptimisticId(optimisticId);
      } else
      /* istanbul ignore next */
      {
        cov_1vd8yu499w().b[1][1]++;
      }
      // Execute mutation
      const result =
      /* istanbul ignore next */
      (cov_1vd8yu499w().s[22]++, await mutation.mutateAsync(variables));
      // Complete optimistic updates if they were started
      /* istanbul ignore next */
      cov_1vd8yu499w().s[23]++;
      if (
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[3][0]++, optimisticId) &&
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[3][1]++, mergedConfig.enableOptimisticUpdates)) {
        /* istanbul ignore next */
        cov_1vd8yu499w().b[2][0]++;
        cov_1vd8yu499w().s[24]++;
        optimisticUpdates.completeOptimistic(optimisticId, result);
        /* istanbul ignore next */
        cov_1vd8yu499w().s[25]++;
        setCurrentOptimisticId(null);
      } else
      /* istanbul ignore next */
      {
        cov_1vd8yu499w().b[2][1]++;
      }
      cov_1vd8yu499w().s[26]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1vd8yu499w().s[27]++;
      // Rollback optimistic updates on error
      if (
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[5][0]++, optimisticId) &&
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[5][1]++, mergedConfig.enableOptimisticUpdates)) {
        /* istanbul ignore next */
        cov_1vd8yu499w().b[4][0]++;
        cov_1vd8yu499w().s[28]++;
        optimisticUpdates.rollbackOptimistic(optimisticId, error);
        /* istanbul ignore next */
        cov_1vd8yu499w().s[29]++;
        setCurrentOptimisticId(null);
      } else
      /* istanbul ignore next */
      {
        cov_1vd8yu499w().b[4][1]++;
      }
      cov_1vd8yu499w().s[30]++;
      throw error;
    }
  }, [mutation, optimisticUpdates, mergedConfig]));
  // Sync version that doesn't return a promise
  const executeTryonSync =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[31]++, (0, _react.useCallback)(variables => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[7]++;
    cov_1vd8yu499w().s[32]++;
    executeTryon(variables).catch(error => {
      /* istanbul ignore next */
      cov_1vd8yu499w().f[8]++;
      cov_1vd8yu499w().s[33]++;
      console.error('Try-on execution failed:', error);
    });
  }, [executeTryon]));
  // Manual optimistic update controls
  const startOptimistic =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[34]++, (0, _react.useCallback)(variables => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[9]++;
    const optimisticId =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[35]++, optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig));
    /* istanbul ignore next */
    cov_1vd8yu499w().s[36]++;
    setCurrentOptimisticId(optimisticId);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[37]++;
    return optimisticId;
  }, [optimisticUpdates, mergedConfig.optimisticConfig]));
  const completeOptimistic =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[38]++, (0, _react.useCallback)((optimisticId, result) => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[10]++;
    cov_1vd8yu499w().s[39]++;
    optimisticUpdates.completeOptimistic(optimisticId, result);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[40]++;
    if (currentOptimisticId === optimisticId) {
      /* istanbul ignore next */
      cov_1vd8yu499w().b[6][0]++;
      cov_1vd8yu499w().s[41]++;
      setCurrentOptimisticId(null);
    } else
    /* istanbul ignore next */
    {
      cov_1vd8yu499w().b[6][1]++;
    }
  }, [optimisticUpdates, currentOptimisticId]));
  const rollbackOptimistic =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[42]++, (0, _react.useCallback)((optimisticId, error) => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[11]++;
    cov_1vd8yu499w().s[43]++;
    optimisticUpdates.rollbackOptimistic(optimisticId, error);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[44]++;
    if (currentOptimisticId === optimisticId) {
      /* istanbul ignore next */
      cov_1vd8yu499w().b[7][0]++;
      cov_1vd8yu499w().s[45]++;
      setCurrentOptimisticId(null);
    } else
    /* istanbul ignore next */
    {
      cov_1vd8yu499w().b[7][1]++;
    }
  }, [optimisticUpdates, currentOptimisticId]));
  // Derived state
  const hasActiveOptimistic =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[46]++,
  /* istanbul ignore next */
  (cov_1vd8yu499w().b[8][0]++, Boolean(currentOptimisticId)) ||
  /* istanbul ignore next */
  (cov_1vd8yu499w().b[8][1]++, optimisticUpdates.activeUpdates.length > 0));
  /* istanbul ignore next */
  cov_1vd8yu499w().s[47]++;
  return {
    // Execution methods
    executeTryon,
    executeTryonSync,
    // Mutation state
    data: mutation.data,
    error: mutation.error,
    isLoading: mutation.isLoading,
    isSuccess: mutation.isSuccess,
    isError: mutation.isError,
    isIdle: mutation.isIdle,
    status: mutation.status,
    reset: mutation.reset,
    // Optimistic updates state
    currentOptimisticId,
    hasActiveOptimistic,
    activeOptimisticUpdates: optimisticUpdates.activeUpdates,
    // Manual optimistic controls
    startOptimistic,
    completeOptimistic,
    rollbackOptimistic
  };
}
function useSimpleTryonWithProgress(options =
/* istanbul ignore next */
(cov_1vd8yu499w().b[9][0]++, {})) {
  /* istanbul ignore next */
  cov_1vd8yu499w().f[12]++;
  const config =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[48]++, {
    defaultOptimisticConfig: {
      showProgress: options.showProgress !== false,
      estimatedProcessingTime:
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[10][0]++, options.estimatedProcessingTime) ||
      /* istanbul ignore next */
      (cov_1vd8yu499w().b[10][1]++, 8000)
    },
    defaultCacheConfig: {
      userContext: {
        userId: options.userId,
        tags: options.tags
      }
    }
  });
  const {
    executeTryon,
    isLoading,
    currentOptimisticId,
    error,
    data
  } =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[49]++, useTryonWithProgress(config));
  /* istanbul ignore next */
  cov_1vd8yu499w().s[50]++;
  return {
    executeTryon,
    isLoading,
    currentOptimisticId,
    error,
    data
  };
}
function useBatchTryonWithProgress(config =
/* istanbul ignore next */
(cov_1vd8yu499w().b[11][0]++, {})) {
  /* istanbul ignore next */
  cov_1vd8yu499w().f[13]++;
  const [activeBatchIds, setActiveBatchIds] =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[51]++, (0, _react.useState)([]));
  const [batchResults, setBatchResults] =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[52]++, (0, _react.useState)({
    success: 0,
    failed: 0,
    total: 0
  }));
  const tryonWithProgress =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[53]++, useTryonWithProgress(config));
  const executeBatch =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[54]++, (0, _react.useCallback)(async variablesList => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[14]++;
    cov_1vd8yu499w().s[55]++;
    setBatchResults({
      success: 0,
      failed: 0,
      total: variablesList.length
    });
    const batchIds =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[56]++, []);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[57]++;
    try {
      const results =
      /* istanbul ignore next */
      (cov_1vd8yu499w().s[58]++, await Promise.allSettled(variablesList.map(async variables => {
        /* istanbul ignore next */
        cov_1vd8yu499w().f[15]++;
        const optimisticId =
        /* istanbul ignore next */
        (cov_1vd8yu499w().s[59]++, tryonWithProgress.startOptimistic(variables));
        /* istanbul ignore next */
        cov_1vd8yu499w().s[60]++;
        batchIds.push(optimisticId);
        /* istanbul ignore next */
        cov_1vd8yu499w().s[61]++;
        setActiveBatchIds(prev => {
          /* istanbul ignore next */
          cov_1vd8yu499w().f[16]++;
          cov_1vd8yu499w().s[62]++;
          return [...prev, optimisticId];
        });
        /* istanbul ignore next */
        cov_1vd8yu499w().s[63]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1vd8yu499w().s[64]++, await tryonWithProgress.executeTryon(variables));
          /* istanbul ignore next */
          cov_1vd8yu499w().s[65]++;
          setBatchResults(prev => {
            /* istanbul ignore next */
            cov_1vd8yu499w().f[17]++;
            cov_1vd8yu499w().s[66]++;
            return {
              ...prev,
              success: prev.success + 1
            };
          });
          /* istanbul ignore next */
          cov_1vd8yu499w().s[67]++;
          return result;
        } catch (error) {
          /* istanbul ignore next */
          cov_1vd8yu499w().s[68]++;
          setBatchResults(prev => {
            /* istanbul ignore next */
            cov_1vd8yu499w().f[18]++;
            cov_1vd8yu499w().s[69]++;
            return {
              ...prev,
              failed: prev.failed + 1
            };
          });
          /* istanbul ignore next */
          cov_1vd8yu499w().s[70]++;
          throw error;
        } finally {
          /* istanbul ignore next */
          cov_1vd8yu499w().s[71]++;
          setActiveBatchIds(prev => {
            /* istanbul ignore next */
            cov_1vd8yu499w().f[19]++;
            cov_1vd8yu499w().s[72]++;
            return prev.filter(id => {
              /* istanbul ignore next */
              cov_1vd8yu499w().f[20]++;
              cov_1vd8yu499w().s[73]++;
              return id !== optimisticId;
            });
          });
        }
      })));
      /* istanbul ignore next */
      cov_1vd8yu499w().s[74]++;
      return results.map(result => {
        /* istanbul ignore next */
        cov_1vd8yu499w().f[21]++;
        cov_1vd8yu499w().s[75]++;
        if (result.status === 'fulfilled') {
          /* istanbul ignore next */
          cov_1vd8yu499w().b[12][0]++;
          cov_1vd8yu499w().s[76]++;
          return result.value;
        } else {
          /* istanbul ignore next */
          cov_1vd8yu499w().b[12][1]++;
          cov_1vd8yu499w().s[77]++;
          throw result.reason;
        }
      });
    } finally {
      /* istanbul ignore next */
      cov_1vd8yu499w().s[78]++;
      setActiveBatchIds([]);
    }
  }, [tryonWithProgress]));
  const cancelBatch =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[79]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[22]++;
    cov_1vd8yu499w().s[80]++;
    activeBatchIds.forEach(id => {
      /* istanbul ignore next */
      cov_1vd8yu499w().f[23]++;
      cov_1vd8yu499w().s[81]++;
      tryonWithProgress.rollbackOptimistic(id, new Error('Batch cancelled'));
    });
    /* istanbul ignore next */
    cov_1vd8yu499w().s[82]++;
    setActiveBatchIds([]);
    /* istanbul ignore next */
    cov_1vd8yu499w().s[83]++;
    setBatchResults({
      success: 0,
      failed: 0,
      total: 0
    });
  }, [activeBatchIds, tryonWithProgress]));
  const batchProgress =
  /* istanbul ignore next */
  (cov_1vd8yu499w().s[84]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_1vd8yu499w().f[24]++;
    const {
      success,
      failed,
      total
    } =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[85]++, batchResults);
    const completed =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[86]++, success + failed);
    const inProgress =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[87]++, total - completed);
    const progressPercentage =
    /* istanbul ignore next */
    (cov_1vd8yu499w().s[88]++, total > 0 ?
    /* istanbul ignore next */
    (cov_1vd8yu499w().b[13][0]++, completed / total * 100) :
    /* istanbul ignore next */
    (cov_1vd8yu499w().b[13][1]++, 0));
    /* istanbul ignore next */
    cov_1vd8yu499w().s[89]++;
    return {
      total,
      completed: success,
      failed,
      inProgress,
      progressPercentage
    };
  }, [batchResults]));
  /* istanbul ignore next */
  cov_1vd8yu499w().s[90]++;
  return {
    executeBatch,
    batchProgress,
    activeBatchIds,
    cancelBatch
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,