{"version":3,"names":["useBatchTryonWithProgress","cov_1vd8yu499w","f","s","useSimpleTryonWithProgress","useTryonWithProgress","DEFAULT_PROGRESS_CONFIG","autoOptimistic","config","b","mergedConfig","_react","useMemo","enableOptimisticUpdates","optimisticConfig","showPreview","updateHistory","showProgress","estimatedProcessingTime","defaultOptimisticConfig","cacheInvalidationConfig","invalidateHistory","invalidateUserData","invalidateStats","invalidateTags","preloadRelated","defaultCacheConfig","currentOptimisticId","setCurrentOptimisticId","useState","mutation","_useTryonMutation","useTryonMutation","optimisticUpdates","_useOptimisticUpdates","useOptimisticUpdates","enabled","executeTryon","useCallback","variables","optimisticId","startOptimistic","result","mutateAsync","completeOptimistic","error","rollbackOptimistic","executeTryonSync","catch","console","hasActiveOptimistic","Boolean","activeUpdates","length","data","isLoading","isSuccess","isError","isIdle","status","reset","activeOptimisticUpdates","options","userContext","userId","tags","activeBatchIds","setActiveBatchIds","batchResults","setBatchResults","success","failed","total","tryonWithProgress","executeBatch","variablesList","batchIds","results","Promise","allSettled","map","push","prev","filter","id","value","reason","cancelBatch","forEach","Error","batchProgress","completed","inProgress","progressPercentage"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useTryonWithProgress.ts"],"sourcesContent":["// Try-On Hook with Progress Tracking\n// Combines mutation, optimistic updates, and progress tracking for easy component integration\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { useTryonMutation } from '../mutations/useTryonMutation';\nimport { useOptimisticUpdates } from './useOptimisticUpdates';\nimport type {\n  TryonMutationVariables,\n  TryonMutationResponse,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\n\n/**\n * Configuration for the try-on with progress hook\n */\nexport interface UseTryonWithProgressConfig extends UseTryonMutationConfig {\n  /** Whether to automatically start optimistic updates */\n  autoOptimistic?: boolean;\n  /** Default optimistic configuration */\n  defaultOptimisticConfig?: {\n    showPreview?: boolean;\n    updateHistory?: boolean;\n    showProgress?: boolean;\n    previewPlaceholder?: string;\n    estimatedProcessingTime?: number;\n  };\n  /** Default cache invalidation configuration */\n  defaultCacheConfig?: {\n    invalidateHistory?: boolean;\n    invalidateUserData?: boolean;\n    invalidateStats?: boolean;\n    invalidateTags?: boolean;\n    preloadRelated?: boolean;\n    userContext?: {\n      userId?: string;\n      tags?: string[];\n    };\n  };\n}\n\n/**\n * Return type for the try-on with progress hook\n */\nexport interface UseTryonWithProgressReturn {\n  /** Execute try-on mutation with automatic progress tracking */\n  executeTryon: (variables: TryonMutationVariables) => Promise<TryonMutationResponse>;\n  /** Execute try-on mutation synchronously (fire and forget) */\n  executeTryonSync: (variables: TryonMutationVariables) => void;\n  /** Current mutation result */\n  data: TryonMutationResponse | undefined;\n  /** Current error */\n  error: unknown;\n  /** Whether mutation is loading */\n  isLoading: boolean;\n  /** Whether mutation succeeded */\n  isSuccess: boolean;\n  /** Whether mutation failed */\n  isError: boolean;\n  /** Whether mutation is idle */\n  isIdle: boolean;\n  /** Current mutation status */\n  status: 'idle' | 'loading' | 'error' | 'success';\n  /** Reset mutation state */\n  reset: () => void;\n  /** Current optimistic update ID */\n  currentOptimisticId: string | null;\n  /** Whether optimistic updates are active */\n  hasActiveOptimistic: boolean;\n  /** Start optimistic update manually */\n  startOptimistic: (variables: TryonMutationVariables) => string;\n  /** Complete optimistic update manually */\n  completeOptimistic: (optimisticId: string, result: TryonMutationResponse) => void;\n  /** Rollback optimistic update manually */\n  rollbackOptimistic: (optimisticId: string, error?: unknown) => void;\n  /** Active optimistic updates */\n  activeOptimisticUpdates: any[];\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_PROGRESS_CONFIG: Required<Pick<UseTryonWithProgressConfig, 'autoOptimistic'>> = {\n  autoOptimistic: true\n};\n\n/**\n * Hook that combines try-on mutation with progress tracking and optimistic updates\n */\nexport function useTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): UseTryonWithProgressReturn {\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_PROGRESS_CONFIG,\n    enableOptimisticUpdates: config.autoOptimistic !== false,\n    optimisticConfig: {\n      showPreview: true,\n      updateHistory: true,\n      showProgress: true,\n      estimatedProcessingTime: 8000,\n      ...config.defaultOptimisticConfig\n    },\n    cacheInvalidationConfig: {\n      invalidateHistory: true,\n      invalidateUserData: true,\n      invalidateStats: true,\n      invalidateTags: true,\n      preloadRelated: true,\n      ...config.defaultCacheConfig\n    },\n    ...config\n  }), [config]);\n\n  const [currentOptimisticId, setCurrentOptimisticId] = useState<string | null>(null);\n\n  // Initialize mutation hook with optimistic updates enabled\n  const mutation = useTryonMutation(mergedConfig);\n\n  // Initialize optimistic updates hook\n  const optimisticUpdates = useOptimisticUpdates({\n    enabled: mergedConfig.enableOptimisticUpdates\n  });\n\n  // Enhanced execute function with automatic progress tracking\n  const executeTryon = useCallback(async (variables: TryonMutationVariables): Promise<TryonMutationResponse> => {\n    let optimisticId: string | null = null;\n\n    try {\n      // Start optimistic updates if enabled\n      if (mergedConfig.enableOptimisticUpdates) {\n        optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n        setCurrentOptimisticId(optimisticId);\n      }\n\n      // Execute mutation\n      const result = await mutation.mutateAsync(variables);\n\n      // Complete optimistic updates if they were started\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.completeOptimistic(optimisticId, result);\n        setCurrentOptimisticId(null);\n      }\n\n      return result;\n    } catch (error) {\n      // Rollback optimistic updates on error\n      if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n        optimisticUpdates.rollbackOptimistic(optimisticId, error);\n        setCurrentOptimisticId(null);\n      }\n      throw error;\n    }\n  }, [mutation, optimisticUpdates, mergedConfig]);\n\n  // Sync version that doesn't return a promise\n  const executeTryonSync = useCallback((variables: TryonMutationVariables): void => {\n    executeTryon(variables).catch(error => {\n      console.error('Try-on execution failed:', error);\n    });\n  }, [executeTryon]);\n\n  // Manual optimistic update controls\n  const startOptimistic = useCallback((variables: TryonMutationVariables): string => {\n    const optimisticId = optimisticUpdates.startOptimistic(mergedConfig.optimisticConfig);\n    setCurrentOptimisticId(optimisticId);\n    return optimisticId;\n  }, [optimisticUpdates, mergedConfig.optimisticConfig]);\n\n  const completeOptimistic = useCallback((optimisticId: string, result: TryonMutationResponse) => {\n    optimisticUpdates.completeOptimistic(optimisticId, result);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  const rollbackOptimistic = useCallback((optimisticId: string, error?: unknown) => {\n    optimisticUpdates.rollbackOptimistic(optimisticId, error);\n    if (currentOptimisticId === optimisticId) {\n      setCurrentOptimisticId(null);\n    }\n  }, [optimisticUpdates, currentOptimisticId]);\n\n  // Derived state\n  const hasActiveOptimistic = Boolean(currentOptimisticId) || optimisticUpdates.activeUpdates.length > 0;\n\n  return {\n    // Execution methods\n    executeTryon,\n    executeTryonSync,\n    \n    // Mutation state\n    data: mutation.data,\n    error: mutation.error,\n    isLoading: mutation.isLoading,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status,\n    reset: mutation.reset,\n    \n    // Optimistic updates state\n    currentOptimisticId,\n    hasActiveOptimistic,\n    activeOptimisticUpdates: optimisticUpdates.activeUpdates,\n    \n    // Manual optimistic controls\n    startOptimistic,\n    completeOptimistic,\n    rollbackOptimistic\n  };\n}\n\n/**\n * Simplified hook for basic try-on with progress (most common use case)\n */\nexport function useSimpleTryonWithProgress(\n  options: {\n    userId?: string;\n    tags?: string[];\n    estimatedProcessingTime?: number;\n    showProgress?: boolean;\n  } = {}\n): Pick<UseTryonWithProgressReturn, 'executeTryon' | 'isLoading' | 'currentOptimisticId' | 'error' | 'data'> {\n  const config: UseTryonWithProgressConfig = {\n    defaultOptimisticConfig: {\n      showProgress: options.showProgress !== false,\n      estimatedProcessingTime: options.estimatedProcessingTime || 8000\n    },\n    defaultCacheConfig: {\n      userContext: {\n        userId: options.userId,\n        tags: options.tags\n      }\n    }\n  };\n\n  const {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  } = useTryonWithProgress(config);\n\n  return {\n    executeTryon,\n    isLoading,\n    currentOptimisticId,\n    error,\n    data\n  };\n}\n\n/**\n * Hook for batch try-on operations with progress tracking\n */\nexport function useBatchTryonWithProgress(\n  config: UseTryonWithProgressConfig = {}\n): {\n  executeBatch: (variablesList: TryonMutationVariables[]) => Promise<TryonMutationResponse[]>;\n  batchProgress: {\n    total: number;\n    completed: number;\n    failed: number;\n    inProgress: number;\n    progressPercentage: number;\n  };\n  activeBatchIds: string[];\n  cancelBatch: () => void;\n} {\n  const [activeBatchIds, setActiveBatchIds] = useState<string[]>([]);\n  const [batchResults, setBatchResults] = useState<{ success: number; failed: number; total: number }>({\n    success: 0,\n    failed: 0,\n    total: 0\n  });\n\n  const tryonWithProgress = useTryonWithProgress(config);\n\n  const executeBatch = useCallback(async (variablesList: TryonMutationVariables[]): Promise<TryonMutationResponse[]> => {\n    setBatchResults({ success: 0, failed: 0, total: variablesList.length });\n    const batchIds: string[] = [];\n\n    try {\n      const results = await Promise.allSettled(\n        variablesList.map(async (variables) => {\n          const optimisticId = tryonWithProgress.startOptimistic(variables);\n          batchIds.push(optimisticId);\n          setActiveBatchIds(prev => [...prev, optimisticId]);\n\n          try {\n            const result = await tryonWithProgress.executeTryon(variables);\n            setBatchResults(prev => ({ ...prev, success: prev.success + 1 }));\n            return result;\n          } catch (error) {\n            setBatchResults(prev => ({ ...prev, failed: prev.failed + 1 }));\n            throw error;\n          } finally {\n            setActiveBatchIds(prev => prev.filter(id => id !== optimisticId));\n          }\n        })\n      );\n\n      return results.map(result => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          throw result.reason;\n        }\n      });\n    } finally {\n      setActiveBatchIds([]);\n    }\n  }, [tryonWithProgress]);\n\n  const cancelBatch = useCallback(() => {\n    activeBatchIds.forEach(id => {\n      tryonWithProgress.rollbackOptimistic(id, new Error('Batch cancelled'));\n    });\n    setActiveBatchIds([]);\n    setBatchResults({ success: 0, failed: 0, total: 0 });\n  }, [activeBatchIds, tryonWithProgress]);\n\n  const batchProgress = useMemo(() => {\n    const { success, failed, total } = batchResults;\n    const completed = success + failed;\n    const inProgress = total - completed;\n    const progressPercentage = total > 0 ? (completed / total) * 100 : 0;\n\n    return {\n      total,\n      completed: success,\n      failed,\n      inProgress,\n      progressPercentage\n    };\n  }, [batchResults]);\n\n  return {\n    executeBatch,\n    batchProgress,\n    activeBatchIds,\n    cancelBatch\n  };\n}"],"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","ignoreList":[]}