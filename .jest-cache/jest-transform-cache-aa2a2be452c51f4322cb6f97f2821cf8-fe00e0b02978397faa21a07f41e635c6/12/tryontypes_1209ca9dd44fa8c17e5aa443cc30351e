aba9ae017c0c7cbd5546814f6a2c0e0d
// Try-On Mutation Types
// TypeScript interfaces for try-on functionality using React Query mutations
/**
 * Variables required for the try-on mutation
 */"use strict";

/* istanbul ignore next */
function cov_i2imxn4z4() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/types/tryon.types.ts";
  var hash = "58dc019c07ebdad0c23f05f58d5e6ec36f95905e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/types/tryon.types.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/types/tryon.types.ts"],
      sourcesContent: ["// Try-On Mutation Types\n// TypeScript interfaces for try-on functionality using React Query mutations\n\n/**\n * Variables required for the try-on mutation\n */\nexport interface TryonMutationVariables {\n  /** Base64 encoded model/user image (data URL or pure base64) */\n  modelImage: string;\n  /** Array of base64 encoded apparel images (data URL or pure base64) */\n  apparelImages: string[];\n  /** Optional configuration for the try-on operation */\n  options?: TryonMutationOptions;\n}\n\n/**\n * Optional configuration for try-on operations\n */\nexport interface TryonMutationOptions {\n  /** Processing quality level */\n  quality?: 'low' | 'medium' | 'high';\n  /** Enable/disable optimistic updates */\n  enableOptimisticUpdates?: boolean;\n  /** Custom timeout in milliseconds */\n  timeout?: number;\n  /** Additional metadata to include with the request */\n  metadata?: Record<string, unknown>;\n  /** Image processing options */\n  imageProcessing?: {\n    /** Target width for resizing (default: 1024) */\n    targetWidth?: number;\n    /** Target height for resizing (default: 1536) */\n    targetHeight?: number;\n    /** Maximum file size in KB after compression (default: 1024) */\n    maxSizeKB?: number;\n    /** JPEG quality for compression (0.1-1.0, default: 0.9) */\n    compressionQuality?: number;\n    /** Whether to preserve aspect ratio during resize (default: false) */\n    preserveAspectRatio?: boolean;\n  };\n}\n\n/**\n * Enhanced variables that support both File objects and base64 strings\n */\nexport interface TryonMutationVariablesWithFiles {\n  /** Model/user image as File object or base64 string */\n  modelImage: File | string;\n  /** Array of apparel images as File objects or base64 strings */\n  apparelImages: (File | string)[];\n  /** Optional configuration for the try-on operation */\n  options?: TryonMutationOptions;\n}\n\n/**\n * Response data from the try-on API\n */\nexport interface TryonMutationResponse {\n  /** Base64 encoded generated try-on image */\n  img_generated: string;\n  /** Processing metadata */\n  metadata?: TryonResponseMetadata;\n}\n\n/**\n * Metadata included in the try-on response\n */\nexport interface TryonResponseMetadata {\n  /** Processing time in milliseconds */\n  processingTime?: number;\n  /** API model version used */\n  modelVersion?: string;\n  /** Quality settings applied */\n  appliedQuality?: string;\n  /** Generation timestamp */\n  timestamp?: string;\n  /** Additional processing information */\n  processingInfo?: Record<string, unknown>;\n}\n\n/**\n * Error response structure from the try-on API\n */\nexport interface TryonMutationError {\n  /** Error message */\n  error: string;\n  /** Detailed error information for validation errors */\n  details?: string | Array<{\n    field: string;\n    message: string;\n  }>;\n  /** Error code for programmatic handling */\n  code?: string;\n  /** HTTP status code */\n  status?: number;\n  /** Whether the error is retryable */\n  retryable?: boolean;\n  /** Error category for classification */\n  category?: import('../utils/errorHandling').ErrorCategory;\n  /** Error severity level */\n  severity?: import('../utils/errorHandling').ErrorSeverity;\n  /** Suggested recovery actions */\n  recoveryActions?: import('../utils/errorHandling').ErrorRecoveryAction[];\n}\n\n/**\n * Context data passed through mutation lifecycle\n */\nexport interface TryonMutationContext {\n  /** Original mutation variables */\n  variables: TryonMutationVariables;\n  /** Timestamp when mutation started */\n  startTime: number;\n  /** Retry attempt number (0 for first attempt) */\n  retryCount: number;\n  /** Previous error if this is a retry */\n  previousError?: Error;\n  /** Image processing results if processing was performed */\n  imageProcessingResults?: {\n    /** Model image processing result */\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    /** Apparel images processing results */\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    /** Total processing time for all images */\n    totalProcessingTime: number;\n  };\n  /** Optimistic update ID if optimistic updates are enabled */\n  optimisticId?: string;\n}\n\n/**\n * Hook return type for useTryonMutation\n */\nexport interface UseTryonMutationReturn {\n  /** React Query mutation function */\n  mutate: (variables: TryonMutationVariables) => void;\n  /** Async version of mutation function */\n  mutateAsync: (variables: TryonMutationVariables) => Promise<TryonMutationResponse>;\n  /** Current mutation state */\n  data: TryonMutationResponse | undefined;\n  /** Current error state */\n  error: TryonMutationError | null;\n  /** Loading state */\n  isLoading: boolean;\n  /** Success state */\n  isSuccess: boolean;\n  /** Error state */\n  isError: boolean;\n  /** Idle state */\n  isIdle: boolean;\n  /** Current mutation status */\n  status: 'idle' | 'loading' | 'error' | 'success';\n  /** Reset mutation state */\n  reset: () => void;\n  /** Current mutation context */\n  context: TryonMutationContext | undefined;\n}\n\n/**\n * Configuration options for the useTryonMutation hook\n */\nexport interface UseTryonMutationConfig {\n  /** Enable retry logic with exponential backoff */\n  enableRetry?: boolean;\n  /** Maximum number of retry attempts */\n  maxRetries?: number;\n  /** Initial retry delay in milliseconds */\n  initialRetryDelay?: number;\n  /** Enable optimistic updates */\n  enableOptimisticUpdates?: boolean;\n  /** Optimistic updates configuration */\n  optimisticConfig?: {\n    /** Whether to show immediate preview of generated image */\n    showPreview?: boolean;\n    /** Whether to add optimistic entry to history */\n    updateHistory?: boolean;\n    /** Whether to show loading progress indicators */\n    showProgress?: boolean;\n    /** Custom preview image to show during processing */\n    previewPlaceholder?: string;\n    /** Estimated processing time for progress calculation */\n    estimatedProcessingTime?: number;\n  };\n  /** Cache invalidation configuration */\n  cacheInvalidationConfig?: {\n    /** Whether to invalidate history-related queries */\n    invalidateHistory?: boolean;\n    /** Whether to invalidate user-specific data */\n    invalidateUserData?: boolean;\n    /** Whether to invalidate statistics and aggregations */\n    invalidateStats?: boolean;\n    /** Whether to invalidate tag-based queries */\n    invalidateTags?: boolean;\n    /** Whether to preload related queries after invalidation */\n    preloadRelated?: boolean;\n    /** Custom query keys to invalidate */\n    customQueryKeys?: string[][];\n    /** Context for user-specific invalidation */\n    userContext?: {\n      userId?: string;\n      tags?: string[];\n    };\n  };\n  /** Image processing configuration */\n  imageProcessing?: {\n    /** Target width for resizing (default: 1024) */\n    targetWidth?: number;\n    /** Target height for resizing (default: 1536) */\n    targetHeight?: number;\n    /** Maximum file size in KB after compression (default: 1024) */\n    maxSizeKB?: number;\n    /** JPEG quality for compression (0.1-1.0, default: 0.9) */\n    compressionQuality?: number;\n    /** Whether to preserve aspect ratio during resize (default: false) */\n    preserveAspectRatio?: boolean;\n  };\n  /** Custom error handling */\n  onError?: (error: TryonMutationError, variables: TryonMutationVariables, context: TryonMutationContext) => void;\n  /** Success callback */\n  onSuccess?: (data: TryonMutationResponse, variables: TryonMutationVariables, context: TryonMutationContext) => void;\n  /** Mutation start callback */\n  onMutate?: (variables: TryonMutationVariables) => Promise<TryonMutationContext> | TryonMutationContext | void;\n  /** Settled callback (called on both success and error) */\n  onSettled?: (\n    data: TryonMutationResponse | undefined,\n    error: TryonMutationError | null,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => void;\n}"],
      names: [],
      mappings: "AAAA,wBAAwB;AACxB,6EAA6E;AAE7E;;CAEC"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "58dc019c07ebdad0c23f05f58d5e6ec36f95905e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_i2imxn4z4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_i2imxn4z4();
cov_i2imxn4z4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,