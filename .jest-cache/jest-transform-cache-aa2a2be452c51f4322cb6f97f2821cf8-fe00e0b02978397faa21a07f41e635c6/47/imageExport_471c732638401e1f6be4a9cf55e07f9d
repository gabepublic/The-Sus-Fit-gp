4c593cc16ec3d74001667fcf142042b5
// Image Export and Optimization System
// Final image export utilities with format optimization and quality controls
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BatchExportManager: function() {
        return BatchExportManager;
    },
    DEFAULT_EXPORT_CONFIG: function() {
        return DEFAULT_EXPORT_CONFIG;
    },
    ExportFormat: function() {
        return ExportFormat;
    },
    ImageExporter: function() {
        return ImageExporter;
    },
    QualityPreset: function() {
        return QualityPreset;
    },
    createBatchExportManager: function() {
        return createBatchExportManager;
    },
    createImageExporter: function() {
        return createImageExporter;
    },
    estimateFileSize: function() {
        return estimateFileSize;
    },
    getOptimalFormat: function() {
        return getOptimalFormat;
    }
});
var ExportFormat = /*#__PURE__*/ function(ExportFormat) {
    ExportFormat["PNG"] = "image/png";
    ExportFormat["JPEG"] = "image/jpeg";
    ExportFormat["WEBP"] = "image/webp";
    ExportFormat["AVIF"] = "image/avif";
    return ExportFormat;
}({});
var QualityPreset = /*#__PURE__*/ function(QualityPreset) {
    QualityPreset["DRAFT"] = "draft";
    QualityPreset["WEB"] = "web";
    QualityPreset["SOCIAL"] = "social";
    QualityPreset["PRINT"] = "print";
    QualityPreset["MAXIMUM"] = "maximum"; // Highest quality, largest file
    return QualityPreset;
}({});
/**
 * Quality preset configurations
 */ const QUALITY_PRESETS = {
    ["draft"]: {
        quality: 0.3,
        compression: {
            progressive: false,
            effort: 1
        }
    },
    ["web"]: {
        quality: 0.8,
        compression: {
            progressive: true,
            effort: 3
        }
    },
    ["social"]: {
        quality: 0.85,
        width: 1080,
        height: 1080,
        compression: {
            progressive: true,
            effort: 4
        }
    },
    ["print"]: {
        quality: 0.95,
        dpi: 300,
        compression: {
            progressive: true,
            effort: 5
        }
    },
    ["maximum"]: {
        quality: 1.0,
        compression: {
            lossless: true,
            effort: 6
        }
    }
};
const DEFAULT_EXPORT_CONFIG = {
    format: "image/png",
    quality: 0.9,
    preset: "web",
    backgroundColor: '#ffffff',
    dpi: 72,
    metadata: {
        software: 'TheSusFit Image Editor',
        version: '1.0.0',
        created: new Date()
    }
};
class ImageExporter {
    constructor(managedCanvas){
        this.canvas = managedCanvas.canvas;
        this.ctx = managedCanvas.context;
    }
    /**
   * Export image with specified configuration
   */ async exportImage(config = {}) {
        const startTime = performance.now();
        const finalConfig = this.mergeConfig(config);
        // Create export canvas if dimensions specified
        const exportCanvas = this.createExportCanvas(finalConfig);
        const exportCtx = exportCanvas.getContext('2d');
        // Apply background if specified
        this.applyBackground(exportCtx, exportCanvas, finalConfig.backgroundColor);
        // Draw main content
        exportCtx.drawImage(this.canvas, 0, 0, exportCanvas.width, exportCanvas.height);
        // Apply watermark if specified
        if (finalConfig.watermark) {
            await this.applyWatermark(exportCtx, exportCanvas, finalConfig.watermark);
        }
        // Generate export blob
        const blob = await this.canvasToBlob(exportCanvas, finalConfig);
        const dataUrl = await this.canvasToDataUrl(exportCanvas, finalConfig);
        // Generate filename
        const filename = this.generateFilename(finalConfig);
        // Calculate compression ratio
        const originalSize = this.estimateOriginalSize(exportCanvas);
        const compressionRatio = originalSize > 0 ? blob.size / originalSize : 1;
        const processingTime = performance.now() - startTime;
        return {
            blob,
            dataUrl,
            filename,
            size: blob.size,
            format: finalConfig.format,
            dimensions: {
                width: exportCanvas.width,
                height: exportCanvas.height
            },
            quality: finalConfig.quality,
            metadata: finalConfig.metadata,
            compressionRatio,
            processingTime
        };
    }
    /**
   * Batch export with multiple configurations
   */ async batchExport(configs) {
        const results = [];
        for (const config of configs){
            try {
                const result = await this.exportImage(config);
                results.push(result);
            } catch (error) {
                console.error('Failed to export with config:', config, error);
                throw error;
            }
        }
        return results;
    }
    /**
   * Export with preset configurations
   */ async exportWithPresets(presets) {
        const configs = presets.map((preset)=>({
                preset
            }));
        return this.batchExport(configs);
    }
    /**
   * Download exported image
   */ downloadImage(result) {
        const url = URL.createObjectURL(result.blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = result.filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
    /**
   * Merge configuration with defaults and presets
   */ mergeConfig(config) {
        let finalConfig = {
            ...DEFAULT_EXPORT_CONFIG,
            ...config
        };
        // Apply preset if specified
        if (config.preset && QUALITY_PRESETS[config.preset]) {
            const presetConfig = QUALITY_PRESETS[config.preset];
            finalConfig = {
                ...finalConfig,
                ...presetConfig,
                ...config
            };
        }
        // Set dimensions to canvas size if not specified
        if (!finalConfig.width) finalConfig.width = this.canvas.width;
        if (!finalConfig.height) finalConfig.height = this.canvas.height;
        return finalConfig;
    }
    /**
   * Create export canvas with specified dimensions
   */ createExportCanvas(config) {
        const canvas = document.createElement('canvas');
        canvas.width = config.width;
        canvas.height = config.height;
        // Handle high DPI displays
        const dpiScale = (config.dpi || 72) / 72;
        if (dpiScale !== 1) {
            canvas.style.width = `${canvas.width}px`;
            canvas.style.height = `${canvas.height}px`;
            canvas.width *= dpiScale;
            canvas.height *= dpiScale;
            const ctx = canvas.getContext('2d');
            ctx.scale(dpiScale, dpiScale);
        }
        return canvas;
    }
    /**
   * Apply background color to canvas
   */ applyBackground(ctx, canvas, backgroundColor) {
        if (backgroundColor && backgroundColor !== 'transparent') {
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
    }
    /**
   * Apply watermark to canvas
   */ async applyWatermark(ctx, canvas, watermark) {
        ctx.save();
        ctx.globalAlpha = watermark.opacity;
        if (watermark.text) {
            // Text watermark
            const fontSize = Math.min(canvas.width, canvas.height) * (watermark.size / 100);
            ctx.font = `${fontSize}px ${watermark.font || 'Arial'}`;
            ctx.fillStyle = watermark.color || '#000000';
            const textMetrics = ctx.measureText(watermark.text);
            const { x, y } = this.calculateWatermarkPosition(canvas, textMetrics.width, fontSize, watermark.position, watermark.margin);
            ctx.fillText(watermark.text, x, y);
        } else if (watermark.image) {
            // Image watermark
            const img = new Image();
            await new Promise((resolve, reject)=>{
                img.onload = resolve;
                img.onerror = reject;
                img.src = watermark.image;
            });
            const watermarkSize = Math.min(canvas.width, canvas.height) * (watermark.size / 100);
            const aspectRatio = img.width / img.height;
            const width = aspectRatio >= 1 ? watermarkSize : watermarkSize * aspectRatio;
            const height = aspectRatio >= 1 ? watermarkSize / aspectRatio : watermarkSize;
            const { x, y } = this.calculateWatermarkPosition(canvas, width, height, watermark.position, watermark.margin);
            ctx.drawImage(img, x, y, width, height);
        }
        ctx.restore();
    }
    /**
   * Calculate watermark position based on alignment
   */ calculateWatermarkPosition(canvas, width, height, position, margin) {
        switch(position){
            case 'top-left':
                return {
                    x: margin,
                    y: margin + height
                };
            case 'top-right':
                return {
                    x: canvas.width - width - margin,
                    y: margin + height
                };
            case 'bottom-left':
                return {
                    x: margin,
                    y: canvas.height - margin
                };
            case 'bottom-right':
                return {
                    x: canvas.width - width - margin,
                    y: canvas.height - margin
                };
            case 'center':
            default:
                return {
                    x: (canvas.width - width) / 2,
                    y: (canvas.height - height) / 2 + height
                };
        }
    }
    /**
   * Convert canvas to blob with format and quality
   */ async canvasToBlob(canvas, config) {
        return new Promise((resolve, reject)=>{
            canvas.toBlob((blob)=>{
                if (blob) {
                    resolve(blob);
                } else {
                    reject(new Error('Failed to create blob from canvas'));
                }
            }, config.format, config.quality);
        });
    }
    /**
   * Convert canvas to data URL
   */ async canvasToDataUrl(canvas, config) {
        return canvas.toDataURL(config.format, config.quality);
    }
    /**
   * Generate filename based on configuration
   */ generateFilename(config) {
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
        const extension = this.getFileExtension(config.format);
        const preset = config.preset ? `_${config.preset}` : '';
        const dimensions = `_${config.width}x${config.height}`;
        return `exported_image${preset}${dimensions}_${timestamp}.${extension}`;
    }
    /**
   * Get file extension for format
   */ getFileExtension(format) {
        switch(format){
            case "image/png":
                return 'png';
            case "image/jpeg":
                return 'jpg';
            case "image/webp":
                return 'webp';
            case "image/avif":
                return 'avif';
            default:
                return 'png';
        }
    }
    /**
   * Estimate original (uncompressed) size for compression ratio calculation
   */ estimateOriginalSize(canvas) {
        // Estimate as 4 bytes per pixel (RGBA) for uncompressed bitmap
        return canvas.width * canvas.height * 4;
    }
}
class BatchExportManager {
    constructor(exporter, concurrency = 2){
        this.queue = [];
        this.processing = false;
        this.exporter = exporter;
        this.concurrency = concurrency;
    }
    /**
   * Add export to queue
   */ async queueExport(config) {
        return new Promise((resolve, reject)=>{
            this.queue.push({
                config,
                resolve,
                reject
            });
            if (!this.processing) {
                this.processQueue();
            }
        });
    }
    /**
   * Process export queue with concurrency control
   */ async processQueue() {
        if (this.processing || this.queue.length === 0) return;
        this.processing = true;
        const activePromises = [];
        while(this.queue.length > 0 || activePromises.length > 0){
            // Start new exports up to concurrency limit
            while(activePromises.length < this.concurrency && this.queue.length > 0){
                const item = this.queue.shift();
                const promise = this.processExport(item);
                activePromises.push(promise);
            }
            // Wait for at least one to complete
            if (activePromises.length > 0) {
                await Promise.race(activePromises);
                // Remove completed promises
                for(let i = activePromises.length - 1; i >= 0; i--){
                    if (await Promise.allSettled([
                        activePromises[i]
                    ]).then((results)=>results[0].status === 'fulfilled')) {
                        activePromises.splice(i, 1);
                    }
                }
            }
        }
        this.processing = false;
    }
    /**
   * Process individual export
   */ async processExport(item) {
        try {
            const result = await this.exporter.exportImage(item.config);
            item.resolve(result);
        } catch (error) {
            item.reject(error instanceof Error ? error : new Error(String(error)));
        }
    }
    /**
   * Clear the export queue
   */ clearQueue() {
        this.queue.forEach((item)=>item.reject(new Error('Export cancelled')));
        this.queue = [];
    }
    /**
   * Get queue status
   */ getQueueStatus() {
        return {
            pending: this.queue.length,
            processing: this.processing
        };
    }
}
function createImageExporter(managedCanvas) {
    return new ImageExporter(managedCanvas);
}
function createBatchExportManager(exporter, concurrency) {
    return new BatchExportManager(exporter, concurrency);
}
function getOptimalFormat(useCase) {
    switch(useCase){
        case 'web':
            return "image/webp";
        case 'social':
            return "image/jpeg";
        case 'print':
            return "image/png";
        case 'archive':
            return "image/png";
        default:
            return "image/png";
    }
}
function estimateFileSize(width, height, format, quality = 0.9) {
    const pixels = width * height;
    switch(format){
        case "image/png":
            // PNG is lossless, roughly 3-4 bytes per pixel with compression
            return pixels * 3.5;
        case "image/jpeg":
            // JPEG compression varies greatly with quality
            const baseSize = pixels * 0.5; // Very rough estimate
            return baseSize * quality * 2;
        case "image/webp":
            // WebP is more efficient than JPEG
            const webpBaseSize = pixels * 0.3;
            return webpBaseSize * quality * 1.5;
        case "image/avif":
            // AVIF is even more efficient
            const avifBaseSize = pixels * 0.2;
            return avifBaseSize * quality * 1.2;
        default:
            return pixels * 3;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsc3RyZWV0ZXIvV2Vic3Rvcm1Qcm9qZWN0cy92aWJlLWNvZGluZy90aG9zZS1wZW9wbGUvVGhlLVN1cy1GaXQtZ3Avc3JjL2J1c2luZXNzLWxheWVyL3V0aWxzL2ltYWdlRXhwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltYWdlIEV4cG9ydCBhbmQgT3B0aW1pemF0aW9uIFN5c3RlbVxuLy8gRmluYWwgaW1hZ2UgZXhwb3J0IHV0aWxpdGllcyB3aXRoIGZvcm1hdCBvcHRpbWl6YXRpb24gYW5kIHF1YWxpdHkgY29udHJvbHNcblxuaW1wb3J0IHR5cGUgeyBNYW5hZ2VkQ2FudmFzIH0gZnJvbSAnLi4vcHJvdmlkZXJzL0NhbnZhc1Byb3ZpZGVyJztcblxuLyoqXG4gKiBTdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdHNcbiAqL1xuZXhwb3J0IGVudW0gRXhwb3J0Rm9ybWF0IHtcbiAgUE5HID0gJ2ltYWdlL3BuZycsXG4gIEpQRUcgPSAnaW1hZ2UvanBlZycsXG4gIFdFQlAgPSAnaW1hZ2Uvd2VicCcsXG4gIEFWSUYgPSAnaW1hZ2UvYXZpZidcbn1cblxuLyoqXG4gKiBFeHBvcnQgcXVhbGl0eSBwcmVzZXRzIGZvciBkaWZmZXJlbnQgdXNlIGNhc2VzXG4gKi9cbmV4cG9ydCBlbnVtIFF1YWxpdHlQcmVzZXQge1xuICBEUkFGVCA9ICdkcmFmdCcsICAgICAgICAgICAvLyBMb3cgcXVhbGl0eSwgc21hbGxlc3QgZmlsZVxuICBXRUIgPSAnd2ViJywgICAgICAgICAgICAgIC8vIEJhbGFuY2VkIHF1YWxpdHkgZm9yIHdlYlxuICBTT0NJQUwgPSAnc29jaWFsJywgICAgICAgIC8vIE9wdGltaXplZCBmb3Igc29jaWFsIG1lZGlhXG4gIFBSSU5UID0gJ3ByaW50JywgICAgICAgICAgLy8gSGlnaCBxdWFsaXR5IGZvciBwcmludGluZ1xuICBNQVhJTVVNID0gJ21heGltdW0nICAgICAgIC8vIEhpZ2hlc3QgcXVhbGl0eSwgbGFyZ2VzdCBmaWxlXG59XG5cbi8qKlxuICogRXhwb3J0IGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydENvbmZpZyB7XG4gIGZvcm1hdDogRXhwb3J0Rm9ybWF0O1xuICBxdWFsaXR5OiBudW1iZXI7IC8vIDAtMSBmb3IgbG9zc3kgZm9ybWF0c1xuICBwcmVzZXQ/OiBRdWFsaXR5UHJlc2V0O1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gIGRwaT86IG51bWJlcjtcbiAgbWV0YWRhdGE/OiBFeHBvcnRNZXRhZGF0YTtcbiAgd2F0ZXJtYXJrPzogV2F0ZXJtYXJrQ29uZmlnO1xuICBjb21wcmVzc2lvbj86IENvbXByZXNzaW9uQ29uZmlnO1xufVxuXG4vKipcbiAqIEV4cG9ydCBtZXRhZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydE1ldGFkYXRhIHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBhdXRob3I/OiBzdHJpbmc7XG4gIGNvcHlyaWdodD86IHN0cmluZztcbiAga2V5d29yZHM/OiBzdHJpbmdbXTtcbiAgY3JlYXRlZD86IERhdGU7XG4gIG1vZGlmaWVkPzogRGF0ZTtcbiAgc29mdHdhcmU/OiBzdHJpbmc7XG4gIHZlcnNpb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogV2F0ZXJtYXJrIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXYXRlcm1hcmtDb25maWcge1xuICB0ZXh0Pzogc3RyaW5nO1xuICBpbWFnZT86IHN0cmluZztcbiAgcG9zaXRpb246ICd0b3AtbGVmdCcgfCAndG9wLXJpZ2h0JyB8ICdib3R0b20tbGVmdCcgfCAnYm90dG9tLXJpZ2h0JyB8ICdjZW50ZXInO1xuICBvcGFjaXR5OiBudW1iZXI7XG4gIHNpemU6IG51bWJlcjtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIGZvbnQ/OiBzdHJpbmc7XG4gIG1hcmdpbjogbnVtYmVyO1xufVxuXG4vKipcbiAqIENvbXByZXNzaW9uIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wcmVzc2lvbkNvbmZpZyB7XG4gIHByb2dyZXNzaXZlPzogYm9vbGVhbjsgLy8gRm9yIEpQRUdcbiAgbG9zc2xlc3M/OiBib29sZWFuOyAgICAvLyBGb3IgV2ViUC9BVklGXG4gIGVmZm9ydD86IG51bWJlcjsgICAgICAgLy8gQ29tcHJlc3Npb24gZWZmb3J0ICgwLTYgZm9yIFdlYlApXG59XG5cbi8qKlxuICogRXhwb3J0IHJlc3VsdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydFJlc3VsdCB7XG4gIGJsb2I6IEJsb2I7XG4gIGRhdGFVcmw6IHN0cmluZztcbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICBmb3JtYXQ6IEV4cG9ydEZvcm1hdDtcbiAgZGltZW5zaW9uczogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuICBxdWFsaXR5OiBudW1iZXI7XG4gIG1ldGFkYXRhPzogRXhwb3J0TWV0YWRhdGE7XG4gIGNvbXByZXNzaW9uUmF0aW8/OiBudW1iZXI7XG4gIHByb2Nlc3NpbmdUaW1lOiBudW1iZXI7XG59XG5cbi8qKlxuICogQmF0Y2ggZXhwb3J0IGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXRjaEV4cG9ydENvbmZpZyB7XG4gIGZvcm1hdHM6IEV4cG9ydEZvcm1hdFtdO1xuICBxdWFsaXRpZXM6IG51bWJlcltdO1xuICBwcmVzZXRzPzogUXVhbGl0eVByZXNldFtdO1xuICBuYW1lVGVtcGxhdGU6IHN0cmluZzsgLy8gZS5nLiwgXCJ7bmFtZX1fe3ByZXNldH1fe2Zvcm1hdH1cIlxuICBwYXJhbGxlbEV4cG9ydHM6IG51bWJlcjtcbiAgcHJvZ3Jlc3NDYWxsYmFjaz86IChjb21wbGV0ZWQ6IG51bWJlciwgdG90YWw6IG51bWJlciwgY3VycmVudDogRXhwb3J0UmVzdWx0KSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIFF1YWxpdHkgcHJlc2V0IGNvbmZpZ3VyYXRpb25zXG4gKi9cbmNvbnN0IFFVQUxJVFlfUFJFU0VUUzogUmVjb3JkPFF1YWxpdHlQcmVzZXQsIFBhcnRpYWw8RXhwb3J0Q29uZmlnPj4gPSB7XG4gIFtRdWFsaXR5UHJlc2V0LkRSQUZUXToge1xuICAgIHF1YWxpdHk6IDAuMyxcbiAgICBjb21wcmVzc2lvbjogeyBwcm9ncmVzc2l2ZTogZmFsc2UsIGVmZm9ydDogMSB9XG4gIH0sXG4gIFtRdWFsaXR5UHJlc2V0LldFQl06IHtcbiAgICBxdWFsaXR5OiAwLjgsXG4gICAgY29tcHJlc3Npb246IHsgcHJvZ3Jlc3NpdmU6IHRydWUsIGVmZm9ydDogMyB9XG4gIH0sXG4gIFtRdWFsaXR5UHJlc2V0LlNPQ0lBTF06IHtcbiAgICBxdWFsaXR5OiAwLjg1LFxuICAgIHdpZHRoOiAxMDgwLFxuICAgIGhlaWdodDogMTA4MCxcbiAgICBjb21wcmVzc2lvbjogeyBwcm9ncmVzc2l2ZTogdHJ1ZSwgZWZmb3J0OiA0IH1cbiAgfSxcbiAgW1F1YWxpdHlQcmVzZXQuUFJJTlRdOiB7XG4gICAgcXVhbGl0eTogMC45NSxcbiAgICBkcGk6IDMwMCxcbiAgICBjb21wcmVzc2lvbjogeyBwcm9ncmVzc2l2ZTogdHJ1ZSwgZWZmb3J0OiA1IH1cbiAgfSxcbiAgW1F1YWxpdHlQcmVzZXQuTUFYSU1VTV06IHtcbiAgICBxdWFsaXR5OiAxLjAsXG4gICAgY29tcHJlc3Npb246IHsgbG9zc2xlc3M6IHRydWUsIGVmZm9ydDogNiB9XG4gIH1cbn07XG5cbi8qKlxuICogRGVmYXVsdCBleHBvcnQgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9FWFBPUlRfQ09ORklHOiBFeHBvcnRDb25maWcgPSB7XG4gIGZvcm1hdDogRXhwb3J0Rm9ybWF0LlBORyxcbiAgcXVhbGl0eTogMC45LFxuICBwcmVzZXQ6IFF1YWxpdHlQcmVzZXQuV0VCLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbiAgZHBpOiA3MixcbiAgbWV0YWRhdGE6IHtcbiAgICBzb2Z0d2FyZTogJ1RoZVN1c0ZpdCBJbWFnZSBFZGl0b3InLFxuICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgY3JlYXRlZDogbmV3IERhdGUoKVxuICB9XG59O1xuXG4vKipcbiAqIE1haW4gaW1hZ2UgZXhwb3J0IGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZUV4cG9ydGVyIHtcbiAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuXG4gIGNvbnN0cnVjdG9yKG1hbmFnZWRDYW52YXM6IE1hbmFnZWRDYW52YXMpIHtcbiAgICB0aGlzLmNhbnZhcyA9IG1hbmFnZWRDYW52YXMuY2FudmFzO1xuICAgIHRoaXMuY3R4ID0gbWFuYWdlZENhbnZhcy5jb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydCBpbWFnZSB3aXRoIHNwZWNpZmllZCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBhc3luYyBleHBvcnRJbWFnZShjb25maWc6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPiA9IHt9KTogUHJvbWlzZTxFeHBvcnRSZXN1bHQ+IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zdCBmaW5hbENvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnKTtcbiAgICBcbiAgICAvLyBDcmVhdGUgZXhwb3J0IGNhbnZhcyBpZiBkaW1lbnNpb25zIHNwZWNpZmllZFxuICAgIGNvbnN0IGV4cG9ydENhbnZhcyA9IHRoaXMuY3JlYXRlRXhwb3J0Q2FudmFzKGZpbmFsQ29uZmlnKTtcbiAgICBjb25zdCBleHBvcnRDdHggPSBleHBvcnRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XG5cbiAgICAvLyBBcHBseSBiYWNrZ3JvdW5kIGlmIHNwZWNpZmllZFxuICAgIHRoaXMuYXBwbHlCYWNrZ3JvdW5kKGV4cG9ydEN0eCwgZXhwb3J0Q2FudmFzLCBmaW5hbENvbmZpZy5iYWNrZ3JvdW5kQ29sb3IhKTtcblxuICAgIC8vIERyYXcgbWFpbiBjb250ZW50XG4gICAgZXhwb3J0Q3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhcywgMCwgMCwgZXhwb3J0Q2FudmFzLndpZHRoLCBleHBvcnRDYW52YXMuaGVpZ2h0KTtcblxuICAgIC8vIEFwcGx5IHdhdGVybWFyayBpZiBzcGVjaWZpZWRcbiAgICBpZiAoZmluYWxDb25maWcud2F0ZXJtYXJrKSB7XG4gICAgICBhd2FpdCB0aGlzLmFwcGx5V2F0ZXJtYXJrKGV4cG9ydEN0eCwgZXhwb3J0Q2FudmFzLCBmaW5hbENvbmZpZy53YXRlcm1hcmspO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGV4cG9ydCBibG9iXG4gICAgY29uc3QgYmxvYiA9IGF3YWl0IHRoaXMuY2FudmFzVG9CbG9iKGV4cG9ydENhbnZhcywgZmluYWxDb25maWcpO1xuICAgIGNvbnN0IGRhdGFVcmwgPSBhd2FpdCB0aGlzLmNhbnZhc1RvRGF0YVVybChleHBvcnRDYW52YXMsIGZpbmFsQ29uZmlnKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBmaWxlbmFtZVxuICAgIGNvbnN0IGZpbGVuYW1lID0gdGhpcy5nZW5lcmF0ZUZpbGVuYW1lKGZpbmFsQ29uZmlnKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgY29tcHJlc3Npb24gcmF0aW9cbiAgICBjb25zdCBvcmlnaW5hbFNpemUgPSB0aGlzLmVzdGltYXRlT3JpZ2luYWxTaXplKGV4cG9ydENhbnZhcyk7XG4gICAgY29uc3QgY29tcHJlc3Npb25SYXRpbyA9IG9yaWdpbmFsU2l6ZSA+IDAgPyBibG9iLnNpemUgLyBvcmlnaW5hbFNpemUgOiAxO1xuXG4gICAgY29uc3QgcHJvY2Vzc2luZ1RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgIHJldHVybiB7XG4gICAgICBibG9iLFxuICAgICAgZGF0YVVybCxcbiAgICAgIGZpbGVuYW1lLFxuICAgICAgc2l6ZTogYmxvYi5zaXplLFxuICAgICAgZm9ybWF0OiBmaW5hbENvbmZpZy5mb3JtYXQsXG4gICAgICBkaW1lbnNpb25zOiB7IHdpZHRoOiBleHBvcnRDYW52YXMud2lkdGgsIGhlaWdodDogZXhwb3J0Q2FudmFzLmhlaWdodCB9LFxuICAgICAgcXVhbGl0eTogZmluYWxDb25maWcucXVhbGl0eSxcbiAgICAgIG1ldGFkYXRhOiBmaW5hbENvbmZpZy5tZXRhZGF0YSxcbiAgICAgIGNvbXByZXNzaW9uUmF0aW8sXG4gICAgICBwcm9jZXNzaW5nVGltZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQmF0Y2ggZXhwb3J0IHdpdGggbXVsdGlwbGUgY29uZmlndXJhdGlvbnNcbiAgICovXG4gIGFzeW5jIGJhdGNoRXhwb3J0KGNvbmZpZ3M6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPltdKTogUHJvbWlzZTxFeHBvcnRSZXN1bHRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdHM6IEV4cG9ydFJlc3VsdFtdID0gW107XG4gICAgXG4gICAgZm9yIChjb25zdCBjb25maWcgb2YgY29uZmlncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leHBvcnRJbWFnZShjb25maWcpO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBleHBvcnQgd2l0aCBjb25maWc6JywgY29uZmlnLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydCB3aXRoIHByZXNldCBjb25maWd1cmF0aW9uc1xuICAgKi9cbiAgYXN5bmMgZXhwb3J0V2l0aFByZXNldHMocHJlc2V0czogUXVhbGl0eVByZXNldFtdKTogUHJvbWlzZTxFeHBvcnRSZXN1bHRbXT4ge1xuICAgIGNvbnN0IGNvbmZpZ3MgPSBwcmVzZXRzLm1hcChwcmVzZXQgPT4gKHsgcHJlc2V0IH0pKTtcbiAgICByZXR1cm4gdGhpcy5iYXRjaEV4cG9ydChjb25maWdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb3dubG9hZCBleHBvcnRlZCBpbWFnZVxuICAgKi9cbiAgZG93bmxvYWRJbWFnZShyZXN1bHQ6IEV4cG9ydFJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwocmVzdWx0LmJsb2IpO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5ocmVmID0gdXJsO1xuICAgIGxpbmsuZG93bmxvYWQgPSByZXN1bHQuZmlsZW5hbWU7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICBsaW5rLmNsaWNrKCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgY29uZmlndXJhdGlvbiB3aXRoIGRlZmF1bHRzIGFuZCBwcmVzZXRzXG4gICAqL1xuICBwcml2YXRlIG1lcmdlQ29uZmlnKGNvbmZpZzogUGFydGlhbDxFeHBvcnRDb25maWc+KTogRXhwb3J0Q29uZmlnIHtcbiAgICBsZXQgZmluYWxDb25maWcgPSB7IC4uLkRFRkFVTFRfRVhQT1JUX0NPTkZJRywgLi4uY29uZmlnIH07XG5cbiAgICAvLyBBcHBseSBwcmVzZXQgaWYgc3BlY2lmaWVkXG4gICAgaWYgKGNvbmZpZy5wcmVzZXQgJiYgUVVBTElUWV9QUkVTRVRTW2NvbmZpZy5wcmVzZXRdKSB7XG4gICAgICBjb25zdCBwcmVzZXRDb25maWcgPSBRVUFMSVRZX1BSRVNFVFNbY29uZmlnLnByZXNldF07XG4gICAgICBmaW5hbENvbmZpZyA9IHsgLi4uZmluYWxDb25maWcsIC4uLnByZXNldENvbmZpZywgLi4uY29uZmlnIH07XG4gICAgfVxuXG4gICAgLy8gU2V0IGRpbWVuc2lvbnMgdG8gY2FudmFzIHNpemUgaWYgbm90IHNwZWNpZmllZFxuICAgIGlmICghZmluYWxDb25maWcud2lkdGgpIGZpbmFsQ29uZmlnLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgaWYgKCFmaW5hbENvbmZpZy5oZWlnaHQpIGZpbmFsQ29uZmlnLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcblxuICAgIHJldHVybiBmaW5hbENvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgZXhwb3J0IGNhbnZhcyB3aXRoIHNwZWNpZmllZCBkaW1lbnNpb25zXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZUV4cG9ydENhbnZhcyhjb25maWc6IEV4cG9ydENvbmZpZyk6IEhUTUxDYW52YXNFbGVtZW50IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBjb25maWcud2lkdGghO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBjb25maWcuaGVpZ2h0ITtcbiAgICBcbiAgICAvLyBIYW5kbGUgaGlnaCBEUEkgZGlzcGxheXNcbiAgICBjb25zdCBkcGlTY2FsZSA9IChjb25maWcuZHBpIHx8IDcyKSAvIDcyO1xuICAgIGlmIChkcGlTY2FsZSAhPT0gMSkge1xuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2FudmFzLndpZHRofXB4YDtcbiAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjYW52YXMuaGVpZ2h0fXB4YDtcbiAgICAgIGNhbnZhcy53aWR0aCAqPSBkcGlTY2FsZTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgKj0gZHBpU2NhbGU7XG4gICAgICBcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcbiAgICAgIGN0eC5zY2FsZShkcGlTY2FsZSwgZHBpU2NhbGUpO1xuICAgIH1cblxuICAgIHJldHVybiBjYW52YXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYmFja2dyb3VuZCBjb2xvciB0byBjYW52YXNcbiAgICovXG4gIHByaXZhdGUgYXBwbHlCYWNrZ3JvdW5kKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IgJiYgYmFja2dyb3VuZENvbG9yICE9PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IHdhdGVybWFyayB0byBjYW52YXNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgYXBwbHlXYXRlcm1hcmsoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHdhdGVybWFyazogV2F0ZXJtYXJrQ29uZmlnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSB3YXRlcm1hcmsub3BhY2l0eTtcblxuICAgIGlmICh3YXRlcm1hcmsudGV4dCkge1xuICAgICAgLy8gVGV4dCB3YXRlcm1hcmtcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gTWF0aC5taW4oY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KSAqICh3YXRlcm1hcmsuc2l6ZSAvIDEwMCk7XG4gICAgICBjdHguZm9udCA9IGAke2ZvbnRTaXplfXB4ICR7d2F0ZXJtYXJrLmZvbnQgfHwgJ0FyaWFsJ31gO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhdGVybWFyay5jb2xvciB8fCAnIzAwMDAwMCc7XG4gICAgICBcbiAgICAgIGNvbnN0IHRleHRNZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KHdhdGVybWFyay50ZXh0KTtcbiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5jYWxjdWxhdGVXYXRlcm1hcmtQb3NpdGlvbihcbiAgICAgICAgY2FudmFzLCBcbiAgICAgICAgdGV4dE1ldHJpY3Mud2lkdGgsIFxuICAgICAgICBmb250U2l6ZSwgXG4gICAgICAgIHdhdGVybWFyay5wb3NpdGlvbiwgXG4gICAgICAgIHdhdGVybWFyay5tYXJnaW5cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGN0eC5maWxsVGV4dCh3YXRlcm1hcmsudGV4dCwgeCwgeSk7XG4gICAgfSBlbHNlIGlmICh3YXRlcm1hcmsuaW1hZ2UpIHtcbiAgICAgIC8vIEltYWdlIHdhdGVybWFya1xuICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGltZy5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICBpbWcub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgaW1nLnNyYyA9IHdhdGVybWFyay5pbWFnZSE7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3Qgd2F0ZXJtYXJrU2l6ZSA9IE1hdGgubWluKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCkgKiAod2F0ZXJtYXJrLnNpemUgLyAxMDApO1xuICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBpbWcud2lkdGggLyBpbWcuaGVpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBhc3BlY3RSYXRpbyA+PSAxID8gd2F0ZXJtYXJrU2l6ZSA6IHdhdGVybWFya1NpemUgKiBhc3BlY3RSYXRpbztcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFzcGVjdFJhdGlvID49IDEgPyB3YXRlcm1hcmtTaXplIC8gYXNwZWN0UmF0aW8gOiB3YXRlcm1hcmtTaXplO1xuICAgICAgXG4gICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMuY2FsY3VsYXRlV2F0ZXJtYXJrUG9zaXRpb24oXG4gICAgICAgIGNhbnZhcywgXG4gICAgICAgIHdpZHRoLCBcbiAgICAgICAgaGVpZ2h0LCBcbiAgICAgICAgd2F0ZXJtYXJrLnBvc2l0aW9uLCBcbiAgICAgICAgd2F0ZXJtYXJrLm1hcmdpblxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHdhdGVybWFyayBwb3NpdGlvbiBiYXNlZCBvbiBhbGlnbm1lbnRcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlV2F0ZXJtYXJrUG9zaXRpb24oXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgXG4gICAgd2lkdGg6IG51bWJlciwgXG4gICAgaGVpZ2h0OiBudW1iZXIsIFxuICAgIHBvc2l0aW9uOiBXYXRlcm1hcmtDb25maWdbJ3Bvc2l0aW9uJ10sIFxuICAgIG1hcmdpbjogbnVtYmVyXG4gICk6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB7XG4gICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgY2FzZSAndG9wLWxlZnQnOlxuICAgICAgICByZXR1cm4geyB4OiBtYXJnaW4sIHk6IG1hcmdpbiArIGhlaWdodCB9O1xuICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcbiAgICAgICAgcmV0dXJuIHsgeDogY2FudmFzLndpZHRoIC0gd2lkdGggLSBtYXJnaW4sIHk6IG1hcmdpbiArIGhlaWdodCB9O1xuICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxuICAgICAgICByZXR1cm4geyB4OiBtYXJnaW4sIHk6IGNhbnZhcy5oZWlnaHQgLSBtYXJnaW4gfTtcbiAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6XG4gICAgICAgIHJldHVybiB7IHg6IGNhbnZhcy53aWR0aCAtIHdpZHRoIC0gbWFyZ2luLCB5OiBjYW52YXMuaGVpZ2h0IC0gbWFyZ2luIH07XG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgeDogKGNhbnZhcy53aWR0aCAtIHdpZHRoKSAvIDIsIFxuICAgICAgICAgIHk6IChjYW52YXMuaGVpZ2h0IC0gaGVpZ2h0KSAvIDIgKyBoZWlnaHQgXG4gICAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgY2FudmFzIHRvIGJsb2Igd2l0aCBmb3JtYXQgYW5kIHF1YWxpdHlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY2FudmFzVG9CbG9iKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGNvbmZpZzogRXhwb3J0Q29uZmlnKTogUHJvbWlzZTxCbG9iPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNhbnZhcy50b0Jsb2IoXG4gICAgICAgIChibG9iKSA9PiB7XG4gICAgICAgICAgaWYgKGJsb2IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYmxvYik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYmxvYiBmcm9tIGNhbnZhcycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZy5mb3JtYXQsXG4gICAgICAgIGNvbmZpZy5xdWFsaXR5XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgY2FudmFzIHRvIGRhdGEgVVJMXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNhbnZhc1RvRGF0YVVybChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBjb25maWc6IEV4cG9ydENvbmZpZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoY29uZmlnLmZvcm1hdCwgY29uZmlnLnF1YWxpdHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGZpbGVuYW1lIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVGaWxlbmFtZShjb25maWc6IEV4cG9ydENvbmZpZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDE5KS5yZXBsYWNlKC9bOi1dL2csICcnKTtcbiAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLmdldEZpbGVFeHRlbnNpb24oY29uZmlnLmZvcm1hdCk7XG4gICAgY29uc3QgcHJlc2V0ID0gY29uZmlnLnByZXNldCA/IGBfJHtjb25maWcucHJlc2V0fWAgOiAnJztcbiAgICBjb25zdCBkaW1lbnNpb25zID0gYF8ke2NvbmZpZy53aWR0aH14JHtjb25maWcuaGVpZ2h0fWA7XG4gICAgXG4gICAgcmV0dXJuIGBleHBvcnRlZF9pbWFnZSR7cHJlc2V0fSR7ZGltZW5zaW9uc31fJHt0aW1lc3RhbXB9LiR7ZXh0ZW5zaW9ufWA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGZpbGUgZXh0ZW5zaW9uIGZvciBmb3JtYXRcbiAgICovXG4gIHByaXZhdGUgZ2V0RmlsZUV4dGVuc2lvbihmb3JtYXQ6IEV4cG9ydEZvcm1hdCk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgIGNhc2UgRXhwb3J0Rm9ybWF0LlBORzpcbiAgICAgICAgcmV0dXJuICdwbmcnO1xuICAgICAgY2FzZSBFeHBvcnRGb3JtYXQuSlBFRzpcbiAgICAgICAgcmV0dXJuICdqcGcnO1xuICAgICAgY2FzZSBFeHBvcnRGb3JtYXQuV0VCUDpcbiAgICAgICAgcmV0dXJuICd3ZWJwJztcbiAgICAgIGNhc2UgRXhwb3J0Rm9ybWF0LkFWSUY6XG4gICAgICAgIHJldHVybiAnYXZpZic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ3BuZyc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVzdGltYXRlIG9yaWdpbmFsICh1bmNvbXByZXNzZWQpIHNpemUgZm9yIGNvbXByZXNzaW9uIHJhdGlvIGNhbGN1bGF0aW9uXG4gICAqL1xuICBwcml2YXRlIGVzdGltYXRlT3JpZ2luYWxTaXplKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiBudW1iZXIge1xuICAgIC8vIEVzdGltYXRlIGFzIDQgYnl0ZXMgcGVyIHBpeGVsIChSR0JBKSBmb3IgdW5jb21wcmVzc2VkIGJpdG1hcFxuICAgIHJldHVybiBjYW52YXMud2lkdGggKiBjYW52YXMuaGVpZ2h0ICogNDtcbiAgfVxufVxuXG4vKipcbiAqIEJhdGNoIGV4cG9ydCBtYW5hZ2VyIGZvciBwcm9jZXNzaW5nIG11bHRpcGxlIGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNsYXNzIEJhdGNoRXhwb3J0TWFuYWdlciB7XG4gIHByaXZhdGUgZXhwb3J0ZXI6IEltYWdlRXhwb3J0ZXI7XG4gIHByaXZhdGUgcXVldWU6IEFycmF5PHsgY29uZmlnOiBQYXJ0aWFsPEV4cG9ydENvbmZpZz47IHJlc29sdmU6IChyZXN1bHQ6IEV4cG9ydFJlc3VsdCkgPT4gdm9pZDsgcmVqZWN0OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkIH0+ID0gW107XG4gIHByaXZhdGUgcHJvY2Vzc2luZyA9IGZhbHNlO1xuICBwcml2YXRlIGNvbmN1cnJlbmN5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZXhwb3J0ZXI6IEltYWdlRXhwb3J0ZXIsIGNvbmN1cnJlbmN5OiBudW1iZXIgPSAyKSB7XG4gICAgdGhpcy5leHBvcnRlciA9IGV4cG9ydGVyO1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZXhwb3J0IHRvIHF1ZXVlXG4gICAqL1xuICBhc3luYyBxdWV1ZUV4cG9ydChjb25maWc6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPik6IFByb21pc2U8RXhwb3J0UmVzdWx0PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucXVldWUucHVzaCh7IGNvbmZpZywgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgaWYgKCF0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGV4cG9ydCBxdWV1ZSB3aXRoIGNvbmN1cnJlbmN5IGNvbnRyb2xcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc1F1ZXVlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLnByb2Nlc3NpbmcgfHwgdGhpcy5xdWV1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICB0aGlzLnByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIGNvbnN0IGFjdGl2ZVByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLnF1ZXVlLmxlbmd0aCA+IDAgfHwgYWN0aXZlUHJvbWlzZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gU3RhcnQgbmV3IGV4cG9ydHMgdXAgdG8gY29uY3VycmVuY3kgbGltaXRcbiAgICAgIHdoaWxlIChhY3RpdmVQcm9taXNlcy5sZW5ndGggPCB0aGlzLmNvbmN1cnJlbmN5ICYmIHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5xdWV1ZS5zaGlmdCgpITtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvY2Vzc0V4cG9ydChpdGVtKTtcbiAgICAgICAgYWN0aXZlUHJvbWlzZXMucHVzaChwcm9taXNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2FpdCBmb3IgYXQgbGVhc3Qgb25lIHRvIGNvbXBsZXRlXG4gICAgICBpZiAoYWN0aXZlUHJvbWlzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBhd2FpdCBQcm9taXNlLnJhY2UoYWN0aXZlUHJvbWlzZXMpO1xuICAgICAgICAvLyBSZW1vdmUgY29tcGxldGVkIHByb21pc2VzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVQcm9taXNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoW2FjdGl2ZVByb21pc2VzW2ldXSkudGhlbihyZXN1bHRzID0+IHJlc3VsdHNbMF0uc3RhdHVzID09PSAnZnVsZmlsbGVkJykpIHtcbiAgICAgICAgICAgIGFjdGl2ZVByb21pc2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGluZGl2aWR1YWwgZXhwb3J0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NFeHBvcnQoaXRlbTogeyBjb25maWc6IFBhcnRpYWw8RXhwb3J0Q29uZmlnPjsgcmVzb2x2ZTogKHJlc3VsdDogRXhwb3J0UmVzdWx0KSA9PiB2b2lkOyByZWplY3Q6IChlcnJvcjogRXJyb3IpID0+IHZvaWQgfSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4cG9ydGVyLmV4cG9ydEltYWdlKGl0ZW0uY29uZmlnKTtcbiAgICAgIGl0ZW0ucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVtLnJlamVjdChlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgZXhwb3J0IHF1ZXVlXG4gICAqL1xuICBjbGVhclF1ZXVlKCk6IHZvaWQge1xuICAgIHRoaXMucXVldWUuZm9yRWFjaChpdGVtID0+IGl0ZW0ucmVqZWN0KG5ldyBFcnJvcignRXhwb3J0IGNhbmNlbGxlZCcpKSk7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBxdWV1ZSBzdGF0dXNcbiAgICovXG4gIGdldFF1ZXVlU3RhdHVzKCk6IHsgcGVuZGluZzogbnVtYmVyOyBwcm9jZXNzaW5nOiBib29sZWFuIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nOiB0aGlzLnF1ZXVlLmxlbmd0aCxcbiAgICAgIHByb2Nlc3Npbmc6IHRoaXMucHJvY2Vzc2luZ1xuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBpbWFnZSBleHBvcnRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW1hZ2VFeHBvcnRlcihtYW5hZ2VkQ2FudmFzOiBNYW5hZ2VkQ2FudmFzKTogSW1hZ2VFeHBvcnRlciB7XG4gIHJldHVybiBuZXcgSW1hZ2VFeHBvcnRlcihtYW5hZ2VkQ2FudmFzKTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBiYXRjaCBleHBvcnQgbWFuYWdlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmF0Y2hFeHBvcnRNYW5hZ2VyKGV4cG9ydGVyOiBJbWFnZUV4cG9ydGVyLCBjb25jdXJyZW5jeT86IG51bWJlcik6IEJhdGNoRXhwb3J0TWFuYWdlciB7XG4gIHJldHVybiBuZXcgQmF0Y2hFeHBvcnRNYW5hZ2VyKGV4cG9ydGVyLCBjb25jdXJyZW5jeSk7XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgb3B0aW1hbCBmb3JtYXQgZm9yIHVzZSBjYXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpbWFsRm9ybWF0KHVzZUNhc2U6ICd3ZWInIHwgJ3NvY2lhbCcgfCAncHJpbnQnIHwgJ2FyY2hpdmUnKTogRXhwb3J0Rm9ybWF0IHtcbiAgc3dpdGNoICh1c2VDYXNlKSB7XG4gICAgY2FzZSAnd2ViJzpcbiAgICAgIHJldHVybiBFeHBvcnRGb3JtYXQuV0VCUDtcbiAgICBjYXNlICdzb2NpYWwnOlxuICAgICAgcmV0dXJuIEV4cG9ydEZvcm1hdC5KUEVHO1xuICAgIGNhc2UgJ3ByaW50JzpcbiAgICAgIHJldHVybiBFeHBvcnRGb3JtYXQuUE5HO1xuICAgIGNhc2UgJ2FyY2hpdmUnOlxuICAgICAgcmV0dXJuIEV4cG9ydEZvcm1hdC5QTkc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBFeHBvcnRGb3JtYXQuUE5HO1xuICB9XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBlc3RpbWF0ZSBmaWxlIHNpemVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzdGltYXRlRmlsZVNpemUoXG4gIHdpZHRoOiBudW1iZXIsIFxuICBoZWlnaHQ6IG51bWJlciwgXG4gIGZvcm1hdDogRXhwb3J0Rm9ybWF0LCBcbiAgcXVhbGl0eTogbnVtYmVyID0gMC45XG4pOiBudW1iZXIge1xuICBjb25zdCBwaXhlbHMgPSB3aWR0aCAqIGhlaWdodDtcbiAgXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBFeHBvcnRGb3JtYXQuUE5HOlxuICAgICAgLy8gUE5HIGlzIGxvc3NsZXNzLCByb3VnaGx5IDMtNCBieXRlcyBwZXIgcGl4ZWwgd2l0aCBjb21wcmVzc2lvblxuICAgICAgcmV0dXJuIHBpeGVscyAqIDMuNTtcbiAgICBjYXNlIEV4cG9ydEZvcm1hdC5KUEVHOlxuICAgICAgLy8gSlBFRyBjb21wcmVzc2lvbiB2YXJpZXMgZ3JlYXRseSB3aXRoIHF1YWxpdHlcbiAgICAgIGNvbnN0IGJhc2VTaXplID0gcGl4ZWxzICogMC41OyAvLyBWZXJ5IHJvdWdoIGVzdGltYXRlXG4gICAgICByZXR1cm4gYmFzZVNpemUgKiBxdWFsaXR5ICogMjtcbiAgICBjYXNlIEV4cG9ydEZvcm1hdC5XRUJQOlxuICAgICAgLy8gV2ViUCBpcyBtb3JlIGVmZmljaWVudCB0aGFuIEpQRUdcbiAgICAgIGNvbnN0IHdlYnBCYXNlU2l6ZSA9IHBpeGVscyAqIDAuMztcbiAgICAgIHJldHVybiB3ZWJwQmFzZVNpemUgKiBxdWFsaXR5ICogMS41O1xuICAgIGNhc2UgRXhwb3J0Rm9ybWF0LkFWSUY6XG4gICAgICAvLyBBVklGIGlzIGV2ZW4gbW9yZSBlZmZpY2llbnRcbiAgICAgIGNvbnN0IGF2aWZCYXNlU2l6ZSA9IHBpeGVscyAqIDAuMjtcbiAgICAgIHJldHVybiBhdmlmQmFzZVNpemUgKiBxdWFsaXR5ICogMS4yO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGl4ZWxzICogMztcbiAgfVxufSJdLCJuYW1lcyI6WyJCYXRjaEV4cG9ydE1hbmFnZXIiLCJERUZBVUxUX0VYUE9SVF9DT05GSUciLCJFeHBvcnRGb3JtYXQiLCJJbWFnZUV4cG9ydGVyIiwiUXVhbGl0eVByZXNldCIsImNyZWF0ZUJhdGNoRXhwb3J0TWFuYWdlciIsImNyZWF0ZUltYWdlRXhwb3J0ZXIiLCJlc3RpbWF0ZUZpbGVTaXplIiwiZ2V0T3B0aW1hbEZvcm1hdCIsIlFVQUxJVFlfUFJFU0VUUyIsInF1YWxpdHkiLCJjb21wcmVzc2lvbiIsInByb2dyZXNzaXZlIiwiZWZmb3J0Iiwid2lkdGgiLCJoZWlnaHQiLCJkcGkiLCJsb3NzbGVzcyIsImZvcm1hdCIsInByZXNldCIsImJhY2tncm91bmRDb2xvciIsIm1ldGFkYXRhIiwic29mdHdhcmUiLCJ2ZXJzaW9uIiwiY3JlYXRlZCIsIkRhdGUiLCJjb25zdHJ1Y3RvciIsIm1hbmFnZWRDYW52YXMiLCJjYW52YXMiLCJjdHgiLCJjb250ZXh0IiwiZXhwb3J0SW1hZ2UiLCJjb25maWciLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImZpbmFsQ29uZmlnIiwibWVyZ2VDb25maWciLCJleHBvcnRDYW52YXMiLCJjcmVhdGVFeHBvcnRDYW52YXMiLCJleHBvcnRDdHgiLCJnZXRDb250ZXh0IiwiYXBwbHlCYWNrZ3JvdW5kIiwiZHJhd0ltYWdlIiwid2F0ZXJtYXJrIiwiYXBwbHlXYXRlcm1hcmsiLCJibG9iIiwiY2FudmFzVG9CbG9iIiwiZGF0YVVybCIsImNhbnZhc1RvRGF0YVVybCIsImZpbGVuYW1lIiwiZ2VuZXJhdGVGaWxlbmFtZSIsIm9yaWdpbmFsU2l6ZSIsImVzdGltYXRlT3JpZ2luYWxTaXplIiwiY29tcHJlc3Npb25SYXRpbyIsInNpemUiLCJwcm9jZXNzaW5nVGltZSIsImRpbWVuc2lvbnMiLCJiYXRjaEV4cG9ydCIsImNvbmZpZ3MiLCJyZXN1bHRzIiwicmVzdWx0IiwicHVzaCIsImVycm9yIiwiY29uc29sZSIsImV4cG9ydFdpdGhQcmVzZXRzIiwicHJlc2V0cyIsIm1hcCIsImRvd25sb2FkSW1hZ2UiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImRvd25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsInJldm9rZU9iamVjdFVSTCIsInByZXNldENvbmZpZyIsImRwaVNjYWxlIiwic3R5bGUiLCJzY2FsZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwic2F2ZSIsImdsb2JhbEFscGhhIiwib3BhY2l0eSIsInRleHQiLCJmb250U2l6ZSIsIk1hdGgiLCJtaW4iLCJmb250IiwiY29sb3IiLCJ0ZXh0TWV0cmljcyIsIm1lYXN1cmVUZXh0IiwieCIsInkiLCJjYWxjdWxhdGVXYXRlcm1hcmtQb3NpdGlvbiIsInBvc2l0aW9uIiwibWFyZ2luIiwiZmlsbFRleHQiLCJpbWFnZSIsImltZyIsIkltYWdlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwid2F0ZXJtYXJrU2l6ZSIsImFzcGVjdFJhdGlvIiwicmVzdG9yZSIsInRvQmxvYiIsIkVycm9yIiwidG9EYXRhVVJMIiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJzbGljZSIsInJlcGxhY2UiLCJleHRlbnNpb24iLCJnZXRGaWxlRXh0ZW5zaW9uIiwiZXhwb3J0ZXIiLCJjb25jdXJyZW5jeSIsInF1ZXVlIiwicHJvY2Vzc2luZyIsInF1ZXVlRXhwb3J0IiwicHJvY2Vzc1F1ZXVlIiwibGVuZ3RoIiwiYWN0aXZlUHJvbWlzZXMiLCJpdGVtIiwic2hpZnQiLCJwcm9taXNlIiwicHJvY2Vzc0V4cG9ydCIsInJhY2UiLCJpIiwiYWxsU2V0dGxlZCIsInRoZW4iLCJzdGF0dXMiLCJzcGxpY2UiLCJTdHJpbmciLCJjbGVhclF1ZXVlIiwiZm9yRWFjaCIsImdldFF1ZXVlU3RhdHVzIiwicGVuZGluZyIsInVzZUNhc2UiLCJwaXhlbHMiLCJiYXNlU2l6ZSIsIndlYnBCYXNlU2l6ZSIsImF2aWZCYXNlU2l6ZSJdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBQ3ZDLDZFQUE2RTs7Ozs7Ozs7Ozs7O0lBcWNoRUEsa0JBQWtCO2VBQWxCQTs7SUExVEFDLHFCQUFxQjtlQUFyQkE7O0lBcElEQyxZQUFZO2VBQVpBOztJQW9KQ0MsYUFBYTtlQUFiQTs7SUExSURDLGFBQWE7ZUFBYkE7O0lBb2hCSUMsd0JBQXdCO2VBQXhCQTs7SUFQQUMsbUJBQW1CO2VBQW5CQTs7SUFnQ0FDLGdCQUFnQjtlQUFoQkE7O0lBbEJBQyxnQkFBZ0I7ZUFBaEJBOzs7QUFyaUJULElBQUEsQUFBS04sc0NBQUFBOzs7OztXQUFBQTs7QUFVTCxJQUFBLEFBQUtFLHVDQUFBQTs7Ozs7MENBS2dCLGdDQUFnQztXQUxoREE7O0FBMEZaOztDQUVDLEdBQ0QsTUFBTUssa0JBQWdFO0lBQ3BFLFNBQXFCLEVBQUU7UUFDckJDLFNBQVM7UUFDVEMsYUFBYTtZQUFFQyxhQUFhO1lBQU9DLFFBQVE7UUFBRTtJQUMvQztJQUNBLE9BQW1CLEVBQUU7UUFDbkJILFNBQVM7UUFDVEMsYUFBYTtZQUFFQyxhQUFhO1lBQU1DLFFBQVE7UUFBRTtJQUM5QztJQUNBLFVBQXNCLEVBQUU7UUFDdEJILFNBQVM7UUFDVEksT0FBTztRQUNQQyxRQUFRO1FBQ1JKLGFBQWE7WUFBRUMsYUFBYTtZQUFNQyxRQUFRO1FBQUU7SUFDOUM7SUFDQSxTQUFxQixFQUFFO1FBQ3JCSCxTQUFTO1FBQ1RNLEtBQUs7UUFDTEwsYUFBYTtZQUFFQyxhQUFhO1lBQU1DLFFBQVE7UUFBRTtJQUM5QztJQUNBLFdBQXVCLEVBQUU7UUFDdkJILFNBQVM7UUFDVEMsYUFBYTtZQUFFTSxVQUFVO1lBQU1KLFFBQVE7UUFBRTtJQUMzQztBQUNGO0FBS08sTUFBTVosd0JBQXNDO0lBQ2pEaUIsTUFBTTtJQUNOUixTQUFTO0lBQ1RTLE1BQU07SUFDTkMsaUJBQWlCO0lBQ2pCSixLQUFLO0lBQ0xLLFVBQVU7UUFDUkMsVUFBVTtRQUNWQyxTQUFTO1FBQ1RDLFNBQVMsSUFBSUM7SUFDZjtBQUNGO0FBS08sTUFBTXRCO0lBSVh1QixZQUFZQyxhQUE0QixDQUFFO1FBQ3hDLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxjQUFjQyxNQUFNO1FBQ2xDLElBQUksQ0FBQ0MsR0FBRyxHQUFHRixjQUFjRyxPQUFPO0lBQ2xDO0lBRUE7O0dBRUMsR0FDRCxNQUFNQyxZQUFZQyxTQUFnQyxDQUFDLENBQUMsRUFBeUI7UUFDM0UsTUFBTUMsWUFBWUMsWUFBWUMsR0FBRztRQUNqQyxNQUFNQyxjQUFjLElBQUksQ0FBQ0MsV0FBVyxDQUFDTDtRQUVyQywrQ0FBK0M7UUFDL0MsTUFBTU0sZUFBZSxJQUFJLENBQUNDLGtCQUFrQixDQUFDSDtRQUM3QyxNQUFNSSxZQUFZRixhQUFhRyxVQUFVLENBQUM7UUFFMUMsZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQ0MsZUFBZSxDQUFDRixXQUFXRixjQUFjRixZQUFZaEIsZUFBZTtRQUV6RSxvQkFBb0I7UUFDcEJvQixVQUFVRyxTQUFTLENBQUMsSUFBSSxDQUFDZixNQUFNLEVBQUUsR0FBRyxHQUFHVSxhQUFheEIsS0FBSyxFQUFFd0IsYUFBYXZCLE1BQU07UUFFOUUsK0JBQStCO1FBQy9CLElBQUlxQixZQUFZUSxTQUFTLEVBQUU7WUFDekIsTUFBTSxJQUFJLENBQUNDLGNBQWMsQ0FBQ0wsV0FBV0YsY0FBY0YsWUFBWVEsU0FBUztRQUMxRTtRQUVBLHVCQUF1QjtRQUN2QixNQUFNRSxPQUFPLE1BQU0sSUFBSSxDQUFDQyxZQUFZLENBQUNULGNBQWNGO1FBQ25ELE1BQU1ZLFVBQVUsTUFBTSxJQUFJLENBQUNDLGVBQWUsQ0FBQ1gsY0FBY0Y7UUFFekQsb0JBQW9CO1FBQ3BCLE1BQU1jLFdBQVcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ2Y7UUFFdkMsOEJBQThCO1FBQzlCLE1BQU1nQixlQUFlLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNmO1FBQy9DLE1BQU1nQixtQkFBbUJGLGVBQWUsSUFBSU4sS0FBS1MsSUFBSSxHQUFHSCxlQUFlO1FBRXZFLE1BQU1JLGlCQUFpQnRCLFlBQVlDLEdBQUcsS0FBS0Y7UUFFM0MsT0FBTztZQUNMYTtZQUNBRTtZQUNBRTtZQUNBSyxNQUFNVCxLQUFLUyxJQUFJO1lBQ2ZyQyxRQUFRa0IsWUFBWWxCLE1BQU07WUFDMUJ1QyxZQUFZO2dCQUFFM0MsT0FBT3dCLGFBQWF4QixLQUFLO2dCQUFFQyxRQUFRdUIsYUFBYXZCLE1BQU07WUFBQztZQUNyRUwsU0FBUzBCLFlBQVkxQixPQUFPO1lBQzVCVyxVQUFVZSxZQUFZZixRQUFRO1lBQzlCaUM7WUFDQUU7UUFDRjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFNRSxZQUFZQyxPQUFnQyxFQUEyQjtRQUMzRSxNQUFNQyxVQUEwQixFQUFFO1FBRWxDLEtBQUssTUFBTTVCLFVBQVUyQixRQUFTO1lBQzVCLElBQUk7Z0JBQ0YsTUFBTUUsU0FBUyxNQUFNLElBQUksQ0FBQzlCLFdBQVcsQ0FBQ0M7Z0JBQ3RDNEIsUUFBUUUsSUFBSSxDQUFDRDtZQUNmLEVBQUUsT0FBT0UsT0FBTztnQkFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUFpQy9CLFFBQVErQjtnQkFDdkQsTUFBTUE7WUFDUjtRQUNGO1FBRUEsT0FBT0g7SUFDVDtJQUVBOztHQUVDLEdBQ0QsTUFBTUssa0JBQWtCQyxPQUF3QixFQUEyQjtRQUN6RSxNQUFNUCxVQUFVTyxRQUFRQyxHQUFHLENBQUNoRCxDQUFBQSxTQUFXLENBQUE7Z0JBQUVBO1lBQU8sQ0FBQTtRQUNoRCxPQUFPLElBQUksQ0FBQ3VDLFdBQVcsQ0FBQ0M7SUFDMUI7SUFFQTs7R0FFQyxHQUNEUyxjQUFjUCxNQUFvQixFQUFRO1FBQ3hDLE1BQU1RLE1BQU1DLElBQUlDLGVBQWUsQ0FBQ1YsT0FBT2YsSUFBSTtRQUMzQyxNQUFNMEIsT0FBT0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3BDRixLQUFLRyxJQUFJLEdBQUdOO1FBQ1pHLEtBQUtJLFFBQVEsR0FBR2YsT0FBT1gsUUFBUTtRQUMvQnVCLFNBQVNJLElBQUksQ0FBQ0MsV0FBVyxDQUFDTjtRQUMxQkEsS0FBS08sS0FBSztRQUNWTixTQUFTSSxJQUFJLENBQUNHLFdBQVcsQ0FBQ1I7UUFDMUJGLElBQUlXLGVBQWUsQ0FBQ1o7SUFDdEI7SUFFQTs7R0FFQyxHQUNELEFBQVFoQyxZQUFZTCxNQUE2QixFQUFnQjtRQUMvRCxJQUFJSSxjQUFjO1lBQUUsR0FBR25DLHFCQUFxQjtZQUFFLEdBQUcrQixNQUFNO1FBQUM7UUFFeEQsNEJBQTRCO1FBQzVCLElBQUlBLE9BQU9iLE1BQU0sSUFBSVYsZUFBZSxDQUFDdUIsT0FBT2IsTUFBTSxDQUFDLEVBQUU7WUFDbkQsTUFBTStELGVBQWV6RSxlQUFlLENBQUN1QixPQUFPYixNQUFNLENBQUM7WUFDbkRpQixjQUFjO2dCQUFFLEdBQUdBLFdBQVc7Z0JBQUUsR0FBRzhDLFlBQVk7Z0JBQUUsR0FBR2xELE1BQU07WUFBQztRQUM3RDtRQUVBLGlEQUFpRDtRQUNqRCxJQUFJLENBQUNJLFlBQVl0QixLQUFLLEVBQUVzQixZQUFZdEIsS0FBSyxHQUFHLElBQUksQ0FBQ2MsTUFBTSxDQUFDZCxLQUFLO1FBQzdELElBQUksQ0FBQ3NCLFlBQVlyQixNQUFNLEVBQUVxQixZQUFZckIsTUFBTSxHQUFHLElBQUksQ0FBQ2EsTUFBTSxDQUFDYixNQUFNO1FBRWhFLE9BQU9xQjtJQUNUO0lBRUE7O0dBRUMsR0FDRCxBQUFRRyxtQkFBbUJQLE1BQW9CLEVBQXFCO1FBQ2xFLE1BQU1KLFNBQVM2QyxTQUFTQyxhQUFhLENBQUM7UUFDdEM5QyxPQUFPZCxLQUFLLEdBQUdrQixPQUFPbEIsS0FBSztRQUMzQmMsT0FBT2IsTUFBTSxHQUFHaUIsT0FBT2pCLE1BQU07UUFFN0IsMkJBQTJCO1FBQzNCLE1BQU1vRSxXQUFXLEFBQUNuRCxDQUFBQSxPQUFPaEIsR0FBRyxJQUFJLEVBQUMsSUFBSztRQUN0QyxJQUFJbUUsYUFBYSxHQUFHO1lBQ2xCdkQsT0FBT3dELEtBQUssQ0FBQ3RFLEtBQUssR0FBRyxHQUFHYyxPQUFPZCxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3hDYyxPQUFPd0QsS0FBSyxDQUFDckUsTUFBTSxHQUFHLEdBQUdhLE9BQU9iLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDMUNhLE9BQU9kLEtBQUssSUFBSXFFO1lBQ2hCdkQsT0FBT2IsTUFBTSxJQUFJb0U7WUFFakIsTUFBTXRELE1BQU1ELE9BQU9hLFVBQVUsQ0FBQztZQUM5QlosSUFBSXdELEtBQUssQ0FBQ0YsVUFBVUE7UUFDdEI7UUFFQSxPQUFPdkQ7SUFDVDtJQUVBOztHQUVDLEdBQ0QsQUFBUWMsZ0JBQWdCYixHQUE2QixFQUFFRCxNQUF5QixFQUFFUixlQUF1QixFQUFRO1FBQy9HLElBQUlBLG1CQUFtQkEsb0JBQW9CLGVBQWU7WUFDeERTLElBQUl5RCxTQUFTLEdBQUdsRTtZQUNoQlMsSUFBSTBELFFBQVEsQ0FBQyxHQUFHLEdBQUczRCxPQUFPZCxLQUFLLEVBQUVjLE9BQU9iLE1BQU07UUFDaEQ7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBYzhCLGVBQWVoQixHQUE2QixFQUFFRCxNQUF5QixFQUFFZ0IsU0FBMEIsRUFBaUI7UUFDaElmLElBQUkyRCxJQUFJO1FBQ1IzRCxJQUFJNEQsV0FBVyxHQUFHN0MsVUFBVThDLE9BQU87UUFFbkMsSUFBSTlDLFVBQVUrQyxJQUFJLEVBQUU7WUFDbEIsaUJBQWlCO1lBQ2pCLE1BQU1DLFdBQVdDLEtBQUtDLEdBQUcsQ0FBQ2xFLE9BQU9kLEtBQUssRUFBRWMsT0FBT2IsTUFBTSxJQUFLNkIsQ0FBQUEsVUFBVVcsSUFBSSxHQUFHLEdBQUU7WUFDN0UxQixJQUFJa0UsSUFBSSxHQUFHLEdBQUdILFNBQVMsR0FBRyxFQUFFaEQsVUFBVW1ELElBQUksSUFBSSxTQUFTO1lBQ3ZEbEUsSUFBSXlELFNBQVMsR0FBRzFDLFVBQVVvRCxLQUFLLElBQUk7WUFFbkMsTUFBTUMsY0FBY3BFLElBQUlxRSxXQUFXLENBQUN0RCxVQUFVK0MsSUFBSTtZQUNsRCxNQUFNLEVBQUVRLENBQUMsRUFBRUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDQywwQkFBMEIsQ0FDOUN6RSxRQUNBcUUsWUFBWW5GLEtBQUssRUFDakI4RSxVQUNBaEQsVUFBVTBELFFBQVEsRUFDbEIxRCxVQUFVMkQsTUFBTTtZQUdsQjFFLElBQUkyRSxRQUFRLENBQUM1RCxVQUFVK0MsSUFBSSxFQUFFUSxHQUFHQztRQUNsQyxPQUFPLElBQUl4RCxVQUFVNkQsS0FBSyxFQUFFO1lBQzFCLGtCQUFrQjtZQUNsQixNQUFNQyxNQUFNLElBQUlDO1lBQ2hCLE1BQU0sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztnQkFDMUJKLElBQUlLLE1BQU0sR0FBR0Y7Z0JBQ2JILElBQUlNLE9BQU8sR0FBR0Y7Z0JBQ2RKLElBQUlPLEdBQUcsR0FBR3JFLFVBQVU2RCxLQUFLO1lBQzNCO1lBRUEsTUFBTVMsZ0JBQWdCckIsS0FBS0MsR0FBRyxDQUFDbEUsT0FBT2QsS0FBSyxFQUFFYyxPQUFPYixNQUFNLElBQUs2QixDQUFBQSxVQUFVVyxJQUFJLEdBQUcsR0FBRTtZQUNsRixNQUFNNEQsY0FBY1QsSUFBSTVGLEtBQUssR0FBRzRGLElBQUkzRixNQUFNO1lBQzFDLE1BQU1ELFFBQVFxRyxlQUFlLElBQUlELGdCQUFnQkEsZ0JBQWdCQztZQUNqRSxNQUFNcEcsU0FBU29HLGVBQWUsSUFBSUQsZ0JBQWdCQyxjQUFjRDtZQUVoRSxNQUFNLEVBQUVmLENBQUMsRUFBRUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDQywwQkFBMEIsQ0FDOUN6RSxRQUNBZCxPQUNBQyxRQUNBNkIsVUFBVTBELFFBQVEsRUFDbEIxRCxVQUFVMkQsTUFBTTtZQUdsQjFFLElBQUljLFNBQVMsQ0FBQytELEtBQUtQLEdBQUdDLEdBQUd0RixPQUFPQztRQUNsQztRQUVBYyxJQUFJdUYsT0FBTztJQUNiO0lBRUE7O0dBRUMsR0FDRCxBQUFRZiwyQkFDTnpFLE1BQXlCLEVBQ3pCZCxLQUFhLEVBQ2JDLE1BQWMsRUFDZHVGLFFBQXFDLEVBQ3JDQyxNQUFjLEVBQ1k7UUFDMUIsT0FBUUQ7WUFDTixLQUFLO2dCQUNILE9BQU87b0JBQUVILEdBQUdJO29CQUFRSCxHQUFHRyxTQUFTeEY7Z0JBQU87WUFDekMsS0FBSztnQkFDSCxPQUFPO29CQUFFb0YsR0FBR3ZFLE9BQU9kLEtBQUssR0FBR0EsUUFBUXlGO29CQUFRSCxHQUFHRyxTQUFTeEY7Z0JBQU87WUFDaEUsS0FBSztnQkFDSCxPQUFPO29CQUFFb0YsR0FBR0k7b0JBQVFILEdBQUd4RSxPQUFPYixNQUFNLEdBQUd3RjtnQkFBTztZQUNoRCxLQUFLO2dCQUNILE9BQU87b0JBQUVKLEdBQUd2RSxPQUFPZCxLQUFLLEdBQUdBLFFBQVF5RjtvQkFBUUgsR0FBR3hFLE9BQU9iLE1BQU0sR0FBR3dGO2dCQUFPO1lBQ3ZFLEtBQUs7WUFDTDtnQkFDRSxPQUFPO29CQUNMSixHQUFHLEFBQUN2RSxDQUFBQSxPQUFPZCxLQUFLLEdBQUdBLEtBQUksSUFBSztvQkFDNUJzRixHQUFHLEFBQUN4RSxDQUFBQSxPQUFPYixNQUFNLEdBQUdBLE1BQUssSUFBSyxJQUFJQTtnQkFDcEM7UUFDSjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFjZ0MsYUFBYW5CLE1BQXlCLEVBQUVJLE1BQW9CLEVBQWlCO1FBQ3pGLE9BQU8sSUFBSTRFLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0JsRixPQUFPeUYsTUFBTSxDQUNYLENBQUN2RTtnQkFDQyxJQUFJQSxNQUFNO29CQUNSK0QsUUFBUS9EO2dCQUNWLE9BQU87b0JBQ0xnRSxPQUFPLElBQUlRLE1BQU07Z0JBQ25CO1lBQ0YsR0FDQXRGLE9BQU9kLE1BQU0sRUFDYmMsT0FBT3RCLE9BQU87UUFFbEI7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBY3VDLGdCQUFnQnJCLE1BQXlCLEVBQUVJLE1BQW9CLEVBQW1CO1FBQzlGLE9BQU9KLE9BQU8yRixTQUFTLENBQUN2RixPQUFPZCxNQUFNLEVBQUVjLE9BQU90QixPQUFPO0lBQ3ZEO0lBRUE7O0dBRUMsR0FDRCxBQUFReUMsaUJBQWlCbkIsTUFBb0IsRUFBVTtRQUNyRCxNQUFNd0YsWUFBWSxJQUFJL0YsT0FBT2dHLFdBQVcsR0FBR0MsS0FBSyxDQUFDLEdBQUcsSUFBSUMsT0FBTyxDQUFDLFNBQVM7UUFDekUsTUFBTUMsWUFBWSxJQUFJLENBQUNDLGdCQUFnQixDQUFDN0YsT0FBT2QsTUFBTTtRQUNyRCxNQUFNQyxTQUFTYSxPQUFPYixNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUVhLE9BQU9iLE1BQU0sRUFBRSxHQUFHO1FBQ3JELE1BQU1zQyxhQUFhLENBQUMsQ0FBQyxFQUFFekIsT0FBT2xCLEtBQUssQ0FBQyxDQUFDLEVBQUVrQixPQUFPakIsTUFBTSxFQUFFO1FBRXRELE9BQU8sQ0FBQyxjQUFjLEVBQUVJLFNBQVNzQyxXQUFXLENBQUMsRUFBRStELFVBQVUsQ0FBQyxFQUFFSSxXQUFXO0lBQ3pFO0lBRUE7O0dBRUMsR0FDRCxBQUFRQyxpQkFBaUIzRyxNQUFvQixFQUFVO1FBQ3JELE9BQVFBO1lBQ047Z0JBQ0UsT0FBTztZQUNUO2dCQUNFLE9BQU87WUFDVDtnQkFDRSxPQUFPO1lBQ1Q7Z0JBQ0UsT0FBTztZQUNUO2dCQUNFLE9BQU87UUFDWDtJQUNGO0lBRUE7O0dBRUMsR0FDRCxBQUFRbUMscUJBQXFCekIsTUFBeUIsRUFBVTtRQUM5RCwrREFBK0Q7UUFDL0QsT0FBT0EsT0FBT2QsS0FBSyxHQUFHYyxPQUFPYixNQUFNLEdBQUc7SUFDeEM7QUFDRjtBQUtPLE1BQU1mO0lBTVgwQixZQUFZb0csUUFBdUIsRUFBRUMsY0FBc0IsQ0FBQyxDQUFFO2FBSnREQyxRQUEySCxFQUFFO2FBQzdIQyxhQUFhO1FBSW5CLElBQUksQ0FBQ0gsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLFdBQVcsR0FBR0E7SUFDckI7SUFFQTs7R0FFQyxHQUNELE1BQU1HLFlBQVlsRyxNQUE2QixFQUF5QjtRQUN0RSxPQUFPLElBQUk0RSxRQUFRLENBQUNDLFNBQVNDO1lBQzNCLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ2xFLElBQUksQ0FBQztnQkFBRTlCO2dCQUFRNkU7Z0JBQVNDO1lBQU87WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQ21CLFVBQVUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDRSxZQUFZO1lBQ25CO1FBQ0Y7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBY0EsZUFBOEI7UUFDMUMsSUFBSSxJQUFJLENBQUNGLFVBQVUsSUFBSSxJQUFJLENBQUNELEtBQUssQ0FBQ0ksTUFBTSxLQUFLLEdBQUc7UUFFaEQsSUFBSSxDQUFDSCxVQUFVLEdBQUc7UUFDbEIsTUFBTUksaUJBQWtDLEVBQUU7UUFFMUMsTUFBTyxJQUFJLENBQUNMLEtBQUssQ0FBQ0ksTUFBTSxHQUFHLEtBQUtDLGVBQWVELE1BQU0sR0FBRyxFQUFHO1lBQ3pELDRDQUE0QztZQUM1QyxNQUFPQyxlQUFlRCxNQUFNLEdBQUcsSUFBSSxDQUFDTCxXQUFXLElBQUksSUFBSSxDQUFDQyxLQUFLLENBQUNJLE1BQU0sR0FBRyxFQUFHO2dCQUN4RSxNQUFNRSxPQUFPLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxLQUFLO2dCQUM3QixNQUFNQyxVQUFVLElBQUksQ0FBQ0MsYUFBYSxDQUFDSDtnQkFDbkNELGVBQWV2RSxJQUFJLENBQUMwRTtZQUN0QjtZQUVBLG9DQUFvQztZQUNwQyxJQUFJSCxlQUFlRCxNQUFNLEdBQUcsR0FBRztnQkFDN0IsTUFBTXhCLFFBQVE4QixJQUFJLENBQUNMO2dCQUNuQiw0QkFBNEI7Z0JBQzVCLElBQUssSUFBSU0sSUFBSU4sZUFBZUQsTUFBTSxHQUFHLEdBQUdPLEtBQUssR0FBR0EsSUFBSztvQkFDbkQsSUFBSSxNQUFNL0IsUUFBUWdDLFVBQVUsQ0FBQzt3QkFBQ1AsY0FBYyxDQUFDTSxFQUFFO3FCQUFDLEVBQUVFLElBQUksQ0FBQ2pGLENBQUFBLFVBQVdBLE9BQU8sQ0FBQyxFQUFFLENBQUNrRixNQUFNLEtBQUssY0FBYzt3QkFDcEdULGVBQWVVLE1BQU0sQ0FBQ0osR0FBRztvQkFDM0I7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsSUFBSSxDQUFDVixVQUFVLEdBQUc7SUFDcEI7SUFFQTs7R0FFQyxHQUNELE1BQWNRLGNBQWNILElBQWdILEVBQWlCO1FBQzNKLElBQUk7WUFDRixNQUFNekUsU0FBUyxNQUFNLElBQUksQ0FBQ2lFLFFBQVEsQ0FBQy9GLFdBQVcsQ0FBQ3VHLEtBQUt0RyxNQUFNO1lBQzFEc0csS0FBS3pCLE9BQU8sQ0FBQ2hEO1FBQ2YsRUFBRSxPQUFPRSxPQUFPO1lBQ2R1RSxLQUFLeEIsTUFBTSxDQUFDL0MsaUJBQWlCdUQsUUFBUXZELFFBQVEsSUFBSXVELE1BQU0wQixPQUFPakY7UUFDaEU7SUFDRjtJQUVBOztHQUVDLEdBQ0RrRixhQUFtQjtRQUNqQixJQUFJLENBQUNqQixLQUFLLENBQUNrQixPQUFPLENBQUNaLENBQUFBLE9BQVFBLEtBQUt4QixNQUFNLENBQUMsSUFBSVEsTUFBTTtRQUNqRCxJQUFJLENBQUNVLEtBQUssR0FBRyxFQUFFO0lBQ2pCO0lBRUE7O0dBRUMsR0FDRG1CLGlCQUEyRDtRQUN6RCxPQUFPO1lBQ0xDLFNBQVMsSUFBSSxDQUFDcEIsS0FBSyxDQUFDSSxNQUFNO1lBQzFCSCxZQUFZLElBQUksQ0FBQ0EsVUFBVTtRQUM3QjtJQUNGO0FBQ0Y7QUFLTyxTQUFTM0gsb0JBQW9CcUIsYUFBNEI7SUFDOUQsT0FBTyxJQUFJeEIsY0FBY3dCO0FBQzNCO0FBS08sU0FBU3RCLHlCQUF5QnlILFFBQXVCLEVBQUVDLFdBQW9CO0lBQ3BGLE9BQU8sSUFBSS9ILG1CQUFtQjhILFVBQVVDO0FBQzFDO0FBS08sU0FBU3ZILGlCQUFpQjZJLE9BQStDO0lBQzlFLE9BQVFBO1FBQ04sS0FBSztZQUNIO1FBQ0YsS0FBSztZQUNIO1FBQ0YsS0FBSztZQUNIO1FBQ0YsS0FBSztZQUNIO1FBQ0Y7WUFDRTtJQUNKO0FBQ0Y7QUFLTyxTQUFTOUksaUJBQ2RPLEtBQWEsRUFDYkMsTUFBYyxFQUNkRyxNQUFvQixFQUNwQlIsVUFBa0IsR0FBRztJQUVyQixNQUFNNEksU0FBU3hJLFFBQVFDO0lBRXZCLE9BQVFHO1FBQ047WUFDRSxnRUFBZ0U7WUFDaEUsT0FBT29JLFNBQVM7UUFDbEI7WUFDRSwrQ0FBK0M7WUFDL0MsTUFBTUMsV0FBV0QsU0FBUyxLQUFLLHNCQUFzQjtZQUNyRCxPQUFPQyxXQUFXN0ksVUFBVTtRQUM5QjtZQUNFLG1DQUFtQztZQUNuQyxNQUFNOEksZUFBZUYsU0FBUztZQUM5QixPQUFPRSxlQUFlOUksVUFBVTtRQUNsQztZQUNFLDhCQUE4QjtZQUM5QixNQUFNK0ksZUFBZUgsU0FBUztZQUM5QixPQUFPRyxlQUFlL0ksVUFBVTtRQUNsQztZQUNFLE9BQU80SSxTQUFTO0lBQ3BCO0FBQ0YifQ==