{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageExport.ts"],"sourcesContent":["// Image Export and Optimization System\n// Final image export utilities with format optimization and quality controls\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\n\n/**\n * Supported export formats\n */\nexport enum ExportFormat {\n  PNG = 'image/png',\n  JPEG = 'image/jpeg',\n  WEBP = 'image/webp',\n  AVIF = 'image/avif'\n}\n\n/**\n * Export quality presets for different use cases\n */\nexport enum QualityPreset {\n  DRAFT = 'draft',           // Low quality, smallest file\n  WEB = 'web',              // Balanced quality for web\n  SOCIAL = 'social',        // Optimized for social media\n  PRINT = 'print',          // High quality for printing\n  MAXIMUM = 'maximum'       // Highest quality, largest file\n}\n\n/**\n * Export configuration options\n */\nexport interface ExportConfig {\n  format: ExportFormat;\n  quality: number; // 0-1 for lossy formats\n  preset?: QualityPreset;\n  width?: number;\n  height?: number;\n  backgroundColor?: string;\n  dpi?: number;\n  metadata?: ExportMetadata;\n  watermark?: WatermarkConfig;\n  compression?: CompressionConfig;\n}\n\n/**\n * Export metadata\n */\nexport interface ExportMetadata {\n  title?: string;\n  description?: string;\n  author?: string;\n  copyright?: string;\n  keywords?: string[];\n  created?: Date;\n  modified?: Date;\n  software?: string;\n  version?: string;\n}\n\n/**\n * Watermark configuration\n */\nexport interface WatermarkConfig {\n  text?: string;\n  image?: string;\n  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';\n  opacity: number;\n  size: number;\n  color?: string;\n  font?: string;\n  margin: number;\n}\n\n/**\n * Compression configuration\n */\nexport interface CompressionConfig {\n  progressive?: boolean; // For JPEG\n  lossless?: boolean;    // For WebP/AVIF\n  effort?: number;       // Compression effort (0-6 for WebP)\n}\n\n/**\n * Export result\n */\nexport interface ExportResult {\n  blob: Blob;\n  dataUrl: string;\n  filename: string;\n  size: number;\n  format: ExportFormat;\n  dimensions: { width: number; height: number };\n  quality: number;\n  metadata?: ExportMetadata;\n  compressionRatio?: number;\n  processingTime: number;\n}\n\n/**\n * Batch export configuration\n */\nexport interface BatchExportConfig {\n  formats: ExportFormat[];\n  qualities: number[];\n  presets?: QualityPreset[];\n  nameTemplate: string; // e.g., \"{name}_{preset}_{format}\"\n  parallelExports: number;\n  progressCallback?: (completed: number, total: number, current: ExportResult) => void;\n}\n\n/**\n * Quality preset configurations\n */\nconst QUALITY_PRESETS: Record<QualityPreset, Partial<ExportConfig>> = {\n  [QualityPreset.DRAFT]: {\n    quality: 0.3,\n    compression: { progressive: false, effort: 1 }\n  },\n  [QualityPreset.WEB]: {\n    quality: 0.8,\n    compression: { progressive: true, effort: 3 }\n  },\n  [QualityPreset.SOCIAL]: {\n    quality: 0.85,\n    width: 1080,\n    height: 1080,\n    compression: { progressive: true, effort: 4 }\n  },\n  [QualityPreset.PRINT]: {\n    quality: 0.95,\n    dpi: 300,\n    compression: { progressive: true, effort: 5 }\n  },\n  [QualityPreset.MAXIMUM]: {\n    quality: 1.0,\n    compression: { lossless: true, effort: 6 }\n  }\n};\n\n/**\n * Default export configuration\n */\nexport const DEFAULT_EXPORT_CONFIG: ExportConfig = {\n  format: ExportFormat.PNG,\n  quality: 0.9,\n  preset: QualityPreset.WEB,\n  backgroundColor: '#ffffff',\n  dpi: 72,\n  metadata: {\n    software: 'TheSusFit Image Editor',\n    version: '1.0.0',\n    created: new Date()\n  }\n};\n\n/**\n * Main image export class\n */\nexport class ImageExporter {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(managedCanvas: ManagedCanvas) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n  }\n\n  /**\n   * Export image with specified configuration\n   */\n  async exportImage(config: Partial<ExportConfig> = {}): Promise<ExportResult> {\n    const startTime = performance.now();\n    const finalConfig = this.mergeConfig(config);\n    \n    // Create export canvas if dimensions specified\n    const exportCanvas = this.createExportCanvas(finalConfig);\n    const exportCtx = exportCanvas.getContext('2d')!;\n\n    // Apply background if specified\n    this.applyBackground(exportCtx, exportCanvas, finalConfig.backgroundColor!);\n\n    // Draw main content\n    exportCtx.drawImage(this.canvas, 0, 0, exportCanvas.width, exportCanvas.height);\n\n    // Apply watermark if specified\n    if (finalConfig.watermark) {\n      await this.applyWatermark(exportCtx, exportCanvas, finalConfig.watermark);\n    }\n\n    // Generate export blob\n    const blob = await this.canvasToBlob(exportCanvas, finalConfig);\n    const dataUrl = await this.canvasToDataUrl(exportCanvas, finalConfig);\n    \n    // Generate filename\n    const filename = this.generateFilename(finalConfig);\n    \n    // Calculate compression ratio\n    const originalSize = this.estimateOriginalSize(exportCanvas);\n    const compressionRatio = originalSize > 0 ? blob.size / originalSize : 1;\n\n    const processingTime = performance.now() - startTime;\n\n    return {\n      blob,\n      dataUrl,\n      filename,\n      size: blob.size,\n      format: finalConfig.format,\n      dimensions: { width: exportCanvas.width, height: exportCanvas.height },\n      quality: finalConfig.quality,\n      metadata: finalConfig.metadata,\n      compressionRatio,\n      processingTime\n    };\n  }\n\n  /**\n   * Batch export with multiple configurations\n   */\n  async batchExport(configs: Partial<ExportConfig>[]): Promise<ExportResult[]> {\n    const results: ExportResult[] = [];\n    \n    for (const config of configs) {\n      try {\n        const result = await this.exportImage(config);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to export with config:', config, error);\n        throw error;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Export with preset configurations\n   */\n  async exportWithPresets(presets: QualityPreset[]): Promise<ExportResult[]> {\n    const configs = presets.map(preset => ({ preset }));\n    return this.batchExport(configs);\n  }\n\n  /**\n   * Download exported image\n   */\n  downloadImage(result: ExportResult): void {\n    const url = URL.createObjectURL(result.blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = result.filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Merge configuration with defaults and presets\n   */\n  private mergeConfig(config: Partial<ExportConfig>): ExportConfig {\n    let finalConfig = { ...DEFAULT_EXPORT_CONFIG, ...config };\n\n    // Apply preset if specified\n    if (config.preset && QUALITY_PRESETS[config.preset]) {\n      const presetConfig = QUALITY_PRESETS[config.preset];\n      finalConfig = { ...finalConfig, ...presetConfig, ...config };\n    }\n\n    // Set dimensions to canvas size if not specified\n    if (!finalConfig.width) finalConfig.width = this.canvas.width;\n    if (!finalConfig.height) finalConfig.height = this.canvas.height;\n\n    return finalConfig;\n  }\n\n  /**\n   * Create export canvas with specified dimensions\n   */\n  private createExportCanvas(config: ExportConfig): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = config.width!;\n    canvas.height = config.height!;\n    \n    // Handle high DPI displays\n    const dpiScale = (config.dpi || 72) / 72;\n    if (dpiScale !== 1) {\n      canvas.style.width = `${canvas.width}px`;\n      canvas.style.height = `${canvas.height}px`;\n      canvas.width *= dpiScale;\n      canvas.height *= dpiScale;\n      \n      const ctx = canvas.getContext('2d')!;\n      ctx.scale(dpiScale, dpiScale);\n    }\n\n    return canvas;\n  }\n\n  /**\n   * Apply background color to canvas\n   */\n  private applyBackground(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, backgroundColor: string): void {\n    if (backgroundColor && backgroundColor !== 'transparent') {\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Apply watermark to canvas\n   */\n  private async applyWatermark(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, watermark: WatermarkConfig): Promise<void> {\n    ctx.save();\n    ctx.globalAlpha = watermark.opacity;\n\n    if (watermark.text) {\n      // Text watermark\n      const fontSize = Math.min(canvas.width, canvas.height) * (watermark.size / 100);\n      ctx.font = `${fontSize}px ${watermark.font || 'Arial'}`;\n      ctx.fillStyle = watermark.color || '#000000';\n      \n      const textMetrics = ctx.measureText(watermark.text);\n      const { x, y } = this.calculateWatermarkPosition(\n        canvas, \n        textMetrics.width, \n        fontSize, \n        watermark.position, \n        watermark.margin\n      );\n      \n      ctx.fillText(watermark.text, x, y);\n    } else if (watermark.image) {\n      // Image watermark\n      const img = new Image();\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = reject;\n        img.src = watermark.image!;\n      });\n      \n      const watermarkSize = Math.min(canvas.width, canvas.height) * (watermark.size / 100);\n      const aspectRatio = img.width / img.height;\n      const width = aspectRatio >= 1 ? watermarkSize : watermarkSize * aspectRatio;\n      const height = aspectRatio >= 1 ? watermarkSize / aspectRatio : watermarkSize;\n      \n      const { x, y } = this.calculateWatermarkPosition(\n        canvas, \n        width, \n        height, \n        watermark.position, \n        watermark.margin\n      );\n      \n      ctx.drawImage(img, x, y, width, height);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Calculate watermark position based on alignment\n   */\n  private calculateWatermarkPosition(\n    canvas: HTMLCanvasElement, \n    width: number, \n    height: number, \n    position: WatermarkConfig['position'], \n    margin: number\n  ): { x: number; y: number } {\n    switch (position) {\n      case 'top-left':\n        return { x: margin, y: margin + height };\n      case 'top-right':\n        return { x: canvas.width - width - margin, y: margin + height };\n      case 'bottom-left':\n        return { x: margin, y: canvas.height - margin };\n      case 'bottom-right':\n        return { x: canvas.width - width - margin, y: canvas.height - margin };\n      case 'center':\n      default:\n        return { \n          x: (canvas.width - width) / 2, \n          y: (canvas.height - height) / 2 + height \n        };\n    }\n  }\n\n  /**\n   * Convert canvas to blob with format and quality\n   */\n  private async canvasToBlob(canvas: HTMLCanvasElement, config: ExportConfig): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (blob) {\n            resolve(blob);\n          } else {\n            reject(new Error('Failed to create blob from canvas'));\n          }\n        },\n        config.format,\n        config.quality\n      );\n    });\n  }\n\n  /**\n   * Convert canvas to data URL\n   */\n  private async canvasToDataUrl(canvas: HTMLCanvasElement, config: ExportConfig): Promise<string> {\n    return canvas.toDataURL(config.format, config.quality);\n  }\n\n  /**\n   * Generate filename based on configuration\n   */\n  private generateFilename(config: ExportConfig): string {\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');\n    const extension = this.getFileExtension(config.format);\n    const preset = config.preset ? `_${config.preset}` : '';\n    const dimensions = `_${config.width}x${config.height}`;\n    \n    return `exported_image${preset}${dimensions}_${timestamp}.${extension}`;\n  }\n\n  /**\n   * Get file extension for format\n   */\n  private getFileExtension(format: ExportFormat): string {\n    switch (format) {\n      case ExportFormat.PNG:\n        return 'png';\n      case ExportFormat.JPEG:\n        return 'jpg';\n      case ExportFormat.WEBP:\n        return 'webp';\n      case ExportFormat.AVIF:\n        return 'avif';\n      default:\n        return 'png';\n    }\n  }\n\n  /**\n   * Estimate original (uncompressed) size for compression ratio calculation\n   */\n  private estimateOriginalSize(canvas: HTMLCanvasElement): number {\n    // Estimate as 4 bytes per pixel (RGBA) for uncompressed bitmap\n    return canvas.width * canvas.height * 4;\n  }\n}\n\n/**\n * Batch export manager for processing multiple exports\n */\nexport class BatchExportManager {\n  private exporter: ImageExporter;\n  private queue: Array<{ config: Partial<ExportConfig>; resolve: (result: ExportResult) => void; reject: (error: Error) => void }> = [];\n  private processing = false;\n  private concurrency: number;\n\n  constructor(exporter: ImageExporter, concurrency: number = 2) {\n    this.exporter = exporter;\n    this.concurrency = concurrency;\n  }\n\n  /**\n   * Add export to queue\n   */\n  async queueExport(config: Partial<ExportConfig>): Promise<ExportResult> {\n    return new Promise((resolve, reject) => {\n      this.queue.push({ config, resolve, reject });\n      if (!this.processing) {\n        this.processQueue();\n      }\n    });\n  }\n\n  /**\n   * Process export queue with concurrency control\n   */\n  private async processQueue(): Promise<void> {\n    if (this.processing || this.queue.length === 0) return;\n    \n    this.processing = true;\n    const activePromises: Promise<void>[] = [];\n\n    while (this.queue.length > 0 || activePromises.length > 0) {\n      // Start new exports up to concurrency limit\n      while (activePromises.length < this.concurrency && this.queue.length > 0) {\n        const item = this.queue.shift()!;\n        const promise = this.processExport(item);\n        activePromises.push(promise);\n      }\n\n      // Wait for at least one to complete\n      if (activePromises.length > 0) {\n        await Promise.race(activePromises);\n        // Remove completed promises\n        for (let i = activePromises.length - 1; i >= 0; i--) {\n          if (await Promise.allSettled([activePromises[i]]).then(results => results[0].status === 'fulfilled')) {\n            activePromises.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    this.processing = false;\n  }\n\n  /**\n   * Process individual export\n   */\n  private async processExport(item: { config: Partial<ExportConfig>; resolve: (result: ExportResult) => void; reject: (error: Error) => void }): Promise<void> {\n    try {\n      const result = await this.exporter.exportImage(item.config);\n      item.resolve(result);\n    } catch (error) {\n      item.reject(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n\n  /**\n   * Clear the export queue\n   */\n  clearQueue(): void {\n    this.queue.forEach(item => item.reject(new Error('Export cancelled')));\n    this.queue = [];\n  }\n\n  /**\n   * Get queue status\n   */\n  getQueueStatus(): { pending: number; processing: boolean } {\n    return {\n      pending: this.queue.length,\n      processing: this.processing\n    };\n  }\n}\n\n/**\n * Factory function to create image exporter\n */\nexport function createImageExporter(managedCanvas: ManagedCanvas): ImageExporter {\n  return new ImageExporter(managedCanvas);\n}\n\n/**\n * Factory function to create batch export manager\n */\nexport function createBatchExportManager(exporter: ImageExporter, concurrency?: number): BatchExportManager {\n  return new BatchExportManager(exporter, concurrency);\n}\n\n/**\n * Utility function to get optimal format for use case\n */\nexport function getOptimalFormat(useCase: 'web' | 'social' | 'print' | 'archive'): ExportFormat {\n  switch (useCase) {\n    case 'web':\n      return ExportFormat.WEBP;\n    case 'social':\n      return ExportFormat.JPEG;\n    case 'print':\n      return ExportFormat.PNG;\n    case 'archive':\n      return ExportFormat.PNG;\n    default:\n      return ExportFormat.PNG;\n  }\n}\n\n/**\n * Utility function to estimate file size\n */\nexport function estimateFileSize(\n  width: number, \n  height: number, \n  format: ExportFormat, \n  quality: number = 0.9\n): number {\n  const pixels = width * height;\n  \n  switch (format) {\n    case ExportFormat.PNG:\n      // PNG is lossless, roughly 3-4 bytes per pixel with compression\n      return pixels * 3.5;\n    case ExportFormat.JPEG:\n      // JPEG compression varies greatly with quality\n      const baseSize = pixels * 0.5; // Very rough estimate\n      return baseSize * quality * 2;\n    case ExportFormat.WEBP:\n      // WebP is more efficient than JPEG\n      const webpBaseSize = pixels * 0.3;\n      return webpBaseSize * quality * 1.5;\n    case ExportFormat.AVIF:\n      // AVIF is even more efficient\n      const avifBaseSize = pixels * 0.2;\n      return avifBaseSize * quality * 1.2;\n    default:\n      return pixels * 3;\n  }\n}"],"names":["BatchExportManager","DEFAULT_EXPORT_CONFIG","ExportFormat","ImageExporter","QualityPreset","createBatchExportManager","createImageExporter","estimateFileSize","getOptimalFormat","QUALITY_PRESETS","quality","compression","progressive","effort","width","height","dpi","lossless","format","preset","backgroundColor","metadata","software","version","created","Date","constructor","managedCanvas","canvas","ctx","context","exportImage","config","startTime","performance","now","finalConfig","mergeConfig","exportCanvas","createExportCanvas","exportCtx","getContext","applyBackground","drawImage","watermark","applyWatermark","blob","canvasToBlob","dataUrl","canvasToDataUrl","filename","generateFilename","originalSize","estimateOriginalSize","compressionRatio","size","processingTime","dimensions","batchExport","configs","results","result","push","error","console","exportWithPresets","presets","map","downloadImage","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","presetConfig","dpiScale","style","scale","fillStyle","fillRect","save","globalAlpha","opacity","text","fontSize","Math","min","font","color","textMetrics","measureText","x","y","calculateWatermarkPosition","position","margin","fillText","image","img","Image","Promise","resolve","reject","onload","onerror","src","watermarkSize","aspectRatio","restore","toBlob","Error","toDataURL","timestamp","toISOString","slice","replace","extension","getFileExtension","exporter","concurrency","queue","processing","queueExport","processQueue","length","activePromises","item","shift","promise","processExport","race","i","allSettled","then","status","splice","String","clearQueue","forEach","getQueueStatus","pending","useCase","pixels","baseSize","webpBaseSize","avifBaseSize"],"mappings":"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"}