{"version":3,"names":["DEFAULT_STICKER_CONFIG","cov_2jzu63indy","f","s","StickerAnchor","StickerManager","createStickerManager","transform","x","y","scale","rotation","flipX","flipY","visual","opacity","blendMode","_canvasUtils","BlendMode","Normal","anchor","zIndex","locked","visible","maintainAspectRatio","constructor","managedCanvas","stickers","Map","selectedStickerId","gridConfig","enabled","size","showGrid","gridColor","snapThreshold","canvas","ctx","context","calculateBounds","sticker","originalSize","width","height","anchorOffsetX","anchorOffsetY","b","centerX","centerY","corners","cos","Math","sin","rotatedCorners","map","corner","minX","min","c","maxX","max","minY","maxY","rect","center","snapToGrid","snappedX","round","snappedY","deltaX","abs","deltaY","loadImage","source","HTMLImageElement","HTMLCanvasElement","img","Image","src","toDataURL","Promise","resolve","reject","onload","onerror","crossOrigin","addSticker","config","id","Date","now","random","toString","substr","image","imageSource","interactionState","selected","dragging","scaling","rotating","showHandles","bounds","set","error","Error","removeSticker","removed","delete","updateSticker","updates","get","Object","assign","metadata","updatedAt","getSticker","getAllStickers","Array","from","values","sort","a","selectSticker","prevSticker","moveStickerTo","snapped","scaleSticker","scaleConstraints","rotateSticker","PI","flipSticker","undefined","setStickerZIndex","bringToFront","maxZ","sendToBack","minZ","checkCollisions","excludeId","filter","collidingStickers","i","length","j","aRect","bRect","includes","push","hasCollision","getStickerAtPosition","reverse","renderGrid","save","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","restore","renderSticker","globalAlpha","globalCompositeOperation","shadow","shadowColor","color","shadowOffsetX","offsetX","shadowOffsetY","offsetY","shadowBlur","blur","translate","rotate","drawImage","tint","fillStyle","fillRect","border","style","setLineDash","forEach","closePath","renderSelectionHandles","handleSize","handleColor","handleBorderColor","strokeRect","rotationHandleY","arc","fill","renderAllStickers","clearRect","sortedStickers","setGridConfig","getGridConfig","exportStickers","importStickers","importedIds","stickerConfig","console","clearAllStickers","clear"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/stickerPlacement.ts"],"sourcesContent":["// Sticker Placement System for Canvas\n// Comprehensive sticker management with positioning, scaling, rotation, and layering\n\nimport type { ManagedCanvas } from '../providers/CanvasProvider';\nimport { BlendMode } from './canvasUtils';\n\n/**\n * Sticker anchor points for positioning\n */\nexport enum StickerAnchor {\n  TopLeft = 'top-left',\n  TopCenter = 'top-center',\n  TopRight = 'top-right',\n  MiddleLeft = 'middle-left',\n  MiddleCenter = 'middle-center',\n  MiddleRight = 'middle-right',\n  BottomLeft = 'bottom-left',\n  BottomCenter = 'bottom-center',\n  BottomRight = 'bottom-right'\n}\n\n/**\n * Sticker transformation properties\n */\nexport interface StickerTransform {\n  /** X position */\n  x: number;\n  /** Y position */\n  y: number;\n  /** Scale factor (1.0 = original size) */\n  scale: number;\n  /** Rotation in radians */\n  rotation: number;\n  /** Horizontal flip */\n  flipX: boolean;\n  /** Vertical flip */\n  flipY: boolean;\n  /** Skew X in radians */\n  skewX?: number;\n  /** Skew Y in radians */\n  skewY?: number;\n}\n\n/**\n * Sticker visual properties\n */\nexport interface StickerVisualProps {\n  /** Opacity (0-1) */\n  opacity: number;\n  /** Blend mode */\n  blendMode: BlendMode;\n  /** Color tint overlay */\n  tint?: string;\n  /** Shadow configuration */\n  shadow?: {\n    color: string;\n    offsetX: number;\n    offsetY: number;\n    blur: number;\n  };\n  /** Border configuration */\n  border?: {\n    color: string;\n    width: number;\n    style: 'solid' | 'dashed' | 'dotted';\n  };\n}\n\n/**\n * Sticker bounds and collision detection\n */\nexport interface StickerBounds {\n  /** Bounding rectangle */\n  rect: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  /** Rotated corner points */\n  corners: Array<{ x: number; y: number }>;\n  /** Center point */\n  center: { x: number; y: number };\n}\n\n/**\n * Sticker configuration\n */\nexport interface StickerConfig {\n  /** Unique identifier */\n  id: string;\n  /** Sticker image source */\n  imageSource: string | HTMLImageElement | HTMLCanvasElement;\n  /** Original dimensions */\n  originalSize: { width: number; height: number };\n  /** Transform properties */\n  transform: StickerTransform;\n  /** Visual properties */\n  visual: StickerVisualProps;\n  /** Anchor point for positioning */\n  anchor: StickerAnchor;\n  /** Z-index for layering */\n  zIndex: number;\n  /** Whether sticker is locked from editing */\n  locked: boolean;\n  /** Whether sticker is visible */\n  visible: boolean;\n  /** Whether sticker maintains aspect ratio when scaling */\n  maintainAspectRatio: boolean;\n  /** Minimum and maximum scale limits */\n  scaleConstraints?: {\n    min: number;\n    max: number;\n  };\n  /** Snap to grid configuration */\n  snapToGrid?: {\n    enabled: boolean;\n    gridSize: number;\n  };\n  /** Metadata */\n  metadata?: {\n    name?: string;\n    category?: string;\n    tags?: string[];\n    createdAt: Date;\n    updatedAt: Date;\n  };\n}\n\n/**\n * Sticker interaction state\n */\nexport interface StickerInteractionState {\n  /** Whether sticker is selected */\n  selected: boolean;\n  /** Whether sticker is being dragged */\n  dragging: boolean;\n  /** Whether sticker is being scaled */\n  scaling: boolean;\n  /** Whether sticker is being rotated */\n  rotating: boolean;\n  /** Interaction handles visibility */\n  showHandles: boolean;\n  /** Mouse/touch interaction data */\n  interaction?: {\n    startX: number;\n    startY: number;\n    initialTransform: StickerTransform;\n    handle?: 'move' | 'scale' | 'rotate' | 'corner-tl' | 'corner-tr' | 'corner-bl' | 'corner-br';\n  };\n}\n\n/**\n * Sticker item with interaction state\n */\nexport interface Sticker extends StickerConfig {\n  /** Cached image element */\n  image?: HTMLImageElement;\n  /** Current bounds */\n  bounds?: StickerBounds;\n  /** Interaction state */\n  interactionState: StickerInteractionState;\n}\n\n/**\n * Grid snap configuration\n */\nexport interface GridSnapConfig {\n  enabled: boolean;\n  size: number;\n  showGrid: boolean;\n  gridColor: string;\n  snapThreshold: number;\n}\n\n/**\n * Collision detection result\n */\nexport interface CollisionResult {\n  hasCollision: boolean;\n  collidingStickers: string[];\n  suggestedPosition?: { x: number; y: number };\n}\n\n/**\n * Default sticker configuration\n */\nexport const DEFAULT_STICKER_CONFIG: Omit<StickerConfig, 'id' | 'imageSource' | 'originalSize'> = {\n  transform: {\n    x: 0,\n    y: 0,\n    scale: 1,\n    rotation: 0,\n    flipX: false,\n    flipY: false\n  },\n  visual: {\n    opacity: 1,\n    blendMode: BlendMode.Normal\n  },\n  anchor: StickerAnchor.MiddleCenter,\n  zIndex: 0,\n  locked: false,\n  visible: true,\n  maintainAspectRatio: true\n};\n\n/**\n * Sticker placement and management system\n */\nexport class StickerManager {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private stickers: Map<string, Sticker> = new Map();\n  private selectedStickerId: string | null = null;\n  private gridConfig: GridSnapConfig = {\n    enabled: false,\n    size: 20,\n    showGrid: false,\n    gridColor: 'rgba(0, 0, 0, 0.1)',\n    snapThreshold: 10\n  };\n\n  constructor(managedCanvas: ManagedCanvas) {\n    this.canvas = managedCanvas.canvas;\n    this.ctx = managedCanvas.context;\n  }\n\n  /**\n   * Calculate sticker bounds\n   */\n  private calculateBounds(sticker: Sticker): StickerBounds {\n    const { transform, originalSize, anchor } = sticker;\n    const { x, y, scale, rotation } = transform;\n    \n    const width = originalSize.width * scale;\n    const height = originalSize.height * scale;\n    \n    // Calculate anchor offset\n    let anchorOffsetX = 0;\n    let anchorOffsetY = 0;\n    \n    switch (anchor) {\n      case StickerAnchor.TopLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.TopCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.TopRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.MiddleLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.MiddleCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.MiddleRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.BottomLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = -height;\n        break;\n      case StickerAnchor.BottomCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = -height;\n        break;\n      case StickerAnchor.BottomRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = -height;\n        break;\n    }\n    \n    const centerX = x;\n    const centerY = y;\n    \n    // Calculate corner points (before rotation)\n    const corners = [\n      { x: anchorOffsetX, y: anchorOffsetY }, // top-left\n      { x: anchorOffsetX + width, y: anchorOffsetY }, // top-right\n      { x: anchorOffsetX + width, y: anchorOffsetY + height }, // bottom-right\n      { x: anchorOffsetX, y: anchorOffsetY + height } // bottom-left\n    ];\n    \n    // Apply rotation to corners\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n    \n    const rotatedCorners = corners.map(corner => ({\n      x: centerX + (corner.x * cos - corner.y * sin),\n      y: centerY + (corner.x * sin + corner.y * cos)\n    }));\n    \n    // Calculate bounding rectangle\n    const minX = Math.min(...rotatedCorners.map(c => c.x));\n    const maxX = Math.max(...rotatedCorners.map(c => c.x));\n    const minY = Math.min(...rotatedCorners.map(c => c.y));\n    const maxY = Math.max(...rotatedCorners.map(c => c.y));\n    \n    return {\n      rect: {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n      },\n      corners: rotatedCorners,\n      center: { x: centerX, y: centerY }\n    };\n  }\n\n  /**\n   * Snap position to grid\n   */\n  private snapToGrid(x: number, y: number): { x: number; y: number } {\n    if (!this.gridConfig.enabled) {\n      return { x, y };\n    }\n    \n    const { size, snapThreshold } = this.gridConfig;\n    const snappedX = Math.round(x / size) * size;\n    const snappedY = Math.round(y / size) * size;\n    \n    const deltaX = Math.abs(x - snappedX);\n    const deltaY = Math.abs(y - snappedY);\n    \n    return {\n      x: deltaX <= snapThreshold ? snappedX : x,\n      y: deltaY <= snapThreshold ? snappedY : y\n    };\n  }\n\n  /**\n   * Load image from source\n   */\n  private async loadImage(source: string | HTMLImageElement | HTMLCanvasElement): Promise<HTMLImageElement> {\n    if (source instanceof HTMLImageElement) {\n      return source;\n    }\n    \n    if (source instanceof HTMLCanvasElement) {\n      const img = new Image();\n      img.src = source.toDataURL();\n      return new Promise((resolve, reject) => {\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n      });\n    }\n    \n    // String URL\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    return new Promise((resolve, reject) => {\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n      img.src = source;\n    });\n  }\n\n  /**\n   * Add sticker to canvas\n   */\n  async addSticker(config: Omit<StickerConfig, 'id'> & { id?: string }): Promise<string> {\n    const id = config.id || `sticker-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      const image = await this.loadImage(config.imageSource);\n      \n      const sticker: Sticker = {\n        ...DEFAULT_STICKER_CONFIG,\n        ...config,\n        id,\n        image,\n        interactionState: {\n          selected: false,\n          dragging: false,\n          scaling: false,\n          rotating: false,\n          showHandles: false\n        }\n      };\n      \n      // Calculate initial bounds\n      sticker.bounds = this.calculateBounds(sticker);\n      \n      this.stickers.set(id, sticker);\n      return id;\n    } catch (error) {\n      throw new Error(`Failed to load sticker image: ${error}`);\n    }\n  }\n\n  /**\n   * Remove sticker\n   */\n  removeSticker(id: string): boolean {\n    const removed = this.stickers.delete(id);\n    if (this.selectedStickerId === id) {\n      this.selectedStickerId = null;\n    }\n    return removed;\n  }\n\n  /**\n   * Update sticker configuration\n   */\n  updateSticker(id: string, updates: Partial<StickerConfig>): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker) return false;\n    \n    Object.assign(sticker, updates);\n    \n    // Update metadata timestamp\n    if (sticker.metadata) {\n      sticker.metadata.updatedAt = new Date();\n    }\n    \n    // Recalculate bounds\n    sticker.bounds = this.calculateBounds(sticker);\n    \n    return true;\n  }\n\n  /**\n   * Get sticker by ID\n   */\n  getSticker(id: string): Sticker | undefined {\n    return this.stickers.get(id);\n  }\n\n  /**\n   * Get all stickers sorted by z-index\n   */\n  getAllStickers(): Sticker[] {\n    return Array.from(this.stickers.values())\n      .sort((a, b) => a.zIndex - b.zIndex);\n  }\n\n  /**\n   * Select sticker\n   */\n  selectSticker(id: string | null): void {\n    // Deselect previous sticker\n    if (this.selectedStickerId) {\n      const prevSticker = this.stickers.get(this.selectedStickerId);\n      if (prevSticker) {\n        prevSticker.interactionState.selected = false;\n        prevSticker.interactionState.showHandles = false;\n      }\n    }\n    \n    this.selectedStickerId = id;\n    \n    // Select new sticker\n    if (id) {\n      const sticker = this.stickers.get(id);\n      if (sticker && !sticker.locked) {\n        sticker.interactionState.selected = true;\n        sticker.interactionState.showHandles = true;\n      }\n    }\n  }\n\n  /**\n   * Move sticker to position\n   */\n  moveStickerTo(id: string, x: number, y: number): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker || sticker.locked) return false;\n    \n    const snapped = this.snapToGrid(x, y);\n    sticker.transform.x = snapped.x;\n    sticker.transform.y = snapped.y;\n    sticker.bounds = this.calculateBounds(sticker);\n    \n    return true;\n  }\n\n  /**\n   * Scale sticker\n   */\n  scaleSticker(id: string, scale: number, maintainAspectRatio?: boolean): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker || sticker.locked) return false;\n    \n    // Apply scale constraints\n    if (sticker.scaleConstraints) {\n      scale = Math.max(sticker.scaleConstraints.min, Math.min(sticker.scaleConstraints.max, scale));\n    }\n    \n    sticker.transform.scale = scale;\n    sticker.bounds = this.calculateBounds(sticker);\n    \n    return true;\n  }\n\n  /**\n   * Rotate sticker\n   */\n  rotateSticker(id: string, rotation: number): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker || sticker.locked) return false;\n    \n    // Normalize rotation to 0-2π range\n    sticker.transform.rotation = rotation % (2 * Math.PI);\n    sticker.bounds = this.calculateBounds(sticker);\n    \n    return true;\n  }\n\n  /**\n   * Flip sticker\n   */\n  flipSticker(id: string, flipX?: boolean, flipY?: boolean): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker || sticker.locked) return false;\n    \n    if (flipX !== undefined) sticker.transform.flipX = flipX;\n    if (flipY !== undefined) sticker.transform.flipY = flipY;\n    sticker.bounds = this.calculateBounds(sticker);\n    \n    return true;\n  }\n\n  /**\n   * Set sticker z-index\n   */\n  setStickerZIndex(id: string, zIndex: number): boolean {\n    const sticker = this.stickers.get(id);\n    if (!sticker) return false;\n    \n    sticker.zIndex = zIndex;\n    return true;\n  }\n\n  /**\n   * Bring sticker to front\n   */\n  bringToFront(id: string): boolean {\n    const maxZ = Math.max(0, ...Array.from(this.stickers.values()).map(s => s.zIndex));\n    return this.setStickerZIndex(id, maxZ + 1);\n  }\n\n  /**\n   * Send sticker to back\n   */\n  sendToBack(id: string): boolean {\n    const minZ = Math.min(0, ...Array.from(this.stickers.values()).map(s => s.zIndex));\n    return this.setStickerZIndex(id, minZ - 1);\n  }\n\n  /**\n   * Check collision between stickers\n   */\n  checkCollisions(excludeId?: string): CollisionResult {\n    const stickers = this.getAllStickers().filter(s => s.id !== excludeId && s.visible);\n    const collidingStickers: string[] = [];\n    \n    for (let i = 0; i < stickers.length; i++) {\n      for (let j = i + 1; j < stickers.length; j++) {\n        const a = stickers[i];\n        const b = stickers[j];\n        \n        if (!a.bounds || !b.bounds) continue;\n        \n        // Simple bounding box collision detection\n        const aRect = a.bounds.rect;\n        const bRect = b.bounds.rect;\n        \n        if (aRect.x < bRect.x + bRect.width &&\n            aRect.x + aRect.width > bRect.x &&\n            aRect.y < bRect.y + bRect.height &&\n            aRect.y + aRect.height > bRect.y) {\n          \n          if (!collidingStickers.includes(a.id)) collidingStickers.push(a.id);\n          if (!collidingStickers.includes(b.id)) collidingStickers.push(b.id);\n        }\n      }\n    }\n    \n    return {\n      hasCollision: collidingStickers.length > 0,\n      collidingStickers\n    };\n  }\n\n  /**\n   * Find sticker at position\n   */\n  getStickerAtPosition(x: number, y: number): string | null {\n    const stickers = this.getAllStickers()\n      .filter(s => s.visible)\n      .reverse(); // Check from top to bottom\n    \n    for (const sticker of stickers) {\n      if (!sticker.bounds) continue;\n      \n      const { rect } = sticker.bounds;\n      if (x >= rect.x && x <= rect.x + rect.width &&\n          y >= rect.y && y <= rect.y + rect.height) {\n        return sticker.id;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Render grid\n   */\n  private renderGrid(): void {\n    if (!this.gridConfig.enabled || !this.gridConfig.showGrid) return;\n    \n    this.ctx.save();\n    this.ctx.strokeStyle = this.gridConfig.gridColor;\n    this.ctx.lineWidth = 0.5;\n    this.ctx.beginPath();\n    \n    const { size } = this.gridConfig;\n    const { width, height } = this.canvas;\n    \n    // Vertical lines\n    for (let x = 0; x <= width; x += size) {\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, height);\n    }\n    \n    // Horizontal lines\n    for (let y = 0; y <= height; y += size) {\n      this.ctx.moveTo(0, y);\n      this.ctx.lineTo(width, y);\n    }\n    \n    this.ctx.stroke();\n    this.ctx.restore();\n  }\n\n  /**\n   * Render sticker with all transforms\n   */\n  private renderSticker(sticker: Sticker): void {\n    if (!sticker.visible || !sticker.image) return;\n    \n    const { transform, visual, originalSize } = sticker;\n    const { x, y, scale, rotation, flipX, flipY } = transform;\n    \n    this.ctx.save();\n    \n    // Apply global alpha and blend mode\n    this.ctx.globalAlpha = visual.opacity;\n    this.ctx.globalCompositeOperation = visual.blendMode;\n    \n    // Apply shadow if configured\n    if (visual.shadow) {\n      this.ctx.shadowColor = visual.shadow.color;\n      this.ctx.shadowOffsetX = visual.shadow.offsetX;\n      this.ctx.shadowOffsetY = visual.shadow.offsetY;\n      this.ctx.shadowBlur = visual.shadow.blur;\n    }\n    \n    // Transform context\n    this.ctx.translate(x, y);\n    this.ctx.rotate(rotation);\n    this.ctx.scale(flipX ? -scale : scale, flipY ? -scale : scale);\n    \n    const width = originalSize.width;\n    const height = originalSize.height;\n    \n    // Apply anchor offset\n    let anchorOffsetX = 0;\n    let anchorOffsetY = 0;\n    \n    switch (sticker.anchor) {\n      case StickerAnchor.TopLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.TopCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.TopRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = 0;\n        break;\n      case StickerAnchor.MiddleLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.MiddleCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.MiddleRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = -height / 2;\n        break;\n      case StickerAnchor.BottomLeft:\n        anchorOffsetX = 0;\n        anchorOffsetY = -height;\n        break;\n      case StickerAnchor.BottomCenter:\n        anchorOffsetX = -width / 2;\n        anchorOffsetY = -height;\n        break;\n      case StickerAnchor.BottomRight:\n        anchorOffsetX = -width;\n        anchorOffsetY = -height;\n        break;\n    }\n    \n    // Draw the sticker\n    this.ctx.drawImage(sticker.image, anchorOffsetX, anchorOffsetY, width, height);\n    \n    // Apply tint overlay\n    if (visual.tint) {\n      this.ctx.globalCompositeOperation = 'source-atop';\n      this.ctx.fillStyle = visual.tint;\n      this.ctx.fillRect(anchorOffsetX, anchorOffsetY, width, height);\n    }\n    \n    this.ctx.restore();\n    \n    // Draw border if configured\n    if (visual.border && sticker.bounds) {\n      this.ctx.save();\n      this.ctx.strokeStyle = visual.border.color;\n      this.ctx.lineWidth = visual.border.width;\n      \n      if (visual.border.style === 'dashed') {\n        this.ctx.setLineDash([5, 5]);\n      } else if (visual.border.style === 'dotted') {\n        this.ctx.setLineDash([2, 2]);\n      }\n      \n      const { corners } = sticker.bounds;\n      this.ctx.beginPath();\n      this.ctx.moveTo(corners[0].x, corners[0].y);\n      corners.forEach(corner => this.ctx.lineTo(corner.x, corner.y));\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.ctx.restore();\n    }\n  }\n\n  /**\n   * Render selection handles\n   */\n  private renderSelectionHandles(sticker: Sticker): void {\n    if (!sticker.interactionState.showHandles || !sticker.bounds) return;\n    \n    const { corners, center } = sticker.bounds;\n    const handleSize = 8;\n    const handleColor = '#4A90E2';\n    const handleBorderColor = '#FFFFFF';\n    \n    this.ctx.save();\n    \n    // Draw corner handles\n    corners.forEach(corner => {\n      this.ctx.fillStyle = handleColor;\n      this.ctx.strokeStyle = handleBorderColor;\n      this.ctx.lineWidth = 2;\n      \n      this.ctx.fillRect(\n        corner.x - handleSize / 2,\n        corner.y - handleSize / 2,\n        handleSize,\n        handleSize\n      );\n      this.ctx.strokeRect(\n        corner.x - handleSize / 2,\n        corner.y - handleSize / 2,\n        handleSize,\n        handleSize\n      );\n    });\n    \n    // Draw rotation handle\n    const rotationHandleY = corners[0].y - 30;\n    this.ctx.beginPath();\n    this.ctx.arc(center.x, rotationHandleY, handleSize / 2, 0, 2 * Math.PI);\n    this.ctx.fillStyle = '#FF6B6B';\n    this.ctx.fill();\n    this.ctx.strokeStyle = handleBorderColor;\n    this.ctx.stroke();\n    \n    // Draw line to rotation handle\n    this.ctx.beginPath();\n    this.ctx.moveTo(center.x, corners[0].y);\n    this.ctx.lineTo(center.x, rotationHandleY);\n    this.ctx.strokeStyle = '#CCCCCC';\n    this.ctx.lineWidth = 1;\n    this.ctx.stroke();\n    \n    this.ctx.restore();\n  }\n\n  /**\n   * Render all stickers\n   */\n  renderAllStickers(): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Render grid\n    this.renderGrid();\n    \n    // Render stickers in z-index order\n    const sortedStickers = this.getAllStickers();\n    \n    sortedStickers.forEach(sticker => {\n      this.renderSticker(sticker);\n      \n      // Render selection handles for selected sticker\n      if (sticker.interactionState.selected) {\n        this.renderSelectionHandles(sticker);\n      }\n    });\n  }\n\n  /**\n   * Configure grid settings\n   */\n  setGridConfig(config: Partial<GridSnapConfig>): void {\n    Object.assign(this.gridConfig, config);\n  }\n\n  /**\n   * Get grid configuration\n   */\n  getGridConfig(): GridSnapConfig {\n    return { ...this.gridConfig };\n  }\n\n  /**\n   * Export stickers data\n   */\n  exportStickers(): StickerConfig[] {\n    return this.getAllStickers().map(sticker => {\n      const { image, bounds, interactionState, ...config } = sticker;\n      return config;\n    });\n  }\n\n  /**\n   * Import stickers data\n   */\n  async importStickers(stickers: StickerConfig[]): Promise<string[]> {\n    const importedIds: string[] = [];\n    \n    for (const stickerConfig of stickers) {\n      try {\n        const id = await this.addSticker(stickerConfig);\n        importedIds.push(id);\n      } catch (error) {\n        console.error(`Failed to import sticker ${stickerConfig.id}:`, error);\n      }\n    }\n    \n    return importedIds;\n  }\n\n  /**\n   * Clear all stickers\n   */\n  clearAllStickers(): void {\n    this.stickers.clear();\n    this.selectedStickerId = null;\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n}\n\n/**\n * Factory function to create sticker manager\n */\nexport function createStickerManager(managedCanvas: ManagedCanvas): StickerManager {\n  return new StickerManager(managedCanvas);\n}"],"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","ignoreList":[]}