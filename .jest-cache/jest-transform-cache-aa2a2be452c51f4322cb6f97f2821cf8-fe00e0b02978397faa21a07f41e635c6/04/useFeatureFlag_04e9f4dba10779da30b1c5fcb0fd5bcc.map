{"version":3,"names":["useAllFeatureFlags","cov_1uqq2xb7dm","f","s","useAllFeatureFlagsEnabled","useAnyFeatureFlagEnabled","useExperimentVariant","useFeatureFlag","useFeatureFlagEnabled","useFeatureFlagNumber","useFeatureFlagRefresh","useFeatureFlagString","useFeatureFlagValue","useFeatureFlags","logFlagUsage","key","value","source","process","env","NODE_ENV","b","console","debug","JSON","stringify","defaultValue","context","_FeatureFlagContext","useFeatureFlagContext","_react","useMemo","flag","getFlag","isLoading","error","isEnabled","enabled","Boolean","keys","defaultValues","flags","values","enabledCount","forEach","fallbackValue","isAnyEnabled","areAllEnabled","length","enabledFlags","filter","disabledFlags","enabledValue","disabledValue","refresh","refreshFlags","isRefreshing","experimentKey","variants","defaultVariant","flagValue","flagExists","variant","isInExperiment"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useFeatureFlag.ts"],"sourcesContent":["// Feature Flag Hooks\n// Custom React hooks for accessing feature flags with type safety and error handling\n\nimport { useMemo } from 'react';\nimport { useFeatureFlagContext } from '../providers/FeatureFlagContext';\nimport type {\n  FeatureFlag,\n  FeatureFlagValue,\n  UseFeatureFlagReturn,\n} from '../types/featureFlag.types';\n\n// Development logging utility\nconst logFlagUsage = (key: string, value: FeatureFlagValue, source: 'flag' | 'default') => {\n  if (process.env.NODE_ENV === 'development') {\n    console.debug(`[FeatureFlag] ${key}: ${JSON.stringify(value)} (${source})`);\n  }\n};\n\n/**\n * Hook to get a specific feature flag with type safety\n * @param key - Feature flag key\n * @param defaultValue - Fallback value if flag is not found or disabled\n * @returns Feature flag data with loading state and error handling\n */\nexport function useFeatureFlag<T extends FeatureFlagValue>(\n  key: string,\n  defaultValue?: T\n): UseFeatureFlagReturn<T> {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    const flag = context.getFlag<T>(key);\n    const isLoading = context.isLoading;\n    const error = context.error;\n\n    // Determine the final value\n    let value: T;\n    let isEnabled = false;\n    let source: 'flag' | 'default' = 'default';\n\n    if (flag && flag.enabled) {\n      value = flag.value as T;\n      isEnabled = Boolean(flag.value);\n      source = 'flag';\n    } else {\n      value = defaultValue as T;\n      isEnabled = Boolean(defaultValue);\n      source = 'default';\n    }\n\n    // Log usage in development\n    logFlagUsage(key, value, source);\n\n    return {\n      flag,\n      isEnabled,\n      value,\n      isLoading,\n      error,\n    };\n  }, [key, defaultValue, context]);\n}\n\n/**\n * Hook specifically for boolean feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default boolean value (defaults to false)\n * @returns Boolean flag state with loading/error info\n */\nexport function useFeatureFlagEnabled(\n  key: string,\n  defaultValue = false\n): UseFeatureFlagReturn<boolean> {\n  return useFeatureFlag<boolean>(key, defaultValue);\n}\n\n/**\n * Hook for string feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default string value\n * @returns String flag value with loading/error info\n */\nexport function useFeatureFlagString(\n  key: string,\n  defaultValue = ''\n): UseFeatureFlagReturn<string> {\n  return useFeatureFlag<string>(key, defaultValue);\n}\n\n/**\n * Hook for number feature flags\n * @param key - Feature flag key\n * @param defaultValue - Default number value\n * @returns Number flag value with loading/error info\n */\nexport function useFeatureFlagNumber(\n  key: string,\n  defaultValue = 0\n): UseFeatureFlagReturn<number> {\n  return useFeatureFlag<number>(key, defaultValue);\n}\n\n/**\n * Hook to get multiple feature flags at once\n * @param keys - Array of feature flag keys\n * @param defaultValues - Optional object with default values for each key\n * @returns Object containing all requested flags\n */\nexport function useFeatureFlags<T extends Record<string, FeatureFlagValue>>(\n  keys: string[],\n  defaultValues?: Partial<T>\n): {\n  flags: Record<string, FeatureFlag | undefined>;\n  values: Record<string, FeatureFlagValue>;\n  isLoading: boolean;\n  error: Error | null;\n  isAnyEnabled: boolean;\n  areAllEnabled: boolean;\n} {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    const flags: Record<string, FeatureFlag | undefined> = {};\n    const values: Record<string, FeatureFlagValue> = {};\n    let enabledCount = 0;\n\n    keys.forEach(key => {\n      const flag = context.getFlag(key);\n      const defaultValue = defaultValues?.[key];\n      \n      flags[key] = flag;\n      \n      if (flag && flag.enabled) {\n        values[key] = flag.value;\n        if (flag.value) enabledCount++;\n        logFlagUsage(key, flag.value, 'flag');\n      } else {\n        const fallbackValue = defaultValue ?? false;\n        values[key] = fallbackValue;\n        if (fallbackValue) enabledCount++;\n        logFlagUsage(key, fallbackValue, 'default');\n      }\n    });\n\n    return {\n      flags,\n      values,\n      isLoading: context.isLoading,\n      error: context.error,\n      isAnyEnabled: enabledCount > 0,\n      areAllEnabled: enabledCount === keys.length,\n    };\n  }, [keys, defaultValues, context]);\n}\n\n/**\n * Hook to check if any of the provided flags are enabled\n * @param keys - Array of feature flag keys to check\n * @returns True if any flag is enabled\n */\nexport function useAnyFeatureFlagEnabled(keys: string[]): {\n  isEnabled: boolean;\n  enabledFlags: string[];\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { values, isLoading, error } = useFeatureFlags(keys);\n\n  return useMemo(() => {\n    const enabledFlags = keys.filter(key => Boolean(values[key]));\n    \n    return {\n      isEnabled: enabledFlags.length > 0,\n      enabledFlags,\n      isLoading,\n      error,\n    };\n  }, [keys, values, isLoading, error]);\n}\n\n/**\n * Hook to check if all provided flags are enabled\n * @param keys - Array of feature flag keys to check\n * @returns True if all flags are enabled\n */\nexport function useAllFeatureFlagsEnabled(keys: string[]): {\n  isEnabled: boolean;\n  disabledFlags: string[];\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { values, isLoading, error } = useFeatureFlags(keys);\n\n  return useMemo(() => {\n    const disabledFlags = keys.filter(key => !Boolean(values[key]));\n    \n    return {\n      isEnabled: disabledFlags.length === 0,\n      disabledFlags,\n      isLoading,\n      error,\n    };\n  }, [keys, values, isLoading, error]);\n}\n\n/**\n * Hook for conditional feature flag usage with fallback behavior\n * @param key - Feature flag key\n * @param enabledValue - Value to return when flag is enabled\n * @param disabledValue - Value to return when flag is disabled\n * @returns The appropriate value based on flag state\n */\nexport function useFeatureFlagValue<T>(\n  key: string,\n  enabledValue: T,\n  disabledValue: T\n): {\n  value: T;\n  isEnabled: boolean;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { isEnabled, isLoading, error } = useFeatureFlagEnabled(key);\n\n  return useMemo(() => ({\n    value: isEnabled ? enabledValue : disabledValue,\n    isEnabled,\n    isLoading,\n    error,\n  }), [isEnabled, enabledValue, disabledValue, isLoading, error]);\n}\n\n/**\n * Hook to refresh feature flags manually\n * @returns Function to refresh flags and loading state\n */\nexport function useFeatureFlagRefresh(): {\n  refresh: () => Promise<void>;\n  isRefreshing: boolean;\n  error: Error | null;\n} {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => ({\n    refresh: context.refreshFlags,\n    isRefreshing: context.isLoading,\n    error: context.error,\n  }), [context]);\n}\n\n/**\n * Development helper hook to get all available flags\n * Only works in development mode\n */\nexport function useAllFeatureFlags(): {\n  flags: Record<string, FeatureFlag>;\n  isLoading: boolean;\n  error: Error | null;\n} | null {\n  const context = useFeatureFlagContext();\n\n  return useMemo(() => {\n    if (process.env.NODE_ENV !== 'development') {\n      return null;\n    }\n\n    return {\n      flags: context.flags,\n      isLoading: context.isLoading,\n      error: context.error,\n    };\n  }, [context]);\n}\n\n/**\n * Hook for A/B testing scenarios\n * @param experimentKey - The experiment feature flag key\n * @param variants - Object mapping variant names to their values\n * @param defaultVariant - Default variant to use if flag is not found\n * @returns The variant value and metadata\n */\nexport function useExperimentVariant<T>(\n  experimentKey: string,\n  variants: Record<string, T>,\n  defaultVariant: string\n): {\n  variant: string;\n  value: T;\n  isInExperiment: boolean;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const { flag, value: flagValue, isEnabled, isLoading, error } = useFeatureFlagString(\n    experimentKey,\n    defaultVariant\n  );\n\n  return useMemo(() => {\n    const flagExists = Boolean(flag);\n    const variant = flagExists && isEnabled && flagValue in variants ? flagValue : defaultVariant;\n    const value = variants[variant] || variants[defaultVariant];\n\n    if (process.env.NODE_ENV === 'development') {\n      console.debug(`[Experiment] ${experimentKey}: variant=${variant}, value=${JSON.stringify(value)}, flagExists=${flagExists}`);\n    }\n\n    return {\n      variant,\n      value,\n      isInExperiment: flagExists && isEnabled && flagValue in variants,\n      isLoading,\n      error,\n    };\n  }, [experimentKey, variants, defaultVariant, flag, flagValue, isEnabled, isLoading, error]);\n}"],"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","ignoreList":[]}