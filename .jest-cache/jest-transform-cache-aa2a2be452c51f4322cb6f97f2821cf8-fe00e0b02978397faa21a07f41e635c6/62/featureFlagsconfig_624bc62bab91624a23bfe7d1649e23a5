f2251c1046e4511b6a0048785b64e3d3
// Feature Flag Configuration System
// Environment-based configuration loading with validation and caching
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearConfigCache: function() {
        return clearConfigCache;
    },
    debugConfiguration: function() {
        return debugConfiguration;
    },
    enableHotReload: function() {
        return enableHotReload;
    },
    getCurrentEnvironment: function() {
        return getCurrentEnvironment;
    },
    loadEnvironmentFlags: function() {
        return loadEnvironmentFlags;
    },
    loadFeatureFlagConfig: function() {
        return loadFeatureFlagConfig;
    },
    mergeConfigurations: function() {
        return mergeConfigurations;
    },
    validateConfigurations: function() {
        return validateConfigurations;
    }
});
const _featureFlagtypes = require("../types/featureFlag.types");
// Configuration cache to avoid repeated environment reads
let configCache = null;
let lastCacheUpdate = 0;
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes
// Environment-specific flag configurations
const ENVIRONMENT_SPECIFIC_FLAGS = {
    development: {
        enableDarkMode: true,
        showAdvancedControls: true,
        enableDevTools: true,
        enableVerboseLogging: true,
        showDebugInfo: true
    },
    staging: {
        enableDarkMode: false,
        showAdvancedControls: true,
        enableDevTools: false,
        enableVerboseLogging: false,
        showDebugInfo: false,
        enableABTesting: true
    },
    production: {
        enableDarkMode: false,
        showAdvancedControls: false,
        enableDevTools: false,
        enableVerboseLogging: false,
        showDebugInfo: false,
        enableErrorReporting: true,
        enableMetrics: true
    },
    test: {
        enableDarkMode: false,
        showAdvancedControls: false,
        enableDevTools: false,
        enableVerboseLogging: false,
        showDebugInfo: false,
        enableAnimations: false
    }
};
// Validation rules for different flag types
const VALIDATION_RULES = {
    maxConcurrentRequests: {
        required: true,
        min: 1,
        max: 10
    },
    maxFileSize: {
        required: true,
        min: 1024,
        max: 50 * 1024 * 1024
    },
    compressionQuality: {
        required: true,
        min: 1,
        max: 100
    },
    tryonTimeout: {
        required: true,
        min: 5000,
        max: 120000
    },
    cacheTimeoutMs: {
        required: true,
        min: 1000,
        max: 24 * 60 * 60 * 1000
    },
    supportedFormats: {
        required: true,
        pattern: /^[a-zA-Z,]+$/,
        customValidator: (value)=>{
            if (typeof value !== 'string') return 'Must be a string';
            const formats = value.split(',').map((f)=>f.trim().toLowerCase());
            const validFormats = [
                'jpeg',
                'jpg',
                'png',
                'webp',
                'gif'
            ];
            const invalidFormats = formats.filter((f)=>!validFormats.includes(f));
            return invalidFormats.length === 0 || `Invalid formats: ${invalidFormats.join(', ')}`;
        }
    },
    experimentVariant: {
        allowedValues: [
            'control',
            'variant-a',
            'variant-b',
            'variant-c'
        ]
    }
};
// Parse environment variable value based on type
const parseEnvironmentValue = (value, type)=>{
    switch(type){
        case 'boolean':
            return value.toLowerCase() === 'true';
        case 'number':
            const numValue = Number(value);
            return isNaN(numValue) ? 0 : numValue;
        case 'string':
        default:
            return value;
    }
};
// Validate flag value against validation rules
const validateFlagValue = (key, value, validation)=>{
    const rules = validation || VALIDATION_RULES[key];
    if (!rules) return {
        isValid: true
    };
    // Required check
    if (rules.required && (value === undefined || value === null || value === '')) {
        return {
            isValid: false,
            error: `${key} is required`
        };
    }
    // Type-specific validations
    if (typeof value === 'number') {
        if (rules.min !== undefined && value < rules.min) {
            return {
                isValid: false,
                error: `${key} must be at least ${rules.min}`
            };
        }
        if (rules.max !== undefined && value > rules.max) {
            return {
                isValid: false,
                error: `${key} must be at most ${rules.max}`
            };
        }
    }
    if (typeof value === 'string') {
        if (rules.pattern && !rules.pattern.test(value)) {
            return {
                isValid: false,
                error: `${key} format is invalid`
            };
        }
    }
    // Allowed values check
    if (rules.allowedValues && !rules.allowedValues.includes(value)) {
        return {
            isValid: false,
            error: `${key} must be one of: ${rules.allowedValues.join(', ')}`
        };
    }
    // Custom validator
    if (rules.customValidator) {
        const result = rules.customValidator(value);
        if (result !== true) {
            return {
                isValid: false,
                error: typeof result === 'string' ? result : `${key} is invalid`
            };
        }
    }
    return {
        isValid: true
    };
};
const loadEnvironmentFlags = ()=>{
    const envFlags = {};
    Object.entries(process.env).forEach(([key, value])=>{
        if (key.startsWith('FEATURE_FLAG_') && value !== undefined) {
            const flagKey = key.replace('FEATURE_FLAG_', '').toLowerCase();
            // Try to determine type from existing default flags
            const allDefaults = [
                ..._featureFlagtypes.DEFAULT_TRYON_FLAGS,
                ..._featureFlagtypes.DEFAULT_IMAGE_PROCESSING_FLAGS,
                ..._featureFlagtypes.DEFAULT_UI_FLAGS
            ];
            const defaultFlag = allDefaults.find((f)=>f.key.toLowerCase() === flagKey);
            const type = defaultFlag?.type || 'string';
            const parsedValue = parseEnvironmentValue(value, type);
            // Validate the value
            const validation = validateFlagValue(flagKey, parsedValue);
            if (validation.isValid) {
                envFlags[flagKey] = parsedValue;
            } else {
                console.warn(`Invalid environment flag ${flagKey}: ${validation.error}`);
            }
        }
    });
    return envFlags;
};
const getCurrentEnvironment = ()=>{
    const nodeEnv = process.env.NODE_ENV;
    const customEnv = process.env.FEATURE_FLAG_ENVIRONMENT;
    // Use custom environment if specified, otherwise fall back to NODE_ENV
    const env = customEnv || nodeEnv;
    switch(env){
        case 'development':
        case 'staging':
        case 'production':
        case 'test':
            return env;
        default:
            return 'development';
    }
};
const mergeConfigurations = (defaultConfigs, environment, envFlags = {})=>{
    const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};
    return defaultConfigs.map((config)=>{
        // Start with default config
        const finalConfig = {
            ...config
        };
        // Apply environment-specific overrides
        const envOverride = environmentOverrides[config.key];
        if (envOverride !== undefined) {
            finalConfig.defaultValue = envOverride;
        }
        // Apply environment variable overrides (highest priority)
        const envFlag = envFlags[config.key];
        if (envFlag !== undefined) {
            finalConfig.defaultValue = envFlag;
        }
        return finalConfig;
    });
};
const loadFeatureFlagConfig = (forceRefresh = false, customDefaults)=>{
    const now = Date.now();
    // Return cached config if still valid and not forcing refresh
    if (!forceRefresh && configCache && now - lastCacheUpdate < CACHE_TTL) {
        return configCache;
    }
    // Load environment flags
    const envFlags = loadEnvironmentFlags();
    const environment = getCurrentEnvironment();
    // Use custom defaults or standard defaults
    const defaultConfigs = customDefaults || [
        ..._featureFlagtypes.DEFAULT_TRYON_FLAGS,
        ..._featureFlagtypes.DEFAULT_IMAGE_PROCESSING_FLAGS,
        ..._featureFlagtypes.DEFAULT_UI_FLAGS
    ];
    // Merge all configurations
    const mergedConfigs = mergeConfigurations(defaultConfigs, environment, envFlags);
    // Add environment-specific flags that don't exist in defaults
    const existingKeys = new Set(mergedConfigs.map((c)=>c.key));
    const environmentOverrides = ENVIRONMENT_SPECIFIC_FLAGS[environment] || {};
    Object.entries(environmentOverrides).forEach(([key, value])=>{
        if (!existingKeys.has(key) && value !== undefined) {
            // Infer type from value
            const type = typeof value;
            const category = key.startsWith('enable') ? 'ui' : 'experiment';
            mergedConfigs.push({
                key,
                description: `Environment-specific flag for ${environment}`,
                category,
                defaultValue: value,
                type,
                environment: [
                    environment
                ]
            });
        }
    });
    // Update cache
    configCache = mergedConfigs;
    lastCacheUpdate = now;
    return mergedConfigs;
};
const clearConfigCache = ()=>{
    configCache = null;
    lastCacheUpdate = 0;
};
const validateConfigurations = (configs)=>{
    const errors = [];
    configs.forEach((config)=>{
        const validation = validateFlagValue(config.key, config.defaultValue);
        if (!validation.isValid && validation.error) {
            errors.push(validation.error);
        }
    });
    return {
        isValid: errors.length === 0,
        errors
    };
};
const enableHotReload = ()=>{
    if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {
        // Listen for environment changes (this would be extended based on your hot reload setup)
        const checkForUpdates = ()=>{
            const newConfigs = loadFeatureFlagConfig(true);
            // Trigger re-render of components using feature flags
            window.dispatchEvent(new CustomEvent('featureFlags:updated', {
                detail: {
                    configs: newConfigs
                }
            }));
        };
        // Check for updates every 30 seconds in development
        setInterval(checkForUpdates, 30000);
    }
};
const debugConfiguration = ()=>{
    const environment = getCurrentEnvironment();
    const envFlags = loadEnvironmentFlags();
    const finalConfigs = loadFeatureFlagConfig(true);
    const validation = validateConfigurations(finalConfigs);
    return {
        environment,
        envFlags,
        finalConfigs,
        validation
    };
};

//# sourceMappingURL=data:application/json;base64,