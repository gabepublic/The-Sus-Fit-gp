251c151c08e65c4a3163b3c231cfd539
/**
 * OpenAI Client Initialization and Try-On Service
 * 
 * Provides a singleton OpenAI client instance with secure environment variable retrieval
 * and implements the core try-on functionality using OpenAI Images Edit API.
 * This module handles the foundational SDK initialization and service wrapper logic.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateTryOn: function() {
        return generateTryOn;
    },
    model: function() {
        return model;
    },
    openai: function() {
        return openai;
    }
});
const _openai = /*#__PURE__*/ _interop_require_default(require("openai"));
const _getEnv = require("./getEnv");
const _tryOnSchema = require("./tryOnSchema");
const _fs = /*#__PURE__*/ _interop_require_wildcard(require("fs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Retrieve and validate environment variables with fail-fast approach
const { key, model } = (0, _getEnv.getEnv)();
// Instantiate singleton OpenAI client
const openai = new _openai.default({
    apiKey: key
});
/**
 * Convert base64 string to File object for OpenAI API
 * 
 * @param base64String - Base64 encoded image string (with or without data URL prefix)
 * @param filename - Name for the file (default: 'image.png')
 * @returns File object suitable for OpenAI API
 */ const base64ToFile = (base64String, filename = 'image.png')=>{
    // Normalize base64 (strip data URL prefix if present)
    const normalizedBase64 = (0, _tryOnSchema.normalizeBase64)(base64String);
    // Convert base64 to binary data using Node.js Buffer
    const buffer = Buffer.from(normalizedBase64, 'base64');
    // KEEP for TESTING; DO NOT REMOVE
    // Save file to local drive
    //const fs = require('fs');
    //const path = require('path');
    //const savePath = path.join(process.cwd(), 'uploads', filename);
    //fs.mkdirSync(path.dirname(savePath), { recursive: true });
    //fs.writeFileSync(savePath, buffer);
    // Create blob and file
    const blob = new Blob([
        buffer
    ], {
        type: 'image/png'
    });
    return new File([
        blob
    ], filename, {
        type: 'image/png'
    });
};
const generateTryOn = async ({ modelImage, apparelImages })=>{
    try {
        // Validate input parameters
        _tryOnSchema.TryOnParamsSchema.parse({
            modelImage,
            apparelImages
        });
        // Convert base64 strings to File objects for OpenAI API
        const modelFile = base64ToFile(modelImage, 'model.png');
        const apparelFile = base64ToFile(apparelImages[0], 'apparel.png');
        if (model == 'mock') {
            console.log('Using mock model');
            // Validate output using schema
            const validatedResult = _tryOnSchema.TryOnResultSchema.parse({
                imgGenerated: _fs.readFileSync('public/images/demo/WillShalom.jpg', {
                    encoding: 'base64'
                })
            });
            return validatedResult.imgGenerated;
        }
        // Call OpenAI Images Edit API
        const response = await openai.images.edit({
            model,
            image: [
                modelFile,
                apparelFile
            ],
            prompt: 'Change the garment of the model in the first image with the garment from the second image.',
            n: 1,
            size: '1024x1024',
            quality: 'low'
        });
        // Extract and validate the generated image
        if (!response.data || response.data.length === 0) {
            throw new Error('No response data received from OpenAI API');
        }
        const b64Json = response.data[0]?.b64_json;
        if (!b64Json) {
            throw new Error('No image data received from OpenAI API');
        }
        console.log('Generated image length: ', b64Json.length);
        // KEEP for TESTING; DO NOT REMOVE
        // Save generated image to file
        //const generatedImageFile = base64ToFile(b64Json, 'generated.png');
        // Validate output using schema
        const validatedResult = _tryOnSchema.TryOnResultSchema.parse({
            imgGenerated: b64Json
        });
        return validatedResult.imgGenerated;
    } catch (error) {
        // Re-throw with custom context while preserving original error
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        const customError = new Error(`generateTryOn failed: ${errorMessage}`);
        customError.cause = error; // Set cause property for error chaining
        throw customError;
    }
};

//# sourceMappingURL=data:application/json;base64,