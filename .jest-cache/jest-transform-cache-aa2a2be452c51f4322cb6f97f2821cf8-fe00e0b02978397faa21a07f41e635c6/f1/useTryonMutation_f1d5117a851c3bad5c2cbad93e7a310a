7a90d4a719587daad656cd19e0508be8
'use client';
"use strict";

/* istanbul ignore next */
function cov_bahv0ttb6() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts";
  var hash = "99b98acc1f29e6b4f52624644d30f26a89201e1e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 60
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "7": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "9": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 64
        }
      },
      "10": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "11": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "12": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 68
        }
      },
      "13": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "14": {
        start: {
          line: 35,
          column: 55
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "15": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "16": {
        start: {
          line: 45,
          column: 28
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "18": {
        start: {
          line: 54,
          column: 31
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "19": {
        start: {
          line: 55,
          column: 30
        },
        end: {
          line: 55,
          column: 81
        }
      },
      "20": {
        start: {
          line: 55,
          column: 45
        },
        end: {
          line: 55,
          column: 63
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 51
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "23": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 104
        }
      },
      "24": {
        start: {
          line: 59,
          column: 33
        },
        end: {
          line: 59,
          column: 77
        }
      },
      "25": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 94
        }
      },
      "26": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 40
        }
      },
      "27": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 69,
          column: 17
        }
      },
      "28": {
        start: {
          line: 63,
          column: 35
        },
        end: {
          line: 63,
          column: 68
        }
      },
      "29": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 96
        }
      },
      "30": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 34
        }
      },
      "31": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 67,
          column: 108
        }
      },
      "32": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "33": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 95
        }
      },
      "34": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 40
        }
      },
      "35": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 28
        }
      },
      "36": {
        start: {
          line: 77,
          column: 25
        },
        end: {
          line: 77,
          column: 69
        }
      },
      "37": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 43
        }
      },
      "38": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 83
        }
      },
      "39": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 20
        }
      },
      "40": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "41": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 91,
          column: 7
        }
      },
      "42": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "43": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 93,
          column: 63
        }
      },
      "44": {
        start: {
          line: 93,
          column: 59
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "45": {
        start: {
          line: 94,
          column: 22
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "46": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 73
        }
      },
      "47": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 50
        }
      },
      "48": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 42
        }
      },
      "49": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 115
        }
      },
      "50": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "51": {
        start: {
          line: 108,
          column: 17
        },
        end: {
          line: 108,
          column: 38
        }
      },
      "52": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "53": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 77
        }
      },
      "54": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      "55": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "56": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 40
        }
      },
      "57": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 55
        }
      },
      "58": {
        start: {
          line: 131,
          column: 22
        },
        end: {
          line: 131,
          column: 32
        }
      },
      "59": {
        start: {
          line: 133,
          column: 26
        },
        end: {
          line: 133,
          column: 122
        }
      },
      "60": {
        start: {
          line: 133,
          column: 102
        },
        end: {
          line: 133,
          column: 121
        }
      },
      "61": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "62": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 10
        }
      },
      "63": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "64": {
        start: {
          line: 142,
          column: 36
        },
        end: {
          line: 142,
          column: 38
        }
      },
      "65": {
        start: {
          line: 144,
          column: 39
        },
        end: {
          line: 144,
          column: 41
        }
      },
      "66": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "67": {
        start: {
          line: 147,
          column: 35
        },
        end: {
          line: 147,
          column: 129
        }
      },
      "68": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 46
        }
      },
      "69": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 64
        }
      },
      "70": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 55
        }
      },
      "71": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "72": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 21
        }
      },
      "73": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 155,
          column: 52
        }
      },
      "74": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "75": {
        start: {
          line: 157,
          column: 39
        },
        end: {
          line: 157,
          column: 118
        }
      },
      "76": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 57
        }
      },
      "77": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 75
        }
      },
      "78": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 51
        }
      },
      "79": {
        start: {
          line: 164,
          column: 36
        },
        end: {
          line: 164,
          column: 58
        }
      },
      "80": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "81": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "82": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 24
        }
      },
      "83": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 159
        }
      },
      "84": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 195,
          column: 6
        }
      },
      "85": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 57
        }
      },
      "86": {
        start: {
          line: 200,
          column: 25
        },
        end: {
          line: 205,
          column: 6
        }
      },
      "87": {
        start: {
          line: 200,
          column: 50
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "88": {
        start: {
          line: 207,
          column: 30
        },
        end: {
          line: 216,
          column: 6
        }
      },
      "89": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "90": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 73
        }
      },
      "91": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 101
        }
      },
      "92": {
        start: {
          line: 218,
          column: 36
        },
        end: {
          line: 218,
          column: 74
        }
      },
      "93": {
        start: {
          line: 218,
          column: 60
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "94": {
        start: {
          line: 220,
          column: 29
        },
        end: {
          line: 303,
          column: 6
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "96": {
        start: {
          line: 223,
          column: 34
        },
        end: {
          line: 229,
          column: 25
        }
      },
      "97": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 236,
          column: 25
        }
      },
      "98": {
        start: {
          line: 238,
          column: 43
        },
        end: {
          line: 241,
          column: 25
        }
      },
      "99": {
        start: {
          line: 243,
          column: 67
        },
        end: {
          line: 243,
          column: 126
        }
      },
      "100": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 245,
          column: 107
        }
      },
      "101": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "102": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 257,
          column: 17
        }
      },
      "103": {
        start: {
          line: 250,
          column: 46
        },
        end: {
          line: 250,
          column: 136
        }
      },
      "104": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 66
        }
      },
      "105": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 137
        }
      },
      "106": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 56
        }
      },
      "107": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 79
        }
      },
      "108": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "109": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 83
        }
      },
      "110": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "111": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 266,
          column: 22
        }
      },
      "112": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 27
        }
      },
      "113": {
        start: {
          line: 274,
          column: 34
        },
        end: {
          line: 274,
          column: 130
        }
      },
      "114": {
        start: {
          line: 274,
          column: 110
        },
        end: {
          line: 274,
          column: 129
        }
      },
      "115": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "116": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 59
        }
      },
      "117": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 59
        }
      },
      "118": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "119": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 294,
          column: 17
        }
      },
      "120": {
        start: {
          line: 284,
          column: 40
        },
        end: {
          line: 284,
          column: 78
        }
      },
      "121": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 290,
          column: 21
        }
      },
      "122": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 289,
          column: 26
        }
      },
      "123": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 90
        }
      },
      "124": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 24
        }
      },
      "125": {
        start: {
          line: 304,
          column: 30
        },
        end: {
          line: 353,
          column: 6
        }
      },
      "126": {
        start: {
          line: 306,
          column: 29
        },
        end: {
          line: 306,
          column: 49
        }
      },
      "127": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "128": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 315,
          column: 13
        }
      },
      "129": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 88
        }
      },
      "130": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 91
        }
      },
      "131": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 60
        }
      },
      "132": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 77
        }
      },
      "133": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "134": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 148
        }
      },
      "135": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 78
        }
      },
      "136": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 342,
          column: 15
        }
      },
      "137": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "138": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 69
        }
      },
      "139": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 397,
          column: 6
        }
      },
      "140": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 359,
          column: 11
        }
      },
      "141": {
        start: {
          line: 361,
          column: 29
        },
        end: {
          line: 361,
          column: 50
        }
      },
      "142": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "143": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 370,
          column: 13
        }
      },
      "144": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 80
        }
      },
      "145": {
        start: {
          line: 366,
          column: 36
        },
        end: {
          line: 366,
          column: 91
        }
      },
      "146": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 60
        }
      },
      "147": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 85
        }
      },
      "148": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "149": {
        start: {
          line: 379,
          column: 31
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "150": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "151": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 69
        }
      },
      "152": {
        start: {
          line: 398,
          column: 30
        },
        end: {
          line: 433,
          column: 6
        }
      },
      "153": {
        start: {
          line: 400,
          column: 29
        },
        end: {
          line: 400,
          column: 33
        }
      },
      "154": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "155": {
        start: {
          line: 402,
          column: 36
        },
        end: {
          line: 407,
          column: 14
        }
      },
      "156": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 416,
          column: 14
        }
      },
      "157": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "158": {
        start: {
          line: 420,
          column: 33
        },
        end: {
          line: 420,
          column: 53
        }
      },
      "159": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "160": {
        start: {
          line: 422,
          column: 36
        },
        end: {
          line: 422,
          column: 91
        }
      },
      "161": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 60
        }
      },
      "162": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "163": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 77
        }
      },
      "164": {
        start: {
          line: 435,
          column: 4
        },
        end: {
          line: 450,
          column: 7
        }
      },
      "165": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 446,
          column: 10
        }
      },
      "166": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 444,
          column: 15
        }
      },
      "167": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 443,
          column: 17
        }
      },
      "168": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 111
        }
      },
      "169": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 91
        }
      },
      "170": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 44
        }
      },
      "171": {
        start: {
          line: 452,
          column: 27
        },
        end: {
          line: 476,
          column: 6
        }
      },
      "172": {
        start: {
          line: 452,
          column: 52
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "173": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 458,
          column: 17
        }
      },
      "174": {
        start: {
          line: 457,
          column: 20
        },
        end: {
          line: 457,
          column: 33
        }
      },
      "175": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 47
        }
      },
      "176": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 82
        }
      },
      "177": {
        start: {
          line: 478,
          column: 21
        },
        end: {
          line: 478,
          column: 65
        }
      },
      "178": {
        start: {
          line: 480,
          column: 4
        },
        end: {
          line: 494,
          column: 7
        }
      },
      "179": {
        start: {
          line: 480,
          column: 36
        },
        end: {
          line: 492,
          column: 9
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "tryonMutationFn",
        decl: {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 34
          }
        },
        loc: {
          start: {
            line: 32,
            column: 46
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 41
          },
          end: {
            line: 55,
            column: 42
          }
        },
        loc: {
          start: {
            line: 55,
            column: 45
          },
          end: {
            line: 55,
            column: 63
          }
        },
        line: 55
      },
      "3": {
        name: "handleApiResponse",
        decl: {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 87,
            column: 36
          }
        },
        loc: {
          start: {
            line: 87,
            column: 47
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 87
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 54
          },
          end: {
            line: 93,
            column: 55
          }
        },
        loc: {
          start: {
            line: 93,
            column: 59
          },
          end: {
            line: 93,
            column: 61
          }
        },
        line: 93
      },
      "5": {
        name: "isRetryableError",
        decl: {
          start: {
            line: 120,
            column: 13
          },
          end: {
            line: 120,
            column: 29
          }
        },
        loc: {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 120
      },
      "6": {
        name: "processImageInputs",
        decl: {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 130,
            column: 37
          }
        },
        loc: {
          start: {
            line: 130,
            column: 73
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 130
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 133,
            column: 95
          },
          end: {
            line: 133,
            column: 96
          }
        },
        loc: {
          start: {
            line: 133,
            column: 102
          },
          end: {
            line: 133,
            column: 121
          }
        },
        line: 133
      },
      "8": {
        name: "createMutationContext",
        decl: {
          start: {
            line: 188,
            column: 13
          },
          end: {
            line: 188,
            column: 34
          }
        },
        loc: {
          start: {
            line: 188,
            column: 101
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 188
      },
      "9": {
        name: "useTryonMutation",
        decl: {
          start: {
            line: 197,
            column: 9
          },
          end: {
            line: 197,
            column: 25
          }
        },
        loc: {
          start: {
            line: 197,
            column: 39
          },
          end: {
            line: 495,
            column: 1
          }
        },
        line: 197
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 200,
            column: 45
          },
          end: {
            line: 200,
            column: 46
          }
        },
        loc: {
          start: {
            line: 200,
            column: 50
          },
          end: {
            line: 203,
            column: 9
          }
        },
        line: 200
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 207,
            column: 50
          },
          end: {
            line: 207,
            column: 51
          }
        },
        loc: {
          start: {
            line: 207,
            column: 54
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 207
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 218,
            column: 56
          },
          end: {
            line: 218,
            column: 57
          }
        },
        loc: {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 69
          }
        },
        line: 218
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 220,
            column: 53
          },
          end: {
            line: 220,
            column: 54
          }
        },
        loc: {
          start: {
            line: 220,
            column: 72
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 220
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 274,
            column: 103
          },
          end: {
            line: 274,
            column: 104
          }
        },
        loc: {
          start: {
            line: 274,
            column: 110
          },
          end: {
            line: 274,
            column: 129
          }
        },
        line: 274
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 304,
            column: 54
          },
          end: {
            line: 304,
            column: 55
          }
        },
        loc: {
          start: {
            line: 304,
            column: 88
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 304
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 354,
            column: 52
          },
          end: {
            line: 354,
            column: 53
          }
        },
        loc: {
          start: {
            line: 354,
            column: 81
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 354
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 398,
            column: 54
          },
          end: {
            line: 398,
            column: 55
          }
        },
        loc: {
          start: {
            line: 398,
            column: 89
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 398
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 435,
            column: 26
          },
          end: {
            line: 435,
            column: 27
          }
        },
        loc: {
          start: {
            line: 435,
            column: 30
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 435
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 436,
            column: 15
          },
          end: {
            line: 436,
            column: 16
          }
        },
        loc: {
          start: {
            line: 436,
            column: 19
          },
          end: {
            line: 446,
            column: 9
          }
        },
        line: 436
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 438,
            column: 44
          },
          end: {
            line: 438,
            column: 45
          }
        },
        loc: {
          start: {
            line: 438,
            column: 73
          },
          end: {
            line: 444,
            column: 13
          }
        },
        line: 438
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 452,
            column: 47
          },
          end: {
            line: 452,
            column: 48
          }
        },
        loc: {
          start: {
            line: 452,
            column: 52
          },
          end: {
            line: 470,
            column: 9
          }
        },
        line: 452
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 455,
            column: 46
          },
          end: {
            line: 455,
            column: 47
          }
        },
        loc: {
          start: {
            line: 455,
            column: 69
          },
          end: {
            line: 460,
            column: 13
          }
        },
        line: 455
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 462,
            column: 24
          },
          end: {
            line: 462,
            column: 25
          }
        },
        loc: {
          start: {
            line: 462,
            column: 40
          },
          end: {
            line: 464,
            column: 13
          }
        },
        line: 462
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 480,
            column: 31
          },
          end: {
            line: 480,
            column: 32
          }
        },
        loc: {
          start: {
            line: 480,
            column: 36
          },
          end: {
            line: 492,
            column: 9
          }
        },
        line: 480
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 15
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 15
          },
          end: {
            line: 40,
            column: 32
          }
        }, {
          start: {
            line: 40,
            column: 36
          },
          end: {
            line: 42,
            column: 13
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 19
          },
          end: {
            line: 95,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 19
          },
          end: {
            line: 95,
            column: 34
          }
        }, {
          start: {
            line: 95,
            column: 38
          },
          end: {
            line: 95,
            column: 87
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 45
          }
        }, {
          start: {
            line: 99,
            column: 49
          },
          end: {
            line: 99,
            column: 72
          }
        }, {
          start: {
            line: 99,
            column: 76
          },
          end: {
            line: 99,
            column: 99
          }
        }],
        line: 99
      },
      "5": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "6": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "7": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 122,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 42
          }
        }, {
          start: {
            line: 122,
            column: 46
          },
          end: {
            line: 122,
            column: 66
          }
        }],
        line: 122
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 62
          }
        }, {
          start: {
            line: 133,
            column: 66
          },
          end: {
            line: 133,
            column: 122
          }
        }],
        line: 133
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: 150,
            column: 15
          },
          end: {
            line: 152,
            column: 9
          }
        }],
        line: 146
      },
      "11": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: 160,
            column: 19
          },
          end: {
            line: 162,
            column: 13
          }
        }],
        line: 156
      },
      "12": {
        loc: {
          start: {
            line: 173,
            column: 37
          },
          end: {
            line: 173,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 70
          },
          end: {
            line: 173,
            column: 89
          }
        }, {
          start: {
            line: 173,
            column: 92
          },
          end: {
            line: 173,
            column: 101
          }
        }],
        line: 173
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 271
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 61
          }
        }, {
          start: {
            line: 179,
            column: 65
          },
          end: {
            line: 179,
            column: 106
          }
        }, {
          start: {
            line: 179,
            column: 110
          },
          end: {
            line: 179,
            column: 156
          }
        }, {
          start: {
            line: 179,
            column: 160
          },
          end: {
            line: 179,
            column: 214
          }
        }, {
          start: {
            line: 179,
            column: 218
          },
          end: {
            line: 179,
            column: 271
          }
        }],
        line: 179
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 100
          },
          end: {
            line: 183,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 125
          },
          end: {
            line: 183,
            column: 130
          }
        }, {
          start: {
            line: 183,
            column: 133
          },
          end: {
            line: 183,
            column: 157
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 188,
            column: 46
          },
          end: {
            line: 188,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 188,
            column: 59
          },
          end: {
            line: 188,
            column: 60
          }
        }],
        line: 188
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 26
          },
          end: {
            line: 197,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 197,
            column: 35
          },
          end: {
            line: 197,
            column: 37
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 223,
            column: 34
          },
          end: {
            line: 229,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 65
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 229,
            column: 25
          }
        }],
        line: 223
      },
      "19": {
        loc: {
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 236,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 73
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 236,
            column: 25
          }
        }],
        line: 230
      },
      "20": {
        loc: {
          start: {
            line: 238,
            column: 43
          },
          end: {
            line: 241,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 78
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 241,
            column: 25
          }
        }],
        line: 238
      },
      "21": {
        loc: {
          start: {
            line: 238,
            column: 43
          },
          end: {
            line: 238,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 43
          },
          end: {
            line: 238,
            column: 56
          }
        }, {
          start: {
            line: 238,
            column: 60
          },
          end: {
            line: 238,
            column: 75
          }
        }],
        line: 238
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "23": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "24": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "25": {
        loc: {
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 274,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 274,
            column: 70
          }
        }, {
          start: {
            line: 274,
            column: 74
          },
          end: {
            line: 274,
            column: 130
          }
        }],
        line: 274
      },
      "26": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: 278,
            column: 19
          },
          end: {
            line: 281,
            column: 13
          }
        }],
        line: 275
      },
      "27": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "28": {
        loc: {
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 290,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 290,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "29": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "30": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 24
          }
        }, {
          start: {
            line: 307,
            column: 28
          },
          end: {
            line: 307,
            column: 64
          }
        }],
        line: 307
      },
      "31": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "32": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "33": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 24
          }
        }, {
          start: {
            line: 362,
            column: 28
          },
          end: {
            line: 362,
            column: 64
          }
        }],
        line: 362
      },
      "34": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "35": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 32
          }
        }, {
          start: {
            line: 390,
            column: 36
          },
          end: {
            line: 390,
            column: 43
          }
        }],
        line: 390
      },
      "36": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "37": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "38": {
        loc: {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "39": {
        loc: {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "40": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 427,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 427,
            column: 34
          }
        }, {
          start: {
            line: 427,
            column: 38
          },
          end: {
            line: 427,
            column: 45
          }
        }],
        line: 427
      },
      "41": {
        loc: {
          start: {
            line: 455,
            column: 19
          },
          end: {
            line: 460,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 46
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 460,
            column: 21
          }
        }],
        line: 455
      },
      "42": {
        loc: {
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 458,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 458,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "43": {
        loc: {
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 489,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 489,
            column: 52
          },
          end: {
            line: 489,
            column: 61
          }
        }, {
          start: {
            line: 489,
            column: 64
          },
          end: {
            line: 489,
            column: 79
          }
        }],
        line: 489
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/mutations/useTryonMutation.ts"],
      sourcesContent: ["'use client';\n\n// Try-On Mutation Hook\n// React Query mutation hook for handling try-on API calls with comprehensive error handling\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo, useEffect } from 'react';\nimport type {\n  TryonMutationVariables,\n  TryonMutationVariablesWithFiles,\n  TryonMutationResponse,\n  TryonMutationError,\n  TryonMutationContext,\n  UseTryonMutationReturn,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\nimport {\n  processImageForTryon,\n  ImageProcessingError,\n  ImageDimensionError,\n  type ImageProcessingOptions\n} from '../utils/imageProcessing';\nimport {\n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError\n} from '../../utils/image';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  isErrorRetryable as isErrorRetryableFromClassification\n} from '../utils/errorHandling';\nimport {\n  getOptimisticUpdatesManager,\n  type OptimisticUpdateConfig\n} from '../utils/optimisticUpdates';\nimport {\n  getCacheInvalidationManager,\n  invalidateCacheAfterMutation,\n  type CacheInvalidationConfig\n} from '../utils/cacheInvalidation';\n\n/**\n * API endpoint for try-on requests\n */\nconst TRYON_API_ENDPOINT = '/api/tryon';\n\n/**\n * Default configuration for the try-on mutation\n */\nconst DEFAULT_CONFIG: Required<Pick<UseTryonMutationConfig, 'enableRetry' | 'maxRetries' | 'initialRetryDelay' | 'enableOptimisticUpdates'>> = {\n  enableRetry: true,\n  maxRetries: 3,\n  initialRetryDelay: 1000,\n  enableOptimisticUpdates: false\n};\n\n/**\n * Mutation function that calls the try-on API\n */\nasync function tryonMutationFn(variables: TryonMutationVariables): Promise<TryonMutationResponse> {\n  console.log('\uD83D\uDFE1 tryonMutationFn: Starting mutation', variables);\n  \n  try {\n  const { modelImage, apparelImages, options } = variables;\n  \n  // Prepare request payload\n  const payload = {\n    modelImage,\n    apparelImages,\n    ...(options?.metadata && { metadata: options.metadata })\n  };\n\n  // Configure request options\n  const requestInit: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  };\n\n  // Add timeout if specified\n  if (options?.timeout) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), options.timeout);\n    requestInit.signal = controller.signal;\n    \n    try {\n      console.log('\uD83D\uDFE1 tryonMutationFn: About to call fetch with timeout', TRYON_API_ENDPOINT);\n      const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n      console.log('\uD83D\uDFE1 tryonMutationFn: Fetch completed, calling handleApiResponse');\n      clearTimeout(timeoutId);\n      \n      try {\n        const result = await handleApiResponse(response);\n        console.log('\uD83D\uDFE2 tryonMutationFn: handleApiResponse completed successfully');\n        return result;\n      } catch (apiError) {\n        console.log('\uD83D\uDD34 tryonMutationFn: handleApiResponse threw error, re-throwing', apiError);\n        throw apiError;\n      }\n    } catch (error) {\n      console.log('\uD83D\uDD34 tryonMutationFn: Fetch error caught in timeout branch', error);\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  }\n\n  // Standard request without timeout\n  const response = await fetch(TRYON_API_ENDPOINT, requestInit);\n  return handleApiResponse(response);\n  \n  } catch (error) {\n    console.log('\uD83D\uDD34 tryonMutationFn: Top-level catch - error occurred', error);\n    throw error;\n  }\n  \n  console.log('\uD83D\uDFE2 tryonMutationFn: Function completed successfully');\n}\n\n/**\n * Handle API response and convert to appropriate format\n */\nasync function handleApiResponse(response: Response): Promise<TryonMutationResponse> {\n  console.log('\uD83D\uDD35 handleApiResponse: Processing response', { ok: response.ok, status: response.status });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    const error: TryonMutationError = {\n      error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,\n      details: errorData.details,\n      code: errorData.code,\n      status: response.status,\n      retryable: response.status >= 500 || response.status === 408 || response.status === 429\n    };\n    console.log('\uD83D\uDD34 handleApiResponse: About to throw error', error);\n    // Try throwing a simple Error to see if React Query handles it better\n    const simpleError = new Error(error.error);\n    Object.assign(simpleError, error); // Add the TryonMutationError properties\n    console.log('\uD83D\uDD34 handleApiResponse: Throwing simple error with TryonMutationError properties', simpleError);\n    throw simpleError;\n  }\n\n  const data = await response.json();\n  \n  // Validate response structure\n  if (!data.img_generated) {\n    throw new Error('Invalid API response: missing img_generated field');\n  }\n\n  return {\n    img_generated: data.img_generated,\n    metadata: data.metadata\n  };\n}\n\n/**\n * Determine if an error is retryable using comprehensive classification\n */\nfunction isRetryableError(error: unknown): boolean {\n  // First check if error has explicit retryable property\n  if (error && typeof error === 'object' && 'retryable' in error) {\n    return Boolean(error.retryable);\n  }\n  \n  // Use comprehensive error classification\n  return isErrorRetryableFromClassification(error);\n}\n\n/**\n * Process image inputs if they are File objects\n */\nasync function processImageInputs(\n  variables: TryonMutationVariables | TryonMutationVariablesWithFiles,\n  imageProcessingOptions?: ImageProcessingOptions\n): Promise<{\n  processedVariables: TryonMutationVariables;\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  };\n}> {\n  const startTime = Date.now();\n  \n  // Check if we have File objects to process\n  const hasFileInputs = variables.modelImage instanceof File || \n    variables.apparelImages.some(img => img instanceof File);\n  \n  if (!hasFileInputs) {\n    // All inputs are already base64 strings\n    return {\n      processedVariables: variables as TryonMutationVariables\n    };\n  }\n  \n  try {\n    let modelImageResult: import('../utils/imageProcessing').ImageProcessingResult | undefined;\n    const apparelImageResults: import('../utils/imageProcessing').ImageProcessingResult[] = [];\n    let processedModelImage: string;\n    const processedApparelImages: string[] = [];\n    \n    // Process model image if it's a File\n    if (variables.modelImage instanceof File) {\n      const processedImage = await processImageForTryon(variables.modelImage, imageProcessingOptions);\n      modelImageResult = processedImage;\n      processedModelImage = processedImage.processedImage;\n    } else {\n      processedModelImage = variables.modelImage;\n    }\n    \n    // Process apparel images\n    for (let i = 0; i < variables.apparelImages.length; i++) {\n      const image = variables.apparelImages[i];\n      if (image instanceof File) {\n        const processedImage = await processImageForTryon(image, imageProcessingOptions);\n        apparelImageResults.push(processedImage);\n        processedApparelImages.push(processedImage.processedImage);\n      } else {\n        processedApparelImages.push(image);\n      }\n    }\n    \n    const totalProcessingTime = Date.now() - startTime;\n    \n    return {\n      processedVariables: {\n        modelImage: processedModelImage,\n        apparelImages: processedApparelImages,\n        options: variables.options\n      },\n      imageProcessingResults: {\n        modelImageResult,\n        apparelImageResults: apparelImageResults.length > 0 ? apparelImageResults : undefined,\n        totalProcessingTime\n      }\n    };\n  } catch (error) {\n    // Re-throw known image processing errors\n    if (error instanceof FileTypeNotSupportedError ||\n        error instanceof FileTooLargeError ||\n        error instanceof CompressionFailedError ||\n        error instanceof ImageProcessingError ||\n        error instanceof ImageDimensionError) {\n      throw error;\n    }\n    \n    // Wrap unknown errors\n    throw new ImageProcessingError(\n      'Unexpected error during image processing',\n      error instanceof Error ? error : new Error(String(error))\n    );\n  }\n}\n\n/**\n * Create mutation context for lifecycle tracking\n */\nfunction createMutationContext(\n  variables: TryonMutationVariables,\n  retryCount = 0,\n  previousError?: Error,\n  imageProcessingResults?: {\n    modelImageResult?: import('../utils/imageProcessing').ImageProcessingResult;\n    apparelImageResults?: import('../utils/imageProcessing').ImageProcessingResult[];\n    totalProcessingTime: number;\n  }\n): TryonMutationContext {\n  return {\n    variables,\n    startTime: Date.now(),\n    retryCount,\n    previousError,\n    imageProcessingResults\n  };\n}\n\n/**\n * React Query mutation hook for try-on functionality\n * \n * @param config - Optional configuration for the mutation\n * @returns UseTryonMutationReturn object with mutation state and functions\n */\nexport function useTryonMutation(config: UseTryonMutationConfig = {}): UseTryonMutationReturn {\n  const queryClient = useQueryClient();\n  \n  // Merge configuration with defaults\n  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config\n  }), [config]);\n\n  // Get optimistic updates manager instance\n  const optimisticManager = useMemo(() => {\n    try {\n      return getOptimisticUpdatesManager();\n    } catch {\n      // Initialize if not already initialized\n      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);\n    }\n  }, [queryClient]);\n\n  // Track active optimistic updates\n  const activeOptimisticUpdates = useMemo(() => new Map<string, string>(), []);\n\n  // Define lifecycle callbacks with useCallback\n  const onMutateCallback = useCallback(async (variables: TryonMutationVariables | TryonMutationVariablesWithFiles) => {\n    try {\n      // Extract image processing options from config and variables (variables take precedence)\n      const configOptions = mergedConfig.imageProcessing ? {\n        targetWidth: mergedConfig.imageProcessing.targetWidth,\n        targetHeight: mergedConfig.imageProcessing.targetHeight,\n        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,\n        quality: mergedConfig.imageProcessing.compressionQuality,\n        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      const variableOptions = variables.options?.imageProcessing ? {\n        targetWidth: variables.options.imageProcessing.targetWidth,\n        targetHeight: variables.options.imageProcessing.targetHeight,\n        maxSizeKB: variables.options.imageProcessing.maxSizeKB,\n        quality: variables.options.imageProcessing.compressionQuality,\n        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio\n      } : undefined;\n      \n      // Merge options with variable options taking precedence\n      const imageProcessingOptions: ImageProcessingOptions | undefined = \n        configOptions || variableOptions ? {\n          ...configOptions,\n          ...variableOptions\n        } : undefined;\n      \n      // Process images if needed\n      const { processedVariables, imageProcessingResults } = await processImageInputs(\n        variables, \n        imageProcessingOptions\n      );\n      \n      // Create context with processed variables and image processing results\n      const context = createMutationContext(\n        processedVariables,\n        0,\n        undefined,\n        imageProcessingResults\n      );\n\n      // Start optimistic updates if enabled\n      let optimisticId: string | undefined;\n      if (mergedConfig.enableOptimisticUpdates) {\n        try {\n          const optimisticContext = optimisticManager.startOptimisticUpdate(\n            processedVariables,\n            mergedConfig.optimisticConfig\n          );\n          optimisticId = optimisticContext.optimisticId;\n          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);\n          \n          // Add optimistic ID to context for tracking\n          context.optimisticId = optimisticId;\n        } catch (error) {\n          console.warn('Failed to start optimistic updates:', error);\n        }\n      }\n      \n      // Call user-provided onMutate if available\n      if (mergedConfig.onMutate) {\n        const userContext = await mergedConfig.onMutate(processedVariables);\n        if (userContext) {\n          return { ...context, ...userContext };\n        }\n      }\n      \n      return context;\n    } catch (error) {\n      // If image processing fails, still allow user's onMutate to be called\n      // The user's onMutate can decide how to handle the failure\n      let context;\n      \n      const hasFileInputs = variables.modelImage instanceof File || \n        variables.apparelImages.some(img => img instanceof File);\n      \n      if (hasFileInputs) {\n        // Create context with File objects - user's onMutate must handle this\n        context = createMutationContext(variables as any);\n      } else {\n        // All inputs are base64 strings, safe to cast\n        context = createMutationContext(variables as TryonMutationVariables);\n      }\n      \n      if (mergedConfig.onMutate) {\n        try {\n          const userContext = await mergedConfig.onMutate(variables as any);\n          if (userContext) {\n            context = { ...context, ...userContext };\n          }\n        } catch (onMutateError) {\n          // If onMutate also fails, prefer the original processing error\n          console.warn('onMutate failed during error handling:', onMutateError);\n        }\n      }\n      \n      // Always re-throw the error so mutation fails appropriately\n      throw error;\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSuccessCallback = useCallback(async (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Complete optimistic updates if they were started\n    const optimisticId = context.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (error) {\n        console.warn('Failed to complete optimistic update:', error);\n      }\n    }\n\n    // Advanced cache invalidation with configurable strategies\n    try {\n      await invalidateCacheAfterMutation(\n        queryClient,\n        data,\n        variables,\n        context,\n        mergedConfig.cacheInvalidationConfig\n      );\n    } catch (error) {\n      console.warn('Failed to invalidate cache after mutation:', error);\n      \n      // Fallback to basic invalidation\n      await Promise.allSettled([\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-history'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['user-data'],\n          exact: false \n        }),\n        queryClient.invalidateQueries({ \n          queryKey: ['tryon-stats'],\n          exact: false \n        })\n      ]);\n    }\n    \n    // Call user-provided onSuccess with processed variables\n    if (mergedConfig.onSuccess) {\n      mergedConfig.onSuccess(data, context.variables, context);\n    }\n  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]);\n\n  const onErrorCallback = useCallback((\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    console.log('\uD83D\uDD34 onErrorCallback: Mutation error occurred', { error, variables, context });\n    // Rollback optimistic updates if they were started\n    const optimisticId = context?.optimisticId;\n    if (optimisticId && mergedConfig.enableOptimisticUpdates) {\n      try {\n        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);\n        \n        // Clean up tracking\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      } catch (rollbackError) {\n        console.warn('Failed to rollback optimistic update:', rollbackError);\n      }\n    }\n\n    // Classify and log the error comprehensively\n    const classifiedError = logAndClassifyError(error, {\n      mutationVariables: variables,\n      mutationContext: context,\n      timestamp: new Date().toISOString()\n    });\n\n    // Format error for mutation system compatibility\n    const formattedError: TryonMutationError = {\n      error: classifiedError.userMessage,\n      details: classifiedError.technicalMessage,\n      code: classifiedError.errorCode,\n      retryable: classifiedError.retryable,\n      // Add classified error information\n      category: classifiedError.category,\n      severity: classifiedError.severity,\n      recoveryActions: classifiedError.recoveryActions\n    };\n\n    // Call user-provided onError with enhanced error information\n    if (mergedConfig.onError && context) {\n      mergedConfig.onError(formattedError, variables, context);\n    }\n  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]);\n\n  const onSettledCallback = useCallback((\n    data: TryonMutationResponse | undefined,\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext | undefined\n  ) => {\n    // Format error with comprehensive classification if error exists\n    let formattedError: TryonMutationError | null = null;\n    \n    if (error) {\n      const classifiedError = classifyTryonError(error, {\n        mutationVariables: variables,\n        mutationContext: context,\n        settled: true,\n        timestamp: new Date().toISOString()\n      });\n\n      formattedError = {\n        error: classifiedError.userMessage,\n        details: classifiedError.technicalMessage,\n        code: classifiedError.errorCode,\n        retryable: classifiedError.retryable,\n        category: classifiedError.category,\n        severity: classifiedError.severity,\n        recoveryActions: classifiedError.recoveryActions\n      };\n    }\n\n    // Final cleanup of any remaining optimistic updates\n    if (context) {\n      const optimisticId = context.optimisticId;\n      if (optimisticId) {\n        const trackingKey = variables.modelImage + variables.apparelImages.join('');\n        activeOptimisticUpdates.delete(trackingKey);\n      }\n    }\n\n    // Call user-provided onSettled\n    if (mergedConfig.onSettled && context) {\n      mergedConfig.onSettled(data, formattedError, variables, context);\n    }\n  }, [mergedConfig, activeOptimisticUpdates]);\n\n  // Cleanup effect for optimistic updates on unmount\n  useEffect(() => {\n    return () => {\n      // Rollback any remaining optimistic updates when component unmounts\n      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {\n        try {\n          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));\n        } catch (error) {\n          console.warn('Failed to cleanup optimistic update on unmount:', error);\n        }\n      });\n      activeOptimisticUpdates.clear();\n    };\n  }, [optimisticManager, activeOptimisticUpdates]);\n\n  // Mutation configuration\n  const mutationConfig = useMemo(() => ({\n    mutationFn: tryonMutationFn,\n    \n    // Custom retry logic\n    retry: mergedConfig.enableRetry ? (failureCount: number, error: unknown) => {\n      if (failureCount >= mergedConfig.maxRetries) {\n        return false;\n      }\n      return isRetryableError(error);\n    } : false,\n    \n    // Exponential backoff delay\n    retryDelay: (attemptIndex: number) => {\n      return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);\n    },\n\n    // Lifecycle callbacks\n    onMutate: onMutateCallback,\n    onSuccess: onSuccessCallback,\n    onError: onErrorCallback,\n    onSettled: onSettledCallback\n  }), [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]);\n\n  // Use React Query mutation\n  const mutation = useMutation(mutationConfig);\n\n  // Return hook interface\n  return useMemo<UseTryonMutationReturn>(() => ({\n    mutate: mutation.mutate,\n    mutateAsync: mutation.mutateAsync,\n    data: mutation.data,\n    error: mutation.error as TryonMutationError | null,\n    isLoading: mutation.isPending,\n    isSuccess: mutation.isSuccess,\n    isError: mutation.isError,\n    isIdle: mutation.isIdle,\n    status: mutation.status === 'pending' ? 'loading' : mutation.status,\n    reset: mutation.reset,\n    context: mutation.context as TryonMutationContext | undefined\n  }), [mutation]);\n}"],
      names: ["useTryonMutation", "TRYON_API_ENDPOINT", "DEFAULT_CONFIG", "enableRetry", "maxRetries", "initialRetryDelay", "enableOptimisticUpdates", "tryonMutationFn", "variables", "console", "log", "modelImage", "apparelImages", "options", "payload", "metadata", "requestInit", "method", "headers", "body", "JSON", "stringify", "timeout", "controller", "AbortController", "timeoutId", "setTimeout", "abort", "signal", "response", "fetch", "clearTimeout", "result", "handleApiResponse", "apiError", "error", "ok", "status", "errorData", "json", "catch", "statusText", "details", "code", "retryable", "simpleError", "Error", "Object", "assign", "data", "img_generated", "isRetryableError", "Boolean", "isErrorRetryableFromClassification", "processImageInputs", "imageProcessingOptions", "startTime", "Date", "now", "hasFileInputs", "File", "some", "img", "processedVariables", "modelImageResult", "apparelImageResults", "processedModelImage", "processedApparelImages", "processedImage", "processImageForTryon", "i", "length", "image", "push", "totalProcessingTime", "imageProcessingResults", "undefined", "FileTypeNotSupportedError", "FileTooLargeError", "CompressionFailedError", "ImageProcessingError", "ImageDimensionError", "String", "createMutationContext", "retryCount", "previousError", "config", "queryClient", "useQueryClient", "mergedConfig", "useMemo", "optimisticManager", "getOptimisticUpdatesManager", "require", "OptimisticUpdatesManager", "activeOptimisticUpdates", "Map", "onMutateCallback", "useCallback", "configOptions", "imageProcessing", "targetWidth", "targetHeight", "maxSizeKB", "quality", "compressionQuality", "preserveAspectRatio", "variableOptions", "context", "optimisticId", "optimisticContext", "startOptimisticUpdate", "optimisticConfig", "set", "join", "warn", "onMutate", "userContext", "onMutateError", "onSuccessCallback", "completeOptimisticUpdate", "trackingKey", "delete", "invalidateCacheAfterMutation", "cacheInvalidationConfig", "Promise", "allSettled", "invalidateQueries", "queryKey", "exact", "onSuccess", "onErrorCallback", "rollbackOptimisticUpdate", "rollbackError", "classifiedError", "logAndClassifyError", "mutationVariables", "mutationContext", "timestamp", "toISOString", "formattedError", "userMessage", "technicalMessage", "errorCode", "category", "severity", "recoveryActions", "onError", "onSettledCallback", "classifyTryonError", "settled", "onSettled", "useEffect", "forEach", "clear", "mutationConfig", "mutationFn", "retry", "failureCount", "retryDelay", "attemptIndex", "Math", "pow", "mutation", "useMutation", "mutate", "mutateAsync", "isLoading", "isPending", "isSuccess", "isError", "isIdle", "reset"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "99b98acc1f29e6b4f52624644d30f26a89201e1e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bahv0ttb6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bahv0ttb6();
cov_bahv0ttb6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bahv0ttb6().s[1]++;
Object.defineProperty(exports, "useTryonMutation", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[0]++;
    cov_bahv0ttb6().s[2]++;
    return useTryonMutation;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_bahv0ttb6().s[3]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_bahv0ttb6().s[4]++, require("react"));
const _imageProcessing =
/* istanbul ignore next */
(cov_bahv0ttb6().s[5]++, require("../utils/imageProcessing"));
const _image =
/* istanbul ignore next */
(cov_bahv0ttb6().s[6]++, require("../../utils/image"));
const _errorHandling =
/* istanbul ignore next */
(cov_bahv0ttb6().s[7]++, require("../utils/errorHandling"));
const _optimisticUpdates =
/* istanbul ignore next */
(cov_bahv0ttb6().s[8]++, require("../utils/optimisticUpdates"));
const _cacheInvalidation =
/* istanbul ignore next */
(cov_bahv0ttb6().s[9]++, require("../utils/cacheInvalidation"));
/**
 * API endpoint for try-on requests
 */
const TRYON_API_ENDPOINT =
/* istanbul ignore next */
(cov_bahv0ttb6().s[10]++, '/api/tryon');
/**
 * Default configuration for the try-on mutation
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_bahv0ttb6().s[11]++, {
  enableRetry: true,
  maxRetries: 3,
  initialRetryDelay: 1000,
  enableOptimisticUpdates: false
});
/**
 * Mutation function that calls the try-on API
 */
async function tryonMutationFn(variables) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[1]++;
  cov_bahv0ttb6().s[12]++;
  console.log('🟡 tryonMutationFn: Starting mutation', variables);
  /* istanbul ignore next */
  cov_bahv0ttb6().s[13]++;
  try {
    const {
      modelImage,
      apparelImages,
      options
    } =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[14]++, variables);
    // Prepare request payload
    const payload =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[15]++, {
      modelImage,
      apparelImages,
      ...(
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[0][0]++, options?.metadata) &&
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[0][1]++, {
        metadata: options.metadata
      }))
    });
    // Configure request options
    const requestInit =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[16]++, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    // Add timeout if specified
    /* istanbul ignore next */
    cov_bahv0ttb6().s[17]++;
    if (options?.timeout) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[1][0]++;
      const controller =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[18]++, new AbortController());
      const timeoutId =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[19]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[2]++;
        cov_bahv0ttb6().s[20]++;
        return controller.abort();
      }, options.timeout));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[21]++;
      requestInit.signal = controller.signal;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[22]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[23]++;
        console.log('🟡 tryonMutationFn: About to call fetch with timeout', TRYON_API_ENDPOINT);
        const response =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[24]++, await fetch(TRYON_API_ENDPOINT, requestInit));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[25]++;
        console.log('🟡 tryonMutationFn: Fetch completed, calling handleApiResponse');
        /* istanbul ignore next */
        cov_bahv0ttb6().s[26]++;
        clearTimeout(timeoutId);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[27]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[28]++, await handleApiResponse(response));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[29]++;
          console.log('🟢 tryonMutationFn: handleApiResponse completed successfully');
          /* istanbul ignore next */
          cov_bahv0ttb6().s[30]++;
          return result;
        } catch (apiError) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[31]++;
          console.log('🔴 tryonMutationFn: handleApiResponse threw error, re-throwing', apiError);
          /* istanbul ignore next */
          cov_bahv0ttb6().s[32]++;
          throw apiError;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[33]++;
        console.log('🔴 tryonMutationFn: Fetch error caught in timeout branch', error);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[34]++;
        clearTimeout(timeoutId);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[35]++;
        throw error;
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[1][1]++;
    }
    // Standard request without timeout
    const response =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[36]++, await fetch(TRYON_API_ENDPOINT, requestInit));
    /* istanbul ignore next */
    cov_bahv0ttb6().s[37]++;
    return handleApiResponse(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_bahv0ttb6().s[38]++;
    console.log('🔴 tryonMutationFn: Top-level catch - error occurred', error);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[39]++;
    throw error;
  }
  /* istanbul ignore next */
  cov_bahv0ttb6().s[40]++;
  console.log('🟢 tryonMutationFn: Function completed successfully');
}
/**
 * Handle API response and convert to appropriate format
 */
async function handleApiResponse(response) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[3]++;
  cov_bahv0ttb6().s[41]++;
  console.log('🔵 handleApiResponse: Processing response', {
    ok: response.ok,
    status: response.status
  });
  /* istanbul ignore next */
  cov_bahv0ttb6().s[42]++;
  if (!response.ok) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[2][0]++;
    const errorData =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[43]++, await response.json().catch(() => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[4]++;
      cov_bahv0ttb6().s[44]++;
      return {};
    }));
    const error =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[45]++, {
      error:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][0]++, errorData.error) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[3][1]++, `HTTP ${response.status}: ${response.statusText}`),
      details: errorData.details,
      code: errorData.code,
      status: response.status,
      retryable:
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][0]++, response.status >= 500) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][1]++, response.status === 408) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[4][2]++, response.status === 429)
    });
    /* istanbul ignore next */
    cov_bahv0ttb6().s[46]++;
    console.log('🔴 handleApiResponse: About to throw error', error);
    // Try throwing a simple Error to see if React Query handles it better
    const simpleError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[47]++, new Error(error.error));
    /* istanbul ignore next */
    cov_bahv0ttb6().s[48]++;
    Object.assign(simpleError, error); // Add the TryonMutationError properties
    /* istanbul ignore next */
    cov_bahv0ttb6().s[49]++;
    console.log('🔴 handleApiResponse: Throwing simple error with TryonMutationError properties', simpleError);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[50]++;
    throw simpleError;
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[2][1]++;
  }
  const data =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[51]++, await response.json());
  // Validate response structure
  /* istanbul ignore next */
  cov_bahv0ttb6().s[52]++;
  if (!data.img_generated) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[5][0]++;
    cov_bahv0ttb6().s[53]++;
    throw new Error('Invalid API response: missing img_generated field');
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[5][1]++;
  }
  cov_bahv0ttb6().s[54]++;
  return {
    img_generated: data.img_generated,
    metadata: data.metadata
  };
}
/**
 * Determine if an error is retryable using comprehensive classification
 */
function isRetryableError(error) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[5]++;
  cov_bahv0ttb6().s[55]++;
  // First check if error has explicit retryable property
  if (
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][0]++, error) &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][1]++, typeof error === 'object') &&
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[7][2]++, 'retryable' in error)) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[6][0]++;
    cov_bahv0ttb6().s[56]++;
    return Boolean(error.retryable);
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[6][1]++;
  }
  // Use comprehensive error classification
  cov_bahv0ttb6().s[57]++;
  return (0, _errorHandling.isErrorRetryable)(error);
}
/**
 * Process image inputs if they are File objects
 */
async function processImageInputs(variables, imageProcessingOptions) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[58]++, Date.now());
  // Check if we have File objects to process
  const hasFileInputs =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[59]++,
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][0]++, variables.modelImage instanceof File) ||
  /* istanbul ignore next */
  (cov_bahv0ttb6().b[8][1]++, variables.apparelImages.some(img => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[7]++;
    cov_bahv0ttb6().s[60]++;
    return img instanceof File;
  })));
  /* istanbul ignore next */
  cov_bahv0ttb6().s[61]++;
  if (!hasFileInputs) {
    /* istanbul ignore next */
    cov_bahv0ttb6().b[9][0]++;
    cov_bahv0ttb6().s[62]++;
    // All inputs are already base64 strings
    return {
      processedVariables: variables
    };
  } else
  /* istanbul ignore next */
  {
    cov_bahv0ttb6().b[9][1]++;
  }
  cov_bahv0ttb6().s[63]++;
  try {
    let modelImageResult;
    const apparelImageResults =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[64]++, []);
    let processedModelImage;
    const processedApparelImages =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[65]++, []);
    // Process model image if it's a File
    /* istanbul ignore next */
    cov_bahv0ttb6().s[66]++;
    if (variables.modelImage instanceof File) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][0]++;
      const processedImage =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[67]++, await (0, _imageProcessing.processImageForTryon)(variables.modelImage, imageProcessingOptions));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[68]++;
      modelImageResult = processedImage;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[69]++;
      processedModelImage = processedImage.processedImage;
    } else {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[10][1]++;
      cov_bahv0ttb6().s[70]++;
      processedModelImage = variables.modelImage;
    }
    // Process apparel images
    /* istanbul ignore next */
    cov_bahv0ttb6().s[71]++;
    for (let i =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[72]++, 0); i < variables.apparelImages.length; i++) {
      const image =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[73]++, variables.apparelImages[i]);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[74]++;
      if (image instanceof File) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][0]++;
        const processedImage =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[75]++, await (0, _imageProcessing.processImageForTryon)(image, imageProcessingOptions));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[76]++;
        apparelImageResults.push(processedImage);
        /* istanbul ignore next */
        cov_bahv0ttb6().s[77]++;
        processedApparelImages.push(processedImage.processedImage);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[11][1]++;
        cov_bahv0ttb6().s[78]++;
        processedApparelImages.push(image);
      }
    }
    const totalProcessingTime =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[79]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[80]++;
    return {
      processedVariables: {
        modelImage: processedModelImage,
        apparelImages: processedApparelImages,
        options: variables.options
      },
      imageProcessingResults: {
        modelImageResult,
        apparelImageResults: apparelImageResults.length > 0 ?
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][0]++, apparelImageResults) :
        /* istanbul ignore next */
        (cov_bahv0ttb6().b[12][1]++, undefined),
        totalProcessingTime
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_bahv0ttb6().s[81]++;
    // Re-throw known image processing errors
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][0]++, error instanceof _image.FileTypeNotSupportedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][1]++, error instanceof _image.FileTooLargeError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][2]++, error instanceof _image.CompressionFailedError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][3]++, error instanceof _imageProcessing.ImageProcessingError) ||
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[14][4]++, error instanceof _imageProcessing.ImageDimensionError)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[13][0]++;
      cov_bahv0ttb6().s[82]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[13][1]++;
    }
    // Wrap unknown errors
    cov_bahv0ttb6().s[83]++;
    throw new _imageProcessing.ImageProcessingError('Unexpected error during image processing', error instanceof Error ?
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][0]++, error) :
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[15][1]++, new Error(String(error))));
  }
}
/**
 * Create mutation context for lifecycle tracking
 */
function createMutationContext(variables, retryCount =
/* istanbul ignore next */
(cov_bahv0ttb6().b[16][0]++, 0), previousError, imageProcessingResults) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[8]++;
  cov_bahv0ttb6().s[84]++;
  return {
    variables,
    startTime: Date.now(),
    retryCount,
    previousError,
    imageProcessingResults
  };
}
function useTryonMutation(config =
/* istanbul ignore next */
(cov_bahv0ttb6().b[17][0]++, {})) {
  /* istanbul ignore next */
  cov_bahv0ttb6().f[9]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[85]++, (0, _reactquery.useQueryClient)());
  // Merge configuration with defaults
  const mergedConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[86]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[10]++;
    cov_bahv0ttb6().s[87]++;
    return {
      ...DEFAULT_CONFIG,
      ...config
    };
  }, [config]));
  // Get optimistic updates manager instance
  const optimisticManager =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[88]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[11]++;
    cov_bahv0ttb6().s[89]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[90]++;
      return (0, _optimisticUpdates.getOptimisticUpdatesManager)();
    } catch {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[91]++;
      // Initialize if not already initialized
      return new (require('../utils/optimisticUpdates').OptimisticUpdatesManager)(queryClient);
    }
  }, [queryClient]));
  // Track active optimistic updates
  const activeOptimisticUpdates =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[92]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[12]++;
    cov_bahv0ttb6().s[93]++;
    return new Map();
  }, []));
  // Define lifecycle callbacks with useCallback
  const onMutateCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[94]++, (0, _react.useCallback)(async variables => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[13]++;
    cov_bahv0ttb6().s[95]++;
    try {
      // Extract image processing options from config and variables (variables take precedence)
      const configOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[96]++, mergedConfig.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][0]++, {
        targetWidth: mergedConfig.imageProcessing.targetWidth,
        targetHeight: mergedConfig.imageProcessing.targetHeight,
        maxSizeKB: mergedConfig.imageProcessing.maxSizeKB,
        quality: mergedConfig.imageProcessing.compressionQuality,
        preserveAspectRatio: mergedConfig.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[18][1]++, undefined));
      const variableOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[97]++, variables.options?.imageProcessing ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][0]++, {
        targetWidth: variables.options.imageProcessing.targetWidth,
        targetHeight: variables.options.imageProcessing.targetHeight,
        maxSizeKB: variables.options.imageProcessing.maxSizeKB,
        quality: variables.options.imageProcessing.compressionQuality,
        preserveAspectRatio: variables.options.imageProcessing.preserveAspectRatio
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[19][1]++, undefined));
      // Merge options with variable options taking precedence
      const imageProcessingOptions =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[98]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][0]++, configOptions) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[21][1]++, variableOptions) ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][0]++, {
        ...configOptions,
        ...variableOptions
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[20][1]++, undefined));
      // Process images if needed
      const {
        processedVariables,
        imageProcessingResults
      } =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[99]++, await processImageInputs(variables, imageProcessingOptions));
      // Create context with processed variables and image processing results
      const context =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[100]++, createMutationContext(processedVariables, 0, undefined, imageProcessingResults));
      // Start optimistic updates if enabled
      let optimisticId;
      /* istanbul ignore next */
      cov_bahv0ttb6().s[101]++;
      if (mergedConfig.enableOptimisticUpdates) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[22][0]++;
        cov_bahv0ttb6().s[102]++;
        try {
          const optimisticContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[103]++, optimisticManager.startOptimisticUpdate(processedVariables, mergedConfig.optimisticConfig));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[104]++;
          optimisticId = optimisticContext.optimisticId;
          /* istanbul ignore next */
          cov_bahv0ttb6().s[105]++;
          activeOptimisticUpdates.set(processedVariables.modelImage + processedVariables.apparelImages.join(''), optimisticId);
          // Add optimistic ID to context for tracking
          /* istanbul ignore next */
          cov_bahv0ttb6().s[106]++;
          context.optimisticId = optimisticId;
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[107]++;
          console.warn('Failed to start optimistic updates:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[22][1]++;
      }
      // Call user-provided onMutate if available
      cov_bahv0ttb6().s[108]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[23][0]++;
        const userContext =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[109]++, await mergedConfig.onMutate(processedVariables));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[110]++;
        if (userContext) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[24][0]++;
          cov_bahv0ttb6().s[111]++;
          return {
            ...context,
            ...userContext
          };
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[24][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[23][1]++;
      }
      cov_bahv0ttb6().s[112]++;
      return context;
    } catch (error) {
      // If image processing fails, still allow user's onMutate to be called
      // The user's onMutate can decide how to handle the failure
      let context;
      const hasFileInputs =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[113]++,
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][0]++, variables.modelImage instanceof File) ||
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[25][1]++, variables.apparelImages.some(img => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[14]++;
        cov_bahv0ttb6().s[114]++;
        return img instanceof File;
      })));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[115]++;
      if (hasFileInputs) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][0]++;
        cov_bahv0ttb6().s[116]++;
        // Create context with File objects - user's onMutate must handle this
        context = createMutationContext(variables);
      } else {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[26][1]++;
        cov_bahv0ttb6().s[117]++;
        // All inputs are base64 strings, safe to cast
        context = createMutationContext(variables);
      }
      /* istanbul ignore next */
      cov_bahv0ttb6().s[118]++;
      if (mergedConfig.onMutate) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[27][0]++;
        cov_bahv0ttb6().s[119]++;
        try {
          const userContext =
          /* istanbul ignore next */
          (cov_bahv0ttb6().s[120]++, await mergedConfig.onMutate(variables));
          /* istanbul ignore next */
          cov_bahv0ttb6().s[121]++;
          if (userContext) {
            /* istanbul ignore next */
            cov_bahv0ttb6().b[28][0]++;
            cov_bahv0ttb6().s[122]++;
            context = {
              ...context,
              ...userContext
            };
          } else
          /* istanbul ignore next */
          {
            cov_bahv0ttb6().b[28][1]++;
          }
        } catch (onMutateError) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[123]++;
          // If onMutate also fails, prefer the original processing error
          console.warn('onMutate failed during error handling:', onMutateError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[27][1]++;
      }
      // Always re-throw the error so mutation fails appropriately
      cov_bahv0ttb6().s[124]++;
      throw error;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSuccessCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[125]++, (0, _react.useCallback)(async (data, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[15]++;
    // Complete optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[126]++, context.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[127]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[30][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[29][0]++;
      cov_bahv0ttb6().s[128]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[129]++;
        optimisticManager.completeOptimisticUpdate(optimisticId, data, context);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[130]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[131]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (error) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[132]++;
        console.warn('Failed to complete optimistic update:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[29][1]++;
    }
    // Advanced cache invalidation with configurable strategies
    cov_bahv0ttb6().s[133]++;
    try {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[134]++;
      await (0, _cacheInvalidation.invalidateCacheAfterMutation)(queryClient, data, variables, context, mergedConfig.cacheInvalidationConfig);
    } catch (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().s[135]++;
      console.warn('Failed to invalidate cache after mutation:', error);
      // Fallback to basic invalidation
      /* istanbul ignore next */
      cov_bahv0ttb6().s[136]++;
      await Promise.allSettled([queryClient.invalidateQueries({
        queryKey: ['tryon-history'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['user-data'],
        exact: false
      }), queryClient.invalidateQueries({
        queryKey: ['tryon-stats'],
        exact: false
      })]);
    }
    // Call user-provided onSuccess with processed variables
    /* istanbul ignore next */
    cov_bahv0ttb6().s[137]++;
    if (mergedConfig.onSuccess) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[31][0]++;
      cov_bahv0ttb6().s[138]++;
      mergedConfig.onSuccess(data, context.variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[31][1]++;
    }
  }, [mergedConfig, queryClient, optimisticManager, activeOptimisticUpdates]));
  const onErrorCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[139]++, (0, _react.useCallback)((error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[16]++;
    cov_bahv0ttb6().s[140]++;
    console.log('🔴 onErrorCallback: Mutation error occurred', {
      error,
      variables,
      context
    });
    // Rollback optimistic updates if they were started
    const optimisticId =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[141]++, context?.optimisticId);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[142]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][0]++, optimisticId) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[33][1]++, mergedConfig.enableOptimisticUpdates)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[32][0]++;
      cov_bahv0ttb6().s[143]++;
      try {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[144]++;
        optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
        // Clean up tracking
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[145]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[146]++;
        activeOptimisticUpdates.delete(trackingKey);
      } catch (rollbackError) {
        /* istanbul ignore next */
        cov_bahv0ttb6().s[147]++;
        console.warn('Failed to rollback optimistic update:', rollbackError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[32][1]++;
    }
    // Classify and log the error comprehensively
    const classifiedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[148]++, (0, _errorHandling.logAndClassifyError)(error, {
      mutationVariables: variables,
      mutationContext: context,
      timestamp: new Date().toISOString()
    }));
    // Format error for mutation system compatibility
    const formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[149]++, {
      error: classifiedError.userMessage,
      details: classifiedError.technicalMessage,
      code: classifiedError.errorCode,
      retryable: classifiedError.retryable,
      // Add classified error information
      category: classifiedError.category,
      severity: classifiedError.severity,
      recoveryActions: classifiedError.recoveryActions
    });
    // Call user-provided onError with enhanced error information
    /* istanbul ignore next */
    cov_bahv0ttb6().s[150]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][0]++, mergedConfig.onError) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[35][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[34][0]++;
      cov_bahv0ttb6().s[151]++;
      mergedConfig.onError(formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[34][1]++;
    }
  }, [mergedConfig, optimisticManager, activeOptimisticUpdates]));
  const onSettledCallback =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[152]++, (0, _react.useCallback)((data, error, variables, context) => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[17]++;
    // Format error with comprehensive classification if error exists
    let formattedError =
    /* istanbul ignore next */
    (cov_bahv0ttb6().s[153]++, null);
    /* istanbul ignore next */
    cov_bahv0ttb6().s[154]++;
    if (error) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[36][0]++;
      const classifiedError =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[155]++, (0, _errorHandling.classifyTryonError)(error, {
        mutationVariables: variables,
        mutationContext: context,
        settled: true,
        timestamp: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_bahv0ttb6().s[156]++;
      formattedError = {
        error: classifiedError.userMessage,
        details: classifiedError.technicalMessage,
        code: classifiedError.errorCode,
        retryable: classifiedError.retryable,
        category: classifiedError.category,
        severity: classifiedError.severity,
        recoveryActions: classifiedError.recoveryActions
      };
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[36][1]++;
    }
    // Final cleanup of any remaining optimistic updates
    cov_bahv0ttb6().s[157]++;
    if (context) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[37][0]++;
      const optimisticId =
      /* istanbul ignore next */
      (cov_bahv0ttb6().s[158]++, context.optimisticId);
      /* istanbul ignore next */
      cov_bahv0ttb6().s[159]++;
      if (optimisticId) {
        /* istanbul ignore next */
        cov_bahv0ttb6().b[38][0]++;
        const trackingKey =
        /* istanbul ignore next */
        (cov_bahv0ttb6().s[160]++, variables.modelImage + variables.apparelImages.join(''));
        /* istanbul ignore next */
        cov_bahv0ttb6().s[161]++;
        activeOptimisticUpdates.delete(trackingKey);
      } else
      /* istanbul ignore next */
      {
        cov_bahv0ttb6().b[38][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[37][1]++;
    }
    // Call user-provided onSettled
    cov_bahv0ttb6().s[162]++;
    if (
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][0]++, mergedConfig.onSettled) &&
    /* istanbul ignore next */
    (cov_bahv0ttb6().b[40][1]++, context)) {
      /* istanbul ignore next */
      cov_bahv0ttb6().b[39][0]++;
      cov_bahv0ttb6().s[163]++;
      mergedConfig.onSettled(data, formattedError, variables, context);
    } else
    /* istanbul ignore next */
    {
      cov_bahv0ttb6().b[39][1]++;
    }
  }, [mergedConfig, activeOptimisticUpdates]));
  // Cleanup effect for optimistic updates on unmount
  /* istanbul ignore next */
  cov_bahv0ttb6().s[164]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[18]++;
    cov_bahv0ttb6().s[165]++;
    return () => {
      /* istanbul ignore next */
      cov_bahv0ttb6().f[19]++;
      cov_bahv0ttb6().s[166]++;
      // Rollback any remaining optimistic updates when component unmounts
      activeOptimisticUpdates.forEach((optimisticId, trackingKey) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[20]++;
        cov_bahv0ttb6().s[167]++;
        try {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[168]++;
          optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
        } catch (error) {
          /* istanbul ignore next */
          cov_bahv0ttb6().s[169]++;
          console.warn('Failed to cleanup optimistic update on unmount:', error);
        }
      });
      /* istanbul ignore next */
      cov_bahv0ttb6().s[170]++;
      activeOptimisticUpdates.clear();
    };
  }, [optimisticManager, activeOptimisticUpdates]);
  // Mutation configuration
  const mutationConfig =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[171]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[21]++;
    cov_bahv0ttb6().s[172]++;
    return {
      mutationFn: tryonMutationFn,
      // Custom retry logic
      retry: mergedConfig.enableRetry ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][0]++, (failureCount, error) => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[22]++;
        cov_bahv0ttb6().s[173]++;
        if (failureCount >= mergedConfig.maxRetries) {
          /* istanbul ignore next */
          cov_bahv0ttb6().b[42][0]++;
          cov_bahv0ttb6().s[174]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_bahv0ttb6().b[42][1]++;
        }
        cov_bahv0ttb6().s[175]++;
        return isRetryableError(error);
      }) :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[41][1]++, false),
      // Exponential backoff delay
      retryDelay: attemptIndex => {
        /* istanbul ignore next */
        cov_bahv0ttb6().f[23]++;
        cov_bahv0ttb6().s[176]++;
        return mergedConfig.initialRetryDelay * Math.pow(2, attemptIndex);
      },
      // Lifecycle callbacks
      onMutate: onMutateCallback,
      onSuccess: onSuccessCallback,
      onError: onErrorCallback,
      onSettled: onSettledCallback
    };
  }, [mergedConfig, onMutateCallback, onSuccessCallback, onErrorCallback, onSettledCallback]));
  // Use React Query mutation
  const mutation =
  /* istanbul ignore next */
  (cov_bahv0ttb6().s[177]++, (0, _reactquery.useMutation)(mutationConfig));
  // Return hook interface
  /* istanbul ignore next */
  cov_bahv0ttb6().s[178]++;
  return (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_bahv0ttb6().f[24]++;
    cov_bahv0ttb6().s[179]++;
    return {
      mutate: mutation.mutate,
      mutateAsync: mutation.mutateAsync,
      data: mutation.data,
      error: mutation.error,
      isLoading: mutation.isPending,
      isSuccess: mutation.isSuccess,
      isError: mutation.isError,
      isIdle: mutation.isIdle,
      status: mutation.status === 'pending' ?
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][0]++, 'loading') :
      /* istanbul ignore next */
      (cov_bahv0ttb6().b[43][1]++, mutation.status),
      reset: mutation.reset,
      context: mutation.context
    };
  }, [mutation]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,