{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/historyIntegration.ts"],"sourcesContent":["// History Integration Utilities\n// Utilities for integrating try-on mutations with history tracking\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useCallback } from 'react';\nimport type {\n  TryonMutationResponse,\n  TryonMutationVariables,\n  TryonMutationContext,\n  UseTryonMutationConfig\n} from '../types/tryon.types';\nimport type {\n  CreateTryonHistoryEntryOptions,\n  TryonHistoryService,\n  TryonHistoryEntry\n} from '../types/history.types';\nimport { defaultHistoryService } from '../services/tryonHistoryService';\nimport { HISTORY_QUERY_KEYS } from '../hooks/useTryonHistory';\n\n/**\n * Configuration for history integration\n */\nexport interface HistoryIntegrationConfig {\n  /** History service to use (defaults to defaultHistoryService) */\n  historyService?: TryonHistoryService;\n  /** Whether to automatically save successful try-ons to history */\n  autoSave?: boolean;\n  /** Whether to track errors in history metadata */\n  trackErrors?: boolean;\n  /** Additional tags to add to history entries */\n  defaultTags?: string[];\n  /** Transform function for customizing history entry creation */\n  transformHistoryEntry?: (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => Partial<CreateTryonHistoryEntryOptions>;\n}\n\n/**\n * Default configuration for history integration\n */\nconst DEFAULT_HISTORY_CONFIG: Required<HistoryIntegrationConfig> = {\n  historyService: defaultHistoryService,\n  autoSave: true,\n  trackErrors: true,\n  defaultTags: [],\n  transformHistoryEntry: () => ({})\n};\n\n/**\n * Create enhanced mutation callbacks that integrate with history tracking\n */\nexport function createHistoryIntegratedCallbacks(\n  config: HistoryIntegrationConfig = {},\n  userConfig?: UseTryonMutationConfig\n): Pick<UseTryonMutationConfig, 'onSuccess' | 'onError' | 'onSettled'> {\n  const historyConfig = { ...DEFAULT_HISTORY_CONFIG, ...config };\n\n  const onSuccess = async (\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Auto-save to history if enabled\n    if (historyConfig.autoSave) {\n      try {\n        // Calculate processing time\n        const processingTime = context.startTime ? Date.now() - context.startTime : undefined;\n        \n        // Create base history entry options\n        const baseHistoryEntry: CreateTryonHistoryEntryOptions = {\n          generatedImage: data.img_generated,\n          modelImage: variables.modelImage,\n          apparelImages: variables.apparelImages,\n          processingTime,\n          metadata: {\n            modelVersion: data.metadata?.modelVersion,\n            appliedQuality: data.metadata?.appliedQuality,\n            processingConfig: {\n              imageProcessing: variables.options?.imageProcessing,\n              requestOptions: {\n                timeout: variables.options?.timeout,\n                quality: variables.options?.quality\n              }\n            },\n            imageProcessingResults: context.imageProcessingResults\n          },\n          tags: [...historyConfig.defaultTags],\n          isFavorite: false\n        };\n\n        // Apply custom transformation if provided\n        const customizations = historyConfig.transformHistoryEntry(data, variables, context);\n        const finalHistoryEntry = { ...baseHistoryEntry, ...customizations };\n\n        // Save to history\n        await historyConfig.historyService.addEntry(finalHistoryEntry);\n        \n        console.log('Successfully saved try-on result to history');\n      } catch (error) {\n        console.error('Failed to save try-on result to history:', error);\n        // Don't throw - history saving shouldn't break the main flow\n      }\n    }\n\n    // Call user-provided onSuccess callback\n    if (userConfig?.onSuccess) {\n      userConfig.onSuccess(data, variables, context);\n    }\n  };\n\n  const onError = (\n    error: unknown, // Using unknown for better type safety\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Track errors in history metadata if enabled\n    if (historyConfig.trackErrors && context.previousError) {\n      // This could be enhanced to create error-only history entries or update metadata\n      console.log('Error tracked for history integration:', {\n        error: (error as Record<string, unknown>)?.error || (error instanceof Error ? error.message : String(error)),\n        timestamp: new Date().toISOString(),\n        retryAttempt: context.retryCount\n      });\n    }\n\n    // Call user-provided onError callback\n    if (userConfig?.onError) {\n      userConfig.onError(error, variables, context);\n    }\n  };\n\n  const onSettled = (\n    data: TryonMutationResponse | undefined,\n    error: unknown,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Additional settled handling could go here\n    // For example, updating analytics or logging\n\n    // Call user-provided onSettled callback\n    if (userConfig?.onSettled) {\n      userConfig.onSettled(data, error, variables, context);\n    }\n  };\n\n  return {\n    onSuccess,\n    onError,\n    onSettled\n  };\n}\n\n/**\n * Hook for creating history-integrated mutation configuration\n */\nexport function useHistoryIntegratedMutationConfig(\n  historyConfig: HistoryIntegrationConfig = {},\n  userConfig: UseTryonMutationConfig = {}\n): UseTryonMutationConfig {\n  const queryClient = useQueryClient();\n\n  // Create history-integrated callbacks\n  const historyCallbacks = createHistoryIntegratedCallbacks(historyConfig, userConfig);\n\n  // Enhanced onSuccess that also invalidates history queries\n  const enhancedOnSuccess = useCallback((\n    data: TryonMutationResponse,\n    variables: TryonMutationVariables,\n    context: TryonMutationContext\n  ) => {\n    // Invalidate history queries to ensure fresh data\n    queryClient.invalidateQueries({ \n      queryKey: HISTORY_QUERY_KEYS.all,\n      exact: false \n    });\n\n    // Call the history-integrated onSuccess\n    if (historyCallbacks.onSuccess) {\n      historyCallbacks.onSuccess(data, variables, context);\n    }\n  }, [queryClient, historyCallbacks]);\n\n  return {\n    ...userConfig,\n    onSuccess: enhancedOnSuccess,\n    onError: historyCallbacks.onError,\n    onSettled: historyCallbacks.onSettled\n  };\n}\n\n/**\n * Utility function to create a history entry from mutation results\n * Can be used for manual history entry creation\n */\nexport async function createHistoryEntryFromMutation(\n  data: TryonMutationResponse,\n  variables: TryonMutationVariables,\n  context: TryonMutationContext,\n  options: {\n    historyService?: TryonHistoryService;\n    additionalTags?: string[];\n    notes?: string;\n    isFavorite?: boolean;\n  } = {}\n): Promise<void> {\n  const historyService = options.historyService || defaultHistoryService;\n  \n  const processingTime = context.startTime ? Date.now() - context.startTime : undefined;\n  \n  const historyEntry: CreateTryonHistoryEntryOptions = {\n    generatedImage: data.img_generated,\n    modelImage: variables.modelImage,\n    apparelImages: variables.apparelImages,\n    processingTime,\n    metadata: {\n      modelVersion: data.metadata?.modelVersion,\n      appliedQuality: data.metadata?.appliedQuality,\n      processingConfig: {\n        imageProcessing: variables.options?.imageProcessing,\n        requestOptions: {\n          timeout: variables.options?.timeout,\n          quality: variables.options?.quality\n        }\n      },\n      imageProcessingResults: context.imageProcessingResults\n    },\n    tags: options.additionalTags || [],\n    notes: options.notes,\n    isFavorite: options.isFavorite || false\n  };\n\n  await historyService.addEntry(historyEntry);\n}\n\n/**\n * Utility function to extract shareable data from a history entry\n */\nexport function createShareableHistoryEntry(entry: TryonHistoryEntry) {\n  return {\n    id: entry.id,\n    timestamp: entry.timestamp,\n    generatedImage: entry.generatedImage,\n    processingTime: entry.processingTime,\n    tags: entry.tags,\n    isFavorite: entry.isFavorite,\n    notes: entry.notes,\n    // Don't include original images for privacy in sharing\n    metadata: {\n      modelVersion: entry.metadata?.modelVersion,\n      appliedQuality: entry.metadata?.appliedQuality,\n      processingTime: entry.processingTime\n    }\n  };\n}"],"names":["createHistoryEntryFromMutation","createHistoryIntegratedCallbacks","createShareableHistoryEntry","useHistoryIntegratedMutationConfig","DEFAULT_HISTORY_CONFIG","historyService","defaultHistoryService","autoSave","trackErrors","defaultTags","transformHistoryEntry","config","userConfig","historyConfig","onSuccess","data","variables","context","processingTime","startTime","Date","now","undefined","baseHistoryEntry","generatedImage","img_generated","modelImage","apparelImages","metadata","modelVersion","appliedQuality","processingConfig","imageProcessing","options","requestOptions","timeout","quality","imageProcessingResults","tags","isFavorite","customizations","finalHistoryEntry","addEntry","console","log","error","onError","previousError","Error","message","String","timestamp","toISOString","retryAttempt","retryCount","onSettled","queryClient","useQueryClient","historyCallbacks","enhancedOnSuccess","useCallback","invalidateQueries","queryKey","HISTORY_QUERY_KEYS","all","exact","historyEntry","additionalTags","notes","entry","id"],"mappings":"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"}