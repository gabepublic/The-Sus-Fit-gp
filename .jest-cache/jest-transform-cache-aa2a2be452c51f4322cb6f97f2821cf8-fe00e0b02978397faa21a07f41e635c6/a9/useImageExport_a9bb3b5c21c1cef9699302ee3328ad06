0e2add0a04f56dbe1b07075254b270ab
'use client';
"use strict";

/* istanbul ignore next */
function cov_2o6cjfsmml() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts";
  var hash = "4bcd174f05f03f14eef4ede2248955e2bd9d2936";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "7": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "9": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 52
        }
      },
      "10": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 56
        }
      },
      "11": {
        start: {
          line: 28,
          column: 19
        },
        end: {
          line: 28,
          column: 93
        }
      },
      "12": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 76
        }
      },
      "16": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "18": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "20": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 112,
          column: 6
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "22": {
        start: {
          line: 52,
          column: 34
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "23": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "24": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 90
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 64,
          column: 16
        }
      },
      "26": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "29": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 77
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "31": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 78,
          column: 20
        }
      },
      "32": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "33": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "35": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "36": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 47
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 26
        }
      },
      "38": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 87,
          column: 81
        }
      },
      "39": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 100,
          column: 20
        }
      },
      "40": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 100,
          column: 17
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "42": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 53
        }
      },
      "43": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 34
        }
      },
      "44": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 119,
          column: 6
        }
      },
      "45": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "46": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 179,
          column: 6
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 78
        }
      },
      "48": {
        start: {
          line: 121,
          column: 34
        },
        end: {
          line: 121,
          column: 78
        }
      },
      "49": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 127,
          column: 16
        }
      },
      "50": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "51": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 26
        }
      },
      "52": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 129,
          column: 43
        }
      },
      "53": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "54": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "55": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 25
        }
      },
      "56": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 55
        }
      },
      "58": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 137,
          column: 76
        }
      },
      "59": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 37
        }
      },
      "60": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "61": {
        start: {
          line: 139,
          column: 34
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "62": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 151,
          column: 20
        }
      },
      "63": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "64": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 32
        }
      },
      "65": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 27
        }
      },
      "66": {
        start: {
          line: 155,
          column: 36
        },
        end: {
          line: 155,
          column: 81
        }
      },
      "67": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 167,
          column: 20
        }
      },
      "68": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "69": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "70": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 53
        }
      },
      "71": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 34
        }
      },
      "72": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 186,
          column: 6
        }
      },
      "73": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "74": {
        start: {
          line: 181,
          column: 73
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "75": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 84
        }
      },
      "76": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "77": {
        start: {
          line: 187,
          column: 25
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "78": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 193,
          column: 16
        }
      },
      "79": {
        start: {
          line: 188,
          column: 26
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "80": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 237,
          column: 6
        }
      },
      "81": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "82": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "83": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 207,
          column: 18
        }
      },
      "84": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 216,
          column: 18
        }
      },
      "85": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 224,
          column: 18
        }
      },
      "86": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "87": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 34
        }
      },
      "88": {
        start: {
          line: 238,
          column: 25
        },
        end: {
          line: 249,
          column: 6
        }
      },
      "89": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "90": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 161
        }
      },
      "91": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 261,
          column: 6
        }
      },
      "92": {
        start: {
          line: 264,
          column: 19
        },
        end: {
          line: 264,
          column: 93
        }
      },
      "93": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 53
        }
      },
      "94": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 266,
          column: 57
        }
      },
      "95": {
        start: {
          line: 267,
          column: 42
        },
        end: {
          line: 270,
          column: 6
        }
      },
      "96": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "97": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 76
        }
      },
      "98": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 111
        }
      },
      "99": {
        start: {
          line: 276,
          column: 30
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "100": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "101": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 69
        }
      },
      "102": {
        start: {
          line: 281,
          column: 24
        },
        end: {
          line: 289,
          column: 6
        }
      },
      "103": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 87
        }
      },
      "104": {
        start: {
          line: 282,
          column: 38
        },
        end: {
          line: 282,
          column: 87
        }
      },
      "105": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 28
        }
      },
      "106": {
        start: {
          line: 284,
          column: 23
        },
        end: {
          line: 284,
          column: 72
        }
      },
      "107": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 28
        }
      },
      "108": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 22
        }
      },
      "109": {
        start: {
          line: 290,
          column: 26
        },
        end: {
          line: 296,
          column: 6
        }
      },
      "110": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 87
        }
      },
      "111": {
        start: {
          line: 291,
          column: 38
        },
        end: {
          line: 291,
          column: 87
        }
      },
      "112": {
        start: {
          line: 292,
          column: 25
        },
        end: {
          line: 292,
          column: 67
        }
      },
      "113": {
        start: {
          line: 292,
          column: 47
        },
        end: {
          line: 292,
          column: 66
        }
      },
      "114": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 37
        }
      },
      "115": {
        start: {
          line: 297,
          column: 23
        },
        end: {
          line: 304,
          column: 6
        }
      },
      "116": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "117": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 49
        }
      },
      "118": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 32
        }
      },
      "119": {
        start: {
          line: 305,
          column: 26
        },
        end: {
          line: 312,
          column: 6
        }
      },
      "120": {
        start: {
          line: 306,
          column: 24
        },
        end: {
          line: 308,
          column: 15
        }
      },
      "121": {
        start: {
          line: 306,
          column: 47
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "122": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 38
        }
      },
      "123": {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 321,
          column: 6
        }
      },
      "124": {
        start: {
          line: 324,
          column: 81
        },
        end: {
          line: 326,
          column: 6
        }
      },
      "125": {
        start: {
          line: 327,
          column: 25
        },
        end: {
          line: 332,
          column: 6
        }
      },
      "126": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 52
        }
      },
      "127": {
        start: {
          line: 333,
          column: 28
        },
        end: {
          line: 338,
          column: 6
        }
      },
      "128": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 55
        }
      },
      "129": {
        start: {
          line: 339,
          column: 27
        },
        end: {
          line: 344,
          column: 6
        }
      },
      "130": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 54
        }
      },
      "131": {
        start: {
          line: 345,
          column: 22
        },
        end: {
          line: 352,
          column: 6
        }
      },
      "132": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 349,
          column: 11
        }
      },
      "133": {
        start: {
          line: 353,
          column: 23
        },
        end: {
          line: 360,
          column: 6
        }
      },
      "134": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "135": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 371,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 26
          }
        },
        loc: {
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 21
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "useImageExport",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 23
          }
        },
        loc: {
          start: {
            line: 27,
            column: 75
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 42,
            column: 51
          },
          end: {
            line: 42,
            column: 52
          }
        },
        loc: {
          start: {
            line: 42,
            column: 63
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 42
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 18
          }
        },
        loc: {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 46,
            column: 13
          }
        },
        line: 43
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 49
          }
        },
        loc: {
          start: {
            line: 51,
            column: 69
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 51
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 58,
            column: 17
          },
          end: {
            line: 58,
            column: 18
          }
        },
        loc: {
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 64,
            column: 13
          }
        },
        line: 58
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 69,
            column: 21
          },
          end: {
            line: 69,
            column: 22
          }
        },
        loc: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 78,
            column: 17
          }
        },
        line: 69
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 22
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 100,
            column: 17
          }
        },
        line: 88
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 113,
            column: 53
          },
          end: {
            line: 113,
            column: 54
          }
        },
        loc: {
          start: {
            line: 113,
            column: 69
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 113
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 51
          },
          end: {
            line: 120,
            column: 52
          }
        },
        loc: {
          start: {
            line: 120,
            column: 68
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 18
          }
        },
        loc: {
          start: {
            line: 122,
            column: 26
          },
          end: {
            line: 127,
            column: 13
          }
        },
        line: 122
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 25
          },
          end: {
            line: 139,
            column: 26
          }
        },
        loc: {
          start: {
            line: 139,
            column: 34
          },
          end: {
            line: 145,
            column: 21
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 147,
            column: 22
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 151,
            column: 17
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 22
          }
        },
        loc: {
          start: {
            line: 156,
            column: 30
          },
          end: {
            line: 167,
            column: 17
          }
        },
        line: 156
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 55
          },
          end: {
            line: 180,
            column: 56
          }
        },
        loc: {
          start: {
            line: 180,
            column: 59
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 187,
            column: 49
          },
          end: {
            line: 187,
            column: 50
          }
        },
        loc: {
          start: {
            line: 187,
            column: 53
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 187
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 188,
            column: 17
          },
          end: {
            line: 188,
            column: 18
          }
        },
        loc: {
          start: {
            line: 188,
            column: 26
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 188
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 195,
            column: 53
          },
          end: {
            line: 195,
            column: 54
          }
        },
        loc: {
          start: {
            line: 195,
            column: 64
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 195
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 238,
            column: 49
          },
          end: {
            line: 238,
            column: 50
          }
        },
        loc: {
          start: {
            line: 238,
            column: 64
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 238
      },
      "22": {
        name: "useBatchImageExport",
        decl: {
          start: {
            line: 263,
            column: 9
          },
          end: {
            line: 263,
            column: 28
          }
        },
        loc: {
          start: {
            line: 263,
            column: 83
          },
          end: {
            line: 322,
            column: 1
          }
        },
        line: 263
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 276,
            column: 54
          },
          end: {
            line: 276,
            column: 55
          }
        },
        loc: {
          start: {
            line: 276,
            column: 58
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 276
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 281,
            column: 48
          },
          end: {
            line: 281,
            column: 49
          }
        },
        loc: {
          start: {
            line: 281,
            column: 64
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 281
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 290,
            column: 50
          },
          end: {
            line: 290,
            column: 51
          }
        },
        loc: {
          start: {
            line: 290,
            column: 67
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 290
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 292,
            column: 37
          },
          end: {
            line: 292,
            column: 38
          }
        },
        loc: {
          start: {
            line: 292,
            column: 47
          },
          end: {
            line: 292,
            column: 66
          }
        },
        line: 292
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 297,
            column: 47
          },
          end: {
            line: 297,
            column: 48
          }
        },
        loc: {
          start: {
            line: 297,
            column: 51
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 297
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 305,
            column: 50
          },
          end: {
            line: 305,
            column: 51
          }
        },
        loc: {
          start: {
            line: 305,
            column: 67
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 305
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 37
          }
        },
        loc: {
          start: {
            line: 306,
            column: 47
          },
          end: {
            line: 308,
            column: 13
          }
        },
        line: 306
      },
      "30": {
        name: "useSimpleImageExport",
        decl: {
          start: {
            line: 323,
            column: 9
          },
          end: {
            line: 323,
            column: 29
          }
        },
        loc: {
          start: {
            line: 323,
            column: 67
          },
          end: {
            line: 372,
            column: 1
          }
        },
        line: 323
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 327,
            column: 49
          },
          end: {
            line: 327,
            column: 50
          }
        },
        loc: {
          start: {
            line: 327,
            column: 53
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 327
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 333,
            column: 52
          },
          end: {
            line: 333,
            column: 53
          }
        },
        loc: {
          start: {
            line: 333,
            column: 56
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 333
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 339,
            column: 51
          },
          end: {
            line: 339,
            column: 52
          }
        },
        loc: {
          start: {
            line: 339,
            column: 55
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 339
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 345,
            column: 46
          },
          end: {
            line: 345,
            column: 47
          }
        },
        loc: {
          start: {
            line: 345,
            column: 50
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 345
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 353,
            column: 47
          },
          end: {
            line: 353,
            column: 48
          }
        },
        loc: {
          start: {
            line: 353,
            column: 64
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 353
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 61
          },
          end: {
            line: 27,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 71
          },
          end: {
            line: 27,
            column: 73
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 55
          },
          end: {
            line: 51,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 64
          },
          end: {
            line: 51,
            column: 66
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "6": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "7": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 32
          }
        }, {
          start: {
            line: 181,
            column: 36
          },
          end: {
            line: 181,
            column: 71
          }
        }],
        line: 181
      },
      "8": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 207,
            column: 18
          }
        }, {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 216,
            column: 18
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 224,
            column: 18
          }
        }, {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 231,
            column: 18
          }
        }, {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 233,
            column: 34
          }
        }],
        line: 200
      },
      "9": {
        loc: {
          start: {
            line: 238,
            column: 50
          },
          end: {
            line: 238,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 59
          },
          end: {
            line: 238,
            column: 61
          }
        }],
        line: 238
      },
      "10": {
        loc: {
          start: {
            line: 244,
            column: 50
          },
          end: {
            line: 244,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 50
          },
          end: {
            line: 244,
            column: 67
          }
        }, {
          start: {
            line: 244,
            column: 71
          },
          end: {
            line: 244,
            column: 82
          }
        }],
        line: 244
      },
      "11": {
        loc: {
          start: {
            line: 244,
            column: 84
          },
          end: {
            line: 244,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 84
          },
          end: {
            line: 244,
            column: 102
          }
        }, {
          start: {
            line: 244,
            column: 106
          },
          end: {
            line: 244,
            column: 118
          }
        }],
        line: 244
      },
      "12": {
        loc: {
          start: {
            line: 263,
            column: 66
          },
          end: {
            line: 263,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 80
          },
          end: {
            line: 263,
            column: 81
          }
        }],
        line: 263
      },
      "13": {
        loc: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "14": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "15": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 282,
            column: 87
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 282,
            column: 87
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "16": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 291,
            column: 87
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 291,
            column: 87
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "17": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "18": {
        loc: {
          start: {
            line: 353,
            column: 48
          },
          end: {
            line: 353,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 353,
            column: 58
          },
          end: {
            line: 353,
            column: 61
          }
        }],
        line: 353
      },
      "19": {
        loc: {
          start: {
            line: 369,
            column: 20
          },
          end: {
            line: 369,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 20
          },
          end: {
            line: 369,
            column: 77
          }
        }, {
          start: {
            line: 369,
            column: 81
          },
          end: {
            line: 369,
            column: 85
          }
        }],
        line: 369
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useImageExport.ts"],
      sourcesContent: ["'use client';\n\n// Image Export React Hooks\n// React hooks for managing image export operations with progress tracking and optimization\n\nimport { useCallback, useRef, useState } from 'react';\nimport { useManagedCanvas } from '../providers/CanvasProvider';\nimport {\n  ImageExporter,\n  BatchExportManager,\n  createImageExporter,\n  createBatchExportManager,\n  ExportFormat,\n  QualityPreset,\n  type ExportConfig,\n  type ExportResult,\n  DEFAULT_EXPORT_CONFIG,\n  estimateFileSize\n} from '../utils/imageExport';\nimport {\n  classifyTryonError,\n  logAndClassifyError,\n  type ClassifiedError\n} from '../utils/errorHandling';\n\n/**\n * Export hook options\n */\nexport interface UseImageExportOptions {\n  /** Default export configuration */\n  defaultConfig?: Partial<ExportConfig>;\n  /** Enable auto-download after export */\n  autoDownload?: boolean;\n  /** Callback when export completes */\n  onExportComplete?: (result: ExportResult) => void;\n  /** Callback when export fails */\n  onExportError?: (error: ClassifiedError) => void;\n  /** Callback for export progress */\n  onProgress?: (progress: number) => void;\n}\n\n/**\n * Export state\n */\nexport interface ExportState {\n  isExporting: boolean;\n  progress: number;\n  currentExport: string | null;\n  completedExports: ExportResult[];\n  failedExports: Array<{ config: Partial<ExportConfig>; error: ClassifiedError }>;\n  totalExports: number;\n}\n\n/**\n * Main image export hook\n */\nexport function useImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  options: UseImageExportOptions = {}\n): {\n  canvas: HTMLCanvasElement;\n  exporter: ImageExporter;\n  state: ExportState;\n  exportImage: (config?: Partial<ExportConfig>) => Promise<ExportResult>;\n  exportWithPreset: (preset: QualityPreset) => Promise<ExportResult>;\n  exportMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  downloadLastExport: () => void;\n  clearHistory: () => void;\n  getOptimalConfig: (useCase: 'web' | 'social' | 'print' | 'archive') => ExportConfig;\n  estimateSize: (config?: Partial<ExportConfig>) => number;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter | undefined>(undefined);\n  const [state, setState] = useState<ExportState>({\n    isExporting: false,\n    progress: 0,\n    currentExport: null,\n    completedExports: [],\n    failedExports: [],\n    totalExports: 0\n  });\n\n  // Initialize exporter\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n  }\n\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n    options.onProgress?.(progress);\n  }, [options]);\n\n  const exportImage = useCallback(async (config: Partial<ExportConfig> = {}): Promise<ExportResult> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    const finalConfig = { ...options.defaultConfig, ...config };\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      currentExport: exportId,\n      totalExports: prev.totalExports + 1\n    }));\n\n    try {\n      updateProgress(25);\n      \n      const result = await exporterRef.current.exportImage(finalConfig);\n      \n      updateProgress(75);\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100,\n        currentExport: null,\n        completedExports: [...prev.completedExports, result]\n      }));\n\n      updateProgress(100);\n\n      // Auto-download if enabled\n      if (options.autoDownload) {\n        exporterRef.current!.downloadImage(result);\n      }\n\n      options.onExportComplete?.(result);\n      return result;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        currentExport: null,\n        failedExports: [...prev.failedExports, { config: finalConfig, error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'image_export',\n        config: finalConfig,\n        exportId\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const exportWithPreset = useCallback(async (preset: QualityPreset): Promise<ExportResult> => {\n    return exportImage({ preset });\n  }, [exportImage]);\n\n  const exportMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!exporterRef.current) throw new Error('Exporter not initialized');\n\n    setState(prev => ({\n      ...prev,\n      isExporting: true,\n      progress: 0,\n      totalExports: prev.totalExports + configs.length\n    }));\n\n    const results: ExportResult[] = [];\n    const totalConfigs = configs.length;\n\n    try {\n      for (let i = 0; i < configs.length; i++) {\n        const config = { ...options.defaultConfig, ...configs[i] };\n        updateProgress((i / totalConfigs) * 100);\n        \n        const result = await exporterRef.current.exportImage(config);\n        results.push(result);\n        \n        setState(prev => ({\n          ...prev,\n          completedExports: [...prev.completedExports, result]\n        }));\n      }\n\n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 100\n      }));\n\n      updateProgress(100);\n      return results;\n    } catch (error) {\n      const classifiedError = classifyTryonError(error);\n      \n      setState(prev => ({\n        ...prev,\n        isExporting: false,\n        progress: 0,\n        failedExports: [...prev.failedExports, { config: configs[results.length], error: classifiedError }]\n      }));\n\n      logAndClassifyError(error, {\n        operation: 'batch_export',\n        completedCount: results.length,\n        totalCount: totalConfigs\n      });\n\n      options.onExportError?.(classifiedError);\n      throw classifiedError;\n    }\n  }, [options, updateProgress]);\n\n  const downloadLastExport = useCallback(() => {\n    if (!exporterRef.current || state.completedExports.length === 0) return;\n    \n    const lastExport = state.completedExports[state.completedExports.length - 1];\n    exporterRef.current.downloadImage(lastExport);\n  }, [state.completedExports]);\n\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      completedExports: [],\n      failedExports: [],\n      totalExports: 0\n    }));\n  }, []);\n\n  const getOptimalConfig = useCallback((useCase: 'web' | 'social' | 'print' | 'archive'): ExportConfig => {\n    const baseConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig };\n\n    switch (useCase) {\n      case 'web':\n        return {\n          ...baseConfig,\n          format: ExportFormat.WEBP,\n          preset: QualityPreset.WEB,\n          quality: 0.8\n        };\n      case 'social':\n        return {\n          ...baseConfig,\n          format: ExportFormat.JPEG,\n          preset: QualityPreset.SOCIAL,\n          quality: 0.85,\n          width: 1080,\n          height: 1080\n        };\n      case 'print':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.PRINT,\n          quality: 1.0,\n          dpi: 300\n        };\n      case 'archive':\n        return {\n          ...baseConfig,\n          format: ExportFormat.PNG,\n          preset: QualityPreset.MAXIMUM,\n          quality: 1.0\n        };\n      default:\n        return baseConfig;\n    }\n  }, [options.defaultConfig]);\n\n  const estimateSize = useCallback((config: Partial<ExportConfig> = {}): number => {\n    const finalConfig = { ...DEFAULT_EXPORT_CONFIG, ...options.defaultConfig, ...config };\n    \n    return estimateFileSize(\n      finalConfig.width || canvasWidth,\n      finalConfig.height || canvasHeight,\n      finalConfig.format,\n      finalConfig.quality\n    );\n  }, [canvasWidth, canvasHeight, options.defaultConfig]);\n\n  return {\n    canvas,\n    exporter: exporterRef.current!,\n    state,\n    exportImage,\n    exportWithPreset,\n    exportMultiple,\n    downloadLastExport,\n    clearHistory,\n    getOptimalConfig,\n    estimateSize\n  };\n}\n\n/**\n * Batch export hook with queue management\n */\nexport function useBatchImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string,\n  concurrency: number = 2\n): {\n  canvas: HTMLCanvasElement;\n  batchManager: BatchExportManager;\n  queueExport: (config: Partial<ExportConfig>) => Promise<ExportResult>;\n  queueMultiple: (configs: Partial<ExportConfig>[]) => Promise<ExportResult[]>;\n  clearQueue: () => void;\n  queueStatus: { pending: number; processing: boolean };\n  exportPresets: (presets: QualityPreset[]) => Promise<ExportResult[]>;\n} {\n  const canvas = useManagedCanvas(canvasWidth, canvasHeight, canvasId);\n  const exporterRef = useRef<ImageExporter | undefined>(undefined);\n  const batchManagerRef = useRef<BatchExportManager | undefined>(undefined);\n  const [queueStatus, setQueueStatus] = useState({ pending: 0, processing: false });\n\n  // Initialize exporter and batch manager\n  if (!exporterRef.current) {\n    exporterRef.current = createImageExporter(canvas);\n    batchManagerRef.current = createBatchExportManager(exporterRef.current, concurrency);\n  }\n\n  const updateQueueStatus = useCallback(() => {\n    if (batchManagerRef.current) {\n      setQueueStatus(batchManagerRef.current.getQueueStatus());\n    }\n  }, []);\n\n  const queueExport = useCallback(async (config: Partial<ExportConfig>): Promise<ExportResult> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    updateQueueStatus();\n    const result = await batchManagerRef.current.queueExport(config);\n    updateQueueStatus();\n    \n    return result;\n  }, [updateQueueStatus]);\n\n  const queueMultiple = useCallback(async (configs: Partial<ExportConfig>[]): Promise<ExportResult[]> => {\n    if (!batchManagerRef.current) throw new Error('Batch manager not initialized');\n    \n    const promises = configs.map(config => queueExport(config));\n    return Promise.all(promises);\n  }, [queueExport]);\n\n  const clearQueue = useCallback(() => {\n    if (batchManagerRef.current) {\n      batchManagerRef.current.clearQueue();\n      updateQueueStatus();\n    }\n  }, [updateQueueStatus]);\n\n  const exportPresets = useCallback(async (presets: QualityPreset[]): Promise<ExportResult[]> => {\n    const configs = presets.map(preset => ({ preset }));\n    return queueMultiple(configs);\n  }, [queueMultiple]);\n\n  return {\n    canvas,\n    batchManager: batchManagerRef.current!,\n    queueExport,\n    queueMultiple,\n    clearQueue,\n    queueStatus,\n    exportPresets\n  };\n}\n\n/**\n * Simple export hook with common presets\n */\nexport function useSimpleImageExport(\n  canvasWidth: number,\n  canvasHeight: number,\n  canvasId?: string\n): {\n  canvas: HTMLCanvasElement;\n  exportForWeb: () => Promise<ExportResult>;\n  exportForSocial: () => Promise<ExportResult>;\n  exportForPrint: () => Promise<ExportResult>;\n  exportPNG: () => Promise<ExportResult>;\n  exportJPEG: (quality?: number) => Promise<ExportResult>;\n  isExporting: boolean;\n  lastExport: ExportResult | null;\n  downloadLast: () => void;\n} {\n  const {\n    canvas,\n    state,\n    exportImage,\n    downloadLastExport,\n    getOptimalConfig\n  } = useImageExport(canvasWidth, canvasHeight, canvasId, { autoDownload: true });\n\n  const exportForWeb = useCallback(() => {\n    return exportImage(getOptimalConfig('web'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForSocial = useCallback(() => {\n    return exportImage(getOptimalConfig('social'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportForPrint = useCallback(() => {\n    return exportImage(getOptimalConfig('print'));\n  }, [exportImage, getOptimalConfig]);\n\n  const exportPNG = useCallback(() => {\n    return exportImage({ format: ExportFormat.PNG, quality: 1.0 });\n  }, [exportImage]);\n\n  const exportJPEG = useCallback((quality: number = 0.9) => {\n    return exportImage({ format: ExportFormat.JPEG, quality });\n  }, [exportImage]);\n\n  return {\n    canvas,\n    exportForWeb,\n    exportForSocial,\n    exportForPrint,\n    exportPNG,\n    exportJPEG,\n    isExporting: state.isExporting,\n    lastExport: state.completedExports[state.completedExports.length - 1] || null,\n    downloadLast: downloadLastExport\n  };\n}"],
      names: ["useBatchImageExport", "useImageExport", "useSimpleImageExport", "canvasWidth", "canvasHeight", "canvasId", "options", "canvas", "useManagedCanvas", "exporterRef", "useRef", "undefined", "state", "setState", "useState", "isExporting", "progress", "currentExport", "completedExports", "failedExports", "totalExports", "current", "createImageExporter", "updateProgress", "useCallback", "prev", "onProgress", "exportImage", "config", "Error", "finalConfig", "defaultConfig", "exportId", "Date", "now", "Math", "random", "toString", "substr", "result", "autoDownload", "downloadImage", "onExportComplete", "error", "classifiedError", "classifyTryonError", "logAndClassifyError", "operation", "onExportError", "exportWithPreset", "preset", "exportMultiple", "configs", "length", "results", "totalConfigs", "i", "push", "completedCount", "totalCount", "downloadLastExport", "lastExport", "clearHistory", "getOptimalConfig", "useCase", "baseConfig", "DEFAULT_EXPORT_CONFIG", "format", "ExportFormat", "WEBP", "QualityPreset", "WEB", "quality", "JPEG", "SOCIAL", "width", "height", "PNG", "PRINT", "dpi", "MAXIMUM", "estimateSize", "estimateFileSize", "exporter", "concurrency", "batchManagerRef", "queueStatus", "setQueueStatus", "pending", "processing", "createBatchExportManager", "updateQueueStatus", "getQueueStatus", "queueExport", "queueMultiple", "promises", "map", "Promise", "all", "clearQueue", "exportPresets", "presets", "batchManager", "exportForWeb", "exportForSocial", "exportForPrint", "exportPNG", "exportJPEG", "downloadLast"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4bcd174f05f03f14eef4ede2248955e2bd9d2936"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2o6cjfsmml = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2o6cjfsmml();
cov_2o6cjfsmml().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[0]++;
  cov_2o6cjfsmml().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2o6cjfsmml().s[3]++;
_export(exports, {
  useBatchImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[1]++;
    cov_2o6cjfsmml().s[4]++;
    return useBatchImageExport;
  },
  useImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[2]++;
    cov_2o6cjfsmml().s[5]++;
    return useImageExport;
  },
  useSimpleImageExport: function () {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[3]++;
    cov_2o6cjfsmml().s[6]++;
    return useSimpleImageExport;
  }
});
const _react =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[7]++, require("react"));
const _CanvasProvider =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[8]++, require("../providers/CanvasProvider"));
const _imageExport =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[9]++, require("../utils/imageExport"));
const _errorHandling =
/* istanbul ignore next */
(cov_2o6cjfsmml().s[10]++, require("../utils/errorHandling"));
function useImageExport(canvasWidth, canvasHeight, canvasId, options =
/* istanbul ignore next */
(cov_2o6cjfsmml().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[4]++;
  const canvas =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[11]++, (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId));
  const exporterRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[12]++, (0, _react.useRef)(undefined));
  const [state, setState] =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[13]++, (0, _react.useState)({
    isExporting: false,
    progress: 0,
    currentExport: null,
    completedExports: [],
    failedExports: [],
    totalExports: 0
  }));
  // Initialize exporter
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[14]++;
  if (!exporterRef.current) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().b[1][0]++;
    cov_2o6cjfsmml().s[15]++;
    exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
  } else
  /* istanbul ignore next */
  {
    cov_2o6cjfsmml().b[1][1]++;
  }
  const updateProgress =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[16]++, (0, _react.useCallback)(progress => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[5]++;
    cov_2o6cjfsmml().s[17]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[6]++;
      cov_2o6cjfsmml().s[18]++;
      return {
        ...prev,
        progress
      };
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[19]++;
    options.onProgress?.(progress);
  }, [options]));
  const exportImage =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[20]++, (0, _react.useCallback)(async (config =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[2][0]++, {})) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[7]++;
    cov_2o6cjfsmml().s[21]++;
    if (!exporterRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[3][0]++;
      cov_2o6cjfsmml().s[22]++;
      throw new Error('Exporter not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[3][1]++;
    }
    const finalConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[23]++, {
      ...options.defaultConfig,
      ...config
    });
    const exportId =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[24]++, `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[25]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[8]++;
      cov_2o6cjfsmml().s[26]++;
      return {
        ...prev,
        isExporting: true,
        progress: 0,
        currentExport: exportId,
        totalExports: prev.totalExports + 1
      };
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[27]++;
    try {
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[28]++;
      updateProgress(25);
      const result =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[29]++, await exporterRef.current.exportImage(finalConfig));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[30]++;
      updateProgress(75);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[31]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[9]++;
        cov_2o6cjfsmml().s[32]++;
        return {
          ...prev,
          isExporting: false,
          progress: 100,
          currentExport: null,
          completedExports: [...prev.completedExports, result]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[33]++;
      updateProgress(100);
      // Auto-download if enabled
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[34]++;
      if (options.autoDownload) {
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[4][0]++;
        cov_2o6cjfsmml().s[35]++;
        exporterRef.current.downloadImage(result);
      } else
      /* istanbul ignore next */
      {
        cov_2o6cjfsmml().b[4][1]++;
      }
      cov_2o6cjfsmml().s[36]++;
      options.onExportComplete?.(result);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[37]++;
      return result;
    } catch (error) {
      const classifiedError =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[38]++, (0, _errorHandling.classifyTryonError)(error));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[39]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[10]++;
        cov_2o6cjfsmml().s[40]++;
        return {
          ...prev,
          isExporting: false,
          progress: 0,
          currentExport: null,
          failedExports: [...prev.failedExports, {
            config: finalConfig,
            error: classifiedError
          }]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[41]++;
      (0, _errorHandling.logAndClassifyError)(error, {
        operation: 'image_export',
        config: finalConfig,
        exportId
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[42]++;
      options.onExportError?.(classifiedError);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[43]++;
      throw classifiedError;
    }
  }, [options, updateProgress]));
  const exportWithPreset =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[44]++, (0, _react.useCallback)(async preset => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[11]++;
    cov_2o6cjfsmml().s[45]++;
    return exportImage({
      preset
    });
  }, [exportImage]));
  const exportMultiple =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[46]++, (0, _react.useCallback)(async configs => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[12]++;
    cov_2o6cjfsmml().s[47]++;
    if (!exporterRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[5][0]++;
      cov_2o6cjfsmml().s[48]++;
      throw new Error('Exporter not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[5][1]++;
    }
    cov_2o6cjfsmml().s[49]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[13]++;
      cov_2o6cjfsmml().s[50]++;
      return {
        ...prev,
        isExporting: true,
        progress: 0,
        totalExports: prev.totalExports + configs.length
      };
    });
    const results =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[51]++, []);
    const totalConfigs =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[52]++, configs.length);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[53]++;
    try {
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[54]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[55]++, 0); i < configs.length; i++) {
        const config =
        /* istanbul ignore next */
        (cov_2o6cjfsmml().s[56]++, {
          ...options.defaultConfig,
          ...configs[i]
        });
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[57]++;
        updateProgress(i / totalConfigs * 100);
        const result =
        /* istanbul ignore next */
        (cov_2o6cjfsmml().s[58]++, await exporterRef.current.exportImage(config));
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[59]++;
        results.push(result);
        /* istanbul ignore next */
        cov_2o6cjfsmml().s[60]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_2o6cjfsmml().f[14]++;
          cov_2o6cjfsmml().s[61]++;
          return {
            ...prev,
            completedExports: [...prev.completedExports, result]
          };
        });
      }
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[62]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[15]++;
        cov_2o6cjfsmml().s[63]++;
        return {
          ...prev,
          isExporting: false,
          progress: 100
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[64]++;
      updateProgress(100);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[65]++;
      return results;
    } catch (error) {
      const classifiedError =
      /* istanbul ignore next */
      (cov_2o6cjfsmml().s[66]++, (0, _errorHandling.classifyTryonError)(error));
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[67]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_2o6cjfsmml().f[16]++;
        cov_2o6cjfsmml().s[68]++;
        return {
          ...prev,
          isExporting: false,
          progress: 0,
          failedExports: [...prev.failedExports, {
            config: configs[results.length],
            error: classifiedError
          }]
        };
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[69]++;
      (0, _errorHandling.logAndClassifyError)(error, {
        operation: 'batch_export',
        completedCount: results.length,
        totalCount: totalConfigs
      });
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[70]++;
      options.onExportError?.(classifiedError);
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[71]++;
      throw classifiedError;
    }
  }, [options, updateProgress]));
  const downloadLastExport =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[72]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[17]++;
    cov_2o6cjfsmml().s[73]++;
    if (
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[7][0]++, !exporterRef.current) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[7][1]++, state.completedExports.length === 0)) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[6][0]++;
      cov_2o6cjfsmml().s[74]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[6][1]++;
    }
    const lastExport =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[75]++, state.completedExports[state.completedExports.length - 1]);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[76]++;
    exporterRef.current.downloadImage(lastExport);
  }, [state.completedExports]));
  const clearHistory =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[77]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[18]++;
    cov_2o6cjfsmml().s[78]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[19]++;
      cov_2o6cjfsmml().s[79]++;
      return {
        ...prev,
        completedExports: [],
        failedExports: [],
        totalExports: 0
      };
    });
  }, []));
  const getOptimalConfig =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[80]++, (0, _react.useCallback)(useCase => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[20]++;
    const baseConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[81]++, {
      ..._imageExport.DEFAULT_EXPORT_CONFIG,
      ...options.defaultConfig
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[82]++;
    switch (useCase) {
      case 'web':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][0]++;
        cov_2o6cjfsmml().s[83]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.WEBP,
          preset: _imageExport.QualityPreset.WEB,
          quality: 0.8
        };
      case 'social':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][1]++;
        cov_2o6cjfsmml().s[84]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.JPEG,
          preset: _imageExport.QualityPreset.SOCIAL,
          quality: 0.85,
          width: 1080,
          height: 1080
        };
      case 'print':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][2]++;
        cov_2o6cjfsmml().s[85]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.PNG,
          preset: _imageExport.QualityPreset.PRINT,
          quality: 1.0,
          dpi: 300
        };
      case 'archive':
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][3]++;
        cov_2o6cjfsmml().s[86]++;
        return {
          ...baseConfig,
          format: _imageExport.ExportFormat.PNG,
          preset: _imageExport.QualityPreset.MAXIMUM,
          quality: 1.0
        };
      default:
        /* istanbul ignore next */
        cov_2o6cjfsmml().b[8][4]++;
        cov_2o6cjfsmml().s[87]++;
        return baseConfig;
    }
  }, [options.defaultConfig]));
  const estimateSize =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[88]++, (0, _react.useCallback)((config =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[9][0]++, {})) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[21]++;
    const finalConfig =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[89]++, {
      ..._imageExport.DEFAULT_EXPORT_CONFIG,
      ...options.defaultConfig,
      ...config
    });
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[90]++;
    return (0, _imageExport.estimateFileSize)(
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[10][0]++, finalConfig.width) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[10][1]++, canvasWidth),
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[11][0]++, finalConfig.height) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[11][1]++, canvasHeight), finalConfig.format, finalConfig.quality);
  }, [canvasWidth, canvasHeight, options.defaultConfig]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[91]++;
  return {
    canvas,
    exporter: exporterRef.current,
    state,
    exportImage,
    exportWithPreset,
    exportMultiple,
    downloadLastExport,
    clearHistory,
    getOptimalConfig,
    estimateSize
  };
}
function useBatchImageExport(canvasWidth, canvasHeight, canvasId, concurrency =
/* istanbul ignore next */
(cov_2o6cjfsmml().b[12][0]++, 2)) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[22]++;
  const canvas =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[92]++, (0, _CanvasProvider.useManagedCanvas)(canvasWidth, canvasHeight, canvasId));
  const exporterRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[93]++, (0, _react.useRef)(undefined));
  const batchManagerRef =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[94]++, (0, _react.useRef)(undefined));
  const [queueStatus, setQueueStatus] =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[95]++, (0, _react.useState)({
    pending: 0,
    processing: false
  }));
  // Initialize exporter and batch manager
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[96]++;
  if (!exporterRef.current) {
    /* istanbul ignore next */
    cov_2o6cjfsmml().b[13][0]++;
    cov_2o6cjfsmml().s[97]++;
    exporterRef.current = (0, _imageExport.createImageExporter)(canvas);
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[98]++;
    batchManagerRef.current = (0, _imageExport.createBatchExportManager)(exporterRef.current, concurrency);
  } else
  /* istanbul ignore next */
  {
    cov_2o6cjfsmml().b[13][1]++;
  }
  const updateQueueStatus =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[99]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[23]++;
    cov_2o6cjfsmml().s[100]++;
    if (batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[14][0]++;
      cov_2o6cjfsmml().s[101]++;
      setQueueStatus(batchManagerRef.current.getQueueStatus());
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[14][1]++;
    }
  }, []));
  const queueExport =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[102]++, (0, _react.useCallback)(async config => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[24]++;
    cov_2o6cjfsmml().s[103]++;
    if (!batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[15][0]++;
      cov_2o6cjfsmml().s[104]++;
      throw new Error('Batch manager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[15][1]++;
    }
    cov_2o6cjfsmml().s[105]++;
    updateQueueStatus();
    const result =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[106]++, await batchManagerRef.current.queueExport(config));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[107]++;
    updateQueueStatus();
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[108]++;
    return result;
  }, [updateQueueStatus]));
  const queueMultiple =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[109]++, (0, _react.useCallback)(async configs => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[25]++;
    cov_2o6cjfsmml().s[110]++;
    if (!batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[16][0]++;
      cov_2o6cjfsmml().s[111]++;
      throw new Error('Batch manager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[16][1]++;
    }
    const promises =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[112]++, configs.map(config => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[26]++;
      cov_2o6cjfsmml().s[113]++;
      return queueExport(config);
    }));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[114]++;
    return Promise.all(promises);
  }, [queueExport]));
  const clearQueue =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[115]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[27]++;
    cov_2o6cjfsmml().s[116]++;
    if (batchManagerRef.current) {
      /* istanbul ignore next */
      cov_2o6cjfsmml().b[17][0]++;
      cov_2o6cjfsmml().s[117]++;
      batchManagerRef.current.clearQueue();
      /* istanbul ignore next */
      cov_2o6cjfsmml().s[118]++;
      updateQueueStatus();
    } else
    /* istanbul ignore next */
    {
      cov_2o6cjfsmml().b[17][1]++;
    }
  }, [updateQueueStatus]));
  const exportPresets =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[119]++, (0, _react.useCallback)(async presets => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[28]++;
    const configs =
    /* istanbul ignore next */
    (cov_2o6cjfsmml().s[120]++, presets.map(preset => {
      /* istanbul ignore next */
      cov_2o6cjfsmml().f[29]++;
      cov_2o6cjfsmml().s[121]++;
      return {
        preset
      };
    }));
    /* istanbul ignore next */
    cov_2o6cjfsmml().s[122]++;
    return queueMultiple(configs);
  }, [queueMultiple]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[123]++;
  return {
    canvas,
    batchManager: batchManagerRef.current,
    queueExport,
    queueMultiple,
    clearQueue,
    queueStatus,
    exportPresets
  };
}
function useSimpleImageExport(canvasWidth, canvasHeight, canvasId) {
  /* istanbul ignore next */
  cov_2o6cjfsmml().f[30]++;
  const {
    canvas,
    state,
    exportImage,
    downloadLastExport,
    getOptimalConfig
  } =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[124]++, useImageExport(canvasWidth, canvasHeight, canvasId, {
    autoDownload: true
  }));
  const exportForWeb =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[125]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[31]++;
    cov_2o6cjfsmml().s[126]++;
    return exportImage(getOptimalConfig('web'));
  }, [exportImage, getOptimalConfig]));
  const exportForSocial =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[127]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[32]++;
    cov_2o6cjfsmml().s[128]++;
    return exportImage(getOptimalConfig('social'));
  }, [exportImage, getOptimalConfig]));
  const exportForPrint =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[129]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[33]++;
    cov_2o6cjfsmml().s[130]++;
    return exportImage(getOptimalConfig('print'));
  }, [exportImage, getOptimalConfig]));
  const exportPNG =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[131]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[34]++;
    cov_2o6cjfsmml().s[132]++;
    return exportImage({
      format: _imageExport.ExportFormat.PNG,
      quality: 1.0
    });
  }, [exportImage]));
  const exportJPEG =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().s[133]++, (0, _react.useCallback)((quality =
  /* istanbul ignore next */
  (cov_2o6cjfsmml().b[18][0]++, 0.9)) => {
    /* istanbul ignore next */
    cov_2o6cjfsmml().f[35]++;
    cov_2o6cjfsmml().s[134]++;
    return exportImage({
      format: _imageExport.ExportFormat.JPEG,
      quality
    });
  }, [exportImage]));
  /* istanbul ignore next */
  cov_2o6cjfsmml().s[135]++;
  return {
    canvas,
    exportForWeb,
    exportForSocial,
    exportForPrint,
    exportPNG,
    exportJPEG,
    isExporting: state.isExporting,
    lastExport:
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[19][0]++, state.completedExports[state.completedExports.length - 1]) ||
    /* istanbul ignore next */
    (cov_2o6cjfsmml().b[19][1]++, null),
    downloadLast: downloadLastExport
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,