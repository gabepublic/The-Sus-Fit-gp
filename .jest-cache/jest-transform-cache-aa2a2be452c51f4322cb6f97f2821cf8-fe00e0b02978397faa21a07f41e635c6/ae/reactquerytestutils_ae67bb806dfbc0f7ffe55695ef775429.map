{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/__tests__/test-utils/react-query-test-utils.tsx"],"sourcesContent":["/**\n * React Query Testing Utilities for Three-Layer Architecture\n * Provides comprehensive testing setup for Business Layer, Bridge Layer, and UI Components\n */\n\nimport React, { ReactElement } from 'react';\nimport { render, RenderOptions, RenderResult } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ToastProvider } from '@/components/ToastProvider';\n\n/**\n * Configuration for React Query testing\n */\nexport interface QueryTestConfig {\n  /** Custom QueryClient configuration */\n  queryClientConfig?: {\n    defaultOptions?: {\n      queries?: any;\n      mutations?: any;\n    };\n  };\n  /** Whether to disable retries (default: true) */\n  disableRetries?: boolean;\n  /** Whether to disable cache persistence (default: true) */\n  disableCache?: boolean;\n  /** Custom error handler for testing */\n  onError?: (error: Error) => void;\n}\n\n/**\n * Default configuration for testing\n */\nconst DEFAULT_QUERY_CONFIG: Required<QueryTestConfig> = {\n  queryClientConfig: {\n    defaultOptions: {\n      queries: {\n        retry: false,\n        gcTime: 0,\n        staleTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  },\n  disableRetries: true,\n  disableCache: true,\n  onError: (error: Error) => {\n    // Only log unexpected errors in tests\n    if (!error.message.includes('expected')) {\n      console.error('Unexpected test error:', error);\n    }\n  },\n};\n\n/**\n * Creates a QueryClient configured for testing\n */\nexport function createTestQueryClient(config: QueryTestConfig = {}): QueryClient {\n  const finalConfig = { ...DEFAULT_QUERY_CONFIG, ...config };\n  \n  return new QueryClient({\n    ...finalConfig.queryClientConfig,\n    defaultOptions: {\n      ...finalConfig.queryClientConfig.defaultOptions,\n      queries: {\n        ...finalConfig.queryClientConfig.defaultOptions?.queries,\n        retry: finalConfig.disableRetries ? false : 3,\n        gcTime: finalConfig.disableCache ? 0 : 5 * 60 * 1000,\n      },\n      mutations: {\n        ...finalConfig.queryClientConfig.defaultOptions?.mutations,\n        retry: finalConfig.disableRetries ? false : 3,\n      },\n    },\n  });\n}\n\n/**\n * Test wrapper that provides all necessary providers for our architecture\n */\nexport interface TestProvidersProps {\n  children: React.ReactNode;\n  queryClient?: QueryClient;\n  queryConfig?: QueryTestConfig;\n}\n\nexport function TestProviders({ \n  children, \n  queryClient, \n  queryConfig = {} \n}: TestProvidersProps) {\n  const client = queryClient || createTestQueryClient(queryConfig);\n\n  return (\n    <QueryClientProvider client={client}>\n      <ToastProvider>\n        {children}\n      </ToastProvider>\n    </QueryClientProvider>\n  );\n}\n\n/**\n * Custom render function with our providers\n */\nexport interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  queryClient?: QueryClient;\n  queryConfig?: QueryTestConfig;\n}\n\nexport function renderWithProviders(\n  ui: ReactElement,\n  options: CustomRenderOptions = {}\n): RenderResult & { queryClient: QueryClient } {\n  const { queryClient, queryConfig, ...renderOptions } = options;\n  \n  const client = queryClient || createTestQueryClient(queryConfig);\n\n  function Wrapper({ children }: { children: React.ReactNode }) {\n    return (\n      <TestProviders queryClient={client}>\n        {children}\n      </TestProviders>\n    );\n  }\n\n  return {\n    ...render(ui, { wrapper: Wrapper, ...renderOptions }),\n    queryClient: client,\n  };\n}\n\n/**\n * Hook testing utilities for React Query hooks\n */\nclass HookTestUtils {\n  protected queryClient: QueryClient;\n\n  constructor(queryConfig: QueryTestConfig = {}) {\n    this.queryClient = createTestQueryClient(queryConfig);\n  }\n\n  /**\n   * Get the QueryClient instance\n   */\n  getQueryClient(): QueryClient {\n    return this.queryClient;\n  }\n\n  /**\n   * Clear all caches and reset state\n   */\n  resetState(): void {\n    this.queryClient.clear();\n    this.queryClient.resetQueries();\n    this.queryClient.cancelQueries();\n  }\n\n  /**\n   * Set mock data in the cache\n   */\n  setQueryData(queryKey: unknown[], data: unknown): void {\n    this.queryClient.setQueryData(queryKey, data);\n  }\n\n  /**\n   * Get cached data\n   */\n  getQueryData(queryKey: unknown[]): unknown {\n    return this.queryClient.getQueryData(queryKey);\n  }\n\n  /**\n   * Invalidate queries\n   */\n  invalidateQueries(queryKey?: unknown[]): Promise<void> {\n    return this.queryClient.invalidateQueries({ queryKey });\n  }\n\n  /**\n   * Wait for all queries to settle\n   */\n  async waitForQueries(): Promise<void> {\n    await this.queryClient.getQueryCache().findAll().forEach(query => {\n      if (query.state.fetchStatus === 'fetching') {\n        return query.promise;\n      }\n    });\n  }\n\n  /**\n   * Get query state for debugging\n   */\n  getQueryState(queryKey: unknown[]) {\n    const query = this.queryClient.getQueryCache().find({ queryKey });\n    return query?.state;\n  }\n\n  /**\n   * Get mutation state for debugging\n   */\n  getMutationState() {\n    return this.queryClient.getMutationCache().getAll().map(mutation => ({\n      state: mutation.state,\n      options: mutation.options,\n    }));\n  }\n\n  /**\n   * Create a provider component for renderHook\n   */\n  createWrapper() {\n    const queryClient = this.queryClient;\n    \n    return function TestWrapper({ children }: { children: React.ReactNode }) {\n      return (\n        <TestProviders queryClient={queryClient}>\n          {children}\n        </TestProviders>\n      );\n    };\n  }\n}\n\n/**\n * Utilities for testing mutations\n */\nclass MutationTestUtils extends HookTestUtils {\n  /**\n   * Wait for a mutation to complete\n   */\n  async waitForMutation(\n    mutationKey?: unknown[],\n    timeout: number = 5000\n  ): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const mutations = this.queryClient.getMutationCache().getAll();\n      const targetMutation = mutationKey \n        ? mutations.find(m => JSON.stringify(m.options.mutationKey) === JSON.stringify(mutationKey))\n        : mutations[0];\n\n      if (!targetMutation || targetMutation.state.status !== 'pending') {\n        return;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    \n    throw new Error(`Mutation did not complete within ${timeout}ms`);\n  }\n\n  /**\n   * Get the latest mutation result\n   */\n  getLatestMutationResult() {\n    const mutations = this.queryClient.getMutationCache().getAll();\n    const latestMutation = mutations[mutations.length - 1];\n    return latestMutation?.state;\n  }\n\n  /**\n   * Check if any mutations are pending\n   */\n  hasPendingMutations(): boolean {\n    return this.queryClient.getMutationCache().getAll()\n      .some(mutation => mutation.state.status === 'pending');\n  }\n}\n\n/**\n * Mock utilities for testing\n */\nclass MockUtils {\n  /**\n   * Create a mock File object for testing file uploads\n   */\n  static createMockFile(\n    content: string = 'mock-file-content',\n    filename: string = 'test-image.jpg',\n    type: string = 'image/jpeg'\n  ): File {\n    const blob = new Blob([content], { type });\n    return new File([blob], filename, { type });\n  }\n\n  /**\n   * Create a mock image URL\n   */\n  static createMockImageUrl(\n    content: string = 'mock-image-data'\n  ): string {\n    return `data:image/jpeg;base64,${btoa(content)}`;\n  }\n\n  /**\n   * Create mock API response\n   */\n  static createMockApiResponse<T>(\n    data: T,\n    options: {\n      status?: number;\n      statusText?: string;\n      headers?: Record<string, string>;\n    } = {}\n  ): Response {\n    const { status = 200, statusText = 'OK', headers = {} } = options;\n    \n    return new Response(JSON.stringify(data), {\n      status,\n      statusText,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n    });\n  }\n\n  /**\n   * Create mock error response\n   */\n  static createMockErrorResponse(\n    message: string = 'Test error',\n    status: number = 500\n  ): Response {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      statusText: 'Internal Server Error',\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n\n/**\n * Time utilities for testing async operations\n */\nclass TimeTestUtils {\n  /**\n   * Wait for a specific amount of time\n   */\n  static wait(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Wait for next tick\n   */\n  static waitForNextTick(): Promise<void> {\n    return new Promise(resolve => process.nextTick(resolve));\n  }\n\n  /**\n   * Wait for multiple ticks\n   */\n  static async waitForTicks(count: number = 1): Promise<void> {\n    for (let i = 0; i < count; i++) {\n      await this.waitForNextTick();\n    }\n  }\n\n  /**\n   * Execute function with fake timers\n   */\n  static async withFakeTimers<T>(fn: () => Promise<T>): Promise<T> {\n    jest.useFakeTimers();\n    try {\n      const result = await fn();\n      return result;\n    } finally {\n      jest.useRealTimers();\n    }\n  }\n}\n\n/**\n * Export commonly used utilities\n */\nexport { \n  createTestQueryClient as createQueryClient,\n  renderWithProviders as render,\n  TestProviders as Providers,\n  HookTestUtils,\n  MutationTestUtils,\n  MockUtils,\n  TimeTestUtils,\n};\n\n/**\n * Default export for convenience\n */\nexport default {\n  createQueryClient: createTestQueryClient,\n  render: renderWithProviders,\n  Providers: TestProviders,\n  HookTestUtils,\n  MutationTestUtils,\n  MockUtils,\n  TimeTestUtils,\n};"],"names":["HookTestUtils","MockUtils","MutationTestUtils","Providers","TestProviders","TimeTestUtils","createQueryClient","createTestQueryClient","render","renderWithProviders","DEFAULT_QUERY_CONFIG","queryClientConfig","defaultOptions","queries","retry","gcTime","staleTime","mutations","disableRetries","disableCache","onError","error","message","includes","console","config","finalConfig","QueryClient","children","queryClient","queryConfig","client","QueryClientProvider","ToastProvider","ui","options","renderOptions","Wrapper","wrapper","constructor","getQueryClient","resetState","clear","resetQueries","cancelQueries","setQueryData","queryKey","data","getQueryData","invalidateQueries","waitForQueries","getQueryCache","findAll","forEach","query","state","fetchStatus","promise","getQueryState","find","getMutationState","getMutationCache","getAll","map","mutation","createWrapper","TestWrapper","waitForMutation","mutationKey","timeout","startTime","Date","now","targetMutation","m","JSON","stringify","status","Promise","resolve","setTimeout","Error","getLatestMutationResult","latestMutation","length","hasPendingMutations","some","createMockFile","content","filename","type","blob","Blob","File","createMockImageUrl","btoa","createMockApiResponse","statusText","headers","Response","createMockErrorResponse","wait","ms","waitForNextTick","process","nextTick","waitForTicks","count","i","withFakeTimers","fn","jest","useFakeTimers","result","useRealTimers"],"mappings":"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"}