2f5a0cf57276e1b4d7243a68b65b4cda
/**
 * React Query Testing Utilities for Three-Layer Architecture
 * Provides comprehensive testing setup for Business Layer, Bridge Layer, and UI Components
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HookTestUtils: function() {
        return HookTestUtils;
    },
    MockUtils: function() {
        return MockUtils;
    },
    MutationTestUtils: function() {
        return MutationTestUtils;
    },
    Providers: function() {
        return TestProviders;
    },
    TestProviders: function() {
        return TestProviders;
    },
    TimeTestUtils: function() {
        return TimeTestUtils;
    },
    createQueryClient: function() {
        return createTestQueryClient;
    },
    createTestQueryClient: function() {
        return createTestQueryClient;
    },
    /**
 * Default export for convenience
 */ default: function() {
        return _default;
    },
    render: function() {
        return renderWithProviders;
    },
    renderWithProviders: function() {
        return renderWithProviders;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _ToastProvider = require("../../src/components/ToastProvider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Default configuration for testing
 */ const DEFAULT_QUERY_CONFIG = {
    queryClientConfig: {
        defaultOptions: {
            queries: {
                retry: false,
                gcTime: 0,
                staleTime: 0
            },
            mutations: {
                retry: false
            }
        }
    },
    disableRetries: true,
    disableCache: true,
    onError: (error)=>{
        // Only log unexpected errors in tests
        if (!error.message.includes('expected')) {
            console.error('Unexpected test error:', error);
        }
    }
};
function createTestQueryClient(config = {}) {
    const finalConfig = {
        ...DEFAULT_QUERY_CONFIG,
        ...config
    };
    return new _reactquery.QueryClient({
        ...finalConfig.queryClientConfig,
        defaultOptions: {
            ...finalConfig.queryClientConfig.defaultOptions,
            queries: {
                ...finalConfig.queryClientConfig.defaultOptions?.queries,
                retry: finalConfig.disableRetries ? false : 3,
                gcTime: finalConfig.disableCache ? 0 : 5 * 60 * 1000
            },
            mutations: {
                ...finalConfig.queryClientConfig.defaultOptions?.mutations,
                retry: finalConfig.disableRetries ? false : 3
            }
        }
    });
}
function TestProviders({ children, queryClient, queryConfig = {} }) {
    const client = queryClient || createTestQueryClient(queryConfig);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: client,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ToastProvider.ToastProvider, {
            children: children
        })
    });
}
function renderWithProviders(ui, options = {}) {
    const { queryClient, queryConfig, ...renderOptions } = options;
    const client = queryClient || createTestQueryClient(queryConfig);
    function Wrapper({ children }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
            queryClient: client,
            children: children
        });
    }
    return {
        ...(0, _react1.render)(ui, {
            wrapper: Wrapper,
            ...renderOptions
        }),
        queryClient: client
    };
}
/**
 * Hook testing utilities for React Query hooks
 */ class HookTestUtils {
    constructor(queryConfig = {}){
        this.queryClient = createTestQueryClient(queryConfig);
    }
    /**
   * Get the QueryClient instance
   */ getQueryClient() {
        return this.queryClient;
    }
    /**
   * Clear all caches and reset state
   */ resetState() {
        this.queryClient.clear();
        this.queryClient.resetQueries();
        this.queryClient.cancelQueries();
    }
    /**
   * Set mock data in the cache
   */ setQueryData(queryKey, data) {
        this.queryClient.setQueryData(queryKey, data);
    }
    /**
   * Get cached data
   */ getQueryData(queryKey) {
        return this.queryClient.getQueryData(queryKey);
    }
    /**
   * Invalidate queries
   */ invalidateQueries(queryKey) {
        return this.queryClient.invalidateQueries({
            queryKey
        });
    }
    /**
   * Wait for all queries to settle
   */ async waitForQueries() {
        await this.queryClient.getQueryCache().findAll().forEach((query)=>{
            if (query.state.fetchStatus === 'fetching') {
                return query.promise;
            }
        });
    }
    /**
   * Get query state for debugging
   */ getQueryState(queryKey) {
        const query = this.queryClient.getQueryCache().find({
            queryKey
        });
        return query?.state;
    }
    /**
   * Get mutation state for debugging
   */ getMutationState() {
        return this.queryClient.getMutationCache().getAll().map((mutation)=>({
                state: mutation.state,
                options: mutation.options
            }));
    }
    /**
   * Create a provider component for renderHook
   */ createWrapper() {
        const queryClient = this.queryClient;
        return function TestWrapper({ children }) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
                queryClient: queryClient,
                children: children
            });
        };
    }
}
/**
 * Utilities for testing mutations
 */ class MutationTestUtils extends HookTestUtils {
    /**
   * Wait for a mutation to complete
   */ async waitForMutation(mutationKey, timeout = 5000) {
        const startTime = Date.now();
        while(Date.now() - startTime < timeout){
            const mutations = this.queryClient.getMutationCache().getAll();
            const targetMutation = mutationKey ? mutations.find((m)=>JSON.stringify(m.options.mutationKey) === JSON.stringify(mutationKey)) : mutations[0];
            if (!targetMutation || targetMutation.state.status !== 'pending') {
                return;
            }
            await new Promise((resolve)=>setTimeout(resolve, 10));
        }
        throw new Error(`Mutation did not complete within ${timeout}ms`);
    }
    /**
   * Get the latest mutation result
   */ getLatestMutationResult() {
        const mutations = this.queryClient.getMutationCache().getAll();
        const latestMutation = mutations[mutations.length - 1];
        return latestMutation?.state;
    }
    /**
   * Check if any mutations are pending
   */ hasPendingMutations() {
        return this.queryClient.getMutationCache().getAll().some((mutation)=>mutation.state.status === 'pending');
    }
}
/**
 * Mock utilities for testing
 */ class MockUtils {
    /**
   * Create a mock File object for testing file uploads
   */ static createMockFile(content = 'mock-file-content', filename = 'test-image.jpg', type = 'image/jpeg') {
        const blob = new Blob([
            content
        ], {
            type
        });
        return new File([
            blob
        ], filename, {
            type
        });
    }
    /**
   * Create a mock image URL
   */ static createMockImageUrl(content = 'mock-image-data') {
        return `data:image/jpeg;base64,${btoa(content)}`;
    }
    /**
   * Create mock API response
   */ static createMockApiResponse(data, options = {}) {
        const { status = 200, statusText = 'OK', headers = {} } = options;
        return new Response(JSON.stringify(data), {
            status,
            statusText,
            headers: {
                'Content-Type': 'application/json',
                ...headers
            }
        });
    }
    /**
   * Create mock error response
   */ static createMockErrorResponse(message = 'Test error', status = 500) {
        return new Response(JSON.stringify({
            error: message
        }), {
            status,
            statusText: 'Internal Server Error',
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }
}
/**
 * Time utilities for testing async operations
 */ class TimeTestUtils {
    /**
   * Wait for a specific amount of time
   */ static wait(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    /**
   * Wait for next tick
   */ static waitForNextTick() {
        return new Promise((resolve)=>process.nextTick(resolve));
    }
    /**
   * Wait for multiple ticks
   */ static async waitForTicks(count = 1) {
        for(let i = 0; i < count; i++){
            await this.waitForNextTick();
        }
    }
    /**
   * Execute function with fake timers
   */ static async withFakeTimers(fn) {
        jest.useFakeTimers();
        try {
            const result = await fn();
            return result;
        } finally{
            jest.useRealTimers();
        }
    }
}
const _default = {
    createQueryClient: createTestQueryClient,
    render: renderWithProviders,
    Providers: TestProviders,
    HookTestUtils,
    MutationTestUtils,
    MockUtils,
    TimeTestUtils
};

//# sourceMappingURL=data:application/json;base64,