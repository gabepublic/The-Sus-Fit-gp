{"version":3,"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/config/queryClient.config.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\nimport { QUERY_DEFAULTS, MUTATION_DEFAULTS } from './constants';\nimport { createNetworkError, createTimeoutError, type BusinessLayerError } from '../types/error.types';\n\n// Error handler for React Query (utility function for future use)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst handleQueryError = (error: unknown): BusinessLayerError => {\n  if (error instanceof Error) {\n    // Check for network errors\n    if ('code' in error && error.code === 'NETWORK_ERROR') {\n      return createNetworkError(error.message);\n    }\n    \n    // Check for timeout errors\n    if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {\n      return createTimeoutError(error.message);\n    }\n    \n    // Return as-is if already a BusinessLayerError\n    if ('code' in error && 'timestamp' in error) {\n      return error as BusinessLayerError;\n    }\n  }\n  \n  // Default error handling\n  return {\n    name: 'BusinessLayerError',\n    message: error instanceof Error ? error.message : 'An unknown error occurred',\n    code: 'UNKNOWN_ERROR',\n    timestamp: new Date().toISOString(),\n  };\n};\n\n// Query client configuration\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: QUERY_DEFAULTS.STALE_TIME,\n      gcTime: QUERY_DEFAULTS.CACHE_TIME, // React Query v5 uses gcTime instead of cacheTime\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error && typeof error === 'object' && 'status' in error) {\n          const status = error.status as number;\n          if (status >= 400 && status < 500) {\n            return false;\n          }\n        }\n        \n        return failureCount < QUERY_DEFAULTS.RETRY_COUNT;\n      },\n      retryDelay: QUERY_DEFAULTS.RETRY_DELAY,\n      networkMode: 'online',\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: true,\n    },\n    mutations: {\n      retry: (failureCount, error) => {\n        // Don't retry mutations on 4xx errors\n        if (error && typeof error === 'object' && 'status' in error) {\n          const status = error.status as number;\n          if (status >= 400 && status < 500) {\n            return false;\n          }\n        }\n        \n        return failureCount < MUTATION_DEFAULTS.RETRY_COUNT;\n      },\n      retryDelay: MUTATION_DEFAULTS.RETRY_DELAY,\n      networkMode: 'online',\n    },\n  },\n});\n\n// Specialized query configurations for different use cases\nexport const createImageProcessingQueryConfig = (enabled = true) => ({\n  staleTime: QUERY_DEFAULTS.STALE_TIME,\n  gcTime: QUERY_DEFAULTS.CACHE_TIME,\n  retry: 1, // Less aggressive retry for image processing\n  enabled,\n  refetchOnMount: false,\n  refetchOnWindowFocus: false,\n});\n\nexport const createApiQueryConfig = (enabled = true) => ({\n  staleTime: QUERY_DEFAULTS.STALE_TIME,\n  gcTime: QUERY_DEFAULTS.CACHE_TIME,\n  retry: QUERY_DEFAULTS.RETRY_COUNT,\n  retryDelay: QUERY_DEFAULTS.RETRY_DELAY,\n  enabled,\n  refetchOnMount: true,\n  refetchOnWindowFocus: false,\n});\n\nexport const createMutationConfig = <TData, TVariables>(options?: {\n  onSuccess?: (data: TData, variables: TVariables) => void;\n  onError?: (error: BusinessLayerError, variables: TVariables) => void;\n}) => ({\n  retry: MUTATION_DEFAULTS.RETRY_COUNT,\n  retryDelay: MUTATION_DEFAULTS.RETRY_DELAY,\n  networkMode: 'online' as const,\n  ...options,\n});\n\n// Utility function to invalidate related queries\nexport const invalidateQueries = (queryKeys: string[][]) => {\n  queryKeys.forEach(queryKey => {\n    queryClient.invalidateQueries({ queryKey });\n  });\n};\n\n// Utility function to clear cache\nexport const clearQueryCache = () => {\n  queryClient.clear();\n};"],"names":["clearQueryCache","createApiQueryConfig","createImageProcessingQueryConfig","createMutationConfig","invalidateQueries","queryClient","handleQueryError","error","Error","code","createNetworkError","message","includes","createTimeoutError","name","timestamp","Date","toISOString","QueryClient","defaultOptions","queries","staleTime","QUERY_DEFAULTS","STALE_TIME","gcTime","CACHE_TIME","retry","failureCount","status","RETRY_COUNT","retryDelay","RETRY_DELAY","networkMode","refetchOnWindowFocus","refetchOnReconnect","mutations","MUTATION_DEFAULTS","enabled","refetchOnMount","options","queryKeys","forEach","queryKey","clear"],"mappings":";;;;;;;;;;;IA+GaA,eAAe;eAAfA;;IA5BAC,oBAAoB;eAApBA;;IATAC,gCAAgC;eAAhCA;;IAmBAC,oBAAoB;eAApBA;;IAWAC,iBAAiB;eAAjBA;;IAtEAC,WAAW;eAAXA;;;4BAlCe;2BACsB;4BAC8B;AAEhF,kEAAkE;AAClE,6DAA6D;AAC7D,MAAMC,mBAAmB,CAACC;IACxB,IAAIA,iBAAiBC,OAAO;QAC1B,2BAA2B;QAC3B,IAAI,UAAUD,SAASA,MAAME,IAAI,KAAK,iBAAiB;YACrD,OAAOC,IAAAA,8BAAkB,EAACH,MAAMI,OAAO;QACzC;QAEA,2BAA2B;QAC3B,IAAIJ,MAAMI,OAAO,CAACC,QAAQ,CAAC,cAAcL,MAAMI,OAAO,CAACC,QAAQ,CAAC,YAAY;YAC1E,OAAOC,IAAAA,8BAAkB,EAACN,MAAMI,OAAO;QACzC;QAEA,+CAA+C;QAC/C,IAAI,UAAUJ,SAAS,eAAeA,OAAO;YAC3C,OAAOA;QACT;IACF;IAEA,yBAAyB;IACzB,OAAO;QACLO,MAAM;QACNH,SAASJ,iBAAiBC,QAAQD,MAAMI,OAAO,GAAG;QAClDF,MAAM;QACNM,WAAW,IAAIC,OAAOC,WAAW;IACnC;AACF;AAGO,MAAMZ,cAAc,IAAIa,uBAAW,CAAC;IACzCC,gBAAgB;QACdC,SAAS;YACPC,WAAWC,yBAAc,CAACC,UAAU;YACpCC,QAAQF,yBAAc,CAACG,UAAU;YACjCC,OAAO,CAACC,cAAcpB;gBACpB,4CAA4C;gBAC5C,IAAIA,SAAS,OAAOA,UAAU,YAAY,YAAYA,OAAO;oBAC3D,MAAMqB,SAASrB,MAAMqB,MAAM;oBAC3B,IAAIA,UAAU,OAAOA,SAAS,KAAK;wBACjC,OAAO;oBACT;gBACF;gBAEA,OAAOD,eAAeL,yBAAc,CAACO,WAAW;YAClD;YACAC,YAAYR,yBAAc,CAACS,WAAW;YACtCC,aAAa;YACbC,sBAAsB;YACtBC,oBAAoB;QACtB;QACAC,WAAW;YACTT,OAAO,CAACC,cAAcpB;gBACpB,sCAAsC;gBACtC,IAAIA,SAAS,OAAOA,UAAU,YAAY,YAAYA,OAAO;oBAC3D,MAAMqB,SAASrB,MAAMqB,MAAM;oBAC3B,IAAIA,UAAU,OAAOA,SAAS,KAAK;wBACjC,OAAO;oBACT;gBACF;gBAEA,OAAOD,eAAeS,4BAAiB,CAACP,WAAW;YACrD;YACAC,YAAYM,4BAAiB,CAACL,WAAW;YACzCC,aAAa;QACf;IACF;AACF;AAGO,MAAM9B,mCAAmC,CAACmC,UAAU,IAAI,GAAM,CAAA;QACnEhB,WAAWC,yBAAc,CAACC,UAAU;QACpCC,QAAQF,yBAAc,CAACG,UAAU;QACjCC,OAAO;QACPW;QACAC,gBAAgB;QAChBL,sBAAsB;IACxB,CAAA;AAEO,MAAMhC,uBAAuB,CAACoC,UAAU,IAAI,GAAM,CAAA;QACvDhB,WAAWC,yBAAc,CAACC,UAAU;QACpCC,QAAQF,yBAAc,CAACG,UAAU;QACjCC,OAAOJ,yBAAc,CAACO,WAAW;QACjCC,YAAYR,yBAAc,CAACS,WAAW;QACtCM;QACAC,gBAAgB;QAChBL,sBAAsB;IACxB,CAAA;AAEO,MAAM9B,uBAAuB,CAAoBoC,UAGjD,CAAA;QACLb,OAAOU,4BAAiB,CAACP,WAAW;QACpCC,YAAYM,4BAAiB,CAACL,WAAW;QACzCC,aAAa;QACb,GAAGO,OAAO;IACZ,CAAA;AAGO,MAAMnC,oBAAoB,CAACoC;IAChCA,UAAUC,OAAO,CAACC,CAAAA;QAChBrC,YAAYD,iBAAiB,CAAC;YAAEsC;QAAS;IAC3C;AACF;AAGO,MAAM1C,kBAAkB;IAC7BK,YAAYsC,KAAK;AACnB"}