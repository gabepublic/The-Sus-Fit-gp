5e442368796bb8d00a46c24300de87f1
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ImageProcessingOperation: function() {
        return ImageProcessingOperation;
    },
    imageProcessingKeys: function() {
        return imageProcessingKeys;
    },
    useBatchImageProcessing: function() {
        return useBatchImageProcessing;
    },
    useFormatConversion: function() {
        return useFormatConversion;
    },
    useImageMetadata: function() {
        return useImageMetadata;
    },
    useImageProcessing: function() {
        return useImageProcessing;
    },
    useImageProcessingCache: function() {
        return useImageProcessingCache;
    },
    useImageThumbnail: function() {
        return useImageThumbnail;
    },
    useImageValidation: function() {
        return useImageValidation;
    },
    useProcessingStats: function() {
        return useProcessingStats;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _imageProcessing = require("../utils/imageProcessing");
const _errorHandling = require("../utils/errorHandling");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var ImageProcessingOperation = /*#__PURE__*/ function(ImageProcessingOperation) {
    ImageProcessingOperation["BASIC_PROCESSING"] = "basic_processing";
    ImageProcessingOperation["ADVANCED_PROCESSING"] = "advanced_processing";
    ImageProcessingOperation["BATCH_PROCESSING"] = "batch_processing";
    ImageProcessingOperation["THUMBNAIL_GENERATION"] = "thumbnail_generation";
    ImageProcessingOperation["METADATA_EXTRACTION"] = "metadata_extraction";
    ImageProcessingOperation["FORMAT_CONVERSION"] = "format_conversion";
    ImageProcessingOperation["VALIDATION"] = "validation";
    return ImageProcessingOperation;
}({});
/**
 * Default batch processing configuration
 */ const DEFAULT_BATCH_CONFIG = {
    maxConcurrent: 3,
    retryAttempts: 2,
    retryDelay: 1000
};
const imageProcessingKeys = {
    all: [
        'imageProcessing'
    ],
    metadata: (fileId)=>[
            ...imageProcessingKeys.all,
            'metadata',
            fileId
        ],
    thumbnail: (fileId, size)=>[
            ...imageProcessingKeys.all,
            'thumbnail',
            fileId,
            size
        ],
    validation: (fileId)=>[
            ...imageProcessingKeys.all,
            'validation',
            fileId
        ],
    processing: (operationId)=>[
            ...imageProcessingKeys.all,
            'processing',
            operationId
        ],
    stats: ()=>[
            ...imageProcessingKeys.all,
            'stats'
        ]
};
function useImageProcessing() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const basicProcessingMutation = (0, _reactquery.useMutation)({
        mutationFn: async (file)=>{
            try {
                return await (0, _imageProcessing.processImageForTryon)(file);
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'basic_processing',
                    fileName: file.name
                });
                throw classifiedError;
            }
        },
        onSuccess: (result, file)=>{
            // Cache the result
            queryClient.setQueryData(imageProcessingKeys.processing(`basic_${file.name}_${file.lastModified}`), result);
        },
        onError: (error, file)=>{
            console.error(`Failed to process image ${file.name}:`, error);
        }
    });
    const advancedProcessingMutation = (0, _reactquery.useMutation)({
        mutationFn: async ({ file, options })=>{
            try {
                return await (0, _imageProcessing.processImageAdvanced)(file, options);
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'advanced_processing',
                    fileName: file.name,
                    options
                });
                throw classifiedError;
            }
        },
        onSuccess: (result, { file })=>{
            // Cache the result
            queryClient.setQueryData(imageProcessingKeys.processing(`advanced_${file.name}_${file.lastModified}`), result);
        }
    });
    return {
        processBasic: basicProcessingMutation.mutateAsync,
        processAdvanced: advancedProcessingMutation.mutateAsync,
        isProcessingBasic: basicProcessingMutation.isPending,
        isProcessingAdvanced: advancedProcessingMutation.isPending,
        basicError: basicProcessingMutation.error,
        advancedError: advancedProcessingMutation.error,
        reset: ()=>{
            basicProcessingMutation.reset();
            advancedProcessingMutation.reset();
        }
    };
}
function useImageMetadata(file, enabled = true) {
    return (0, _reactquery.useQuery)({
        queryKey: file ? imageProcessingKeys.metadata(`${file.name}_${file.lastModified}`) : [],
        queryFn: async ()=>{
            if (!file) throw new Error('No file provided');
            try {
                return await (0, _imageProcessing.extractImageMetadata)(file);
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'metadata_extraction',
                    fileName: file.name
                });
                throw classifiedError;
            }
        },
        enabled: enabled && !!file,
        staleTime: 5 * 60 * 1000,
        gcTime: 10 * 60 * 1000 // 10 minutes
    });
}
function useImageThumbnail(file, size = 150, enabled = true) {
    return (0, _reactquery.useQuery)({
        queryKey: file ? imageProcessingKeys.thumbnail(`${file.name}_${file.lastModified}`, size) : [],
        queryFn: async ()=>{
            if (!file) throw new Error('No file provided');
            try {
                return await (0, _imageProcessing.createImageThumbnail)(file, size);
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'thumbnail_generation',
                    fileName: file.name,
                    size
                });
                throw classifiedError;
            }
        },
        enabled: enabled && !!file,
        staleTime: 10 * 60 * 1000,
        gcTime: 30 * 60 * 1000 // 30 minutes
    });
}
function useImageValidation(file, enabled = true) {
    return (0, _reactquery.useQuery)({
        queryKey: file ? imageProcessingKeys.validation(`${file.name}_${file.lastModified}`) : [],
        queryFn: async ()=>{
            if (!file) throw new Error('No file provided');
            const errors = [];
            try {
                // Basic file type validation
                if (!file.type.startsWith('image/')) {
                    errors.push('File is not an image');
                }
                // File size validation (10MB max)
                if (file.size > 10 * 1024 * 1024) {
                    errors.push('File size too large (max 10MB)');
                }
                // Dimension validation
                try {
                    const metadata = await (0, _imageProcessing.extractImageMetadata)(file);
                    if (metadata.dimensions.width < 256 || metadata.dimensions.height < 256) {
                        errors.push('Image dimensions too small (minimum 256x256)');
                    }
                    if (metadata.dimensions.width > 4096 || metadata.dimensions.height > 4096) {
                        errors.push('Image dimensions too large (maximum 4096x4096)');
                    }
                } catch (error) {
                    errors.push('Failed to validate image dimensions');
                }
                return {
                    isValid: errors.length === 0,
                    errors
                };
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'validation',
                    fileName: file.name
                });
                throw classifiedError;
            }
        },
        enabled: enabled && !!file,
        staleTime: 2 * 60 * 1000,
        gcTime: 5 * 60 * 1000 // 5 minutes
    });
}
function useFormatConversion() {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async ({ file, targetFormat, quality = 0.9 })=>{
            try {
                const imageUrl = URL.createObjectURL(file);
                const { convertImageFormat } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../utils/imageProcessing")));
                const result = await convertImageFormat(imageUrl, targetFormat, quality);
                URL.revokeObjectURL(imageUrl);
                return result;
            } catch (error) {
                const classifiedError = (0, _errorHandling.classifyTryonError)(error);
                (0, _errorHandling.logAndClassifyError)(error, {
                    operation: 'format_conversion',
                    fileName: file.name,
                    targetFormat,
                    quality
                });
                throw classifiedError;
            }
        },
        onSuccess: (result, { file, targetFormat })=>{
            // Invalidate related queries
            queryClient.invalidateQueries({
                queryKey: imageProcessingKeys.metadata(`${file.name}_${file.lastModified}`)
            });
        }
    });
}
function useBatchImageProcessing(config = {}) {
    const processingConfig = {
        ...DEFAULT_BATCH_CONFIG,
        ...config
    };
    const [queueState, setQueueState] = (0, _react.useState)({
        queue: [],
        activeItems: [],
        completedItems: [],
        failedItems: [],
        isProcessing: false,
        totalProgress: 0
    });
    const queueRef = (0, _react.useRef)([]);
    const activeRef = (0, _react.useRef)(new Map());
    const statsRef = (0, _react.useRef)({
        totalProcessed: 0,
        totalFailed: 0,
        averageProcessingTime: 0,
        totalProcessingTime: 0,
        peakMemoryUsage: 0,
        cacheHitRate: 0
    });
    const generateId = (0, _react.useCallback)(()=>{
        return `proc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }, []);
    const updateQueueState = (0, _react.useCallback)(()=>{
        const activeItems = Array.from(activeRef.current.values());
        const completedItems = queueRef.current.filter((item)=>item.status === 'completed');
        const failedItems = queueRef.current.filter((item)=>item.status === 'failed');
        const totalItems = queueRef.current.length;
        const totalProgress = totalItems > 0 ? (completedItems.length + failedItems.length) / totalItems * 100 : 0;
        setQueueState({
            queue: [
                ...queueRef.current
            ],
            activeItems,
            completedItems,
            failedItems,
            isProcessing: activeItems.length > 0,
            totalProgress
        });
    }, []);
    const processQueueItem = (0, _react.useCallback)(async (item)=>{
        item.status = 'processing';
        item.startTime = Date.now();
        activeRef.current.set(item.id, item);
        updateQueueState();
        try {
            let result;
            switch(item.operation){
                case "basic_processing":
                    result = await (0, _imageProcessing.processImageForTryon)(item.file, item.options);
                    break;
                case "advanced_processing":
                    result = await (0, _imageProcessing.processImageAdvanced)(item.file, item.options);
                    break;
                case "thumbnail_generation":
                    result = await (0, _imageProcessing.createImageThumbnail)(item.file, item.options?.size || 150);
                    break;
                case "metadata_extraction":
                    result = await (0, _imageProcessing.extractImageMetadata)(item.file);
                    break;
                case "format_conversion":
                    const imageUrl = URL.createObjectURL(item.file);
                    result = await (0, _imageProcessing.convertImageFormat)(imageUrl, item.options.targetFormat, item.options.quality);
                    URL.revokeObjectURL(imageUrl);
                    break;
                default:
                    throw new Error(`Unsupported operation: ${item.operation}`);
            }
            item.status = 'completed';
            item.result = result;
            item.endTime = Date.now();
            item.progress = 100;
            // Update stats
            const processingTime = item.endTime - (item.startTime || 0);
            statsRef.current.totalProcessed++;
            statsRef.current.totalProcessingTime += processingTime;
            statsRef.current.averageProcessingTime = statsRef.current.totalProcessingTime / statsRef.current.totalProcessed;
            processingConfig.itemCompleteCallback?.(item);
        } catch (error) {
            item.status = 'failed';
            item.endTime = Date.now();
            item.error = (0, _errorHandling.classifyTryonError)(error);
            statsRef.current.totalFailed++;
            (0, _errorHandling.logAndClassifyError)(error, {
                operation: item.operation,
                fileName: item.file.name,
                itemId: item.id
            });
            processingConfig.errorCallback?.(item, item.error);
        } finally{
            activeRef.current.delete(item.id);
            updateQueueState();
            // Process next items in queue
            processNextInQueue();
        }
    }, [
        processingConfig,
        updateQueueState
    ]);
    const processNextInQueue = (0, _react.useCallback)(()=>{
        const pendingItems = queueRef.current.filter((item)=>item.status === 'pending').sort((a, b)=>{
            const priorityOrder = {
                high: 3,
                normal: 2,
                low: 1
            };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
        const availableSlots = processingConfig.maxConcurrent - activeRef.current.size;
        for(let i = 0; i < Math.min(availableSlots, pendingItems.length); i++){
            processQueueItem(pendingItems[i]);
        }
    }, [
        processingConfig.maxConcurrent,
        processQueueItem
    ]);
    const addToQueue = (0, _react.useCallback)((operation, file, options, priority = 'normal')=>{
        const item = {
            id: generateId(),
            operation,
            file,
            options,
            priority,
            status: 'pending',
            progress: 0
        };
        queueRef.current.push(item);
        updateQueueState();
        // Start processing if under capacity
        if (activeRef.current.size < processingConfig.maxConcurrent) {
            processNextInQueue();
        }
        return item.id;
    }, [
        generateId,
        processingConfig.maxConcurrent,
        updateQueueState,
        processNextInQueue
    ]);
    const removeFromQueue = (0, _react.useCallback)((itemId)=>{
        const index = queueRef.current.findIndex((item)=>item.id === itemId);
        if (index === -1) return false;
        const item = queueRef.current[index];
        if (item.status === 'processing') {
            // Cannot remove active items
            return false;
        }
        queueRef.current.splice(index, 1);
        updateQueueState();
        return true;
    }, [
        updateQueueState
    ]);
    const clearQueue = (0, _react.useCallback)((includeActive = false)=>{
        if (includeActive) {
            queueRef.current = [];
            activeRef.current.clear();
        } else {
            queueRef.current = queueRef.current.filter((item)=>item.status === 'processing');
        }
        updateQueueState();
    }, [
        updateQueueState
    ]);
    const pauseQueue = (0, _react.useCallback)(()=>{
    // Implementation would pause processing new items
    // For now, just stop processing new items
    }, []);
    const resumeQueue = (0, _react.useCallback)(()=>{
        processNextInQueue();
    }, [
        processNextInQueue
    ]);
    const getStats = (0, _react.useCallback)(()=>{
        return {
            ...statsRef.current
        };
    }, []);
    return {
        queueState,
        addToQueue,
        removeFromQueue,
        clearQueue,
        pauseQueue,
        resumeQueue,
        getStats,
        processingConfig
    };
}
function useProcessingStats() {
    return (0, _reactquery.useQuery)({
        queryKey: imageProcessingKeys.stats(),
        queryFn: async ()=>{
            // This would typically fetch from a backend or local storage
            return {
                totalProcessed: 0,
                totalFailed: 0,
                averageProcessingTime: 0,
                totalProcessingTime: 0,
                peakMemoryUsage: 0,
                cacheHitRate: 0
            };
        },
        staleTime: 30 * 1000,
        gcTime: 2 * 60 * 1000 // 2 minutes
    });
}
function useImageProcessingCache() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const clearCache = (0, _react.useCallback)((pattern)=>{
        if (pattern) {
            queryClient.invalidateQueries({
                predicate: (query)=>query.queryKey.toString().includes(pattern)
            });
        } else {
            queryClient.invalidateQueries({
                queryKey: imageProcessingKeys.all
            });
        }
    }, [
        queryClient
    ]);
    const getCacheStats = (0, _react.useCallback)(()=>{
        const cache = queryClient.getQueryCache();
        const queries = cache.findAll({
            queryKey: imageProcessingKeys.all
        });
        return {
            totalQueries: queries.length,
            activeQueries: queries.filter((q)=>q.isActive()).length,
            stalequeries: queries.filter((q)=>q.isStale()).length,
            invalidQueries: queries.filter((q)=>q.isInvalid()).length
        };
    }, [
        queryClient
    ]);
    const preloadMetadata = (0, _react.useCallback)(async (files)=>{
        const promises = files.map((file)=>queryClient.prefetchQuery({
                queryKey: imageProcessingKeys.metadata(`${file.name}_${file.lastModified}`),
                queryFn: ()=>(0, _imageProcessing.extractImageMetadata)(file)
            }));
        await Promise.allSettled(promises);
    }, [
        queryClient
    ]);
    return {
        clearCache,
        getCacheStats,
        preloadMetadata
    };
}

//# sourceMappingURL=data:application/json;base64,