f24701a2448432e634e3d6585a468138
// Optimistic Updates Hooks
// React hooks for managing optimistic UI updates and progress indicators
"use strict";

/* istanbul ignore next */
function cov_x46rlmy5e() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useOptimisticUpdates.ts";
  var hash = "0d7d09357b17c7287dc8e723c0cc4f2199df4749";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useOptimisticUpdates.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 46
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 36
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 30
        }
      },
      "10": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 52
        }
      },
      "11": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "12": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "13": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "14": {
        start: {
          line: 38,
          column: 30
        },
        end: {
          line: 38,
          column: 111
        }
      },
      "15": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 58
        }
      },
      "16": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "17": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 46,
          column: 6
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 62
        }
      },
      "19": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "21": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "22": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 107
        }
      },
      "23": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 59
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 36
        }
      },
      "25": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 67,
          column: 6
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "27": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "28": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 90
        }
      },
      "29": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "30": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "31": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "32": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "33": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 72
        }
      },
      "34": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 54
        }
      },
      "35": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "36": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "38": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 107
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 45
        }
      },
      "40": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 95,
          column: 6
        }
      },
      "41": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 111,
          column: 6
        }
      },
      "42": {
        start: {
          line: 106,
          column: 33
        },
        end: {
          line: 106,
          column: 37
        }
      },
      "43": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 71
        }
      },
      "44": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      "45": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "46": {
        start: {
          line: 119,
          column: 44
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "47": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 140,
          column: 6
        }
      },
      "48": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 22
        }
      },
      "49": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 11
        }
      },
      "50": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 131,
          column: 45
        }
      },
      "51": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "52": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 31
        }
      },
      "53": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 19
        }
      },
      "54": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 145,
          column: 6
        }
      },
      "55": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 93
        }
      },
      "56": {
        start: {
          line: 142,
          column: 59
        },
        end: {
          line: 142,
          column: 91
        }
      },
      "57": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 151,
          column: 6
        }
      },
      "58": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 182
        }
      },
      "59": {
        start: {
          line: 147,
          column: 148
        },
        end: {
          line: 147,
          column: 180
        }
      },
      "60": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 156,
          column: 6
        }
      },
      "61": {
        start: {
          line: 159,
          column: 24
        },
        end: {
          line: 167,
          column: 6
        }
      },
      "62": {
        start: {
          line: 168,
          column: 17
        },
        end: {
          line: 168,
          column: 33
        }
      },
      "63": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 175,
          column: 6
        }
      },
      "64": {
        start: {
          line: 178,
          column: 25
        },
        end: {
          line: 178,
          column: 55
        }
      },
      "65": {
        start: {
          line: 179,
          column: 31
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "66": {
        start: {
          line: 180,
          column: 25
        },
        end: {
          line: 201,
          column: 6
        }
      },
      "67": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 64
        }
      },
      "68": {
        start: {
          line: 181,
          column: 54
        },
        end: {
          line: 181,
          column: 64
        }
      },
      "69": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "70": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 46
        }
      },
      "71": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 51
        }
      },
      "72": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 49
        }
      },
      "73": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 40
        }
      },
      "74": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 35
        }
      },
      "75": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 46
        }
      },
      "76": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 39
        }
      },
      "77": {
        start: {
          line: 202,
          column: 26
        },
        end: {
          line: 213,
          column: 6
        }
      },
      "78": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 88
        }
      },
      "79": {
        start: {
          line: 203,
          column: 78
        },
        end: {
          line: 203,
          column: 88
        }
      },
      "80": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 73
        }
      },
      "81": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 36
        }
      },
      "82": {
        start: {
          line: 205,
          column: 26
        },
        end: {
          line: 205,
          column: 36
        }
      },
      "83": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 57
        }
      },
      "84": {
        start: {
          line: 206,
          column: 26
        },
        end: {
          line: 206,
          column: 57
        }
      },
      "85": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 48
        }
      },
      "86": {
        start: {
          line: 208,
          column: 33
        },
        end: {
          line: 208,
          column: 45
        }
      },
      "87": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 60
        }
      },
      "88": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 228,
          column: 6
        }
      },
      "89": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "90": {
        start: {
          line: 215,
          column: 23
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "91": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "92": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 33
        }
      },
      "93": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 33
        }
      },
      "94": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 33
        }
      },
      "95": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 33
        }
      },
      "96": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 234,
          column: 6
        }
      },
      "97": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 85
        }
      },
      "98": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 242,
          column: 6
        }
      },
      "99": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 57
        }
      },
      "100": {
        start: {
          line: 246,
          column: 37
        },
        end: {
          line: 285,
          column: 6
        }
      },
      "101": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "102": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "103": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 262,
          column: 15
        }
      },
      "104": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "105": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "106": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 273,
          column: 19
        }
      },
      "107": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "108": {
        start: {
          line: 286,
          column: 34
        },
        end: {
          line: 317,
          column: 6
        }
      },
      "109": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 288,
          column: 34
        }
      },
      "110": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 12
        }
      },
      "111": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 304,
          column: 12
        }
      },
      "112": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "113": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 312,
          column: 16
        }
      },
      "114": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 43
        }
      },
      "115": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 333,
          column: 6
        }
      },
      "116": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "117": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 326,
          column: 15
        }
      },
      "118": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 325,
          column: 25
        }
      },
      "119": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 38
        }
      },
      "120": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 338,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 31
          }
        },
        loc: {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 17,
            column: 37
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 20,
            column: 27
          }
        },
        loc: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 30
          },
          end: {
            line: 23,
            column: 31
          }
        },
        loc: {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 23
          }
        },
        loc: {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 29,
            column: 21
          }
        },
        loc: {
          start: {
            line: 29,
            column: 31
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "7": {
        name: "useOptimisticUpdates",
        decl: {
          start: {
            line: 36,
            column: 9
          },
          end: {
            line: 36,
            column: 29
          }
        },
        loc: {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 36
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 42,
            column: 46
          },
          end: {
            line: 42,
            column: 47
          }
        },
        loc: {
          start: {
            line: 42,
            column: 50
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 52
          },
          end: {
            line: 47,
            column: 53
          }
        },
        loc: {
          start: {
            line: 47,
            column: 72
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 59,
            column: 55
          },
          end: {
            line: 59,
            column: 56
          }
        },
        loc: {
          start: {
            line: 59,
            column: 96
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 59
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 56
          }
        },
        loc: {
          start: {
            line: 68,
            column: 78
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 68
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 78,
            column: 26
          },
          end: {
            line: 78,
            column: 27
          }
        },
        loc: {
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 78
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 79,
            column: 16
          }
        },
        loc: {
          start: {
            line: 79,
            column: 19
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 79
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 81,
            column: 46
          }
        },
        loc: {
          start: {
            line: 81,
            column: 61
          },
          end: {
            line: 83,
            column: 13
          }
        },
        line: 81
      },
      "15": {
        name: "useTryonProgress",
        decl: {
          start: {
            line: 97,
            column: 9
          },
          end: {
            line: 97,
            column: 25
          }
        },
        loc: {
          start: {
            line: 97,
            column: 40
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 97
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 26
          }
        },
        loc: {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 104
      },
      "17": {
        name: "useMultipleTryonProgress",
        decl: {
          start: {
            line: 118,
            column: 9
          },
          end: {
            line: 118,
            column: 33
          }
        },
        loc: {
          start: {
            line: 118,
            column: 49
          },
          end: {
            line: 157,
            column: 1
          }
        },
        line: 118
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 119,
            column: 38
          },
          end: {
            line: 119,
            column: 39
          }
        },
        loc: {
          start: {
            line: 119,
            column: 44
          },
          end: {
            line: 127,
            column: 10
          }
        },
        line: 119
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 45
          }
        },
        loc: {
          start: {
            line: 128,
            column: 48
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 128
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 130,
            column: 30
          },
          end: {
            line: 130,
            column: 31
          }
        },
        loc: {
          start: {
            line: 130,
            column: 43
          },
          end: {
            line: 135,
            column: 9
          }
        },
        line: 130
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 141,
            column: 46
          },
          end: {
            line: 141,
            column: 47
          }
        },
        loc: {
          start: {
            line: 141,
            column: 50
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 142,
            column: 47
          },
          end: {
            line: 142,
            column: 48
          }
        },
        loc: {
          start: {
            line: 142,
            column: 59
          },
          end: {
            line: 142,
            column: 91
          }
        },
        line: 142
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 146,
            column: 45
          },
          end: {
            line: 146,
            column: 46
          }
        },
        loc: {
          start: {
            line: 146,
            column: 49
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 146
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 147,
            column: 136
          },
          end: {
            line: 147,
            column: 137
          }
        },
        loc: {
          start: {
            line: 147,
            column: 148
          },
          end: {
            line: 147,
            column: 180
          }
        },
        line: 147
      },
      "25": {
        name: "useTryonResult",
        decl: {
          start: {
            line: 158,
            column: 9
          },
          end: {
            line: 158,
            column: 23
          }
        },
        loc: {
          start: {
            line: 158,
            column: 38
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 158
      },
      "26": {
        name: "useProgressVisualization",
        decl: {
          start: {
            line: 177,
            column: 9
          },
          end: {
            line: 177,
            column: 33
          }
        },
        loc: {
          start: {
            line: 177,
            column: 61
          },
          end: {
            line: 243,
            column: 1
          }
        },
        line: 177
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 180,
            column: 45
          },
          end: {
            line: 180,
            column: 46
          }
        },
        loc: {
          start: {
            line: 180,
            column: 49
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 180
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 202,
            column: 46
          },
          end: {
            line: 202,
            column: 47
          }
        },
        loc: {
          start: {
            line: 202,
            column: 50
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 202
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 214,
            column: 46
          },
          end: {
            line: 214,
            column: 47
          }
        },
        loc: {
          start: {
            line: 214,
            column: 50
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 214
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 229,
            column: 45
          }
        },
        loc: {
          start: {
            line: 229,
            column: 48
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 229
      },
      "31": {
        name: "useOptimisticCacheInvalidation",
        decl: {
          start: {
            line: 244,
            column: 9
          },
          end: {
            line: 244,
            column: 39
          }
        },
        loc: {
          start: {
            line: 244,
            column: 42
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 244
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 246,
            column: 61
          },
          end: {
            line: 246,
            column: 62
          }
        },
        loc: {
          start: {
            line: 246,
            column: 78
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 246
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 286,
            column: 58
          },
          end: {
            line: 286,
            column: 59
          }
        },
        loc: {
          start: {
            line: 286,
            column: 75
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 286
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 318,
            column: 48
          },
          end: {
            line: 318,
            column: 49
          }
        },
        loc: {
          start: {
            line: 318,
            column: 70
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 318
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 321,
            column: 33
          },
          end: {
            line: 321,
            column: 34
          }
        },
        loc: {
          start: {
            line: 321,
            column: 48
          },
          end: {
            line: 326,
            column: 13
          }
        },
        line: 321
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 30
          },
          end: {
            line: 36,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 36,
            column: 41
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 38,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 38,
            column: 54
          }
        }, {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 38,
            column: 111
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 32
          }
        }, {
          start: {
            line: 48,
            column: 36
          },
          end: {
            line: 48,
            column: 61
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 25
          }
        }, {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 60,
            column: 72
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 25
          }
        }, {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 69,
            column: 72
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 19
          },
          end: {
            line: 107,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 59
          },
          end: {
            line: 107,
            column: 62
          }
        }, {
          start: {
            line: 107,
            column: 65
          },
          end: {
            line: 107,
            column: 70
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "10": {
        loc: {
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 147,
            column: 181
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 147,
            column: 39
          }
        }, {
          start: {
            line: 147,
            column: 43
          },
          end: {
            line: 147,
            column: 99
          }
        }, {
          start: {
            line: 147,
            column: 103
          },
          end: {
            line: 147,
            column: 181
          }
        }],
        line: 147
      },
      "11": {
        loc: {
          start: {
            line: 177,
            column: 48
          },
          end: {
            line: 177,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 57
          },
          end: {
            line: 177,
            column: 59
          }
        }],
        line: 177
      },
      "12": {
        loc: {
          start: {
            line: 179,
            column: 31
          },
          end: {
            line: 179,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 31
          },
          end: {
            line: 179,
            column: 49
          }
        }, {
          start: {
            line: 179,
            column: 53
          },
          end: {
            line: 179,
            column: 54
          }
        }],
        line: 179
      },
      "13": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "14": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 39
          }
        }, {
          start: {
            line: 181,
            column: 43
          },
          end: {
            line: 181,
            column: 52
          }
        }],
        line: 181
      },
      "15": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 184,
            column: 46
          }
        }, {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 186,
            column: 51
          }
        }, {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 188,
            column: 49
          }
        }, {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 190,
            column: 40
          }
        }, {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 192,
            column: 35
          }
        }, {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 194,
            column: 46
          }
        }, {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 196,
            column: 39
          }
        }],
        line: 182
      },
      "16": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 203,
            column: 88
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 203,
            column: 88
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "17": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 39
          }
        }, {
          start: {
            line: 203,
            column: 43
          },
          end: {
            line: 203,
            column: 76
          }
        }],
        line: 203
      },
      "18": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 205,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 205,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "19": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 206,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 206,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "20": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 215,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 215,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 33
          }
        }, {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 220,
            column: 33
          }
        }, {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 222,
            column: 33
          }
        }, {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 33
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 15
          },
          end: {
            line: 230,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 15
          },
          end: {
            line: 230,
            column: 47
          }
        }, {
          start: {
            line: 230,
            column: 51
          },
          end: {
            line: 230,
            column: 84
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "24": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "25": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "26": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/hooks/useOptimisticUpdates.ts"],
      sourcesContent: ["// Optimistic Updates Hooks\n// React hooks for managing optimistic UI updates and progress indicators\n\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo, useRef, useEffect } from 'react';\nimport type {\n  OptimisticUpdateConfig,\n  OptimisticUpdateContext,\n  OptimisticUpdatesManager\n} from '../utils/optimisticUpdates';\nimport { getOptimisticUpdatesManager } from '../utils/optimisticUpdates';\n\n/**\n * Progress data structure for try-on operations\n */\nexport interface TryonProgress {\n  id: string;\n  status: 'processing' | 'completed' | 'error';\n  progress: number; // 0-100\n  stage: string;\n  estimatedTimeRemaining: number;\n  startTime: number;\n  completedAt?: number;\n  error?: string;\n  result?: unknown;\n}\n\n/**\n * Hook return type for optimistic updates\n */\nexport interface UseOptimisticUpdatesReturn {\n  /** Start an optimistic update */\n  startOptimistic: (config?: OptimisticUpdateConfig) => string;\n  /** Complete an optimistic update */\n  completeOptimistic: (optimisticId: string, result: unknown, context?: unknown) => void;\n  /** Rollback an optimistic update */\n  rollbackOptimistic: (optimisticId: string, error?: unknown) => void;\n  /** Check if optimistic updates are enabled */\n  isOptimisticEnabled: boolean;\n  /** Get current active optimistic updates */\n  activeUpdates: OptimisticUpdateContext[];\n}\n\n/**\n * Configuration for the optimistic updates hook\n */\nexport interface UseOptimisticUpdatesConfig {\n  /** Variables for the try-on mutation */\n  mutationVariables?: unknown;\n  /** Whether optimistic updates are enabled */\n  enabled?: boolean;\n  /** Custom optimistic updates manager */\n  optimisticManager?: OptimisticUpdatesManager;\n}\n\n/**\n * Hook for managing optimistic updates during try-on mutations\n */\nexport function useOptimisticUpdates(\n  config: UseOptimisticUpdatesConfig = {}\n): UseOptimisticUpdatesReturn {\n  const queryClient = useQueryClient();\n  const optimisticManager = config.optimisticManager || getOptimisticUpdatesManager();\n  const activeUpdatesRef = useRef<Set<string>>(new Set());\n\n  const isOptimisticEnabled = config.enabled !== false;\n\n  // Get active optimistic updates\n  const activeUpdates = useMemo(() => {\n    return optimisticManager.getActiveOptimisticUpdates();\n  }, [optimisticManager]);\n\n  const startOptimistic = useCallback((optimisticConfig?: OptimisticUpdateConfig): string => {\n    if (!isOptimisticEnabled || !config.mutationVariables) {\n      return '';\n    }\n\n    const context = optimisticManager.startOptimisticUpdate(\n      config.mutationVariables as any,\n      optimisticConfig\n    );\n\n    activeUpdatesRef.current.add(context.optimisticId);\n    return context.optimisticId;\n  }, [isOptimisticEnabled, config.mutationVariables, optimisticManager]);\n\n  const completeOptimistic = useCallback((\n    optimisticId: string,\n    result: unknown,\n    mutationContext?: unknown\n  ) => {\n    if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {\n      return;\n    }\n\n    optimisticManager.completeOptimisticUpdate(\n      optimisticId,\n      result as any,\n      mutationContext as any\n    );\n\n    activeUpdatesRef.current.delete(optimisticId);\n  }, [optimisticManager]);\n\n  const rollbackOptimistic = useCallback((optimisticId: string, error?: unknown) => {\n    if (!optimisticId || !activeUpdatesRef.current.has(optimisticId)) {\n      return;\n    }\n\n    optimisticManager.rollbackOptimisticUpdate(optimisticId, error);\n    activeUpdatesRef.current.delete(optimisticId);\n  }, [optimisticManager]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      // Rollback any remaining optimistic updates\n      activeUpdatesRef.current.forEach(optimisticId => {\n        optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));\n      });\n      activeUpdatesRef.current.clear();\n    };\n  }, [optimisticManager]);\n\n  return {\n    startOptimistic,\n    completeOptimistic,\n    rollbackOptimistic,\n    isOptimisticEnabled,\n    activeUpdates\n  };\n}\n\n/**\n * Hook for tracking progress of try-on operations\n */\nexport function useTryonProgress(optimisticId: string): {\n  progress: TryonProgress | undefined;\n  isLoading: boolean;\n  error: Error | null;\n} {\n  const progressQuery = useQuery({\n    queryKey: ['tryon-progress', optimisticId],\n    enabled: Boolean(optimisticId),\n    refetchInterval: (data) => {\n      // Stop refetching once completed or errored\n      const progressData = data as TryonProgress | undefined;\n      return progressData?.status === 'processing' ? 500 : false;\n    },\n    staleTime: 0, // Always fresh for real-time updates\n    cacheTime: 5000 // Keep in cache briefly after completion\n  });\n\n  return {\n    progress: progressQuery.data as TryonProgress | undefined,\n    isLoading: progressQuery.isLoading,\n    error: progressQuery.error\n  };\n}\n\n/**\n * Hook for tracking multiple try-on progress instances\n */\nexport function useMultipleTryonProgress(optimisticIds: string[]): {\n  progressMap: Record<string, TryonProgress>;\n  anyInProgress: boolean;\n  allCompleted: boolean;\n} {\n  const queries = optimisticIds.map(id => \n    useQuery({\n      queryKey: ['tryon-progress', id],\n      enabled: Boolean(id),\n      refetchInterval: 500,\n      staleTime: 0\n    })\n  );\n\n  const progressMap = useMemo(() => {\n    const map: Record<string, TryonProgress> = {};\n    optimisticIds.forEach((id, index) => {\n      const data = queries[index]?.data as TryonProgress | undefined;\n      if (data) {\n        map[id] = data;\n      }\n    });\n    return map;\n  }, [optimisticIds, queries]);\n\n  const anyInProgress = useMemo(() => {\n    return Object.values(progressMap).some(progress => progress.status === 'processing');\n  }, [progressMap]);\n\n  const allCompleted = useMemo(() => {\n    return optimisticIds.length > 0 && \n           Object.keys(progressMap).length === optimisticIds.length &&\n           Object.values(progressMap).every(progress => progress.status !== 'processing');\n  }, [optimisticIds, progressMap]);\n\n  return {\n    progressMap,\n    anyInProgress,\n    allCompleted\n  };\n}\n\n/**\n * Hook for getting try-on results\n */\nexport function useTryonResult(optimisticId: string): {\n  result: unknown;\n  isLoading: boolean;\n  isCompleted: boolean;\n  error: Error | null;\n  processingTime?: number;\n} {\n  const resultQuery = useQuery({\n    queryKey: ['tryon-result', optimisticId],\n    enabled: Boolean(optimisticId),\n    staleTime: Infinity, // Results don't change once set\n    cacheTime: 60000 // Keep results for 1 minute\n  });\n\n  const data = resultQuery.data as any;\n  \n  return {\n    result: data?.result,\n    isLoading: resultQuery.isLoading,\n    isCompleted: data?.status === 'completed',\n    error: resultQuery.error,\n    processingTime: data?.processingTime\n  };\n}\n\n/**\n * Hook for progress visualization and UI feedback\n */\nexport function useProgressVisualization(\n  optimisticId: string,\n  config: {\n    enableStageMessages?: boolean;\n    enableTimeEstimates?: boolean;\n    enableAnimation?: boolean;\n  } = {}\n): {\n  progress: TryonProgress | undefined;\n  progressPercentage: number;\n  stageMessage: string;\n  timeRemaining: string;\n  progressColor: string;\n  isAnimating: boolean;\n} {\n  const { progress } = useTryonProgress(optimisticId);\n  \n  const progressPercentage = progress?.progress || 0;\n  \n  const stageMessage = useMemo(() => {\n    if (!config.enableStageMessages || !progress) return '';\n    \n    switch (progress.stage) {\n      case 'image-processing':\n        return 'Processing images...';\n      case 'ai-generation':\n        return 'Generating your try-on...';\n      case 'post-processing':\n        return 'Adding final touches...';\n      case 'finalizing':\n        return 'Almost done...';\n      case 'completed':\n        return 'Complete!';\n      case 'error':\n        return 'Something went wrong';\n      default:\n        return 'Processing...';\n    }\n  }, [config.enableStageMessages, progress]);\n  \n  const timeRemaining = useMemo(() => {\n    if (!config.enableTimeEstimates || !progress?.estimatedTimeRemaining) return '';\n    \n    const seconds = Math.ceil(progress.estimatedTimeRemaining / 1000);\n    if (seconds <= 0) return '';\n    if (seconds < 60) return `${seconds}s remaining`;\n    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s remaining`;\n  }, [config.enableTimeEstimates, progress]);\n  \n  const progressColor = useMemo(() => {\n    if (!progress) return '#e5e7eb';\n    \n    switch (progress.status) {\n      case 'processing':\n        return '#3b82f6'; // Blue for processing\n      case 'completed':\n        return '#10b981'; // Green for completed\n      case 'error':\n        return '#ef4444'; // Red for error\n      default:\n        return '#e5e7eb'; // Gray for idle\n    }\n  }, [progress]);\n  \n  const isAnimating = useMemo(() => {\n    return config.enableAnimation !== false && \n           progress?.status === 'processing';\n  }, [config.enableAnimation, progress]);\n\n  return {\n    progress,\n    progressPercentage,\n    stageMessage,\n    timeRemaining,\n    progressColor,\n    isAnimating\n  };\n}\n\n/**\n * Hook for optimistic cache invalidation strategies\n */\nexport function useOptimisticCacheInvalidation(): {\n  invalidateRelatedQueries: (context?: { userId?: string; tags?: string[] }) => Promise<void>;\n  preloadRelatedQueries: (context?: { userId?: string }) => Promise<void>;\n  warmupCache: (prefetchData?: unknown[]) => Promise<void>;\n} {\n  const queryClient = useQueryClient();\n\n  const invalidateRelatedQueries = useCallback(async (context?: { userId?: string; tags?: string[] }) => {\n    // Invalidate history queries\n    await queryClient.invalidateQueries({ \n      queryKey: ['tryon-history'],\n      exact: false \n    });\n\n    // Invalidate user-specific queries if userId provided\n    if (context?.userId) {\n      await queryClient.invalidateQueries({ \n        queryKey: ['user-data', context.userId],\n        exact: false \n      });\n    }\n\n    // Invalidate tag-specific queries if tags provided\n    if (context?.tags?.length) {\n      for (const tag of context.tags) {\n        await queryClient.invalidateQueries({ \n          queryKey: ['tryon-by-tag', tag],\n          exact: false \n        });\n      }\n    }\n\n    // Invalidate stats and aggregations\n    await queryClient.invalidateQueries({ \n      queryKey: ['tryon-stats'],\n      exact: false \n    });\n  }, [queryClient]);\n\n  const preloadRelatedQueries = useCallback(async (context?: { userId?: string }) => {\n    // Preload frequently accessed queries\n    const preloadPromises = [];\n\n    // Preload history\n    preloadPromises.push(\n      queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'entries'],\n        staleTime: 30000\n      })\n    );\n\n    // Preload stats\n    preloadPromises.push(\n      queryClient.prefetchQuery({\n        queryKey: ['tryon-history', 'stats'],\n        staleTime: 60000\n      })\n    );\n\n    if (context?.userId) {\n      preloadPromises.push(\n        queryClient.prefetchQuery({\n          queryKey: ['user-data', context.userId],\n          staleTime: 60000\n        })\n      );\n    }\n\n    await Promise.all(preloadPromises);\n  }, [queryClient]);\n\n  const warmupCache = useCallback(async (prefetchData?: unknown[]) => {\n    // Warm up the cache with commonly used data\n    if (prefetchData?.length) {\n      prefetchData.forEach((data, index) => {\n        queryClient.setQueryData(['warmup-cache', index], data);\n      });\n    }\n\n    // Prefetch critical queries that are likely to be needed\n    await preloadRelatedQueries();\n  }, [queryClient, preloadRelatedQueries]);\n\n  return {\n    invalidateRelatedQueries,\n    preloadRelatedQueries,\n    warmupCache\n  };\n}"],
      names: ["useMultipleTryonProgress", "useOptimisticCacheInvalidation", "useOptimisticUpdates", "useProgressVisualization", "useTryonProgress", "useTryonResult", "config", "queryClient", "useQueryClient", "optimisticManager", "getOptimisticUpdatesManager", "activeUpdatesRef", "useRef", "Set", "isOptimisticEnabled", "enabled", "activeUpdates", "useMemo", "getActiveOptimisticUpdates", "startOptimistic", "useCallback", "optimisticConfig", "mutationVariables", "context", "startOptimisticUpdate", "current", "add", "optimisticId", "completeOptimistic", "result", "mutationContext", "has", "completeOptimisticUpdate", "delete", "rollbackOptimistic", "error", "rollbackOptimisticUpdate", "useEffect", "forEach", "Error", "clear", "progressQuery", "useQuery", "queryKey", "Boolean", "refetchInterval", "data", "progressData", "status", "staleTime", "cacheTime", "progress", "isLoading", "optimisticIds", "queries", "map", "id", "progressMap", "index", "anyInProgress", "Object", "values", "some", "allCompleted", "length", "keys", "every", "resultQuery", "Infinity", "isCompleted", "processingTime", "progressPercentage", "stageMessage", "enableStageMessages", "stage", "timeRemaining", "enableTimeEstimates", "estimatedTimeRemaining", "seconds", "Math", "ceil", "minutes", "floor", "remainingSeconds", "progressColor", "isAnimating", "enableAnimation", "invalidateRelatedQueries", "invalidateQueries", "exact", "userId", "tags", "tag", "preloadRelatedQueries", "preloadPromises", "push", "prefetchQuery", "Promise", "all", "warmupCache", "prefetchData", "setQueryData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d7d09357b17c7287dc8e723c0cc4f2199df4749"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_x46rlmy5e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_x46rlmy5e();
cov_x46rlmy5e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[0]++;
  cov_x46rlmy5e().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_x46rlmy5e().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_x46rlmy5e().s[3]++;
_export(exports, {
  useMultipleTryonProgress: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[1]++;
    cov_x46rlmy5e().s[4]++;
    return useMultipleTryonProgress;
  },
  useOptimisticCacheInvalidation: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[2]++;
    cov_x46rlmy5e().s[5]++;
    return useOptimisticCacheInvalidation;
  },
  useOptimisticUpdates: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[3]++;
    cov_x46rlmy5e().s[6]++;
    return useOptimisticUpdates;
  },
  useProgressVisualization: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[4]++;
    cov_x46rlmy5e().s[7]++;
    return useProgressVisualization;
  },
  useTryonProgress: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[5]++;
    cov_x46rlmy5e().s[8]++;
    return useTryonProgress;
  },
  useTryonResult: function () {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[6]++;
    cov_x46rlmy5e().s[9]++;
    return useTryonResult;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_x46rlmy5e().s[10]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_x46rlmy5e().s[11]++, require("react"));
const _optimisticUpdates =
/* istanbul ignore next */
(cov_x46rlmy5e().s[12]++, require("../utils/optimisticUpdates"));
function useOptimisticUpdates(config =
/* istanbul ignore next */
(cov_x46rlmy5e().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[7]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[13]++, (0, _reactquery.useQueryClient)());
  const optimisticManager =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[14]++,
  /* istanbul ignore next */
  (cov_x46rlmy5e().b[1][0]++, config.optimisticManager) ||
  /* istanbul ignore next */
  (cov_x46rlmy5e().b[1][1]++, (0, _optimisticUpdates.getOptimisticUpdatesManager)()));
  const activeUpdatesRef =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[15]++, (0, _react.useRef)(new Set()));
  const isOptimisticEnabled =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[16]++, config.enabled !== false);
  // Get active optimistic updates
  const activeUpdates =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[17]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[8]++;
    cov_x46rlmy5e().s[18]++;
    return optimisticManager.getActiveOptimisticUpdates();
  }, [optimisticManager]));
  const startOptimistic =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[19]++, (0, _react.useCallback)(optimisticConfig => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[9]++;
    cov_x46rlmy5e().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[3][0]++, !isOptimisticEnabled) ||
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[3][1]++, !config.mutationVariables)) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[2][0]++;
      cov_x46rlmy5e().s[21]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[2][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[22]++, optimisticManager.startOptimisticUpdate(config.mutationVariables, optimisticConfig));
    /* istanbul ignore next */
    cov_x46rlmy5e().s[23]++;
    activeUpdatesRef.current.add(context.optimisticId);
    /* istanbul ignore next */
    cov_x46rlmy5e().s[24]++;
    return context.optimisticId;
  }, [isOptimisticEnabled, config.mutationVariables, optimisticManager]));
  const completeOptimistic =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[25]++, (0, _react.useCallback)((optimisticId, result, mutationContext) => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[10]++;
    cov_x46rlmy5e().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[5][0]++, !optimisticId) ||
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[5][1]++, !activeUpdatesRef.current.has(optimisticId))) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[4][0]++;
      cov_x46rlmy5e().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[4][1]++;
    }
    cov_x46rlmy5e().s[28]++;
    optimisticManager.completeOptimisticUpdate(optimisticId, result, mutationContext);
    /* istanbul ignore next */
    cov_x46rlmy5e().s[29]++;
    activeUpdatesRef.current.delete(optimisticId);
  }, [optimisticManager]));
  const rollbackOptimistic =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[30]++, (0, _react.useCallback)((optimisticId, error) => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[11]++;
    cov_x46rlmy5e().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[7][0]++, !optimisticId) ||
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[7][1]++, !activeUpdatesRef.current.has(optimisticId))) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[6][0]++;
      cov_x46rlmy5e().s[32]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[6][1]++;
    }
    cov_x46rlmy5e().s[33]++;
    optimisticManager.rollbackOptimisticUpdate(optimisticId, error);
    /* istanbul ignore next */
    cov_x46rlmy5e().s[34]++;
    activeUpdatesRef.current.delete(optimisticId);
  }, [optimisticManager]));
  // Cleanup on unmount
  /* istanbul ignore next */
  cov_x46rlmy5e().s[35]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[12]++;
    cov_x46rlmy5e().s[36]++;
    return () => {
      /* istanbul ignore next */
      cov_x46rlmy5e().f[13]++;
      cov_x46rlmy5e().s[37]++;
      // Rollback any remaining optimistic updates
      activeUpdatesRef.current.forEach(optimisticId => {
        /* istanbul ignore next */
        cov_x46rlmy5e().f[14]++;
        cov_x46rlmy5e().s[38]++;
        optimisticManager.rollbackOptimisticUpdate(optimisticId, new Error('Component unmounted'));
      });
      /* istanbul ignore next */
      cov_x46rlmy5e().s[39]++;
      activeUpdatesRef.current.clear();
    };
  }, [optimisticManager]);
  /* istanbul ignore next */
  cov_x46rlmy5e().s[40]++;
  return {
    startOptimistic,
    completeOptimistic,
    rollbackOptimistic,
    isOptimisticEnabled,
    activeUpdates
  };
}
function useTryonProgress(optimisticId) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[15]++;
  const progressQuery =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[41]++, (0, _reactquery.useQuery)({
    queryKey: ['tryon-progress', optimisticId],
    enabled: Boolean(optimisticId),
    refetchInterval: data => {
      /* istanbul ignore next */
      cov_x46rlmy5e().f[16]++;
      // Stop refetching once completed or errored
      const progressData =
      /* istanbul ignore next */
      (cov_x46rlmy5e().s[42]++, data);
      /* istanbul ignore next */
      cov_x46rlmy5e().s[43]++;
      return progressData?.status === 'processing' ?
      /* istanbul ignore next */
      (cov_x46rlmy5e().b[8][0]++, 500) :
      /* istanbul ignore next */
      (cov_x46rlmy5e().b[8][1]++, false);
    },
    staleTime: 0,
    cacheTime: 5000 // Keep in cache briefly after completion
  }));
  /* istanbul ignore next */
  cov_x46rlmy5e().s[44]++;
  return {
    progress: progressQuery.data,
    isLoading: progressQuery.isLoading,
    error: progressQuery.error
  };
}
function useMultipleTryonProgress(optimisticIds) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[17]++;
  const queries =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[45]++, optimisticIds.map(id => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[18]++;
    cov_x46rlmy5e().s[46]++;
    return (0, _reactquery.useQuery)({
      queryKey: ['tryon-progress', id],
      enabled: Boolean(id),
      refetchInterval: 500,
      staleTime: 0
    });
  }));
  const progressMap =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[47]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[19]++;
    const map =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[48]++, {});
    /* istanbul ignore next */
    cov_x46rlmy5e().s[49]++;
    optimisticIds.forEach((id, index) => {
      /* istanbul ignore next */
      cov_x46rlmy5e().f[20]++;
      const data =
      /* istanbul ignore next */
      (cov_x46rlmy5e().s[50]++, queries[index]?.data);
      /* istanbul ignore next */
      cov_x46rlmy5e().s[51]++;
      if (data) {
        /* istanbul ignore next */
        cov_x46rlmy5e().b[9][0]++;
        cov_x46rlmy5e().s[52]++;
        map[id] = data;
      } else
      /* istanbul ignore next */
      {
        cov_x46rlmy5e().b[9][1]++;
      }
    });
    /* istanbul ignore next */
    cov_x46rlmy5e().s[53]++;
    return map;
  }, [optimisticIds, queries]));
  const anyInProgress =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[54]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[21]++;
    cov_x46rlmy5e().s[55]++;
    return Object.values(progressMap).some(progress => {
      /* istanbul ignore next */
      cov_x46rlmy5e().f[22]++;
      cov_x46rlmy5e().s[56]++;
      return progress.status === 'processing';
    });
  }, [progressMap]));
  const allCompleted =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[57]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[23]++;
    cov_x46rlmy5e().s[58]++;
    return /* istanbul ignore next */(cov_x46rlmy5e().b[10][0]++, optimisticIds.length > 0) &&
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[10][1]++, Object.keys(progressMap).length === optimisticIds.length) &&
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[10][2]++, Object.values(progressMap).every(progress => {
      /* istanbul ignore next */
      cov_x46rlmy5e().f[24]++;
      cov_x46rlmy5e().s[59]++;
      return progress.status !== 'processing';
    }));
  }, [optimisticIds, progressMap]));
  /* istanbul ignore next */
  cov_x46rlmy5e().s[60]++;
  return {
    progressMap,
    anyInProgress,
    allCompleted
  };
}
function useTryonResult(optimisticId) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[25]++;
  const resultQuery =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[61]++, (0, _reactquery.useQuery)({
    queryKey: ['tryon-result', optimisticId],
    enabled: Boolean(optimisticId),
    staleTime: Infinity,
    cacheTime: 60000 // Keep results for 1 minute
  }));
  const data =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[62]++, resultQuery.data);
  /* istanbul ignore next */
  cov_x46rlmy5e().s[63]++;
  return {
    result: data?.result,
    isLoading: resultQuery.isLoading,
    isCompleted: data?.status === 'completed',
    error: resultQuery.error,
    processingTime: data?.processingTime
  };
}
function useProgressVisualization(optimisticId, config =
/* istanbul ignore next */
(cov_x46rlmy5e().b[11][0]++, {})) {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[26]++;
  const {
    progress
  } =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[64]++, useTryonProgress(optimisticId));
  const progressPercentage =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[65]++,
  /* istanbul ignore next */
  (cov_x46rlmy5e().b[12][0]++, progress?.progress) ||
  /* istanbul ignore next */
  (cov_x46rlmy5e().b[12][1]++, 0));
  const stageMessage =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[66]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[27]++;
    cov_x46rlmy5e().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[14][0]++, !config.enableStageMessages) ||
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[14][1]++, !progress)) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[13][0]++;
      cov_x46rlmy5e().s[68]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[13][1]++;
    }
    cov_x46rlmy5e().s[69]++;
    switch (progress.stage) {
      case 'image-processing':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][0]++;
        cov_x46rlmy5e().s[70]++;
        return 'Processing images...';
      case 'ai-generation':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][1]++;
        cov_x46rlmy5e().s[71]++;
        return 'Generating your try-on...';
      case 'post-processing':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][2]++;
        cov_x46rlmy5e().s[72]++;
        return 'Adding final touches...';
      case 'finalizing':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][3]++;
        cov_x46rlmy5e().s[73]++;
        return 'Almost done...';
      case 'completed':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][4]++;
        cov_x46rlmy5e().s[74]++;
        return 'Complete!';
      case 'error':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][5]++;
        cov_x46rlmy5e().s[75]++;
        return 'Something went wrong';
      default:
        /* istanbul ignore next */
        cov_x46rlmy5e().b[15][6]++;
        cov_x46rlmy5e().s[76]++;
        return 'Processing...';
    }
  }, [config.enableStageMessages, progress]));
  const timeRemaining =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[77]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[28]++;
    cov_x46rlmy5e().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[17][0]++, !config.enableTimeEstimates) ||
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[17][1]++, !progress?.estimatedTimeRemaining)) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[16][0]++;
      cov_x46rlmy5e().s[79]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[16][1]++;
    }
    const seconds =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[80]++, Math.ceil(progress.estimatedTimeRemaining / 1000));
    /* istanbul ignore next */
    cov_x46rlmy5e().s[81]++;
    if (seconds <= 0) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[18][0]++;
      cov_x46rlmy5e().s[82]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[18][1]++;
    }
    cov_x46rlmy5e().s[83]++;
    if (seconds < 60) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[19][0]++;
      cov_x46rlmy5e().s[84]++;
      return `${seconds}s remaining`;
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[19][1]++;
    }
    const minutes =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[85]++, Math.floor(seconds / 60));
    const remainingSeconds =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[86]++, seconds % 60);
    /* istanbul ignore next */
    cov_x46rlmy5e().s[87]++;
    return `${minutes}m ${remainingSeconds}s remaining`;
  }, [config.enableTimeEstimates, progress]));
  const progressColor =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[88]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[29]++;
    cov_x46rlmy5e().s[89]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[20][0]++;
      cov_x46rlmy5e().s[90]++;
      return '#e5e7eb';
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[20][1]++;
    }
    cov_x46rlmy5e().s[91]++;
    switch (progress.status) {
      case 'processing':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[21][0]++;
        cov_x46rlmy5e().s[92]++;
        return '#3b82f6';
      // Blue for processing
      case 'completed':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[21][1]++;
        cov_x46rlmy5e().s[93]++;
        return '#10b981';
      // Green for completed
      case 'error':
        /* istanbul ignore next */
        cov_x46rlmy5e().b[21][2]++;
        cov_x46rlmy5e().s[94]++;
        return '#ef4444';
      // Red for error
      default:
        /* istanbul ignore next */
        cov_x46rlmy5e().b[21][3]++;
        cov_x46rlmy5e().s[95]++;
        return '#e5e7eb';
      // Gray for idle
    }
  }, [progress]));
  const isAnimating =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[96]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[30]++;
    cov_x46rlmy5e().s[97]++;
    return /* istanbul ignore next */(cov_x46rlmy5e().b[22][0]++, config.enableAnimation !== false) &&
    /* istanbul ignore next */
    (cov_x46rlmy5e().b[22][1]++, progress?.status === 'processing');
  }, [config.enableAnimation, progress]));
  /* istanbul ignore next */
  cov_x46rlmy5e().s[98]++;
  return {
    progress,
    progressPercentage,
    stageMessage,
    timeRemaining,
    progressColor,
    isAnimating
  };
}
function useOptimisticCacheInvalidation() {
  /* istanbul ignore next */
  cov_x46rlmy5e().f[31]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[99]++, (0, _reactquery.useQueryClient)());
  const invalidateRelatedQueries =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[100]++, (0, _react.useCallback)(async context => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[32]++;
    cov_x46rlmy5e().s[101]++;
    // Invalidate history queries
    await queryClient.invalidateQueries({
      queryKey: ['tryon-history'],
      exact: false
    });
    // Invalidate user-specific queries if userId provided
    /* istanbul ignore next */
    cov_x46rlmy5e().s[102]++;
    if (context?.userId) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[23][0]++;
      cov_x46rlmy5e().s[103]++;
      await queryClient.invalidateQueries({
        queryKey: ['user-data', context.userId],
        exact: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[23][1]++;
    }
    // Invalidate tag-specific queries if tags provided
    cov_x46rlmy5e().s[104]++;
    if (context?.tags?.length) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[24][0]++;
      cov_x46rlmy5e().s[105]++;
      for (const tag of context.tags) {
        /* istanbul ignore next */
        cov_x46rlmy5e().s[106]++;
        await queryClient.invalidateQueries({
          queryKey: ['tryon-by-tag', tag],
          exact: false
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[24][1]++;
    }
    // Invalidate stats and aggregations
    cov_x46rlmy5e().s[107]++;
    await queryClient.invalidateQueries({
      queryKey: ['tryon-stats'],
      exact: false
    });
  }, [queryClient]));
  const preloadRelatedQueries =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[108]++, (0, _react.useCallback)(async context => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[33]++;
    // Preload frequently accessed queries
    const preloadPromises =
    /* istanbul ignore next */
    (cov_x46rlmy5e().s[109]++, []);
    // Preload history
    /* istanbul ignore next */
    cov_x46rlmy5e().s[110]++;
    preloadPromises.push(queryClient.prefetchQuery({
      queryKey: ['tryon-history', 'entries'],
      staleTime: 30000
    }));
    // Preload stats
    /* istanbul ignore next */
    cov_x46rlmy5e().s[111]++;
    preloadPromises.push(queryClient.prefetchQuery({
      queryKey: ['tryon-history', 'stats'],
      staleTime: 60000
    }));
    /* istanbul ignore next */
    cov_x46rlmy5e().s[112]++;
    if (context?.userId) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[25][0]++;
      cov_x46rlmy5e().s[113]++;
      preloadPromises.push(queryClient.prefetchQuery({
        queryKey: ['user-data', context.userId],
        staleTime: 60000
      }));
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[25][1]++;
    }
    cov_x46rlmy5e().s[114]++;
    await Promise.all(preloadPromises);
  }, [queryClient]));
  const warmupCache =
  /* istanbul ignore next */
  (cov_x46rlmy5e().s[115]++, (0, _react.useCallback)(async prefetchData => {
    /* istanbul ignore next */
    cov_x46rlmy5e().f[34]++;
    cov_x46rlmy5e().s[116]++;
    // Warm up the cache with commonly used data
    if (prefetchData?.length) {
      /* istanbul ignore next */
      cov_x46rlmy5e().b[26][0]++;
      cov_x46rlmy5e().s[117]++;
      prefetchData.forEach((data, index) => {
        /* istanbul ignore next */
        cov_x46rlmy5e().f[35]++;
        cov_x46rlmy5e().s[118]++;
        queryClient.setQueryData(['warmup-cache', index], data);
      });
    } else
    /* istanbul ignore next */
    {
      cov_x46rlmy5e().b[26][1]++;
    }
    // Prefetch critical queries that are likely to be needed
    cov_x46rlmy5e().s[119]++;
    await preloadRelatedQueries();
  }, [queryClient, preloadRelatedQueries]));
  /* istanbul ignore next */
  cov_x46rlmy5e().s[120]++;
  return {
    invalidateRelatedQueries,
    preloadRelatedQueries,
    warmupCache
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,