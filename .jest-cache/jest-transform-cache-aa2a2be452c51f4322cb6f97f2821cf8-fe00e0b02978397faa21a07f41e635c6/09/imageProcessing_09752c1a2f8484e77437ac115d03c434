c34cfb6619ea809f58a7c9c7b9c7d8b9
// Image Processing Utilities for Try-On Mutations
// Comprehensive image processing functions for the business layer
"use strict";

/* istanbul ignore next */
function cov_ymh1k6ljs() {
  var path = "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageProcessing.ts";
  var hash = "760d94903e6c2ce880214ba007a42d78dc0ed20a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageProcessing.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 86,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 35
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 27
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 36
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 40
        }
      },
      "12": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "13": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 37
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 36
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 36
        }
      },
      "18": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 35
        }
      },
      "19": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 29
        }
      },
      "20": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 34
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 34
        }
      },
      "22": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 36
        }
      },
      "23": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "24": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "25": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 34
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 38
        }
      },
      "27": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "28": {
        start: {
          line: 87,
          column: 15
        },
        end: {
          line: 87,
          column: 43
        }
      },
      "29": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "30": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 43
        }
      },
      "31": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 65
        }
      },
      "32": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 42
        }
      },
      "33": {
        start: {
          line: 100,
          column: 35
        },
        end: {
          line: 106,
          column: 1
        }
      },
      "34": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "35": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 39
        }
      },
      "36": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 37
        }
      },
      "37": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 39
        }
      },
      "38": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 37
        }
      },
      "39": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 23
        }
      },
      "40": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 128,
          column: 7
        }
      },
      "41": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 31
        }
      },
      "42": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 38
        }
      },
      "43": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 123,
          column: 10
        }
      },
      "44": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "45": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "46": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 92
        }
      },
      "47": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 27
        }
      },
      "48": {
        start: {
          line: 131,
          column: 19
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "49": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 178,
          column: 7
        }
      },
      "50": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 31
        }
      },
      "51": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 38
        }
      },
      "52": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "53": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "54": {
        start: {
          line: 140,
          column: 31
        },
        end: {
          line: 140,
          column: 63
        }
      },
      "55": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 141,
          column: 51
        }
      },
      "56": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "57": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 85
        }
      },
      "58": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 27
        }
      },
      "59": {
        start: {
          line: 146,
          column: 52
        },
        end: {
          line: 146,
          column: 58
        }
      },
      "60": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "61": {
        start: {
          line: 149,
          column: 40
        },
        end: {
          line: 149,
          column: 62
        }
      },
      "62": {
        start: {
          line: 150,
          column: 46
        },
        end: {
          line: 150,
          column: 72
        }
      },
      "63": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "64": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 77
        }
      },
      "65": {
        start: {
          line: 156,
          column: 24
        },
        end: {
          line: 156,
          column: 77
        }
      },
      "66": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 43
        }
      },
      "67": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 45
        }
      },
      "68": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 49
        }
      },
      "69": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 51
        }
      },
      "70": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 68
        }
      },
      "71": {
        start: {
          line: 168,
          column: 40
        },
        end: {
          line: 168,
          column: 86
        }
      },
      "72": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 41
        }
      },
      "73": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 134
        }
      },
      "74": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "75": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 82
        }
      },
      "76": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 27
        }
      },
      "77": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 181,
          column: 57
        }
      },
      "78": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "79": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 187
        }
      },
      "80": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "81": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 187
        }
      },
      "82": {
        start: {
          line: 190,
          column: 23
        },
        end: {
          line: 190,
          column: 43
        }
      },
      "83": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 191,
          column: 35
        }
      },
      "84": {
        start: {
          line: 194,
          column: 22
        },
        end: {
          line: 194,
          column: 32
        }
      },
      "85": {
        start: {
          line: 195,
          column: 19
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "86": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 241,
          column: 5
        }
      },
      "87": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "88": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 87
        }
      },
      "89": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 204,
          column: 67
        }
      },
      "90": {
        start: {
          line: 205,
          column: 29
        },
        end: {
          line: 205,
          column: 38
        }
      },
      "91": {
        start: {
          line: 206,
          column: 35
        },
        end: {
          line: 206,
          column: 75
        }
      },
      "92": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 54
        }
      },
      "93": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 81
        }
      },
      "94": {
        start: {
          line: 211,
          column: 32
        },
        end: {
          line: 211,
          column: 70
        }
      },
      "95": {
        start: {
          line: 213,
          column: 29
        },
        end: {
          line: 213,
          column: 41
        }
      },
      "96": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 214,
          column: 33
        }
      },
      "97": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 55
        }
      },
      "98": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 55
        }
      },
      "99": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "100": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 94
        }
      },
      "101": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 33
        }
      },
      "102": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 55
        }
      },
      "103": {
        start: {
          line: 222,
          column: 31
        },
        end: {
          line: 222,
          column: 53
        }
      },
      "104": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 235,
          column: 10
        }
      },
      "105": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "106": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "107": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 142
        }
      },
      "108": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 245,
          column: 76
        }
      },
      "109": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 247,
          column: 113
        }
      },
      "110": {
        start: {
          line: 247,
          column: 76
        },
        end: {
          line: 247,
          column: 111
        }
      },
      "111": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 251,
          column: 6
        }
      },
      "112": {
        start: {
          line: 254,
          column: 21
        },
        end: {
          line: 254,
          column: 57
        }
      },
      "113": {
        start: {
          line: 255,
          column: 23
        },
        end: {
          line: 255,
          column: 57
        }
      },
      "114": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 261,
          column: 6
        }
      },
      "115": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 293,
          column: 7
        }
      },
      "116": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 31
        }
      },
      "117": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 38
        }
      },
      "118": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 288,
          column: 10
        }
      },
      "119": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "120": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 269,
          column: 63
        }
      },
      "121": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 270,
          column: 51
        }
      },
      "122": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 274,
          column: 17
        }
      },
      "123": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 85
        }
      },
      "124": {
        start: {
          line: 273,
          column: 20
        },
        end: {
          line: 273,
          column: 27
        }
      },
      "125": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 41
        }
      },
      "126": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 43
        }
      },
      "127": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "128": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 279,
          column: 44
        }
      },
      "129": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 68
        }
      },
      "130": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 41
        }
      },
      "131": {
        start: {
          line: 283,
          column: 42
        },
        end: {
          line: 283,
          column: 81
        }
      },
      "132": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 43
        }
      },
      "133": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 142
        }
      },
      "134": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "135": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 91
        }
      },
      "136": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 27
        }
      },
      "137": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 39
        }
      },
      "138": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 297,
          column: 77
        }
      },
      "139": {
        start: {
          line: 297,
          column: 14
        },
        end: {
          line: 297,
          column: 77
        }
      },
      "140": {
        start: {
          line: 298,
          column: 22
        },
        end: {
          line: 298,
          column: 73
        }
      },
      "141": {
        start: {
          line: 299,
          column: 17
        },
        end: {
          line: 299,
          column: 31
        }
      },
      "142": {
        start: {
          line: 300,
          column: 18
        },
        end: {
          line: 300,
          column: 30
        }
      },
      "143": {
        start: {
          line: 301,
          column: 19
        },
        end: {
          line: 301,
          column: 32
        }
      },
      "144": {
        start: {
          line: 303,
          column: 26
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "145": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 47
        }
      },
      "146": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 329,
          column: 5
        }
      },
      "147": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 17
        }
      },
      "148": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "149": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 21
        }
      },
      "150": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "151": {
        start: {
          line: 317,
          column: 24
        },
        end: {
          line: 317,
          column: 25
        }
      },
      "152": {
        start: {
          line: 318,
          column: 26
        },
        end: {
          line: 318,
          column: 27
        }
      },
      "153": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 325,
          column: 17
        }
      },
      "154": {
        start: {
          line: 319,
          column: 29
        },
        end: {
          line: 319,
          column: 31
        }
      },
      "155": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 324,
          column: 21
        }
      },
      "156": {
        start: {
          line: 320,
          column: 33
        },
        end: {
          line: 320,
          column: 35
        }
      },
      "157": {
        start: {
          line: 321,
          column: 43
        },
        end: {
          line: 321,
          column: 80
        }
      },
      "158": {
        start: {
          line: 322,
          column: 44
        },
        end: {
          line: 322,
          column: 67
        }
      },
      "159": {
        start: {
          line: 323,
          column: 24
        },
        end: {
          line: 323,
          column: 77
        }
      },
      "160": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 83
        }
      },
      "161": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 333,
          column: 5
        }
      },
      "162": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 17
        }
      },
      "163": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 29
        }
      },
      "164": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 334,
          column: 38
        }
      },
      "165": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 39
        }
      },
      "166": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 338,
          column: 77
        }
      },
      "167": {
        start: {
          line: 338,
          column: 14
        },
        end: {
          line: 338,
          column: 77
        }
      },
      "168": {
        start: {
          line: 339,
          column: 22
        },
        end: {
          line: 339,
          column: 73
        }
      },
      "169": {
        start: {
          line: 340,
          column: 17
        },
        end: {
          line: 340,
          column: 31
        }
      },
      "170": {
        start: {
          line: 341,
          column: 18
        },
        end: {
          line: 341,
          column: 30
        }
      },
      "171": {
        start: {
          line: 342,
          column: 19
        },
        end: {
          line: 342,
          column: 32
        }
      },
      "172": {
        start: {
          line: 344,
          column: 19
        },
        end: {
          line: 344,
          column: 42
        }
      },
      "173": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 47
        }
      },
      "174": {
        start: {
          line: 346,
          column: 4
        },
        end: {
          line: 364,
          column: 5
        }
      },
      "175": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 17
        }
      },
      "176": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "177": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 21
        }
      },
      "178": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "179": {
        start: {
          line: 348,
          column: 24
        },
        end: {
          line: 348,
          column: 25
        }
      },
      "180": {
        start: {
          line: 349,
          column: 26
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "181": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 29
        }
      },
      "182": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "183": {
        start: {
          line: 351,
          column: 29
        },
        end: {
          line: 351,
          column: 36
        }
      },
      "184": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 359,
          column: 21
        }
      },
      "185": {
        start: {
          line: 352,
          column: 33
        },
        end: {
          line: 352,
          column: 40
        }
      },
      "186": {
        start: {
          line: 353,
          column: 35
        },
        end: {
          line: 353,
          column: 41
        }
      },
      "187": {
        start: {
          line: 354,
          column: 35
        },
        end: {
          line: 354,
          column: 41
        }
      },
      "188": {
        start: {
          line: 355,
          column: 24
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "189": {
        start: {
          line: 356,
          column: 28
        },
        end: {
          line: 356,
          column: 67
        }
      },
      "190": {
        start: {
          line: 357,
          column: 28
        },
        end: {
          line: 357,
          column: 36
        }
      },
      "191": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 63
        }
      },
      "192": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 371,
          column: 5
        }
      },
      "193": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 17
        }
      },
      "194": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 29
        }
      },
      "195": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 37
        }
      },
      "196": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 37
        }
      },
      "197": {
        start: {
          line: 372,
          column: 4
        },
        end: {
          line: 372,
          column: 38
        }
      },
      "198": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 39
        }
      },
      "199": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 376,
          column: 77
        }
      },
      "200": {
        start: {
          line: 376,
          column: 14
        },
        end: {
          line: 376,
          column: 77
        }
      },
      "201": {
        start: {
          line: 377,
          column: 22
        },
        end: {
          line: 377,
          column: 73
        }
      },
      "202": {
        start: {
          line: 378,
          column: 17
        },
        end: {
          line: 378,
          column: 31
        }
      },
      "203": {
        start: {
          line: 380,
          column: 22
        },
        end: {
          line: 384,
          column: 5
        }
      },
      "204": {
        start: {
          line: 385,
          column: 4
        },
        end: {
          line: 389,
          column: 5
        }
      },
      "205": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 17
        }
      },
      "206": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 31
        }
      },
      "207": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 35
        }
      },
      "208": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 35
        }
      },
      "209": {
        start: {
          line: 391,
          column: 22
        },
        end: {
          line: 409,
          column: 5
        }
      },
      "210": {
        start: {
          line: 392,
          column: 18
        },
        end: {
          line: 392,
          column: 19
        }
      },
      "211": {
        start: {
          line: 392,
          column: 27
        },
        end: {
          line: 392,
          column: 30
        }
      },
      "212": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "213": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 21
        }
      },
      "214": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "215": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 24
        }
      },
      "216": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 22
        }
      },
      "217": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "218": {
        start: {
          line: 399,
          column: 20
        },
        end: {
          line: 399,
          column: 23
        }
      },
      "219": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "220": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 24
        }
      },
      "221": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 22
        }
      },
      "222": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 408,
          column: 10
        }
      },
      "223": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 410,
          column: 42
        }
      },
      "224": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 411,
          column: 42
        }
      },
      "225": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 42
        }
      },
      "226": {
        start: {
          line: 414,
          column: 4
        },
        end: {
          line: 418,
          column: 5
        }
      },
      "227": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 17
        }
      },
      "228": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 106
        }
      },
      "229": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 114
        }
      },
      "230": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 114
        }
      },
      "231": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 419,
          column: 38
        }
      },
      "232": {
        start: {
          line: 422,
          column: 22
        },
        end: {
          line: 422,
          column: 32
        }
      },
      "233": {
        start: {
          line: 423,
          column: 19
        },
        end: {
          line: 426,
          column: 5
        }
      },
      "234": {
        start: {
          line: 427,
          column: 30
        },
        end: {
          line: 427,
          column: 32
        }
      },
      "235": {
        start: {
          line: 428,
          column: 4
        },
        end: {
          line: 531,
          column: 5
        }
      },
      "236": {
        start: {
          line: 430,
          column: 33
        },
        end: {
          line: 430,
          column: 65
        }
      },
      "237": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 54
        }
      },
      "238": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "239": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 87
        }
      },
      "240": {
        start: {
          line: 436,
          column: 27
        },
        end: {
          line: 436,
          column: 63
        }
      },
      "241": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 52
        }
      },
      "242": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 52
        }
      },
      "243": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 55
        }
      },
      "244": {
        start: {
          line: 442,
          column: 33
        },
        end: {
          line: 442,
          column: 38
        }
      },
      "245": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "246": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 104
        }
      },
      "247": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 38
        }
      },
      "248": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 56
        }
      },
      "249": {
        start: {
          line: 449,
          column: 23
        },
        end: {
          line: 449,
          column: 55
        }
      },
      "250": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 43
        }
      },
      "251": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 81
        }
      },
      "252": {
        start: {
          line: 451,
          column: 18
        },
        end: {
          line: 451,
          column: 81
        }
      },
      "253": {
        start: {
          line: 453,
          column: 20
        },
        end: {
          line: 453,
          column: 31
        }
      },
      "254": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 38
        }
      },
      "255": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 459,
          column: 11
        }
      },
      "256": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 39
        }
      },
      "257": {
        start: {
          line: 456,
          column: 29
        },
        end: {
          line: 456,
          column: 38
        }
      },
      "258": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 87
        }
      },
      "259": {
        start: {
          line: 457,
          column: 30
        },
        end: {
          line: 457,
          column: 86
        }
      },
      "260": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 35
        }
      },
      "261": {
        start: {
          line: 461,
          column: 27
        },
        end: {
          line: 461,
          column: 58
        }
      },
      "262": {
        start: {
          line: 462,
          column: 28
        },
        end: {
          line: 462,
          column: 61
        }
      },
      "263": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "264": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 36
        }
      },
      "265": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 41
        }
      },
      "266": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 43
        }
      },
      "267": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 58
        }
      },
      "268": {
        start: {
          line: 469,
          column: 27
        },
        end: {
          line: 469,
          column: 81
        }
      },
      "269": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "270": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 45
        }
      },
      "271": {
        start: {
          line: 474,
          column: 27
        },
        end: {
          line: 474,
          column: 32
        }
      },
      "272": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 479,
          column: 9
        }
      },
      "273": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 47
        }
      },
      "274": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 32
        }
      },
      "275": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 49
        }
      },
      "276": {
        start: {
          line: 480,
          column: 32
        },
        end: {
          line: 480,
          column: 37
        }
      },
      "277": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 485,
          column: 9
        }
      },
      "278": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 64
        }
      },
      "279": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 37
        }
      },
      "280": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 54
        }
      },
      "281": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "282": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 45
        }
      },
      "283": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 55
        }
      },
      "284": {
        start: {
          line: 491,
          column: 29
        },
        end: {
          line: 491,
          column: 65
        }
      },
      "285": {
        start: {
          line: 492,
          column: 29
        },
        end: {
          line: 492,
          column: 75
        }
      },
      "286": {
        start: {
          line: 494,
          column: 28
        },
        end: {
          line: 494,
          column: 33
        }
      },
      "287": {
        start: {
          line: 495,
          column: 30
        },
        end: {
          line: 495,
          column: 59
        }
      },
      "288": {
        start: {
          line: 496,
          column: 32
        },
        end: {
          line: 496,
          column: 55
        }
      },
      "289": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 501,
          column: 9
        }
      },
      "290": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 96
        }
      },
      "291": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 33
        }
      },
      "292": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 50
        }
      },
      "293": {
        start: {
          line: 503,
          column: 32
        },
        end: {
          line: 503,
          column: 72
        }
      },
      "294": {
        start: {
          line: 504,
          column: 26
        },
        end: {
          line: 504,
          column: 55
        }
      },
      "295": {
        start: {
          line: 505,
          column: 31
        },
        end: {
          line: 505,
          column: 53
        }
      },
      "296": {
        start: {
          line: 506,
          column: 30
        },
        end: {
          line: 510,
          column: 9
        }
      },
      "297": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 525,
          column: 10
        }
      },
      "298": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "299": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 24
        }
      },
      "300": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 151
        }
      },
      "301": {
        start: {
          line: 534,
          column: 20
        },
        end: {
          line: 534,
          column: 22
        }
      },
      "302": {
        start: {
          line: 535,
          column: 4
        },
        end: {
          line: 546,
          column: 5
        }
      },
      "303": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 17
        }
      },
      "304": {
        start: {
          line: 536,
          column: 21
        },
        end: {
          line: 536,
          column: 29
        }
      },
      "305": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 537,
          column: 49
        }
      },
      "306": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "307": {
        start: {
          line: 539,
          column: 27
        },
        end: {
          line: 539,
          column: 68
        }
      },
      "308": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 33
        }
      },
      "309": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 68
        }
      },
      "310": {
        start: {
          line: 547,
          column: 4
        },
        end: {
          line: 547,
          column: 57
        }
      },
      "311": {
        start: {
          line: 548,
          column: 4
        },
        end: {
          line: 548,
          column: 19
        }
      },
      "312": {
        start: {
          line: 551,
          column: 21
        },
        end: {
          line: 551,
          column: 57
        }
      },
      "313": {
        start: {
          line: 552,
          column: 4
        },
        end: {
          line: 587,
          column: 7
        }
      },
      "314": {
        start: {
          line: 553,
          column: 20
        },
        end: {
          line: 553,
          column: 31
        }
      },
      "315": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 554,
          column: 38
        }
      },
      "316": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 582,
          column: 10
        }
      },
      "317": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 581,
          column: 13
        }
      },
      "318": {
        start: {
          line: 557,
          column: 31
        },
        end: {
          line: 557,
          column: 63
        }
      },
      "319": {
        start: {
          line: 558,
          column: 28
        },
        end: {
          line: 558,
          column: 51
        }
      },
      "320": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 562,
          column: 17
        }
      },
      "321": {
        start: {
          line: 560,
          column: 20
        },
        end: {
          line: 560,
          column: 85
        }
      },
      "322": {
        start: {
          line: 561,
          column: 20
        },
        end: {
          line: 561,
          column: 27
        }
      },
      "323": {
        start: {
          line: 564,
          column: 36
        },
        end: {
          line: 564,
          column: 58
        }
      },
      "324": {
        start: {
          line: 565,
          column: 28
        },
        end: {
          line: 565,
          column: 32
        }
      },
      "325": {
        start: {
          line: 566,
          column: 29
        },
        end: {
          line: 566,
          column: 33
        }
      },
      "326": {
        start: {
          line: 567,
          column: 16
        },
        end: {
          line: 571,
          column: 17
        }
      },
      "327": {
        start: {
          line: 568,
          column: 20
        },
        end: {
          line: 568,
          column: 48
        }
      },
      "328": {
        start: {
          line: 570,
          column: 20
        },
        end: {
          line: 570,
          column: 47
        }
      },
      "329": {
        start: {
          line: 572,
          column: 16
        },
        end: {
          line: 572,
          column: 37
        }
      },
      "330": {
        start: {
          line: 573,
          column: 16
        },
        end: {
          line: 573,
          column: 39
        }
      },
      "331": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 574,
          column: 49
        }
      },
      "332": {
        start: {
          line: 575,
          column: 16
        },
        end: {
          line: 575,
          column: 51
        }
      },
      "333": {
        start: {
          line: 576,
          column: 16
        },
        end: {
          line: 576,
          column: 56
        }
      },
      "334": {
        start: {
          line: 577,
          column: 37
        },
        end: {
          line: 577,
          column: 76
        }
      },
      "335": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 578,
          column: 38
        }
      },
      "336": {
        start: {
          line: 580,
          column: 16
        },
        end: {
          line: 580,
          column: 138
        }
      },
      "337": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 585,
          column: 10
        }
      },
      "338": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 584,
          column: 92
        }
      },
      "339": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 586,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 14,
            column: 29
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 43
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 23
          },
          end: {
            line: 20,
            column: 24
          }
        },
        loc: {
          start: {
            line: 20,
            column: 34
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 23,
            column: 32
          }
        },
        loc: {
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 26
          }
        },
        loc: {
          start: {
            line: 26,
            column: 36
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 32,
            column: 26
          },
          end: {
            line: 32,
            column: 27
          }
        },
        loc: {
          start: {
            line: 32,
            column: 37
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 35,
            column: 31
          }
        },
        loc: {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 38,
            column: 26
          }
        },
        loc: {
          start: {
            line: 38,
            column: 36
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 28
          }
        },
        loc: {
          start: {
            line: 41,
            column: 38
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 44,
            column: 21
          }
        },
        loc: {
          start: {
            line: 44,
            column: 31
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 47,
            column: 25
          }
        },
        loc: {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 27
          }
        },
        loc: {
          start: {
            line: 50,
            column: 37
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 50
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 53,
            column: 26
          },
          end: {
            line: 53,
            column: 27
          }
        },
        loc: {
          start: {
            line: 53,
            column: 37
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 53
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 56,
            column: 18
          },
          end: {
            line: 56,
            column: 19
          }
        },
        loc: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 59,
            column: 20
          }
        },
        loc: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 59
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 25
          }
        },
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 62
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 65,
            column: 17
          },
          end: {
            line: 65,
            column: 18
          }
        },
        loc: {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 65
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 68,
            column: 26
          },
          end: {
            line: 68,
            column: 27
          }
        },
        loc: {
          start: {
            line: 68,
            column: 37
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 68
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 71,
            column: 26
          },
          end: {
            line: 71,
            column: 27
          }
        },
        loc: {
          start: {
            line: 71,
            column: 37
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 71
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 74,
            column: 26
          },
          end: {
            line: 74,
            column: 27
          }
        },
        loc: {
          start: {
            line: 74,
            column: 37
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 77,
            column: 24
          },
          end: {
            line: 77,
            column: 25
          }
        },
        loc: {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 77
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 80,
            column: 28
          },
          end: {
            line: 80,
            column: 29
          }
        },
        loc: {
          start: {
            line: 80,
            column: 39
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 80
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 83,
            column: 29
          },
          end: {
            line: 83,
            column: 30
          }
        },
        loc: {
          start: {
            line: 83,
            column: 40
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 83
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 89
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 95
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 33
          }
        },
        loc: {
          start: {
            line: 107,
            column: 54
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 107
      },
      "28": {
        name: "getImageDimensions",
        decl: {
          start: {
            line: 114,
            column: 9
          },
          end: {
            line: 114,
            column: 27
          }
        },
        loc: {
          start: {
            line: 114,
            column: 38
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 114
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 24
          }
        },
        loc: {
          start: {
            line: 115,
            column: 42
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 115
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 118,
            column: 21
          },
          end: {
            line: 118,
            column: 22
          }
        },
        loc: {
          start: {
            line: 118,
            column: 25
          },
          end: {
            line: 123,
            column: 9
          }
        },
        line: 118
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 124,
            column: 22
          },
          end: {
            line: 124,
            column: 23
          }
        },
        loc: {
          start: {
            line: 124,
            column: 26
          },
          end: {
            line: 126,
            column: 9
          }
        },
        line: 124
      },
      "32": {
        name: "resizeImageTo1024x1536",
        decl: {
          start: {
            line: 130,
            column: 9
          },
          end: {
            line: 130,
            column: 31
          }
        },
        loc: {
          start: {
            line: 130,
            column: 56
          },
          end: {
            line: 179,
            column: 1
          }
        },
        line: 130
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 135,
            column: 23
          },
          end: {
            line: 135,
            column: 24
          }
        },
        loc: {
          start: {
            line: 135,
            column: 42
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 135
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 138,
            column: 21
          },
          end: {
            line: 138,
            column: 22
          }
        },
        loc: {
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 173,
            column: 9
          }
        },
        line: 138
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 174,
            column: 22
          },
          end: {
            line: 174,
            column: 23
          }
        },
        loc: {
          start: {
            line: 174,
            column: 26
          },
          end: {
            line: 176,
            column: 9
          }
        },
        line: 174
      },
      "36": {
        name: "validateImageDimensions",
        decl: {
          start: {
            line: 180,
            column: 15
          },
          end: {
            line: 180,
            column: 38
          }
        },
        loc: {
          start: {
            line: 180,
            column: 117
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 180
      },
      "37": {
        name: "getBase64Size",
        decl: {
          start: {
            line: 189,
            column: 9
          },
          end: {
            line: 189,
            column: 22
          }
        },
        loc: {
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 192,
            column: 1
          }
        },
        line: 189
      },
      "38": {
        name: "processImageForTryon",
        decl: {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 35
          }
        },
        loc: {
          start: {
            line: 193,
            column: 56
          },
          end: {
            line: 242,
            column: 1
          }
        },
        line: 193
      },
      "39": {
        name: "processTryonImages",
        decl: {
          start: {
            line: 243,
            column: 15
          },
          end: {
            line: 243,
            column: 33
          }
        },
        loc: {
          start: {
            line: 243,
            column: 75
          },
          end: {
            line: 252,
            column: 1
          }
        },
        line: 243
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 247,
            column: 68
          },
          end: {
            line: 247,
            column: 69
          }
        },
        loc: {
          start: {
            line: 247,
            column: 76
          },
          end: {
            line: 247,
            column: 111
          }
        },
        line: 247
      },
      "41": {
        name: "extractImageMetadata",
        decl: {
          start: {
            line: 253,
            column: 15
          },
          end: {
            line: 253,
            column: 35
          }
        },
        loc: {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 253
      },
      "42": {
        name: "convertImageFormat",
        decl: {
          start: {
            line: 263,
            column: 15
          },
          end: {
            line: 263,
            column: 33
          }
        },
        loc: {
          start: {
            line: 263,
            column: 73
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 263
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 264,
            column: 24
          }
        },
        loc: {
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 264
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 267,
            column: 21
          },
          end: {
            line: 267,
            column: 22
          }
        },
        loc: {
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 267
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 23
          }
        },
        loc: {
          start: {
            line: 289,
            column: 26
          },
          end: {
            line: 291,
            column: 9
          }
        },
        line: 289
      },
      "46": {
        name: "applySharpeningFilter",
        decl: {
          start: {
            line: 295,
            column: 9
          },
          end: {
            line: 295,
            column: 30
          }
        },
        loc: {
          start: {
            line: 295,
            column: 55
          },
          end: {
            line: 335,
            column: 1
          }
        },
        line: 295
      },
      "47": {
        name: "applyNoiseReduction",
        decl: {
          start: {
            line: 336,
            column: 9
          },
          end: {
            line: 336,
            column: 28
          }
        },
        loc: {
          start: {
            line: 336,
            column: 53
          },
          end: {
            line: 373,
            column: 1
          }
        },
        line: 336
      },
      "48": {
        name: "applyAutoColorCorrection",
        decl: {
          start: {
            line: 374,
            column: 9
          },
          end: {
            line: 374,
            column: 33
          }
        },
        loc: {
          start: {
            line: 374,
            column: 42
          },
          end: {
            line: 420,
            column: 1
          }
        },
        line: 374
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 391,
            column: 22
          },
          end: {
            line: 391,
            column: 23
          }
        },
        loc: {
          start: {
            line: 391,
            column: 30
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 391
      },
      "50": {
        name: "processImageAdvanced",
        decl: {
          start: {
            line: 421,
            column: 15
          },
          end: {
            line: 421,
            column: 35
          }
        },
        loc: {
          start: {
            line: 421,
            column: 56
          },
          end: {
            line: 532,
            column: 1
          }
        },
        line: 421
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 455,
            column: 26
          },
          end: {
            line: 455,
            column: 27
          }
        },
        loc: {
          start: {
            line: 455,
            column: 45
          },
          end: {
            line: 459,
            column: 9
          }
        },
        line: 455
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 26
          }
        },
        loc: {
          start: {
            line: 456,
            column: 29
          },
          end: {
            line: 456,
            column: 38
          }
        },
        line: 456
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 457,
            column: 26
          },
          end: {
            line: 457,
            column: 27
          }
        },
        loc: {
          start: {
            line: 457,
            column: 30
          },
          end: {
            line: 457,
            column: 86
          }
        },
        line: 457
      },
      "54": {
        name: "processImagesInBatch",
        decl: {
          start: {
            line: 533,
            column: 15
          },
          end: {
            line: 533,
            column: 35
          }
        },
        loc: {
          start: {
            line: 533,
            column: 69
          },
          end: {
            line: 549,
            column: 1
          }
        },
        line: 533
      },
      "55": {
        name: "createImageThumbnail",
        decl: {
          start: {
            line: 550,
            column: 15
          },
          end: {
            line: 550,
            column: 35
          }
        },
        loc: {
          start: {
            line: 550,
            column: 69
          },
          end: {
            line: 588,
            column: 1
          }
        },
        line: 550
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 552,
            column: 23
          },
          end: {
            line: 552,
            column: 24
          }
        },
        loc: {
          start: {
            line: 552,
            column: 42
          },
          end: {
            line: 587,
            column: 5
          }
        },
        line: 552
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 555,
            column: 21
          },
          end: {
            line: 555,
            column: 22
          }
        },
        loc: {
          start: {
            line: 555,
            column: 25
          },
          end: {
            line: 582,
            column: 9
          }
        },
        line: 555
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 583,
            column: 22
          },
          end: {
            line: 583,
            column: 23
          }
        },
        loc: {
          start: {
            line: 583,
            column: 26
          },
          end: {
            line: 585,
            column: 9
          }
        },
        line: 583
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 130,
            column: 42
          },
          end: {
            line: 130,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 52
          },
          end: {
            line: 130,
            column: 54
          }
        }],
        line: 130
      },
      "1": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "2": {
        loc: {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "3": {
        loc: {
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        }, {
          start: {
            line: 154,
            column: 27
          },
          end: {
            line: 157,
            column: 21
          }
        }],
        line: 151
      },
      "4": {
        loc: {
          start: {
            line: 171,
            column: 74
          },
          end: {
            line: 171,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 99
          },
          end: {
            line: 171,
            column: 104
          }
        }, {
          start: {
            line: 171,
            column: 107
          },
          end: {
            line: 171,
            column: 131
          }
        }],
        line: 171
      },
      "5": {
        loc: {
          start: {
            line: 180,
            column: 49
          },
          end: {
            line: 180,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 180,
            column: 60
          },
          end: {
            line: 180,
            column: 63
          }
        }],
        line: 180
      },
      "6": {
        loc: {
          start: {
            line: 180,
            column: 65
          },
          end: {
            line: 180,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 180,
            column: 77
          },
          end: {
            line: 180,
            column: 80
          }
        }],
        line: 180
      },
      "7": {
        loc: {
          start: {
            line: 180,
            column: 82
          },
          end: {
            line: 180,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 180,
            column: 93
          },
          end: {
            line: 180,
            column: 97
          }
        }],
        line: 180
      },
      "8": {
        loc: {
          start: {
            line: 180,
            column: 99
          },
          end: {
            line: 180,
            column: 115
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 180,
            column: 111
          },
          end: {
            line: 180,
            column: 115
          }
        }],
        line: 180
      },
      "9": {
        loc: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "10": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 35
          }
        }, {
          start: {
            line: 182,
            column: 39
          },
          end: {
            line: 182,
            column: 68
          }
        }],
        line: 182
      },
      "11": {
        loc: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "12": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 185,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 185,
            column: 35
          }
        }, {
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 68
          }
        }],
        line: 185
      },
      "13": {
        loc: {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 193,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 193,
            column: 54
          }
        }],
        line: 193
      },
      "14": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "15": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "16": {
        loc: {
          start: {
            line: 230,
            column: 28
          },
          end: {
            line: 230,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 28
          },
          end: {
            line: 230,
            column: 78
          }
        }, {
          start: {
            line: 230,
            column: 82
          },
          end: {
            line: 230,
            column: 134
          }
        }],
        line: 230
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "18": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 237
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 61
          }
        }, {
          start: {
            line: 237,
            column: 65
          },
          end: {
            line: 237,
            column: 106
          }
        }, {
          start: {
            line: 237,
            column: 110
          },
          end: {
            line: 237,
            column: 156
          }
        }, {
          start: {
            line: 237,
            column: 160
          },
          end: {
            line: 237,
            column: 196
          }
        }, {
          start: {
            line: 237,
            column: 200
          },
          end: {
            line: 237,
            column: 237
          }
        }],
        line: 237
      },
      "19": {
        loc: {
          start: {
            line: 240,
            column: 83
          },
          end: {
            line: 240,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 108
          },
          end: {
            line: 240,
            column: 113
          }
        }, {
          start: {
            line: 240,
            column: 116
          },
          end: {
            line: 240,
            column: 140
          }
        }],
        line: 240
      },
      "20": {
        loc: {
          start: {
            line: 243,
            column: 61
          },
          end: {
            line: 243,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 243,
            column: 71
          },
          end: {
            line: 243,
            column: 73
          }
        }],
        line: 243
      },
      "21": {
        loc: {
          start: {
            line: 260,
            column: 21
          },
          end: {
            line: 260,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 41
          },
          end: {
            line: 260,
            column: 68
          }
        }, {
          start: {
            line: 260,
            column: 71
          },
          end: {
            line: 260,
            column: 80
          }
        }],
        line: 260
      },
      "22": {
        loc: {
          start: {
            line: 263,
            column: 58
          },
          end: {
            line: 263,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 68
          },
          end: {
            line: 263,
            column: 71
          }
        }],
        line: 263
      },
      "23": {
        loc: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 274,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 274,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "24": {
        loc: {
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "25": {
        loc: {
          start: {
            line: 286,
            column: 82
          },
          end: {
            line: 286,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 107
          },
          end: {
            line: 286,
            column: 112
          }
        }, {
          start: {
            line: 286,
            column: 115
          },
          end: {
            line: 286,
            column: 139
          }
        }],
        line: 286
      },
      "26": {
        loc: {
          start: {
            line: 295,
            column: 39
          },
          end: {
            line: 295,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 295,
            column: 50
          },
          end: {
            line: 295,
            column: 53
          }
        }],
        line: 295
      },
      "27": {
        loc: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "28": {
        loc: {
          start: {
            line: 336,
            column: 37
          },
          end: {
            line: 336,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 336,
            column: 48
          },
          end: {
            line: 336,
            column: 51
          }
        }],
        line: 336
      },
      "29": {
        loc: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "30": {
        loc: {
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "31": {
        loc: {
          start: {
            line: 355,
            column: 28
          },
          end: {
            line: 355,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 28
          },
          end: {
            line: 355,
            column: 35
          }
        }, {
          start: {
            line: 355,
            column: 39
          },
          end: {
            line: 355,
            column: 49
          }
        }, {
          start: {
            line: 355,
            column: 53
          },
          end: {
            line: 355,
            column: 60
          }
        }, {
          start: {
            line: 355,
            column: 64
          },
          end: {
            line: 355,
            column: 75
          }
        }],
        line: 355
      },
      "32": {
        loc: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "33": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "34": {
        loc: {
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "35": {
        loc: {
          start: {
            line: 421,
            column: 42
          },
          end: {
            line: 421,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 52
          },
          end: {
            line: 421,
            column: 54
          }
        }],
        line: 421
      },
      "36": {
        loc: {
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 433
      },
      "37": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "38": {
        loc: {
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 443,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 443,
            column: 32
          }
        }, {
          start: {
            line: 443,
            column: 36
          },
          end: {
            line: 443,
            column: 70
          }
        }],
        line: 443
      },
      "39": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 451,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 451,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "40": {
        loc: {
          start: {
            line: 461,
            column: 27
          },
          end: {
            line: 461,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 27
          },
          end: {
            line: 461,
            column: 45
          }
        }, {
          start: {
            line: 461,
            column: 49
          },
          end: {
            line: 461,
            column: 58
          }
        }],
        line: 461
      },
      "41": {
        loc: {
          start: {
            line: 462,
            column: 28
          },
          end: {
            line: 462,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 28
          },
          end: {
            line: 462,
            column: 47
          }
        }, {
          start: {
            line: 462,
            column: 51
          },
          end: {
            line: 462,
            column: 61
          }
        }],
        line: 462
      },
      "42": {
        loc: {
          start: {
            line: 469,
            column: 27
          },
          end: {
            line: 469,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 27
          },
          end: {
            line: 469,
            column: 51
          }
        }, {
          start: {
            line: 469,
            column: 55
          },
          end: {
            line: 469,
            column: 81
          }
        }],
        line: 469
      },
      "43": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "44": {
        loc: {
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "45": {
        loc: {
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 475,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 475,
            column: 36
          }
        }, {
          start: {
            line: 475,
            column: 40
          },
          end: {
            line: 475,
            column: 50
          }
        }],
        line: 475
      },
      "46": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 485,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 485,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "47": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 481,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 481,
            column: 34
          }
        }, {
          start: {
            line: 481,
            column: 38
          },
          end: {
            line: 481,
            column: 64
          }
        }],
        line: 481
      },
      "48": {
        loc: {
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "49": {
        loc: {
          start: {
            line: 491,
            column: 29
          },
          end: {
            line: 491,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 491,
            column: 29
          },
          end: {
            line: 491,
            column: 49
          }
        }, {
          start: {
            line: 491,
            column: 53
          },
          end: {
            line: 491,
            column: 65
          }
        }],
        line: 491
      },
      "50": {
        loc: {
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 501,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 501,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "51": {
        loc: {
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "52": {
        loc: {
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 527,
            column: 237
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 527,
            column: 61
          }
        }, {
          start: {
            line: 527,
            column: 65
          },
          end: {
            line: 527,
            column: 106
          }
        }, {
          start: {
            line: 527,
            column: 110
          },
          end: {
            line: 527,
            column: 156
          }
        }, {
          start: {
            line: 527,
            column: 160
          },
          end: {
            line: 527,
            column: 196
          }
        }, {
          start: {
            line: 527,
            column: 200
          },
          end: {
            line: 527,
            column: 237
          }
        }],
        line: 527
      },
      "53": {
        loc: {
          start: {
            line: 530,
            column: 92
          },
          end: {
            line: 530,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 530,
            column: 117
          },
          end: {
            line: 530,
            column: 122
          }
        }, {
          start: {
            line: 530,
            column: 125
          },
          end: {
            line: 530,
            column: 149
          }
        }],
        line: 530
      },
      "54": {
        loc: {
          start: {
            line: 533,
            column: 43
          },
          end: {
            line: 533,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 533,
            column: 53
          },
          end: {
            line: 533,
            column: 55
          }
        }],
        line: 533
      },
      "55": {
        loc: {
          start: {
            line: 550,
            column: 42
          },
          end: {
            line: 550,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 550,
            column: 49
          },
          end: {
            line: 550,
            column: 52
          }
        }],
        line: 550
      },
      "56": {
        loc: {
          start: {
            line: 550,
            column: 54
          },
          end: {
            line: 550,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 550,
            column: 64
          },
          end: {
            line: 550,
            column: 67
          }
        }],
        line: 550
      },
      "57": {
        loc: {
          start: {
            line: 559,
            column: 16
          },
          end: {
            line: 562,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 559,
            column: 16
          },
          end: {
            line: 562,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 559
      },
      "58": {
        loc: {
          start: {
            line: 567,
            column: 16
          },
          end: {
            line: 571,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 567,
            column: 16
          },
          end: {
            line: 571,
            column: 17
          }
        }, {
          start: {
            line: 569,
            column: 23
          },
          end: {
            line: 571,
            column: 17
          }
        }],
        line: 567
      },
      "59": {
        loc: {
          start: {
            line: 580,
            column: 78
          },
          end: {
            line: 580,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 580,
            column: 103
          },
          end: {
            line: 580,
            column: 108
          }
        }, {
          start: {
            line: 580,
            column: 111
          },
          end: {
            line: 580,
            column: 135
          }
        }],
        line: 580
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0, 0, 0, 0],
      "53": [0, 0],
      "54": [0],
      "55": [0],
      "56": [0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/business-layer/utils/imageProcessing.ts"],
      sourcesContent: ["// Image Processing Utilities for Try-On Mutations\n// Comprehensive image processing functions for the business layer\n\nimport { \n  fileToBase64, \n  compressBase64, \n  isImageFile,\n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  CompressionFailedError,\n  type ImageBase64\n} from '@/utils/image';\n\n// Re-export utilities needed by other business layer modules\nexport { \n  compressBase64, \n  CompressionFailedError,\n  FileTypeNotSupportedError,\n  FileTooLargeError,\n  fileToBase64,\n  isImageFile,\n  type ImageBase64 \n};\n\n// getBase64Size function is exported where it's defined below\nimport { \n  AdvancedCanvasOperations, \n  createAdvancedCanvasOperations,\n  type ManagedCanvas \n} from '../providers/CanvasProvider';\n\n/**\n * Custom error for image processing failures\n */\nexport class ImageProcessingError extends Error {\n  constructor(message: string, public readonly originalError?: Error) {\n    super(message);\n    this.name = 'ImageProcessingError';\n  }\n}\n\n/**\n * Custom error for image dimension validation failures\n */\nexport class ImageDimensionError extends Error {\n  constructor(message: string, public readonly width?: number, public readonly height?: number) {\n    super(message);\n    this.name = 'ImageDimensionError';\n  }\n}\n\n/**\n * Configuration options for image processing\n */\nexport interface ImageProcessingOptions {\n  /** Target width for resizing (default: 1024) */\n  targetWidth?: number;\n  /** Target height for resizing (default: 1536) */\n  targetHeight?: number;\n  /** Maximum file size in KB after compression (default: 1024) */\n  maxSizeKB?: number;\n  /** JPEG quality for compression (0.1-1.0, default: 0.9) */\n  quality?: number;\n  /** Whether to preserve aspect ratio during resize (default: false) */\n  preserveAspectRatio?: boolean;\n}\n\n/**\n * Default processing options for try-on images\n */\nexport const DEFAULT_PROCESSING_OPTIONS: Required<ImageProcessingOptions> = {\n  targetWidth: 1024,\n  targetHeight: 1536,\n  maxSizeKB: 1024,\n  quality: 0.9,\n  preserveAspectRatio: false\n};\n\n/**\n * Supported image formats for conversion\n */\nexport enum ImageFormat {\n  JPEG = 'image/jpeg',\n  PNG = 'image/png',\n  WEBP = 'image/webp',\n  GIF = 'image/gif'\n}\n\n/**\n * Image metadata extracted from file\n */\nexport interface ImageMetadata {\n  /** Image format/MIME type */\n  format: string;\n  /** Image dimensions */\n  dimensions: { width: number; height: number };\n  /** File size in bytes */\n  size: number;\n  /** Color depth information */\n  colorDepth?: number;\n  /** Whether image has transparency */\n  hasAlpha?: boolean;\n  /** Estimated quality (for JPEG) */\n  estimatedQuality?: number;\n  /** Creation timestamp if available */\n  dateCreated?: Date;\n  /** Device orientation (EXIF) */\n  orientation?: number;\n  /** DPI/resolution information */\n  resolution?: { x: number; y: number };\n}\n\n/**\n * Advanced image processing options\n */\nexport interface AdvancedImageProcessingOptions extends ImageProcessingOptions {\n  /** Output format */\n  outputFormat?: ImageFormat;\n  /** Enable sharpening after resize */\n  enableSharpening?: boolean;\n  /** Noise reduction strength (0-1) */\n  noiseReduction?: number;\n  /** Enable automatic color correction */\n  autoColorCorrection?: boolean;\n  /** Preserve EXIF data */\n  preserveExif?: boolean;\n  /** Custom canvas for processing */\n  canvas?: ManagedCanvas;\n}\n\n/**\n * Enhanced result of image processing operations\n */\nexport interface AdvancedImageProcessingResult {\n  /** Processed image as base64 data URL */\n  processedImage: ImageBase64;\n  /** Original image metadata */\n  originalMetadata: ImageMetadata;\n  /** Final image metadata */\n  finalMetadata: ImageMetadata;\n  /** Processing metadata */\n  processingMetadata: {\n    wasResized: boolean;\n    wasCompressed: boolean;\n    wasFormatConverted: boolean;\n    wasSharpened: boolean;\n    hadNoiseReduction: boolean;\n    compressionRatio: number;\n    processingTime: number;\n    operationsApplied: string[];\n  };\n}\n\n/**\n * Result of image processing operations (legacy compatibility)\n */\nexport interface ImageProcessingResult {\n  /** Processed image as base64 data URL */\n  processedImage: ImageBase64;\n  /** Original image dimensions */\n  originalDimensions: { width: number; height: number };\n  /** Final image dimensions */\n  finalDimensions: { width: number; height: number };\n  /** Original file size in bytes */\n  originalSize: number;\n  /** Final file size in bytes */\n  finalSize: number;\n  /** Processing metadata */\n  metadata: {\n    wasResized: boolean;\n    wasCompressed: boolean;\n    compressionRatio: number;\n    processingTime: number;\n  };\n}\n\n/**\n * Get image dimensions from a data URL or image element\n */\nexport function getImageDimensions(imageUrl: string): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    \n    img.onload = () => {\n      resolve({ width: img.width, height: img.height });\n    };\n    \n    img.onerror = () => {\n      reject(new ImageProcessingError('Failed to load image for dimension analysis'));\n    };\n    \n    img.src = imageUrl;\n  });\n}\n\n/**\n * Resize image to specific dimensions\n * \n * @param imageUrl - Source image data URL\n * @param options - Resize options\n * @returns Promise resolving to resized image data URL\n */\nexport function resizeImageTo1024x1536(\n  imageUrl: string, \n  options: Partial<ImageProcessingOptions> = {}\n): Promise<string> {\n  const config = { ...DEFAULT_PROCESSING_OPTIONS, ...options };\n  \n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    \n    img.onload = () => {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new ImageProcessingError('Could not get canvas context'));\n          return;\n        }\n        \n        let { targetWidth, targetHeight } = config;\n        \n        // Calculate dimensions preserving aspect ratio if requested\n        if (config.preserveAspectRatio) {\n          const aspectRatio = img.width / img.height;\n          const targetAspectRatio = targetWidth / targetHeight;\n          \n          if (aspectRatio > targetAspectRatio) {\n            // Image is wider, fit to width\n            targetHeight = Math.round(targetWidth / aspectRatio);\n          } else {\n            // Image is taller, fit to height\n            targetWidth = Math.round(targetHeight * aspectRatio);\n          }\n        }\n        \n        // Set canvas dimensions\n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n        \n        // Apply high-quality scaling\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        \n        // Draw the image resized to fit the canvas\n        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n        \n        // Convert to data URL with specified quality\n        const resizedImageUrl = canvas.toDataURL('image/jpeg', config.quality);\n        resolve(resizedImageUrl);\n      } catch (error) {\n        reject(new ImageProcessingError(\n          'Failed to resize image',\n          error instanceof Error ? error : new Error(String(error))\n        ));\n      }\n    };\n    \n    img.onerror = () => {\n      reject(new ImageProcessingError('Failed to load image for resizing'));\n    };\n    \n    img.src = imageUrl;\n  });\n}\n\n/**\n * Validate image dimensions against requirements\n */\nexport async function validateImageDimensions(\n  imageUrl: string,\n  minWidth = 512,\n  minHeight = 512,\n  maxWidth = 4096,\n  maxHeight = 4096\n): Promise<void> {\n  const dimensions = await getImageDimensions(imageUrl);\n  \n  if (dimensions.width < minWidth || dimensions.height < minHeight) {\n    throw new ImageDimensionError(\n      `Image dimensions too small. Minimum: ${minWidth}x${minHeight}, got: ${dimensions.width}x${dimensions.height}`,\n      dimensions.width,\n      dimensions.height\n    );\n  }\n  \n  if (dimensions.width > maxWidth || dimensions.height > maxHeight) {\n    throw new ImageDimensionError(\n      `Image dimensions too large. Maximum: ${maxWidth}x${maxHeight}, got: ${dimensions.width}x${dimensions.height}`,\n      dimensions.width,\n      dimensions.height\n    );\n  }\n}\n\n/**\n * Calculate file size from base64 data URL\n */\nexport function getBase64Size(base64: string): number {\n  const base64Data = base64.split(',')[1];\n  return atob(base64Data).length;\n}\n\n/**\n * Process a file through the complete try-on image pipeline\n * \n * @param file - Input image file\n * @param options - Processing options\n * @returns Promise resolving to processing result\n */\nexport async function processImageForTryon(\n  file: File,\n  options: Partial<ImageProcessingOptions> = {}\n): Promise<ImageProcessingResult> {\n  const startTime = Date.now();\n  const config = { ...DEFAULT_PROCESSING_OPTIONS, ...options };\n  \n  try {\n    // Step 1: Validate file type and convert to base64\n    if (!isImageFile(file)) {\n      throw new FileTypeNotSupportedError('Only image files are allowed');\n    }\n    \n    const originalBase64 = await fileToBase64(file);\n    const originalSize = file.size;\n    const originalDimensions = await getImageDimensions(originalBase64);\n    \n    // Step 2: Validate dimensions\n    await validateImageDimensions(originalBase64);\n    \n    // Step 3: Resize image to target dimensions\n    const resizedImage = await resizeImageTo1024x1536(originalBase64, config);\n    const finalDimensions = await getImageDimensions(resizedImage);\n    \n    // Step 4: Compress if needed\n    let processedImage = resizedImage;\n    let wasCompressed = false;\n    \n    const resizedSize = getBase64Size(resizedImage);\n    const targetSizeBytes = config.maxSizeKB * 1024;\n    \n    if (resizedSize > targetSizeBytes) {\n      processedImage = await compressBase64(resizedImage, config.maxSizeKB);\n      wasCompressed = true;\n    }\n    \n    const finalSize = getBase64Size(processedImage);\n    const processingTime = Date.now() - startTime;\n    \n    return {\n      processedImage,\n      originalDimensions,\n      finalDimensions,\n      originalSize,\n      finalSize,\n      metadata: {\n        wasResized: originalDimensions.width !== finalDimensions.width || \n                   originalDimensions.height !== finalDimensions.height,\n        wasCompressed,\n        compressionRatio: originalSize / finalSize,\n        processingTime\n      }\n    };\n  } catch (error) {\n    if (error instanceof FileTypeNotSupportedError ||\n        error instanceof FileTooLargeError ||\n        error instanceof CompressionFailedError ||\n        error instanceof ImageDimensionError ||\n        error instanceof ImageProcessingError) {\n      throw error;\n    }\n    \n    throw new ImageProcessingError(\n      'Unexpected error during image processing',\n      error instanceof Error ? error : new Error(String(error))\n    );\n  }\n}\n\n/**\n * Process multiple images for try-on (model + apparel images)\n */\nexport async function processTryonImages(\n  modelImage: File,\n  apparelImages: File[],\n  options: Partial<ImageProcessingOptions> = {}\n): Promise<{\n  modelImageResult: ImageProcessingResult;\n  apparelImageResults: ImageProcessingResult[];\n}> {\n  // Process model image\n  const modelImageResult = await processImageForTryon(modelImage, options);\n  \n  // Process all apparel images in parallel\n  const apparelImageResults = await Promise.all(\n    apparelImages.map(file => processImageForTryon(file, options))\n  );\n  \n  return {\n    modelImageResult,\n    apparelImageResults\n  };\n}\n\n/**\n * Extract comprehensive metadata from image\n */\nexport async function extractImageMetadata(file: File): Promise<ImageMetadata> {\n  const imageUrl = await fileToBase64(file);\n  const dimensions = await getImageDimensions(imageUrl);\n  \n  return {\n    format: file.type,\n    dimensions,\n    size: file.size,\n    dateCreated: file.lastModified ? new Date(file.lastModified) : undefined,\n    // Additional metadata would require EXIF parsing library\n    // For now, we'll provide basic metadata\n  };\n}\n\n/**\n * Convert image to different format\n */\nexport async function convertImageFormat(\n  imageUrl: string,\n  targetFormat: ImageFormat,\n  quality: number = 0.9\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    \n    img.onload = () => {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new ImageProcessingError('Could not get canvas context'));\n          return;\n        }\n        \n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        // For PNG with transparency, fill with white background for JPEG\n        if (targetFormat === ImageFormat.JPEG) {\n          ctx.fillStyle = 'white';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        \n        ctx.drawImage(img, 0, 0);\n        \n        const convertedImageUrl = canvas.toDataURL(targetFormat, quality);\n        resolve(convertedImageUrl);\n      } catch (error) {\n        reject(new ImageProcessingError(\n          'Failed to convert image format',\n          error instanceof Error ? error : new Error(String(error))\n        ));\n      }\n    };\n    \n    img.onerror = () => {\n      reject(new ImageProcessingError('Failed to load image for format conversion'));\n    };\n    \n    img.src = imageUrl;\n  });\n}\n\n/**\n * Apply sharpening filter to image\n */\nexport function applySharpeningFilter(canvas: HTMLCanvasElement, strength: number = 0.5): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) throw new ImageProcessingError('Could not get canvas context');\n  \n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n  const width = canvas.width;\n  const height = canvas.height;\n  \n  // Simple unsharp mask implementation\n  const sharpenKernel = [\n    0, -strength, 0,\n    -strength, 1 + 4 * strength, -strength,\n    0, -strength, 0\n  ];\n  \n  const newData = new Uint8ClampedArray(data);\n  \n  for (let y = 1; y < height - 1; y++) {\n    for (let x = 1; x < width - 1; x++) {\n      for (let c = 0; c < 3; c++) { // RGB channels only\n        let sum = 0;\n        for (let ky = -1; ky <= 1; ky++) {\n          for (let kx = -1; kx <= 1; kx++) {\n            const pixelIndex = ((y + ky) * width + (x + kx)) * 4 + c;\n            const kernelIndex = (ky + 1) * 3 + (kx + 1);\n            sum += data[pixelIndex] * sharpenKernel[kernelIndex];\n          }\n        }\n        newData[(y * width + x) * 4 + c] = Math.max(0, Math.min(255, sum));\n      }\n    }\n  }\n  \n  // Copy the new data back\n  for (let i = 0; i < data.length; i++) {\n    data[i] = newData[i];\n  }\n  \n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Apply noise reduction filter\n */\nexport function applyNoiseReduction(canvas: HTMLCanvasElement, strength: number = 0.3): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) throw new ImageProcessingError('Could not get canvas context');\n  \n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n  const width = canvas.width;\n  const height = canvas.height;\n  \n  // Simple blur for noise reduction\n  const radius = Math.ceil(strength * 3);\n  const newData = new Uint8ClampedArray(data);\n  \n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      for (let c = 0; c < 3; c++) { // RGB channels only\n        let sum = 0;\n        let count = 0;\n        \n        for (let dy = -radius; dy <= radius; dy++) {\n          for (let dx = -radius; dx <= radius; dx++) {\n            const nx = x + dx;\n            const ny = y + dy;\n            \n            if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n              sum += data[(ny * width + nx) * 4 + c];\n              count++;\n            }\n          }\n        }\n        \n        newData[(y * width + x) * 4 + c] = sum / count;\n      }\n    }\n  }\n  \n  // Copy the new data back\n  for (let i = 0; i < data.length; i += 4) {\n    data[i] = newData[i];     // R\n    data[i + 1] = newData[i + 1]; // G\n    data[i + 2] = newData[i + 2]; // B\n    // Keep original alpha\n  }\n  \n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Apply automatic color correction\n */\nexport function applyAutoColorCorrection(canvas: HTMLCanvasElement): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) throw new ImageProcessingError('Could not get canvas context');\n  \n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n  \n  // Calculate histogram\n  const histogram = {\n    r: new Array(256).fill(0),\n    g: new Array(256).fill(0),\n    b: new Array(256).fill(0)\n  };\n  \n  for (let i = 0; i < data.length; i += 4) {\n    histogram.r[data[i]]++;\n    histogram.g[data[i + 1]]++;\n    histogram.b[data[i + 2]]++;\n  }\n  \n  // Find min/max values for each channel\n  const getMinMax = (hist: number[]) => {\n    let min = 0, max = 255;\n    for (let i = 0; i < 256; i++) {\n      if (hist[i] > 0) { min = i; break; }\n    }\n    for (let i = 255; i >= 0; i--) {\n      if (hist[i] > 0) { max = i; break; }\n    }\n    return { min, max };\n  };\n  \n  const rMinMax = getMinMax(histogram.r);\n  const gMinMax = getMinMax(histogram.g);\n  const bMinMax = getMinMax(histogram.b);\n  \n  // Apply histogram stretching\n  for (let i = 0; i < data.length; i += 4) {\n    data[i] = Math.max(0, Math.min(255, \n      ((data[i] - rMinMax.min) / (rMinMax.max - rMinMax.min)) * 255));\n    data[i + 1] = Math.max(0, Math.min(255, \n      ((data[i + 1] - gMinMax.min) / (gMinMax.max - gMinMax.min)) * 255));\n    data[i + 2] = Math.max(0, Math.min(255, \n      ((data[i + 2] - bMinMax.min) / (bMinMax.max - bMinMax.min)) * 255));\n  }\n  \n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Advanced image processing with comprehensive options\n */\nexport async function processImageAdvanced(\n  file: File,\n  options: Partial<AdvancedImageProcessingOptions> = {}\n): Promise<AdvancedImageProcessingResult> {\n  const startTime = Date.now();\n  const config = { ...DEFAULT_PROCESSING_OPTIONS, ...options };\n  const operationsApplied: string[] = [];\n  \n  try {\n    // Step 1: Extract original metadata\n    const originalMetadata = await extractImageMetadata(file);\n    operationsApplied.push('metadata-extraction');\n    \n    // Step 2: Validate file type and convert to base64\n    if (!isImageFile(file)) {\n      throw new FileTypeNotSupportedError('Only image files are allowed');\n    }\n    \n    let currentImage = await fileToBase64(file);\n    operationsApplied.push('base64-conversion');\n    \n    // Step 3: Validate dimensions\n    await validateImageDimensions(currentImage);\n    operationsApplied.push('dimension-validation');\n    \n    // Step 4: Format conversion (if needed)\n    let wasFormatConverted = false;\n    if (options.outputFormat && options.outputFormat !== file.type) {\n      currentImage = await convertImageFormat(currentImage, options.outputFormat, config.quality);\n      wasFormatConverted = true;\n      operationsApplied.push('format-conversion');\n    }\n    \n    // Step 5: Create canvas for advanced processing\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new ImageProcessingError('Could not get canvas context');\n    \n    // Load image onto canvas\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    await new Promise<void>((resolve, reject) => {\n      img.onload = () => resolve();\n      img.onerror = () => reject(new ImageProcessingError('Failed to load image'));\n      img.src = currentImage;\n    });\n    \n    // Set canvas dimensions based on resize requirements\n    const finalWidth = config.targetWidth || img.width;\n    const finalHeight = config.targetHeight || img.height;\n    \n    canvas.width = finalWidth;\n    canvas.height = finalHeight;\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    \n    // Draw resized image\n    ctx.drawImage(img, 0, 0, finalWidth, finalHeight);\n    \n    const wasResized = img.width !== finalWidth || img.height !== finalHeight;\n    if (wasResized) {\n      operationsApplied.push('resize');\n    }\n    \n    // Step 6: Apply advanced processing\n    let wasSharpened = false;\n    if (options.enableSharpening && wasResized) {\n      applySharpeningFilter(canvas, 0.3);\n      wasSharpened = true;\n      operationsApplied.push('sharpening');\n    }\n    \n    let hadNoiseReduction = false;\n    if (options.noiseReduction && options.noiseReduction > 0) {\n      applyNoiseReduction(canvas, options.noiseReduction);\n      hadNoiseReduction = true;\n      operationsApplied.push('noise-reduction');\n    }\n    \n    if (options.autoColorCorrection) {\n      applyAutoColorCorrection(canvas);\n      operationsApplied.push('color-correction');\n    }\n    \n    // Step 7: Convert back to data URL\n    const outputFormat = options.outputFormat || ImageFormat.JPEG;\n    let processedImage = canvas.toDataURL(outputFormat, config.quality);\n    \n    // Step 8: Compress if needed\n    let wasCompressed = false;\n    const processedSize = getBase64Size(processedImage);\n    const targetSizeBytes = config.maxSizeKB * 1024;\n    \n    if (processedSize > targetSizeBytes) {\n      processedImage = await compressBase64(processedImage, config.maxSizeKB);\n      wasCompressed = true;\n      operationsApplied.push('compression');\n    }\n    \n    // Step 9: Generate final metadata\n    const finalDimensions = await getImageDimensions(processedImage);\n    const finalSize = getBase64Size(processedImage);\n    const processingTime = Date.now() - startTime;\n    \n    const finalMetadata: ImageMetadata = {\n      format: outputFormat,\n      dimensions: finalDimensions,\n      size: finalSize\n    };\n    \n    return {\n      processedImage,\n      originalMetadata,\n      finalMetadata,\n      processingMetadata: {\n        wasResized,\n        wasCompressed,\n        wasFormatConverted,\n        wasSharpened,\n        hadNoiseReduction,\n        compressionRatio: originalMetadata.size / finalSize,\n        processingTime,\n        operationsApplied\n      }\n    };\n    \n  } catch (error) {\n    if (error instanceof FileTypeNotSupportedError ||\n        error instanceof FileTooLargeError ||\n        error instanceof CompressionFailedError ||\n        error instanceof ImageDimensionError ||\n        error instanceof ImageProcessingError) {\n      throw error;\n    }\n    \n    throw new ImageProcessingError(\n      'Unexpected error during advanced image processing',\n      error instanceof Error ? error : new Error(String(error))\n    );\n  }\n}\n\n/**\n * Batch process multiple images with progress tracking\n */\nexport async function processImagesInBatch(\n  files: File[],\n  options: Partial<AdvancedImageProcessingOptions> = {},\n  onProgress?: (completed: number, total: number, currentFile: string) => void\n): Promise<AdvancedImageProcessingResult[]> {\n  const results: AdvancedImageProcessingResult[] = [];\n  \n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    onProgress?.(i, files.length, file.name);\n    \n    try {\n      const result = await processImageAdvanced(file, options);\n      results.push(result);\n    } catch (error) {\n      // For batch processing, we might want to continue with other files\n      console.error(`Failed to process ${file.name}:`, error);\n      // You could push a failed result or skip, depending on requirements\n    }\n  }\n  \n  onProgress?.(files.length, files.length, 'Complete');\n  return results;\n}\n\n/**\n * Create image thumbnail with consistent dimensions\n */\nexport async function createImageThumbnail(\n  file: File,\n  size: number = 150,\n  quality: number = 0.8\n): Promise<string> {\n  const imageUrl = await fileToBase64(file);\n  \n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    \n    img.onload = () => {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new ImageProcessingError('Could not get canvas context'));\n          return;\n        }\n        \n        // Calculate dimensions to maintain aspect ratio\n        const aspectRatio = img.width / img.height;\n        let width = size;\n        let height = size;\n        \n        if (aspectRatio > 1) {\n          height = size / aspectRatio;\n        } else {\n          width = size * aspectRatio;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        const thumbnailUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(thumbnailUrl);\n      } catch (error) {\n        reject(new ImageProcessingError(\n          'Failed to create thumbnail',\n          error instanceof Error ? error : new Error(String(error))\n        ));\n      }\n    };\n    \n    img.onerror = () => {\n      reject(new ImageProcessingError('Failed to load image for thumbnail creation'));\n    };\n    \n    img.src = imageUrl;\n  });\n}"],
      names: ["CompressionFailedError", "DEFAULT_PROCESSING_OPTIONS", "FileTooLargeError", "FileTypeNotSupportedError", "ImageDimensionError", "ImageFormat", "ImageProcessingError", "applyAutoColorCorrection", "applyNoiseReduction", "applySharpeningFilter", "compressBase64", "convertImageFormat", "createImageThumbnail", "extractImageMetadata", "fileToBase64", "getBase64Size", "getImageDimensions", "isImageFile", "processImageAdvanced", "processImageForTryon", "processImagesInBatch", "processTryonImages", "resizeImageTo1024x1536", "validateImageDimensions", "Error", "constructor", "message", "originalError", "name", "width", "height", "targetWidth", "targetHeight", "maxSizeKB", "quality", "preserveAspectRatio", "imageUrl", "Promise", "resolve", "reject", "img", "Image", "crossOrigin", "onload", "onerror", "src", "options", "config", "canvas", "document", "createElement", "ctx", "getContext", "aspectRatio", "targetAspectRatio", "Math", "round", "imageSmoothingEnabled", "imageSmoothingQuality", "drawImage", "resizedImageUrl", "toDataURL", "error", "String", "minWidth", "minHeight", "maxWidth", "maxHeight", "dimensions", "base64", "base64Data", "split", "atob", "length", "file", "startTime", "Date", "now", "originalBase64", "originalSize", "size", "originalDimensions", "resizedImage", "finalDimensions", "processedImage", "wasCompressed", "resizedSize", "targetSizeBytes", "finalSize", "processingTime", "metadata", "wasResized", "compressionRatio", "modelImage", "apparelImages", "modelImageResult", "apparelImageResults", "all", "map", "format", "type", "dateCreated", "lastModified", "undefined", "targetFormat", "fillStyle", "fillRect", "convertedImageUrl", "strength", "imageData", "getImageData", "data", "sharpenKernel", "newData", "Uint8ClampedArray", "y", "x", "c", "sum", "ky", "kx", "pixelIndex", "kernelIndex", "max", "min", "i", "putImageData", "radius", "ceil", "count", "dy", "dx", "nx", "ny", "histogram", "r", "Array", "fill", "g", "b", "getMinMax", "hist", "rMinMax", "gMinMax", "bMinMax", "operationsApplied", "originalMetadata", "push", "currentImage", "wasFormatConverted", "outputFormat", "finalWidth", "finalHeight", "wasSharpened", "enableSharpening", "hadNoiseReduction", "noiseReduction", "autoColorCorrection", "processedSize", "finalMetadata", "processingMetadata", "files", "onProgress", "results", "result", "console", "thumbnailUrl"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "760d94903e6c2ce880214ba007a42d78dc0ed20a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ymh1k6ljs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ymh1k6ljs();
cov_ymh1k6ljs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[0]++;
  cov_ymh1k6ljs().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_ymh1k6ljs().s[3]++;
_export(exports, {
  CompressionFailedError: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[1]++;
    cov_ymh1k6ljs().s[4]++;
    return _image.CompressionFailedError;
  },
  DEFAULT_PROCESSING_OPTIONS: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[2]++;
    cov_ymh1k6ljs().s[5]++;
    return DEFAULT_PROCESSING_OPTIONS;
  },
  FileTooLargeError: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[3]++;
    cov_ymh1k6ljs().s[6]++;
    return _image.FileTooLargeError;
  },
  FileTypeNotSupportedError: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[4]++;
    cov_ymh1k6ljs().s[7]++;
    return _image.FileTypeNotSupportedError;
  },
  ImageDimensionError: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[5]++;
    cov_ymh1k6ljs().s[8]++;
    return ImageDimensionError;
  },
  ImageFormat: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[6]++;
    cov_ymh1k6ljs().s[9]++;
    return ImageFormat;
  },
  ImageProcessingError: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[7]++;
    cov_ymh1k6ljs().s[10]++;
    return ImageProcessingError;
  },
  applyAutoColorCorrection: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[8]++;
    cov_ymh1k6ljs().s[11]++;
    return applyAutoColorCorrection;
  },
  applyNoiseReduction: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[9]++;
    cov_ymh1k6ljs().s[12]++;
    return applyNoiseReduction;
  },
  applySharpeningFilter: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[10]++;
    cov_ymh1k6ljs().s[13]++;
    return applySharpeningFilter;
  },
  compressBase64: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[11]++;
    cov_ymh1k6ljs().s[14]++;
    return _image.compressBase64;
  },
  convertImageFormat: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[12]++;
    cov_ymh1k6ljs().s[15]++;
    return convertImageFormat;
  },
  createImageThumbnail: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[13]++;
    cov_ymh1k6ljs().s[16]++;
    return createImageThumbnail;
  },
  extractImageMetadata: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[14]++;
    cov_ymh1k6ljs().s[17]++;
    return extractImageMetadata;
  },
  fileToBase64: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[15]++;
    cov_ymh1k6ljs().s[18]++;
    return _image.fileToBase64;
  },
  getBase64Size: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[16]++;
    cov_ymh1k6ljs().s[19]++;
    return getBase64Size;
  },
  getImageDimensions: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[17]++;
    cov_ymh1k6ljs().s[20]++;
    return getImageDimensions;
  },
  isImageFile: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[18]++;
    cov_ymh1k6ljs().s[21]++;
    return _image.isImageFile;
  },
  processImageAdvanced: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[19]++;
    cov_ymh1k6ljs().s[22]++;
    return processImageAdvanced;
  },
  processImageForTryon: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[20]++;
    cov_ymh1k6ljs().s[23]++;
    return processImageForTryon;
  },
  processImagesInBatch: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[21]++;
    cov_ymh1k6ljs().s[24]++;
    return processImagesInBatch;
  },
  processTryonImages: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[22]++;
    cov_ymh1k6ljs().s[25]++;
    return processTryonImages;
  },
  resizeImageTo1024x1536: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[23]++;
    cov_ymh1k6ljs().s[26]++;
    return resizeImageTo1024x1536;
  },
  validateImageDimensions: function () {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[24]++;
    cov_ymh1k6ljs().s[27]++;
    return validateImageDimensions;
  }
});
const _image =
/* istanbul ignore next */
(cov_ymh1k6ljs().s[28]++, require("../../utils/image"));
class ImageProcessingError extends Error {
  constructor(message, originalError) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[25]++;
    cov_ymh1k6ljs().s[29]++;
    super(message), this.originalError = originalError;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[30]++;
    this.name = 'ImageProcessingError';
  }
}
class ImageDimensionError extends Error {
  constructor(message, width, height) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[26]++;
    cov_ymh1k6ljs().s[31]++;
    super(message), this.width = width, this.height = height;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[32]++;
    this.name = 'ImageDimensionError';
  }
}
const DEFAULT_PROCESSING_OPTIONS =
/* istanbul ignore next */
(cov_ymh1k6ljs().s[33]++, {
  targetWidth: 1024,
  targetHeight: 1536,
  maxSizeKB: 1024,
  quality: 0.9,
  preserveAspectRatio: false
});
var ImageFormat =
/* istanbul ignore next */
(/*#__PURE__*/cov_ymh1k6ljs().s[34]++, function (ImageFormat) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[27]++;
  cov_ymh1k6ljs().s[35]++;
  ImageFormat["JPEG"] = "image/jpeg";
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[36]++;
  ImageFormat["PNG"] = "image/png";
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[37]++;
  ImageFormat["WEBP"] = "image/webp";
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[38]++;
  ImageFormat["GIF"] = "image/gif";
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[39]++;
  return ImageFormat;
}({}));
function getImageDimensions(imageUrl) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[28]++;
  cov_ymh1k6ljs().s[40]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[29]++;
    const img =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[41]++, new Image());
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[42]++;
    img.crossOrigin = "anonymous";
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[43]++;
    img.onload = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[30]++;
      cov_ymh1k6ljs().s[44]++;
      resolve({
        width: img.width,
        height: img.height
      });
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[45]++;
    img.onerror = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[31]++;
      cov_ymh1k6ljs().s[46]++;
      reject(new ImageProcessingError('Failed to load image for dimension analysis'));
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[47]++;
    img.src = imageUrl;
  });
}
function resizeImageTo1024x1536(imageUrl, options =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[32]++;
  const config =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[48]++, {
    ...DEFAULT_PROCESSING_OPTIONS,
    ...options
  });
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[49]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[33]++;
    const img =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[50]++, new Image());
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[51]++;
    img.crossOrigin = "anonymous";
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[52]++;
    img.onload = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[34]++;
      cov_ymh1k6ljs().s[53]++;
      try {
        const canvas =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[54]++, document.createElement('canvas'));
        const ctx =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[55]++, canvas.getContext('2d'));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[56]++;
        if (!ctx) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[1][0]++;
          cov_ymh1k6ljs().s[57]++;
          reject(new ImageProcessingError('Could not get canvas context'));
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[58]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_ymh1k6ljs().b[1][1]++;
        }
        let {
          targetWidth,
          targetHeight
        } =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[59]++, config);
        // Calculate dimensions preserving aspect ratio if requested
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[60]++;
        if (config.preserveAspectRatio) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[2][0]++;
          const aspectRatio =
          /* istanbul ignore next */
          (cov_ymh1k6ljs().s[61]++, img.width / img.height);
          const targetAspectRatio =
          /* istanbul ignore next */
          (cov_ymh1k6ljs().s[62]++, targetWidth / targetHeight);
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[63]++;
          if (aspectRatio > targetAspectRatio) {
            /* istanbul ignore next */
            cov_ymh1k6ljs().b[3][0]++;
            cov_ymh1k6ljs().s[64]++;
            // Image is wider, fit to width
            targetHeight = Math.round(targetWidth / aspectRatio);
          } else {
            /* istanbul ignore next */
            cov_ymh1k6ljs().b[3][1]++;
            cov_ymh1k6ljs().s[65]++;
            // Image is taller, fit to height
            targetWidth = Math.round(targetHeight * aspectRatio);
          }
        } else
        /* istanbul ignore next */
        {
          cov_ymh1k6ljs().b[2][1]++;
        }
        // Set canvas dimensions
        cov_ymh1k6ljs().s[66]++;
        canvas.width = targetWidth;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[67]++;
        canvas.height = targetHeight;
        // Apply high-quality scaling
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[68]++;
        ctx.imageSmoothingEnabled = true;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[69]++;
        ctx.imageSmoothingQuality = 'high';
        // Draw the image resized to fit the canvas
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[70]++;
        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
        // Convert to data URL with specified quality
        const resizedImageUrl =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[71]++, canvas.toDataURL('image/jpeg', config.quality));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[72]++;
        resolve(resizedImageUrl);
      } catch (error) {
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[73]++;
        reject(new ImageProcessingError('Failed to resize image', error instanceof Error ?
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[4][0]++, error) :
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[4][1]++, new Error(String(error)))));
      }
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[74]++;
    img.onerror = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[35]++;
      cov_ymh1k6ljs().s[75]++;
      reject(new ImageProcessingError('Failed to load image for resizing'));
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[76]++;
    img.src = imageUrl;
  });
}
async function validateImageDimensions(imageUrl, minWidth =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[5][0]++, 512), minHeight =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[6][0]++, 512), maxWidth =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[7][0]++, 4096), maxHeight =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[8][0]++, 4096)) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[36]++;
  const dimensions =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[77]++, await getImageDimensions(imageUrl));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[78]++;
  if (
  /* istanbul ignore next */
  (cov_ymh1k6ljs().b[10][0]++, dimensions.width < minWidth) ||
  /* istanbul ignore next */
  (cov_ymh1k6ljs().b[10][1]++, dimensions.height < minHeight)) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().b[9][0]++;
    cov_ymh1k6ljs().s[79]++;
    throw new ImageDimensionError(`Image dimensions too small. Minimum: ${minWidth}x${minHeight}, got: ${dimensions.width}x${dimensions.height}`, dimensions.width, dimensions.height);
  } else
  /* istanbul ignore next */
  {
    cov_ymh1k6ljs().b[9][1]++;
  }
  cov_ymh1k6ljs().s[80]++;
  if (
  /* istanbul ignore next */
  (cov_ymh1k6ljs().b[12][0]++, dimensions.width > maxWidth) ||
  /* istanbul ignore next */
  (cov_ymh1k6ljs().b[12][1]++, dimensions.height > maxHeight)) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().b[11][0]++;
    cov_ymh1k6ljs().s[81]++;
    throw new ImageDimensionError(`Image dimensions too large. Maximum: ${maxWidth}x${maxHeight}, got: ${dimensions.width}x${dimensions.height}`, dimensions.width, dimensions.height);
  } else
  /* istanbul ignore next */
  {
    cov_ymh1k6ljs().b[11][1]++;
  }
}
function getBase64Size(base64) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[37]++;
  const base64Data =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[82]++, base64.split(',')[1]);
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[83]++;
  return atob(base64Data).length;
}
async function processImageForTryon(file, options =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[13][0]++, {})) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[38]++;
  const startTime =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[84]++, Date.now());
  const config =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[85]++, {
    ...DEFAULT_PROCESSING_OPTIONS,
    ...options
  });
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[86]++;
  try {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[87]++;
    // Step 1: Validate file type and convert to base64
    if (!(0, _image.isImageFile)(file)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[14][0]++;
      cov_ymh1k6ljs().s[88]++;
      throw new _image.FileTypeNotSupportedError('Only image files are allowed');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[14][1]++;
    }
    const originalBase64 =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[89]++, await (0, _image.fileToBase64)(file));
    const originalSize =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[90]++, file.size);
    const originalDimensions =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[91]++, await getImageDimensions(originalBase64));
    // Step 2: Validate dimensions
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[92]++;
    await validateImageDimensions(originalBase64);
    // Step 3: Resize image to target dimensions
    const resizedImage =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[93]++, await resizeImageTo1024x1536(originalBase64, config));
    const finalDimensions =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[94]++, await getImageDimensions(resizedImage));
    // Step 4: Compress if needed
    let processedImage =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[95]++, resizedImage);
    let wasCompressed =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[96]++, false);
    const resizedSize =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[97]++, getBase64Size(resizedImage));
    const targetSizeBytes =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[98]++, config.maxSizeKB * 1024);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[99]++;
    if (resizedSize > targetSizeBytes) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[15][0]++;
      cov_ymh1k6ljs().s[100]++;
      processedImage = await (0, _image.compressBase64)(resizedImage, config.maxSizeKB);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[101]++;
      wasCompressed = true;
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[15][1]++;
    }
    const finalSize =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[102]++, getBase64Size(processedImage));
    const processingTime =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[103]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[104]++;
    return {
      processedImage,
      originalDimensions,
      finalDimensions,
      originalSize,
      finalSize,
      metadata: {
        wasResized:
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[16][0]++, originalDimensions.width !== finalDimensions.width) ||
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[16][1]++, originalDimensions.height !== finalDimensions.height),
        wasCompressed,
        compressionRatio: originalSize / finalSize,
        processingTime
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[18][0]++, error instanceof _image.FileTypeNotSupportedError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[18][1]++, error instanceof _image.FileTooLargeError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[18][2]++, error instanceof _image.CompressionFailedError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[18][3]++, error instanceof ImageDimensionError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[18][4]++, error instanceof ImageProcessingError)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[17][0]++;
      cov_ymh1k6ljs().s[106]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[17][1]++;
    }
    cov_ymh1k6ljs().s[107]++;
    throw new ImageProcessingError('Unexpected error during image processing', error instanceof Error ?
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[19][0]++, error) :
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[19][1]++, new Error(String(error))));
  }
}
async function processTryonImages(modelImage, apparelImages, options =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[20][0]++, {})) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[39]++;
  // Process model image
  const modelImageResult =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[108]++, await processImageForTryon(modelImage, options));
  // Process all apparel images in parallel
  const apparelImageResults =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[109]++, await Promise.all(apparelImages.map(file => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[40]++;
    cov_ymh1k6ljs().s[110]++;
    return processImageForTryon(file, options);
  })));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[111]++;
  return {
    modelImageResult,
    apparelImageResults
  };
}
async function extractImageMetadata(file) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[41]++;
  const imageUrl =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[112]++, await (0, _image.fileToBase64)(file));
  const dimensions =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[113]++, await getImageDimensions(imageUrl));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[114]++;
  return {
    format: file.type,
    dimensions,
    size: file.size,
    dateCreated: file.lastModified ?
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[21][0]++, new Date(file.lastModified)) :
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[21][1]++, undefined)
  };
}
async function convertImageFormat(imageUrl, targetFormat, quality =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[22][0]++, 0.9)) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[42]++;
  cov_ymh1k6ljs().s[115]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[43]++;
    const img =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[116]++, new Image());
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[117]++;
    img.crossOrigin = "anonymous";
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[118]++;
    img.onload = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[44]++;
      cov_ymh1k6ljs().s[119]++;
      try {
        const canvas =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[120]++, document.createElement('canvas'));
        const ctx =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[121]++, canvas.getContext('2d'));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[122]++;
        if (!ctx) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[23][0]++;
          cov_ymh1k6ljs().s[123]++;
          reject(new ImageProcessingError('Could not get canvas context'));
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[124]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_ymh1k6ljs().b[23][1]++;
        }
        cov_ymh1k6ljs().s[125]++;
        canvas.width = img.width;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[126]++;
        canvas.height = img.height;
        // For PNG with transparency, fill with white background for JPEG
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[127]++;
        if (targetFormat === "image/jpeg") {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[24][0]++;
          cov_ymh1k6ljs().s[128]++;
          ctx.fillStyle = 'white';
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[129]++;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        } else
        /* istanbul ignore next */
        {
          cov_ymh1k6ljs().b[24][1]++;
        }
        cov_ymh1k6ljs().s[130]++;
        ctx.drawImage(img, 0, 0);
        const convertedImageUrl =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[131]++, canvas.toDataURL(targetFormat, quality));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[132]++;
        resolve(convertedImageUrl);
      } catch (error) {
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[133]++;
        reject(new ImageProcessingError('Failed to convert image format', error instanceof Error ?
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[25][0]++, error) :
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[25][1]++, new Error(String(error)))));
      }
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[134]++;
    img.onerror = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[45]++;
      cov_ymh1k6ljs().s[135]++;
      reject(new ImageProcessingError('Failed to load image for format conversion'));
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[136]++;
    img.src = imageUrl;
  });
}
function applySharpeningFilter(canvas, strength =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[26][0]++, 0.5)) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[46]++;
  const ctx =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[137]++, canvas.getContext('2d'));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[138]++;
  if (!ctx) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().b[27][0]++;
    cov_ymh1k6ljs().s[139]++;
    throw new ImageProcessingError('Could not get canvas context');
  } else
  /* istanbul ignore next */
  {
    cov_ymh1k6ljs().b[27][1]++;
  }
  const imageData =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[140]++, ctx.getImageData(0, 0, canvas.width, canvas.height));
  const data =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[141]++, imageData.data);
  const width =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[142]++, canvas.width);
  const height =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[143]++, canvas.height);
  // Simple unsharp mask implementation
  const sharpenKernel =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[144]++, [0, -strength, 0, -strength, 1 + 4 * strength, -strength, 0, -strength, 0]);
  const newData =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[145]++, new Uint8ClampedArray(data));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[146]++;
  for (let y =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[147]++, 1); y < height - 1; y++) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[148]++;
    for (let x =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[149]++, 1); x < width - 1; x++) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[150]++;
      for (let c =
      /* istanbul ignore next */
      (cov_ymh1k6ljs().s[151]++, 0); c < 3; c++) {
        let sum =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[152]++, 0);
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[153]++;
        for (let ky =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[154]++, -1); ky <= 1; ky++) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[155]++;
          for (let kx =
          /* istanbul ignore next */
          (cov_ymh1k6ljs().s[156]++, -1); kx <= 1; kx++) {
            const pixelIndex =
            /* istanbul ignore next */
            (cov_ymh1k6ljs().s[157]++, ((y + ky) * width + (x + kx)) * 4 + c);
            const kernelIndex =
            /* istanbul ignore next */
            (cov_ymh1k6ljs().s[158]++, (ky + 1) * 3 + (kx + 1));
            /* istanbul ignore next */
            cov_ymh1k6ljs().s[159]++;
            sum += data[pixelIndex] * sharpenKernel[kernelIndex];
          }
        }
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[160]++;
        newData[(y * width + x) * 4 + c] = Math.max(0, Math.min(255, sum));
      }
    }
  }
  // Copy the new data back
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[161]++;
  for (let i =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[162]++, 0); i < data.length; i++) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[163]++;
    data[i] = newData[i];
  }
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[164]++;
  ctx.putImageData(imageData, 0, 0);
}
function applyNoiseReduction(canvas, strength =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[28][0]++, 0.3)) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[47]++;
  const ctx =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[165]++, canvas.getContext('2d'));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[166]++;
  if (!ctx) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().b[29][0]++;
    cov_ymh1k6ljs().s[167]++;
    throw new ImageProcessingError('Could not get canvas context');
  } else
  /* istanbul ignore next */
  {
    cov_ymh1k6ljs().b[29][1]++;
  }
  const imageData =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[168]++, ctx.getImageData(0, 0, canvas.width, canvas.height));
  const data =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[169]++, imageData.data);
  const width =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[170]++, canvas.width);
  const height =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[171]++, canvas.height);
  // Simple blur for noise reduction
  const radius =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[172]++, Math.ceil(strength * 3));
  const newData =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[173]++, new Uint8ClampedArray(data));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[174]++;
  for (let y =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[175]++, 0); y < height; y++) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[176]++;
    for (let x =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[177]++, 0); x < width; x++) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[178]++;
      for (let c =
      /* istanbul ignore next */
      (cov_ymh1k6ljs().s[179]++, 0); c < 3; c++) {
        let sum =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[180]++, 0);
        let count =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[181]++, 0);
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[182]++;
        for (let dy =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[183]++, -radius); dy <= radius; dy++) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[184]++;
          for (let dx =
          /* istanbul ignore next */
          (cov_ymh1k6ljs().s[185]++, -radius); dx <= radius; dx++) {
            const nx =
            /* istanbul ignore next */
            (cov_ymh1k6ljs().s[186]++, x + dx);
            const ny =
            /* istanbul ignore next */
            (cov_ymh1k6ljs().s[187]++, y + dy);
            /* istanbul ignore next */
            cov_ymh1k6ljs().s[188]++;
            if (
            /* istanbul ignore next */
            (cov_ymh1k6ljs().b[31][0]++, nx >= 0) &&
            /* istanbul ignore next */
            (cov_ymh1k6ljs().b[31][1]++, nx < width) &&
            /* istanbul ignore next */
            (cov_ymh1k6ljs().b[31][2]++, ny >= 0) &&
            /* istanbul ignore next */
            (cov_ymh1k6ljs().b[31][3]++, ny < height)) {
              /* istanbul ignore next */
              cov_ymh1k6ljs().b[30][0]++;
              cov_ymh1k6ljs().s[189]++;
              sum += data[(ny * width + nx) * 4 + c];
              /* istanbul ignore next */
              cov_ymh1k6ljs().s[190]++;
              count++;
            } else
            /* istanbul ignore next */
            {
              cov_ymh1k6ljs().b[30][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[191]++;
        newData[(y * width + x) * 4 + c] = sum / count;
      }
    }
  }
  // Copy the new data back
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[192]++;
  for (let i =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[193]++, 0); i < data.length; i += 4) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[194]++;
    data[i] = newData[i]; // R
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[195]++;
    data[i + 1] = newData[i + 1]; // G
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[196]++;
    data[i + 2] = newData[i + 2]; // B
    // Keep original alpha
  }
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[197]++;
  ctx.putImageData(imageData, 0, 0);
}
function applyAutoColorCorrection(canvas) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[48]++;
  const ctx =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[198]++, canvas.getContext('2d'));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[199]++;
  if (!ctx) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().b[32][0]++;
    cov_ymh1k6ljs().s[200]++;
    throw new ImageProcessingError('Could not get canvas context');
  } else
  /* istanbul ignore next */
  {
    cov_ymh1k6ljs().b[32][1]++;
  }
  const imageData =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[201]++, ctx.getImageData(0, 0, canvas.width, canvas.height));
  const data =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[202]++, imageData.data);
  // Calculate histogram
  const histogram =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[203]++, {
    r: new Array(256).fill(0),
    g: new Array(256).fill(0),
    b: new Array(256).fill(0)
  });
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[204]++;
  for (let i =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[205]++, 0); i < data.length; i += 4) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[206]++;
    histogram.r[data[i]]++;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[207]++;
    histogram.g[data[i + 1]]++;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[208]++;
    histogram.b[data[i + 2]]++;
  }
  // Find min/max values for each channel
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[209]++;
  const getMinMax = hist => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[49]++;
    let min =
      /* istanbul ignore next */
      (cov_ymh1k6ljs().s[210]++, 0),
      max =
      /* istanbul ignore next */
      (cov_ymh1k6ljs().s[211]++, 255);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[212]++;
    for (let i =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[213]++, 0); i < 256; i++) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[214]++;
      if (hist[i] > 0) {
        /* istanbul ignore next */
        cov_ymh1k6ljs().b[33][0]++;
        cov_ymh1k6ljs().s[215]++;
        min = i;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[216]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_ymh1k6ljs().b[33][1]++;
      }
    }
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[217]++;
    for (let i =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[218]++, 255); i >= 0; i--) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[219]++;
      if (hist[i] > 0) {
        /* istanbul ignore next */
        cov_ymh1k6ljs().b[34][0]++;
        cov_ymh1k6ljs().s[220]++;
        max = i;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[221]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_ymh1k6ljs().b[34][1]++;
      }
    }
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[222]++;
    return {
      min,
      max
    };
  };
  const rMinMax =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[223]++, getMinMax(histogram.r));
  const gMinMax =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[224]++, getMinMax(histogram.g));
  const bMinMax =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[225]++, getMinMax(histogram.b));
  // Apply histogram stretching
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[226]++;
  for (let i =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[227]++, 0); i < data.length; i += 4) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[228]++;
    data[i] = Math.max(0, Math.min(255, (data[i] - rMinMax.min) / (rMinMax.max - rMinMax.min) * 255));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[229]++;
    data[i + 1] = Math.max(0, Math.min(255, (data[i + 1] - gMinMax.min) / (gMinMax.max - gMinMax.min) * 255));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[230]++;
    data[i + 2] = Math.max(0, Math.min(255, (data[i + 2] - bMinMax.min) / (bMinMax.max - bMinMax.min) * 255));
  }
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[231]++;
  ctx.putImageData(imageData, 0, 0);
}
async function processImageAdvanced(file, options =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[35][0]++, {})) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[50]++;
  const startTime =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[232]++, Date.now());
  const config =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[233]++, {
    ...DEFAULT_PROCESSING_OPTIONS,
    ...options
  });
  const operationsApplied =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[234]++, []);
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[235]++;
  try {
    // Step 1: Extract original metadata
    const originalMetadata =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[236]++, await extractImageMetadata(file));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[237]++;
    operationsApplied.push('metadata-extraction');
    // Step 2: Validate file type and convert to base64
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[238]++;
    if (!(0, _image.isImageFile)(file)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[36][0]++;
      cov_ymh1k6ljs().s[239]++;
      throw new _image.FileTypeNotSupportedError('Only image files are allowed');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[36][1]++;
    }
    let currentImage =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[240]++, await (0, _image.fileToBase64)(file));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[241]++;
    operationsApplied.push('base64-conversion');
    // Step 3: Validate dimensions
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[242]++;
    await validateImageDimensions(currentImage);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[243]++;
    operationsApplied.push('dimension-validation');
    // Step 4: Format conversion (if needed)
    let wasFormatConverted =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[244]++, false);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[245]++;
    if (
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[38][0]++, options.outputFormat) &&
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[38][1]++, options.outputFormat !== file.type)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[37][0]++;
      cov_ymh1k6ljs().s[246]++;
      currentImage = await convertImageFormat(currentImage, options.outputFormat, config.quality);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[247]++;
      wasFormatConverted = true;
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[248]++;
      operationsApplied.push('format-conversion');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[37][1]++;
    }
    // Step 5: Create canvas for advanced processing
    const canvas =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[249]++, document.createElement('canvas'));
    const ctx =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[250]++, canvas.getContext('2d'));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[251]++;
    if (!ctx) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[39][0]++;
      cov_ymh1k6ljs().s[252]++;
      throw new ImageProcessingError('Could not get canvas context');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[39][1]++;
    }
    // Load image onto canvas
    const img =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[253]++, new Image());
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[254]++;
    img.crossOrigin = "anonymous";
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[255]++;
    await new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[51]++;
      cov_ymh1k6ljs().s[256]++;
      img.onload = () => {
        /* istanbul ignore next */
        cov_ymh1k6ljs().f[52]++;
        cov_ymh1k6ljs().s[257]++;
        return resolve();
      };
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[258]++;
      img.onerror = () => {
        /* istanbul ignore next */
        cov_ymh1k6ljs().f[53]++;
        cov_ymh1k6ljs().s[259]++;
        return reject(new ImageProcessingError('Failed to load image'));
      };
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[260]++;
      img.src = currentImage;
    });
    // Set canvas dimensions based on resize requirements
    const finalWidth =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[261]++,
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[40][0]++, config.targetWidth) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[40][1]++, img.width));
    const finalHeight =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[262]++,
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[41][0]++, config.targetHeight) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[41][1]++, img.height));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[263]++;
    canvas.width = finalWidth;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[264]++;
    canvas.height = finalHeight;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[265]++;
    ctx.imageSmoothingEnabled = true;
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[266]++;
    ctx.imageSmoothingQuality = 'high';
    // Draw resized image
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[267]++;
    ctx.drawImage(img, 0, 0, finalWidth, finalHeight);
    const wasResized =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[268]++,
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[42][0]++, img.width !== finalWidth) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[42][1]++, img.height !== finalHeight));
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[269]++;
    if (wasResized) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[43][0]++;
      cov_ymh1k6ljs().s[270]++;
      operationsApplied.push('resize');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[43][1]++;
    }
    // Step 6: Apply advanced processing
    let wasSharpened =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[271]++, false);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[272]++;
    if (
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[45][0]++, options.enableSharpening) &&
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[45][1]++, wasResized)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[44][0]++;
      cov_ymh1k6ljs().s[273]++;
      applySharpeningFilter(canvas, 0.3);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[274]++;
      wasSharpened = true;
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[275]++;
      operationsApplied.push('sharpening');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[44][1]++;
    }
    let hadNoiseReduction =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[276]++, false);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[277]++;
    if (
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[47][0]++, options.noiseReduction) &&
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[47][1]++, options.noiseReduction > 0)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[46][0]++;
      cov_ymh1k6ljs().s[278]++;
      applyNoiseReduction(canvas, options.noiseReduction);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[279]++;
      hadNoiseReduction = true;
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[280]++;
      operationsApplied.push('noise-reduction');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[46][1]++;
    }
    cov_ymh1k6ljs().s[281]++;
    if (options.autoColorCorrection) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[48][0]++;
      cov_ymh1k6ljs().s[282]++;
      applyAutoColorCorrection(canvas);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[283]++;
      operationsApplied.push('color-correction');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[48][1]++;
    }
    // Step 7: Convert back to data URL
    const outputFormat =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[284]++,
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[49][0]++, options.outputFormat) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[49][1]++, "image/jpeg"));
    let processedImage =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[285]++, canvas.toDataURL(outputFormat, config.quality));
    // Step 8: Compress if needed
    let wasCompressed =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[286]++, false);
    const processedSize =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[287]++, getBase64Size(processedImage));
    const targetSizeBytes =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[288]++, config.maxSizeKB * 1024);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[289]++;
    if (processedSize > targetSizeBytes) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[50][0]++;
      cov_ymh1k6ljs().s[290]++;
      processedImage = await (0, _image.compressBase64)(processedImage, config.maxSizeKB);
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[291]++;
      wasCompressed = true;
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[292]++;
      operationsApplied.push('compression');
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[50][1]++;
    }
    // Step 9: Generate final metadata
    const finalDimensions =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[293]++, await getImageDimensions(processedImage));
    const finalSize =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[294]++, getBase64Size(processedImage));
    const processingTime =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[295]++, Date.now() - startTime);
    const finalMetadata =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[296]++, {
      format: outputFormat,
      dimensions: finalDimensions,
      size: finalSize
    });
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[297]++;
    return {
      processedImage,
      originalMetadata,
      finalMetadata,
      processingMetadata: {
        wasResized,
        wasCompressed,
        wasFormatConverted,
        wasSharpened,
        hadNoiseReduction,
        compressionRatio: originalMetadata.size / finalSize,
        processingTime,
        operationsApplied
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[298]++;
    if (
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[52][0]++, error instanceof _image.FileTypeNotSupportedError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[52][1]++, error instanceof _image.FileTooLargeError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[52][2]++, error instanceof _image.CompressionFailedError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[52][3]++, error instanceof ImageDimensionError) ||
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[52][4]++, error instanceof ImageProcessingError)) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().b[51][0]++;
      cov_ymh1k6ljs().s[299]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_ymh1k6ljs().b[51][1]++;
    }
    cov_ymh1k6ljs().s[300]++;
    throw new ImageProcessingError('Unexpected error during advanced image processing', error instanceof Error ?
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[53][0]++, error) :
    /* istanbul ignore next */
    (cov_ymh1k6ljs().b[53][1]++, new Error(String(error))));
  }
}
async function processImagesInBatch(files, options =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[54][0]++, {}), onProgress) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[54]++;
  const results =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[301]++, []);
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[302]++;
  for (let i =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[303]++, 0); i < files.length; i++) {
    const file =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[304]++, files[i]);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[305]++;
    onProgress?.(i, files.length, file.name);
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[306]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_ymh1k6ljs().s[307]++, await processImageAdvanced(file, options));
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[308]++;
      results.push(result);
    } catch (error) {
      /* istanbul ignore next */
      cov_ymh1k6ljs().s[309]++;
      // For batch processing, we might want to continue with other files
      console.error(`Failed to process ${file.name}:`, error);
      // You could push a failed result or skip, depending on requirements
    }
  }
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[310]++;
  onProgress?.(files.length, files.length, 'Complete');
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[311]++;
  return results;
}
async function createImageThumbnail(file, size =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[55][0]++, 150), quality =
/* istanbul ignore next */
(cov_ymh1k6ljs().b[56][0]++, 0.8)) {
  /* istanbul ignore next */
  cov_ymh1k6ljs().f[55]++;
  const imageUrl =
  /* istanbul ignore next */
  (cov_ymh1k6ljs().s[312]++, await (0, _image.fileToBase64)(file));
  /* istanbul ignore next */
  cov_ymh1k6ljs().s[313]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_ymh1k6ljs().f[56]++;
    const img =
    /* istanbul ignore next */
    (cov_ymh1k6ljs().s[314]++, new Image());
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[315]++;
    img.crossOrigin = "anonymous";
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[316]++;
    img.onload = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[57]++;
      cov_ymh1k6ljs().s[317]++;
      try {
        const canvas =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[318]++, document.createElement('canvas'));
        const ctx =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[319]++, canvas.getContext('2d'));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[320]++;
        if (!ctx) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[57][0]++;
          cov_ymh1k6ljs().s[321]++;
          reject(new ImageProcessingError('Could not get canvas context'));
          /* istanbul ignore next */
          cov_ymh1k6ljs().s[322]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_ymh1k6ljs().b[57][1]++;
        }
        // Calculate dimensions to maintain aspect ratio
        const aspectRatio =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[323]++, img.width / img.height);
        let width =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[324]++, size);
        let height =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[325]++, size);
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[326]++;
        if (aspectRatio > 1) {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[58][0]++;
          cov_ymh1k6ljs().s[327]++;
          height = size / aspectRatio;
        } else {
          /* istanbul ignore next */
          cov_ymh1k6ljs().b[58][1]++;
          cov_ymh1k6ljs().s[328]++;
          width = size * aspectRatio;
        }
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[329]++;
        canvas.width = width;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[330]++;
        canvas.height = height;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[331]++;
        ctx.imageSmoothingEnabled = true;
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[332]++;
        ctx.imageSmoothingQuality = 'high';
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[333]++;
        ctx.drawImage(img, 0, 0, width, height);
        const thumbnailUrl =
        /* istanbul ignore next */
        (cov_ymh1k6ljs().s[334]++, canvas.toDataURL('image/jpeg', quality));
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[335]++;
        resolve(thumbnailUrl);
      } catch (error) {
        /* istanbul ignore next */
        cov_ymh1k6ljs().s[336]++;
        reject(new ImageProcessingError('Failed to create thumbnail', error instanceof Error ?
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[59][0]++, error) :
        /* istanbul ignore next */
        (cov_ymh1k6ljs().b[59][1]++, new Error(String(error)))));
      }
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[337]++;
    img.onerror = () => {
      /* istanbul ignore next */
      cov_ymh1k6ljs().f[58]++;
      cov_ymh1k6ljs().s[338]++;
      reject(new ImageProcessingError('Failed to load image for thumbnail creation'));
    };
    /* istanbul ignore next */
    cov_ymh1k6ljs().s[339]++;
    img.src = imageUrl;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,