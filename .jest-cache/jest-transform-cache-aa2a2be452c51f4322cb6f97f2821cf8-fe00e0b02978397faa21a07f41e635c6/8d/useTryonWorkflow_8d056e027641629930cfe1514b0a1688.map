{"version":3,"names":["cov_3vmvqaeo1","actualCoverage","s","WorkflowState","f","useTryonWorkflow","DEFAULT_CONFIG","timeoutMs","compressionLimitKB","autoRetry","maxRetries","debug","process","env","NODE_ENV","imageProcessing","targetWidth","targetHeight","quality","config","b","showToast","finalConfig","tryonMutation","_businesslayer","useTryonMutation","processBasic","useImageProcessing","abortControllerRef","_react","useRef","state","setState","useState","workflowState","isCapturing","showPolaroid","generatedImage","hasError","userImageFile","apparelImageFile","leftCardImage","rightCardImage","progress","error","retryCount","lastOperationTime","log","useCallback","args","console","handleError","type","workflowError","_image","CompressionFailedError","message","originalError","retryable","Error","name","includes","statusMatch","match","status","parseInt","undefined","_errorToMessage","errorToMessage","String","prev","updateProgress","validateFiles","errors","push","isValid","length","canGenerate","createFileFromImageUrl","imageUrl","filename","response","fetch","blob","File","resizeImage","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","resizedImageUrl","toDataURL","onerror","src","handleUserFileUpload","file","size","handleApparelFileUpload","handleLeftCardImageUpload","handleRightCardImageUpload","startGeneration","validation","Date","now","current","AbortController","timeoutId","setTimeout","abort","modelB64","apparelB64","all","fileToBase64","then","b64","compressBase64","method","headers","body","JSON","stringify","modelImage","apparelImages","signal","clearTimeout","ok","errorText","text","img_generated","json","retryGeneration","cancelGeneration","resetWorkflow","closePolaroid","clearError","useEffect","delay","Math","min","pow"],"sources":["/Users/willstreeter/WebstormProjects/vibe-coding/those-people/The-Sus-Fit-gp/src/hooks/useTryonWorkflow.ts"],"sourcesContent":["'use client';\n\n// Try-on Workflow Coordination Hook\n// Bridge layer hook that coordinates the complete try-on generation process\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  useTryonMutation,\n  useImageProcessing,\n  processImageForTryon,\n  resizeImageTo1024x1536,\n  type TryonMutationVariables,\n  type TryonMutationResponse\n} from '../business-layer';\nimport { fileToBase64, compressBase64, CompressionFailedError } from '../utils/image';\nimport { errorToMessage } from '../lib/errorToMessage';\n\n/**\n * Workflow state enum for better type safety\n */\nexport enum WorkflowState {\n  IDLE = 'idle',\n  UPLOADING = 'uploading',\n  PROCESSING = 'processing',\n  GENERATING = 'generating',\n  COMPLETE = 'complete',\n  ERROR = 'error'\n}\n\n/**\n * Error types that can occur during workflow\n */\nexport type WorkflowError = {\n  type: 'validation' | 'upload' | 'processing' | 'generation' | 'timeout' | 'compression' | 'unknown';\n  message: string;\n  originalError?: Error;\n  retryable: boolean;\n};\n\n/**\n * Workflow configuration options\n */\nexport interface WorkflowConfig {\n  /** Timeout for generation in milliseconds */\n  timeoutMs?: number;\n  /** Base64 compression limit in KB */\n  compressionLimitKB?: number;\n  /** Auto-retry failed operations */\n  autoRetry?: boolean;\n  /** Number of retry attempts */\n  maxRetries?: number;\n  /** Enable debug logging */\n  debug?: boolean;\n  /** Image processing options */\n  imageProcessing?: {\n    targetWidth?: number;\n    targetHeight?: number;\n    quality?: number;\n  };\n}\n\n/**\n * Workflow state interface (backward compatible with existing page state)\n */\nexport interface TryonWorkflowState {\n  // Core workflow state\n  workflowState: WorkflowState;\n  \n  // Backward compatible state (maintains existing page.tsx structure)\n  isCapturing: boolean;\n  showPolaroid: boolean;\n  generatedImage: string | null;\n  hasError: boolean;\n  \n  // File management\n  userImageFile: File | null;\n  apparelImageFile: File | null;\n  leftCardImage: string | null;\n  rightCardImage: string | null;\n  \n  // Progress and error tracking\n  progress: number;\n  error: WorkflowError | null;\n  \n  // Operation tracking\n  retryCount: number;\n  lastOperationTime: number | null;\n}\n\n/**\n * Workflow actions interface\n */\nexport interface TryonWorkflowActions {\n  // File upload handlers (backward compatible)\n  handleUserFileUpload: (file: File) => void;\n  handleApparelFileUpload: (file: File) => void;\n  handleLeftCardImageUpload: (imageUrl: string) => Promise<void>;\n  handleRightCardImageUpload: (imageUrl: string) => Promise<void>;\n  \n  // Main workflow actions\n  startGeneration: () => Promise<void>;\n  retryGeneration: () => Promise<void>;\n  cancelGeneration: () => void;\n  \n  // State management\n  resetWorkflow: () => void;\n  closePolaroid: () => void;\n  clearError: () => void;\n  \n  // Validation\n  validateFiles: () => { isValid: boolean; errors: string[] };\n  canGenerate: () => boolean;\n}\n\n/**\n * Toast notification function type\n */\ntype ToastFunction = (message: string, type?: 'success' | 'error' | 'warning' | 'info') => void;\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<WorkflowConfig> = {\n  timeoutMs: 60000, // 60 seconds\n  compressionLimitKB: 2048, // 2MB\n  autoRetry: false,\n  maxRetries: 3,\n  debug: process.env.NODE_ENV === 'development',\n  imageProcessing: {\n    targetWidth: 1024,\n    targetHeight: 1536,\n    quality: 0.9\n  }\n};\n\n/**\n * Main try-on workflow hook\n */\nexport function useTryonWorkflow(\n  config: WorkflowConfig = {},\n  showToast?: ToastFunction\n): TryonWorkflowState & TryonWorkflowActions {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // Business layer hooks\n  const tryonMutation = useTryonMutation();\n  const { processBasic } = useImageProcessing();\n  \n  // Abort controller for cancellation\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Core state\n  const [state, setState] = useState<TryonWorkflowState>({\n    workflowState: WorkflowState.IDLE,\n    isCapturing: false,\n    showPolaroid: false,\n    generatedImage: null,\n    hasError: false,\n    userImageFile: null,\n    apparelImageFile: null,\n    leftCardImage: null,\n    rightCardImage: null,\n    progress: 0,\n    error: null,\n    retryCount: 0,\n    lastOperationTime: null\n  });\n\n  // Debug logging\n  const log = useCallback((...args: any[]) => {\n    if (finalConfig.debug) {\n      console.log('[useTryonWorkflow]', ...args);\n    }\n  }, [finalConfig.debug]);\n\n  // Error handler\n  const handleError = useCallback((error: unknown, type: WorkflowError['type'] = 'unknown'): WorkflowError => {\n    let workflowError: WorkflowError;\n    \n    if (error instanceof CompressionFailedError) {\n      workflowError = {\n        type: 'compression',\n        message: 'Image is too large even after compression. Please upload a smaller file.',\n        originalError: error,\n        retryable: false\n      };\n    } else if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('AbortError'))) {\n      workflowError = {\n        type: 'timeout',\n        message: `Request timed out after ${finalConfig.timeoutMs}ms`,\n        originalError: error,\n        retryable: true\n      };\n    } else if (error instanceof Error && error.message.includes('API request failed:')) {\n      const statusMatch = error.message.match(/API request failed: (\\d+)/);\n      const status = statusMatch ? parseInt(statusMatch[1]) : undefined;\n      workflowError = {\n        type: 'generation',\n        message: errorToMessage(status),\n        originalError: error,\n        retryable: status ? status >= 500 : true\n      };\n    } else {\n      workflowError = {\n        type,\n        message: error instanceof Error ? error.message : String(error),\n        originalError: error instanceof Error ? error : undefined,\n        retryable: type !== 'validation'\n      };\n    }\n\n    log('Error occurred:', workflowError);\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.ERROR,\n      hasError: true,\n      isCapturing: false,\n      error: workflowError,\n      progress: 0\n    }));\n\n    // Show toast notification\n    if (showToast) {\n      showToast(workflowError.message, 'error');\n    }\n\n    return workflowError;\n  }, [finalConfig.timeoutMs, log, showToast]);\n\n  // Update progress\n  const updateProgress = useCallback((progress: number) => {\n    setState(prev => ({ ...prev, progress }));\n  }, []);\n\n  // Validation helper\n  const validateFiles = useCallback((): { isValid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n    \n    if (!state.userImageFile && !state.leftCardImage) {\n      errors.push('Please upload model photo');\n    }\n    \n    if (!state.apparelImageFile && !state.rightCardImage) {\n      errors.push('Please upload apparel photo');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }, [state.userImageFile, state.apparelImageFile, state.leftCardImage, state.rightCardImage]);\n\n  // Check if generation can start\n  const canGenerate = useCallback((): boolean => {\n    const { isValid } = validateFiles();\n    return isValid && state.workflowState !== WorkflowState.GENERATING;\n  }, [validateFiles, state.workflowState]);\n\n  // Utility function to resize and create file from URL\n  const createFileFromImageUrl = useCallback(async (imageUrl: string, filename: string): Promise<File> => {\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      return new File([blob], filename, { type: 'image/jpeg' });\n    } catch (error) {\n      log('Failed to create file from URL:', error);\n      throw new Error('Failed to create file from image URL');\n    }\n  }, [log]);\n\n  // Resize image utility\n  const resizeImage = useCallback(async (imageUrl: string): Promise<string> => {\n    const { targetWidth, targetHeight, quality } = finalConfig.imageProcessing;\n    \n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      \n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n        \n        const resizedImageUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(resizedImageUrl);\n      };\n      \n      img.onerror = () => reject(new Error('Failed to load image for resizing'));\n      img.src = imageUrl;\n    });\n  }, [finalConfig.imageProcessing]);\n\n  // File upload handlers\n  const handleUserFileUpload = useCallback((file: File) => {\n    log('User file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, userImageFile: file }));\n  }, [log]);\n\n  const handleApparelFileUpload = useCallback((file: File) => {\n    log('Apparel file uploaded:', file.name, file.size);\n    setState(prev => ({ ...prev, apparelImageFile: file }));\n  }, [log]);\n\n  const handleLeftCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Left card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'user-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        leftCardImage: resizedImageUrl,\n        userImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Left card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        leftCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  const handleRightCardImageUpload = useCallback(async (imageUrl: string) => {\n    try {\n      log('Right card image upload started');\n      setState(prev => ({ ...prev, workflowState: WorkflowState.PROCESSING }));\n      \n      const resizedImageUrl = await resizeImage(imageUrl);\n      const file = await createFileFromImageUrl(imageUrl, 'apparel-image.jpg');\n      \n      setState(prev => ({\n        ...prev,\n        rightCardImage: resizedImageUrl,\n        apparelImageFile: file,\n        workflowState: WorkflowState.IDLE\n      }));\n      \n      log('Right card image processed successfully');\n    } catch (error) {\n      handleError(error, 'processing');\n      // Fallback to original image\n      setState(prev => ({\n        ...prev,\n        rightCardImage: imageUrl,\n        workflowState: WorkflowState.IDLE\n      }));\n    }\n  }, [log, resizeImage, createFileFromImageUrl, handleError]);\n\n  // Main generation function\n  const startGeneration = useCallback(async () => {\n    try {\n      log('Starting generation workflow');\n      \n      // Validate files\n      const validation = validateFiles();\n      if (!validation.isValid) {\n        const message = validation.errors.length === 2 \n          ? 'Please upload model photo and apparel photo before generating your fit.'\n          : validation.errors[0];\n        \n        if (showToast) {\n          showToast(message, 'warning');\n        }\n        return;\n      }\n\n      // Set initial state\n      setState(prev => ({\n        ...prev,\n        workflowState: WorkflowState.GENERATING,\n        isCapturing: true,\n        showPolaroid: true,\n        hasError: false,\n        error: null,\n        progress: 0,\n        lastOperationTime: Date.now()\n      }));\n\n      // Create abort controller for timeout\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(\n        () => abortControllerRef.current?.abort(), \n        finalConfig.timeoutMs\n      );\n\n      try {\n        updateProgress(10);\n\n        // Convert and compress images\n        const [modelB64, apparelB64] = await Promise.all([\n          fileToBase64(state.userImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB)),\n          fileToBase64(state.apparelImageFile!).then(b64 => compressBase64(b64, finalConfig.compressionLimitKB))\n        ]);\n\n        log('Images converted to base64 successfully');\n        updateProgress(30);\n\n        // Make API request\n        const response = await fetch('/api/tryon', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            modelImage: modelB64, \n            apparelImages: [apparelB64] \n          }),\n          signal: abortControllerRef.current.signal\n        });\n\n        clearTimeout(timeoutId);\n        updateProgress(80);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API request failed: ${response.status} - ${errorText}`);\n        }\n\n        const { img_generated } = await response.json();\n        log('Generation completed successfully');\n        \n        updateProgress(100);\n\n        // Update state with success\n        setState(prev => ({\n          ...prev,\n          workflowState: WorkflowState.COMPLETE,\n          isCapturing: false,\n          generatedImage: img_generated,\n          progress: 100,\n          retryCount: 0\n        }));\n\n      } catch (error) {\n        clearTimeout(timeoutId);\n        handleError(error, 'generation');\n      }\n\n    } catch (error) {\n      handleError(error, 'unknown');\n    }\n  }, [\n    log, \n    validateFiles, \n    showToast, \n    state.userImageFile, \n    state.apparelImageFile, \n    finalConfig.timeoutMs, \n    finalConfig.compressionLimitKB, \n    updateProgress, \n    handleError\n  ]);\n\n  // Retry generation\n  const retryGeneration = useCallback(async () => {\n    log('Retrying generation');\n    setState(prev => ({ \n      ...prev, \n      retryCount: prev.retryCount + 1,\n      hasError: false,\n      error: null,\n      generatedImage: null\n    }));\n    \n    // Small delay before retry\n    setTimeout(() => {\n      setState(prev => ({ ...prev, showPolaroid: false }));\n    }, 100);\n    \n    await startGeneration();\n  }, [log, startGeneration]);\n\n  // Cancel generation\n  const cancelGeneration = useCallback(() => {\n    log('Cancelling generation');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState(prev => ({\n      ...prev,\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      progress: 0\n    }));\n  }, [log]);\n\n  // Reset workflow\n  const resetWorkflow = useCallback(() => {\n    log('Resetting workflow');\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    setState({\n      workflowState: WorkflowState.IDLE,\n      isCapturing: false,\n      showPolaroid: false,\n      generatedImage: null,\n      hasError: false,\n      userImageFile: null,\n      apparelImageFile: null,\n      leftCardImage: null,\n      rightCardImage: null,\n      progress: 0,\n      error: null,\n      retryCount: 0,\n      lastOperationTime: null\n    });\n  }, [log]);\n\n  // Close polaroid\n  const closePolaroid = useCallback(() => {\n    log('Closing polaroid');\n    setState(prev => ({ ...prev, showPolaroid: false }));\n  }, [log]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ \n      ...prev, \n      hasError: false, \n      error: null,\n      workflowState: WorkflowState.IDLE\n    }));\n  }, []);\n\n  // Auto-retry logic\n  useEffect(() => {\n    if (\n      finalConfig.autoRetry && \n      state.error?.retryable && \n      state.retryCount < finalConfig.maxRetries\n    ) {\n      const delay = Math.min(1000 * Math.pow(2, state.retryCount), 10000); // Exponential backoff\n      log(`Auto-retrying in ${delay}ms (attempt ${state.retryCount + 1}/${finalConfig.maxRetries})`);\n      \n      const timeoutId = setTimeout(() => {\n        retryGeneration();\n      }, delay);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [state.error, state.retryCount, finalConfig.autoRetry, finalConfig.maxRetries, retryGeneration, log]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    handleUserFileUpload,\n    handleApparelFileUpload,\n    handleLeftCardImageUpload,\n    handleRightCardImageUpload,\n    startGeneration,\n    retryGeneration,\n    cancelGeneration,\n    resetWorkflow,\n    closePolaroid,\n    clearError,\n    validateFiles,\n    canGenerate\n  };\n}"],"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","ignoreList":[]}